# SNMP MIB module (NAG-MIB) expressed in pysnmp data model.
#
# This Python module is designed to be imported and executed by the
# pysnmp library.
#
# See https://www.pysnmp.com/pysnmp for further information.
#
# Notes
# -----
# ASN.1 source file://mibs\snr\NAG-MIB
# Produced by pysmi-1.6.2 at Thu Oct  2 12:28:37 2025
# On host DESKTOP-ORUUBP9 platform Windows version 11 by user speterman
# Using Python version 3.12.8 (tags/v3.12.8:2dc476b, Dec  3 2024, 19:30:04) [MSC v.1942 64 bit (AMD64)]

if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 ConstraintsUnion,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "ConstraintsUnion",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint")

# Import SMI symbols from the MIBs this MIB depends on

(ModuleCompliance,
 NotificationGroup,
 ObjectGroup) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "ModuleCompliance",
    "NotificationGroup",
    "ObjectGroup")

(Bits,
 Counter32,
 Counter64,
 Gauge32,
 Integer32,
 IpAddress,
 ModuleIdentity,
 MibIdentifier,
 NotificationType,
 ObjectIdentity,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 NotificationType,
 TimeTicks,
 Unsigned32,
 enterprises,
 experimental,
 iso,
 mib_2) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "Bits",
    "Counter32",
    "Counter64",
    "Gauge32",
    "Integer32",
    "IpAddress",
    "ModuleIdentity",
    "MibIdentifier",
    "NotificationType",
    "ObjectIdentity",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "NotificationType",
    "TimeTicks",
    "Unsigned32",
    "enterprises",
    "experimental",
    "iso",
    "mib-2")

(DisplayString,
 PhysAddress,
 RowStatus,
 TextualConvention,
 TimeStamp,
 TruthValue) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "DisplayString",
    "PhysAddress",
    "RowStatus",
    "TextualConvention",
    "TimeStamp",
    "TruthValue")


# MODULE-IDENTITY


# Types definitions



class DisplayString(OctetString):
    """Custom type DisplayString based on OctetString"""




class MacAddress(OctetString):
    """Custom type MacAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17




# TEXTUAL-CONVENTIONS



class InetAddressType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              16)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ipv4", 1),
          ("ipv6", 2),
          ("ipv4z", 3),
          ("ipv6z", 4),
          ("dns", 16))
    )



class InetAddress(TextualConvention, OctetString):
    status = "current"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )



class VlanList(TextualConvention, OctetString):
    status = "current"


class PortList(TextualConvention, OctetString):
    status = "current"


class EnabledStatusPrivate(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class ValidStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 0),
          ("valid", 1))
    )



class OspfBigMetric(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777214),
    )



class OspfAreaID(TextualConvention, IpAddress):
    status = "current"


class SnmpAdminString(TextualConvention, OctetString):
    status = "current"
    displayHint = "255t"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )



class InterfaceIndex(TextualConvention, Integer32):
    status = "current"
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )



class InterfaceIndexOrZero(TextualConvention, Integer32):
    status = "current"
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )



class TimeFilter(TextualConvention, TimeTicks):
    status = "current"


class Ipv6Address(TextualConvention, OctetString):
    status = "current"
    displayHint = "2x:"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )
    fixed_length = 16



class NtpStratum(TextualConvention, Unsigned32):
    status = "current"
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )



class NtpDateTime(TextualConvention, OctetString):
    status = "current"
    displayHint = "4d:4d:4d.4d"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 0),
        ValueSizeConstraint(16, 16),
    )



# MIB Managed Objects in the order of their OIDs

_NAG_ObjectIdentity = ObjectIdentity
NAG = _NAG_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418)
)
_SNR_ObjectIdentity = ObjectIdentity
SNR = _SNR_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7)
)
_Os_ObjectIdentity = ObjectIdentity
os = _Os_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100)
)
_PriSystem_ObjectIdentity = ObjectIdentity
priSystem = _PriSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1)
)


class _SysResetUnit_Type(Integer32):
    """Custom type sysResetUnit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noReset", 1),
          ("setfactory", 2),
          ("warmReset", 3))
    )


_SysResetUnit_Type.__name__ = "Integer32"
_SysResetUnit_Object = MibScalar
sysResetUnit = _SysResetUnit_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 1),
    _SysResetUnit_Type()
)
sysResetUnit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysResetUnit.setStatus("current")


class _SysHardwareVersion_Type(DisplayString):
    """Custom type sysHardwareVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_SysHardwareVersion_Type.__name__ = "DisplayString"
_SysHardwareVersion_Object = MibScalar
sysHardwareVersion = _SysHardwareVersion_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 2),
    _SysHardwareVersion_Type()
)
sysHardwareVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysHardwareVersion.setStatus("current")


class _SysSoftwareVersion_Type(DisplayString):
    """Custom type sysSoftwareVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_SysSoftwareVersion_Type.__name__ = "DisplayString"
_SysSoftwareVersion_Object = MibScalar
sysSoftwareVersion = _SysSoftwareVersion_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 3),
    _SysSoftwareVersion_Type()
)
sysSoftwareVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSoftwareVersion.setStatus("current")


class _SysStackFlag_Type(Integer32):
    """Custom type sysStackFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("stack", 1),
          ("noStack", 2))
    )


_SysStackFlag_Type.__name__ = "Integer32"
_SysStackFlag_Object = MibScalar
sysStackFlag = _SysStackFlag_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 4),
    _SysStackFlag_Type()
)
sysStackFlag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysStackFlag.setStatus("current")


class _SysCPUMac_Type(MacAddress):
    """Custom type sysCPUMac based on MacAddress"""
    subtypeSpec = MacAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_SysCPUMac_Type.__name__ = "MacAddress"
_SysCPUMac_Object = MibScalar
sysCPUMac = _SysCPUMac_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 5),
    _SysCPUMac_Type()
)
sysCPUMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCPUMac.setStatus("current")


class _SysWriteConfig_Type(Integer32):
    """Custom type sysWriteConfig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("write", 1)
    )


_SysWriteConfig_Type.__name__ = "Integer32"
_SysWriteConfig_Object = MibScalar
sysWriteConfig = _SysWriteConfig_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 6),
    _SysWriteConfig_Type()
)
sysWriteConfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysWriteConfig.setStatus("current")
_SysPowerStateTable_Object = MibTable
sysPowerStateTable = _SysPowerStateTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 7)
)
if mibBuilder.loadTexts:
    sysPowerStateTable.setStatus("current")
_SysPowerStateEntry_Object = MibTableRow
sysPowerStateEntry = _SysPowerStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 7, 1)
)
sysPowerStateEntry.setIndexNames(
    (0, "NAG-MIB", "sysPowerSlotIndex"),
)
if mibBuilder.loadTexts:
    sysPowerStateEntry.setStatus("current")
_SysPowerSlotIndex_Type = Integer32
_SysPowerSlotIndex_Object = MibTableColumn
sysPowerSlotIndex = _SysPowerSlotIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 7, 1, 1),
    _SysPowerSlotIndex_Type()
)
sysPowerSlotIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    sysPowerSlotIndex.setStatus("current")


class _SysPowerState_Type(Integer32):
    """Custom type sysPowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("sysPowerNotInstalled", 0),
          ("sysPowerInstalled", 1))
    )


_SysPowerState_Type.__name__ = "Integer32"
_SysPowerState_Object = MibTableColumn
sysPowerState = _SysPowerState_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 7, 1, 2),
    _SysPowerState_Type()
)
sysPowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysPowerState.setStatus("current")
_SysPowerValue_Type = Integer32
_SysPowerValue_Object = MibTableColumn
sysPowerValue = _SysPowerValue_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 7, 1, 3),
    _SysPowerValue_Type()
)
sysPowerValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysPowerValue.setStatus("current")


class _SysPowerType_Type(Integer32):
    """Custom type sysPowerType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("systemPower", 0),
          ("poePower", 1))
    )


_SysPowerType_Type.__name__ = "Integer32"
_SysPowerType_Object = MibTableColumn
sysPowerType = _SysPowerType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 7, 1, 4),
    _SysPowerType_Type()
)
sysPowerType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysPowerType.setStatus("current")


class _SysPowerStatus_Type(Integer32):
    """Custom type sysPowerStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("normal", 0),
          ("abnormal", 1),
          ("na", 2))
    )


_SysPowerStatus_Type.__name__ = "Integer32"
_SysPowerStatus_Object = MibTableColumn
sysPowerStatus = _SysPowerStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 7, 1, 5),
    _SysPowerStatus_Type()
)
sysPowerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysPowerStatus.setStatus("current")
_SysSlotTable_Object = MibTable
sysSlotTable = _SysSlotTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8)
)
if mibBuilder.loadTexts:
    sysSlotTable.setStatus("current")
_SysSlotEntry_Object = MibTableRow
sysSlotEntry = _SysSlotEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1)
)
sysSlotEntry.setIndexNames(
    (0, "NAG-MIB", "sysSlotIndex"),
)
if mibBuilder.loadTexts:
    sysSlotEntry.setStatus("current")
_SysSlotIndex_Type = Integer32
_SysSlotIndex_Object = MibTableColumn
sysSlotIndex = _SysSlotIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 1),
    _SysSlotIndex_Type()
)
sysSlotIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    sysSlotIndex.setStatus("current")
_SysCPUType_Type = DisplayString
_SysCPUType_Object = MibTableColumn
sysCPUType = _SysCPUType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 2),
    _SysCPUType_Type()
)
sysCPUType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCPUType.setStatus("current")
_SysCPUFiveSecondIdle_Type = Integer32
_SysCPUFiveSecondIdle_Object = MibTableColumn
sysCPUFiveSecondIdle = _SysCPUFiveSecondIdle_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 3),
    _SysCPUFiveSecondIdle_Type()
)
sysCPUFiveSecondIdle.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCPUFiveSecondIdle.setStatus("current")
_SysCPUThirtySecondIdle_Type = Integer32
_SysCPUThirtySecondIdle_Object = MibTableColumn
sysCPUThirtySecondIdle = _SysCPUThirtySecondIdle_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 4),
    _SysCPUThirtySecondIdle_Type()
)
sysCPUThirtySecondIdle.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCPUThirtySecondIdle.setStatus("current")
_SysCPUFiveMinuteIdle_Type = Integer32
_SysCPUFiveMinuteIdle_Object = MibTableColumn
sysCPUFiveMinuteIdle = _SysCPUFiveMinuteIdle_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 5),
    _SysCPUFiveMinuteIdle_Type()
)
sysCPUFiveMinuteIdle.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCPUFiveMinuteIdle.setStatus("current")
_SysCPUIdle_Type = Integer32
_SysCPUIdle_Object = MibTableColumn
sysCPUIdle = _SysCPUIdle_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 6),
    _SysCPUIdle_Type()
)
sysCPUIdle.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCPUIdle.setStatus("current")
_SysMemorySize_Type = Integer32
_SysMemorySize_Object = MibTableColumn
sysMemorySize = _SysMemorySize_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 7),
    _SysMemorySize_Type()
)
sysMemorySize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysMemorySize.setStatus("current")
_SysMemoryBusy_Type = Integer32
_SysMemoryBusy_Object = MibTableColumn
sysMemoryBusy = _SysMemoryBusy_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 8),
    _SysMemoryBusy_Type()
)
sysMemoryBusy.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysMemoryBusy.setStatus("current")
_SysFlashSize_Type = Integer32
_SysFlashSize_Object = MibTableColumn
sysFlashSize = _SysFlashSize_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 9),
    _SysFlashSize_Type()
)
sysFlashSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysFlashSize.setStatus("current")
_SysTemperature_Type = Integer32
_SysTemperature_Object = MibTableColumn
sysTemperature = _SysTemperature_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 10),
    _SysTemperature_Type()
)
sysTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysTemperature.setStatus("current")
_SysCpuUsage_Type = Integer32
_SysCpuUsage_Object = MibTableColumn
sysCpuUsage = _SysCpuUsage_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 11),
    _SysCpuUsage_Type()
)
sysCpuUsage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCpuUsage.setStatus("current")
_SysMemoryUsage_Type = Integer32
_SysMemoryUsage_Object = MibTableColumn
sysMemoryUsage = _SysMemoryUsage_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 12),
    _SysMemoryUsage_Type()
)
sysMemoryUsage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysMemoryUsage.setStatus("current")
_SysMemUsage_Type = Integer32
_SysMemUsage_Object = MibTableColumn
sysMemUsage = _SysMemUsage_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 21),
    _SysMemUsage_Type()
)
sysMemUsage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysMemUsage.setStatus("current")
_SysPortNum_Type = Integer32
_SysPortNum_Object = MibTableColumn
sysPortNum = _SysPortNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 22),
    _SysPortNum_Type()
)
sysPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysPortNum.setStatus("current")
_SysFreeFlashSize_Type = Integer32
_SysFreeFlashSize_Object = MibTableColumn
sysFreeFlashSize = _SysFreeFlashSize_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 23),
    _SysFreeFlashSize_Type()
)
sysFreeFlashSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysFreeFlashSize.setStatus("current")
_SysMemorySizeInMB_Type = Integer32
_SysMemorySizeInMB_Object = MibTableColumn
sysMemorySizeInMB = _SysMemorySizeInMB_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 8, 1, 24),
    _SysMemorySizeInMB_Type()
)
sysMemorySizeInMB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysMemorySizeInMB.setStatus("current")
_SwitchInfoTable_Object = MibTable
switchInfoTable = _SwitchInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 9)
)
if mibBuilder.loadTexts:
    switchInfoTable.setStatus("current")
_SwitchInfoEntry_Object = MibTableRow
switchInfoEntry = _SwitchInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 9, 1)
)
switchInfoEntry.setIndexNames(
    (0, "NAG-MIB", "swSlotIndex"),
    (0, "NAG-MIB", "swUnitIndex"),
)
if mibBuilder.loadTexts:
    switchInfoEntry.setStatus("current")
_SwSlotIndex_Type = Integer32
_SwSlotIndex_Object = MibTableColumn
swSlotIndex = _SwSlotIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 9, 1, 1),
    _SwSlotIndex_Type()
)
swSlotIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    swSlotIndex.setStatus("current")
_SwUnitIndex_Type = Integer32
_SwUnitIndex_Object = MibTableColumn
swUnitIndex = _SwUnitIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 9, 1, 2),
    _SwUnitIndex_Type()
)
swUnitIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    swUnitIndex.setStatus("current")


class _SwModuleType_Type(Integer32):
    """Custom type swModuleType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              8,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121,
              122,
              123,
              124,
              125,
              126,
              127,
              128,
              129,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              147,
              148,
              149,
              150,
              151,
              152,
              154,
              155,
              156,
              157,
              158,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              180,
              181,
              182,
              183,
              184,
              185,
              186,
              187,
              188,
              189,
              190,
              191,
              192,
              193,
              194,
              195,
              196,
              197,
              198,
              199,
              200,
              201,
              202,
              203,
              204,
              205,
              206,
              207,
              208,
              209,
              210,
              211,
              212,
              213,
              214,
              215,
              216,
              218,
              219,
              220,
              221,
              222,
              228,
              229,
              230,
              231,
              232,
              233,
              234,
              235,
              236,
              237,
              238,
              239,
              240,
              241,
              242,
              243,
              244,
              245,
              246,
              247,
              248,
              299,
              300,
              301,
              302,
              303,
              304,
              305,
              320,
              321,
              322,
              323,
              324,
              326)
        )
    )
    namedValues = NamedValues(
        *(("typeMFC", 0),
          ("typeSFC", 1),
          ("type1GS", 2),
          ("type1GL", 3),
          ("type100M1GT", 4),
          ("type10M100MT", 8),
          ("type1-M12GB", 101),
          ("type1-12GT", 102),
          ("type1-210Gx", 103),
          ("type1-110Gx", 104),
          ("type1-CPU8245", 105),
          ("type1-BACKPLANE", 106),
          ("type1-24GB", 107),
          ("type1-24GT", 108),
          ("type1-36TX", 109),
          ("type1-4GX32TX", 110),
          ("type1-16FX", 111),
          ("type1-ES2GB", 112),
          ("type1-M4GX24TX", 113),
          ("type1-ES", 114),
          ("type1-MI", 115),
          ("type1-MII", 116),
          ("type1-12GB", 117),
          ("type1-M8GB", 118),
          ("type1-2XFP8GX16GB", 119),
          ("type1-8GX16GB", 120),
          ("type1-4GX24TX", 121),
          ("type1-L-M4GX24TX", 122),
          ("type1-1XFP8GX16GB", 123),
          ("type1-2XFP12GX12GT", 124),
          ("type1-12GX12GT", 125),
          ("type1-1XFP12GX12GT", 126),
          ("type1-48GT", 127),
          ("type1-M1XFP12GX12GT", 128),
          ("type1-4XFP", 129),
          ("type1-48GB", 130),
          ("type1-M44GT", 131),
          ("type1-M1XFP12GX12GB", 132),
          ("type1-12GX12GB", 133),
          ("type1-2XFP12GX12GB", 134),
          ("type1-4GB12GX8GT", 135),
          ("type1-2XFP24GB12GT", 136),
          ("type1-24GB12GT", 137),
          ("type1-NEWMI", 138),
          ("type1-M1XFP12GX12GTR4", 139),
          ("type1-12GX12GTR4", 140),
          ("type1-2XFP12GX12GTR4", 141),
          ("type1-E-24GB12GT", 142),
          ("type1-E-2XFP24GB12GT", 143),
          ("type1-MSC", 144),
          ("type8QSFP", 145),
          ("type1-FW", 146),
          ("type1-OF", 147),
          ("type1-MIIR2", 148),
          ("type1-E-M16GX8GB", 149),
          ("type1-E-4XS16GX8GB", 150),
          ("type1-2XFP12GX12GTR5", 151),
          ("type1-MIIR3", 152),
          ("type1-M2XS8GX16GB", 154),
          ("type1-28GB16GT4XS", 155),
          ("type1-E-48GT", 156),
          ("type1-44GB4XS", 157),
          ("type1-20XS2Q", 158),
          ("type2-M12GB", 165),
          ("type2-12GT", 166),
          ("type2-210Gx", 167),
          ("type2-110Gx", 168),
          ("type2-CPU8245", 169),
          ("type2-BACKPLANE", 170),
          ("type2-24GB", 171),
          ("type2-24GT", 172),
          ("type2-36TX", 173),
          ("type2-4GX32TX", 174),
          ("type2-16FX", 175),
          ("type2-ES2GB", 176),
          ("type2-M4GX24TX", 177),
          ("type2-ES", 178),
          ("type2-MI", 179),
          ("type2-MII", 180),
          ("type2-12GB", 181),
          ("type2-M8GB", 182),
          ("type2-2XFP8GX16GB", 183),
          ("type2-8GX16GB", 184),
          ("type2-4GX24TX", 185),
          ("type2-L-M4GX24TX", 186),
          ("type2-1XFP8GX16GB", 187),
          ("type2-2XFP12GX12GT", 188),
          ("type2-12GX12GT", 189),
          ("type2-1XFP12GX12GT", 190),
          ("type2-48GT", 191),
          ("type2-M1XFP12GX12GT", 192),
          ("type2-4XFP", 193),
          ("type2-48GB", 194),
          ("type2-M44GT", 195),
          ("type2-M1XFP12GX12GB", 196),
          ("type2-12GX12GB", 197),
          ("type2-2XFP12GX12GB", 198),
          ("type2-4GB12GX8GT", 199),
          ("type2-2XFP24GB12GT", 200),
          ("type2-24GB12GT", 201),
          ("type2-NEWMI", 202),
          ("type2-M1XFP12GX12GTR4", 203),
          ("type2-12GX12GTR4", 204),
          ("type2-2XFP12GX12GTR4", 205),
          ("type2-E-24GB12GT", 206),
          ("type2-E-2XFP24GB12GT", 207),
          ("type2-MSC", 208),
          ("type2-M1XFP12GX12GTV", 209),
          ("type2-FW", 210),
          ("type2-OF", 211),
          ("type2-MIIR2", 212),
          ("type2-E-M16GX8GB", 213),
          ("type2-E-4XS16GX8GB", 214),
          ("type2-2XFP12GX12GTR5", 215),
          ("type2-MIIR3", 216),
          ("type2-M2XS8GX16GB", 218),
          ("type2-28GB16GT4XS", 219),
          ("type2-E-48GT", 220),
          ("type2-44GB4XS", 221),
          ("type2-20XS2Q", 222),
          ("type3-M", 228),
          ("type3-MI", 229),
          ("type3-MII", 230),
          ("type3-24GT", 231),
          ("type3-24GB", 232),
          ("type3-ES-FW", 233),
          ("type3-4XFP", 234),
          ("type3-8XFP", 235),
          ("type3-24GT-V", 236),
          ("type3-24GB-V", 237),
          ("type3-24SFP-PLUS", 238),
          ("type3-SUP", 239),
          ("type3-FAB", 240),
          ("type3-MSC", 241),
          ("type3-24GT-WS", 242),
          ("type3-24GB-WS", 243),
          ("type3-FW", 244),
          ("type3-8QSFP", 245),
          ("type3-OF", 246),
          ("type3-20XS2Q", 247),
          ("type3-FAB-TWO-CHIP", 248),
          ("type3-08BACKPLANE", 299),
          ("type4-4GT", 300),
          ("type4-4FX", 301),
          ("type4-2GB", 302),
          ("type4-4TX", 303),
          ("type4-4GB", 304),
          ("type4-4FB", 305),
          ("type5-M16K-SUP", 320),
          ("type5-M16K-16Q", 321),
          ("type5-M16K-FC", 322),
          ("type5-M16K-48XS2Q", 323),
          ("type5-M16K-24T24S2XS", 324),
          ("type5-DCFW-1800-M16K", 326))
    )


_SwModuleType_Type.__name__ = "Integer32"
_SwModuleType_Object = MibTableColumn
swModuleType = _SwModuleType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 9, 1, 3),
    _SwModuleType_Type()
)
swModuleType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    swModuleType.setStatus("current")
_SwitchFileCopy_ObjectIdentity = ObjectIdentity
switchFileCopy = _SwitchFileCopy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10)
)


class _FileUserName_Type(DisplayString):
    """Custom type fileUserName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 100),
    )


_FileUserName_Type.__name__ = "DisplayString"
_FileUserName_Object = MibScalar
fileUserName = _FileUserName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 1),
    _FileUserName_Type()
)
fileUserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fileUserName.setStatus("current")


class _FileUserPassword_Type(DisplayString):
    """Custom type fileUserPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 100),
    )


_FileUserPassword_Type.__name__ = "DisplayString"
_FileUserPassword_Object = MibScalar
fileUserPassword = _FileUserPassword_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 2),
    _FileUserPassword_Type()
)
fileUserPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fileUserPassword.setStatus("current")


class _FileIPaddress_Type(DisplayString):
    """Custom type fileIPaddress based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 100),
    )


_FileIPaddress_Type.__name__ = "DisplayString"
_FileIPaddress_Object = MibScalar
fileIPaddress = _FileIPaddress_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 3),
    _FileIPaddress_Type()
)
fileIPaddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fileIPaddress.setStatus("current")


class _SourceFileCopy_Type(DisplayString):
    """Custom type sourceFileCopy based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 100),
    )


_SourceFileCopy_Type.__name__ = "DisplayString"
_SourceFileCopy_Object = MibScalar
sourceFileCopy = _SourceFileCopy_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 4),
    _SourceFileCopy_Type()
)
sourceFileCopy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sourceFileCopy.setStatus("current")


class _DestinationFileCopy_Type(DisplayString):
    """Custom type destinationFileCopy based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 100),
    )


_DestinationFileCopy_Type.__name__ = "DisplayString"
_DestinationFileCopy_Object = MibScalar
destinationFileCopy = _DestinationFileCopy_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 5),
    _DestinationFileCopy_Type()
)
destinationFileCopy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    destinationFileCopy.setStatus("current")


class _FileCopyMode_Type(Integer32):
    """Custom type fileCopyMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ascii", 0),
          ("binary", 1))
    )


_FileCopyMode_Type.__name__ = "Integer32"
_FileCopyMode_Object = MibScalar
fileCopyMode = _FileCopyMode_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 6),
    _FileCopyMode_Type()
)
fileCopyMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fileCopyMode.setStatus("current")


class _FileCopyUseMode_Type(Integer32):
    """Custom type fileCopyUseMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ftp", 1),
          ("tftp", 2))
    )


_FileCopyUseMode_Type.__name__ = "Integer32"
_FileCopyUseMode_Object = MibScalar
fileCopyUseMode = _FileCopyUseMode_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 7),
    _FileCopyUseMode_Type()
)
fileCopyUseMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fileCopyUseMode.setStatus("current")


class _FileCopy_Type(Integer32):
    """Custom type fileCopy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("upload", 1),
          ("download", 2))
    )


_FileCopy_Type.__name__ = "Integer32"
_FileCopy_Object = MibScalar
fileCopy = _FileCopy_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 8),
    _FileCopy_Type()
)
fileCopy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fileCopy.setStatus("current")


class _FileCopyResult_Type(Integer32):
    """Custom type fileCopyResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("error", 0),
          ("ok", 1),
          ("uploading", 2),
          ("downloading", 3),
          ("idle", 4))
    )


_FileCopyResult_Type.__name__ = "Integer32"
_FileCopyResult_Object = MibScalar
fileCopyResult = _FileCopyResult_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 9),
    _FileCopyResult_Type()
)
fileCopyResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fileCopyResult.setStatus("current")


class _FileName_Type(DisplayString):
    """Custom type fileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 100),
    )


_FileName_Type.__name__ = "DisplayString"
_FileName_Object = MibScalar
fileName = _FileName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 21),
    _FileName_Type()
)
fileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fileName.setStatus("current")


class _FileType_Type(Integer32):
    """Custom type fileType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("any", 0),
          ("img", 1),
          ("cfg", 2),
          ("log", 3))
    )


_FileType_Type.__name__ = "Integer32"
_FileType_Object = MibScalar
fileType = _FileType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 22),
    _FileType_Type()
)
fileType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fileType.setStatus("current")
_FilePort_Type = Integer32
_FilePort_Object = MibScalar
filePort = _FilePort_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 23),
    _FilePort_Type()
)
filePort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    filePort.setStatus("current")


class _FileCopyFailReason_Type(DisplayString):
    """Custom type fileCopyFailReason based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 127),
    )


_FileCopyFailReason_Type.__name__ = "DisplayString"
_FileCopyFailReason_Object = MibScalar
fileCopyFailReason = _FileCopyFailReason_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 24),
    _FileCopyFailReason_Type()
)
fileCopyFailReason.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fileCopyFailReason.setStatus("current")


class _FileCMCCCopy_Type(Integer32):
    """Custom type fileCMCCCopy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("upload", 1),
          ("download", 2))
    )


_FileCMCCCopy_Type.__name__ = "Integer32"
_FileCMCCCopy_Object = MibScalar
fileCMCCCopy = _FileCMCCCopy_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 25),
    _FileCMCCCopy_Type()
)
fileCMCCCopy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fileCMCCCopy.setStatus("current")
_FileCMCCIPaddress_Type = IpAddress
_FileCMCCIPaddress_Object = MibScalar
fileCMCCIPaddress = _FileCMCCIPaddress_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 26),
    _FileCMCCIPaddress_Type()
)
fileCMCCIPaddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fileCMCCIPaddress.setStatus("current")


class _FileCMCCCopyResult_Type(Integer32):
    """Custom type fileCMCCCopyResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("error", 0),
          ("ok", 1),
          ("uploading", 2),
          ("downloading", 3),
          ("idle", 4))
    )


_FileCMCCCopyResult_Type.__name__ = "Integer32"
_FileCMCCCopyResult_Object = MibScalar
fileCMCCCopyResult = _FileCMCCCopyResult_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 10, 27),
    _FileCMCCCopyResult_Type()
)
fileCMCCCopyResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fileCMCCCopyResult.setStatus("current")
_SwitchInfo_ObjectIdentity = ObjectIdentity
switchInfo = _SwitchInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11)
)
_SwitchCPUType_Type = DisplayString
_SwitchCPUType_Object = MibScalar
switchCPUType = _SwitchCPUType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 1),
    _SwitchCPUType_Type()
)
switchCPUType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchCPUType.setStatus("current")
_SwitchCPUFiveSecondIdle_Type = Integer32
_SwitchCPUFiveSecondIdle_Object = MibScalar
switchCPUFiveSecondIdle = _SwitchCPUFiveSecondIdle_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 2),
    _SwitchCPUFiveSecondIdle_Type()
)
switchCPUFiveSecondIdle.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchCPUFiveSecondIdle.setStatus("current")
_SwitchCPUThirtySecondIdle_Type = Integer32
_SwitchCPUThirtySecondIdle_Object = MibScalar
switchCPUThirtySecondIdle = _SwitchCPUThirtySecondIdle_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 3),
    _SwitchCPUThirtySecondIdle_Type()
)
switchCPUThirtySecondIdle.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchCPUThirtySecondIdle.setStatus("current")
_SwitchCPUFiveMinuteIdle_Type = Integer32
_SwitchCPUFiveMinuteIdle_Object = MibScalar
switchCPUFiveMinuteIdle = _SwitchCPUFiveMinuteIdle_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 4),
    _SwitchCPUFiveMinuteIdle_Type()
)
switchCPUFiveMinuteIdle.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchCPUFiveMinuteIdle.setStatus("current")
_SwitchCPUIdle_Type = Integer32
_SwitchCPUIdle_Object = MibScalar
switchCPUIdle = _SwitchCPUIdle_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 5),
    _SwitchCPUIdle_Type()
)
switchCPUIdle.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchCPUIdle.setStatus("current")
_SwitchMemorySize_Type = Integer32
_SwitchMemorySize_Object = MibScalar
switchMemorySize = _SwitchMemorySize_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 6),
    _SwitchMemorySize_Type()
)
switchMemorySize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchMemorySize.setStatus("current")
_SwitchMemoryBusy_Type = Integer32
_SwitchMemoryBusy_Object = MibScalar
switchMemoryBusy = _SwitchMemoryBusy_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 7),
    _SwitchMemoryBusy_Type()
)
switchMemoryBusy.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchMemoryBusy.setStatus("current")
_SwitchFlashSize_Type = Integer32
_SwitchFlashSize_Object = MibScalar
switchFlashSize = _SwitchFlashSize_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 8),
    _SwitchFlashSize_Type()
)
switchFlashSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchFlashSize.setStatus("current")
_SwitchTemperature_Type = Integer32
_SwitchTemperature_Object = MibScalar
switchTemperature = _SwitchTemperature_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 9),
    _SwitchTemperature_Type()
)
switchTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchTemperature.setStatus("current")
_SwitchCpuUsage_Type = Integer32
_SwitchCpuUsage_Object = MibScalar
switchCpuUsage = _SwitchCpuUsage_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 10),
    _SwitchCpuUsage_Type()
)
switchCpuUsage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchCpuUsage.setStatus("current")
_SwitchMemoryUsage_Type = Integer32
_SwitchMemoryUsage_Object = MibScalar
switchMemoryUsage = _SwitchMemoryUsage_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 11, 11),
    _SwitchMemoryUsage_Type()
)
switchMemoryUsage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchMemoryUsage.setStatus("current")
_SysFanTable_Object = MibTable
sysFanTable = _SysFanTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 12)
)
if mibBuilder.loadTexts:
    sysFanTable.setStatus("current")
_SysFanEntry_Object = MibTableRow
sysFanEntry = _SysFanEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 12, 1)
)
sysFanEntry.setIndexNames(
    (0, "NAG-MIB", "sysFanIndex"),
)
if mibBuilder.loadTexts:
    sysFanEntry.setStatus("current")
_SysFanIndex_Type = Integer32
_SysFanIndex_Object = MibTableColumn
sysFanIndex = _SysFanIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 12, 1, 1),
    _SysFanIndex_Type()
)
sysFanIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    sysFanIndex.setStatus("current")


class _SysFanInserted_Type(Integer32):
    """Custom type sysFanInserted based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("sysFanNotInstalled", 0),
          ("sysFanInstalled", 1))
    )


_SysFanInserted_Type.__name__ = "Integer32"
_SysFanInserted_Object = MibTableColumn
sysFanInserted = _SysFanInserted_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 12, 1, 2),
    _SysFanInserted_Type()
)
sysFanInserted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysFanInserted.setStatus("current")


class _SysFanStatus_Type(Integer32):
    """Custom type sysFanStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("normal", 0),
          ("abnormal", 1))
    )


_SysFanStatus_Type.__name__ = "Integer32"
_SysFanStatus_Object = MibTableColumn
sysFanStatus = _SysFanStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 12, 1, 3),
    _SysFanStatus_Type()
)
sysFanStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysFanStatus.setStatus("current")


class _SysFanSpeed_Type(Integer32):
    """Custom type sysFanSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("low", 1),
          ("medium-low", 2),
          ("medium", 3),
          ("medium-high", 4),
          ("high", 5))
    )


_SysFanSpeed_Type.__name__ = "Integer32"
_SysFanSpeed_Object = MibTableColumn
sysFanSpeed = _SysFanSpeed_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 12, 1, 4),
    _SysFanSpeed_Type()
)
sysFanSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysFanSpeed.setStatus("current")


class _SwitchBootImgPrimary_Type(DisplayString):
    """Custom type switchBootImgPrimary based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_SwitchBootImgPrimary_Type.__name__ = "DisplayString"
_SwitchBootImgPrimary_Object = MibScalar
switchBootImgPrimary = _SwitchBootImgPrimary_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 13),
    _SwitchBootImgPrimary_Type()
)
switchBootImgPrimary.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    switchBootImgPrimary.setStatus("current")


class _SwitchBootImgSecondary_Type(DisplayString):
    """Custom type switchBootImgSecondary based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_SwitchBootImgSecondary_Type.__name__ = "DisplayString"
_SwitchBootImgSecondary_Object = MibScalar
switchBootImgSecondary = _SwitchBootImgSecondary_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 14),
    _SwitchBootImgSecondary_Type()
)
switchBootImgSecondary.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    switchBootImgSecondary.setStatus("current")


class _SwitchBootStartUpCfg_Type(DisplayString):
    """Custom type switchBootStartUpCfg based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_SwitchBootStartUpCfg_Type.__name__ = "DisplayString"
_SwitchBootStartUpCfg_Object = MibScalar
switchBootStartUpCfg = _SwitchBootStartUpCfg_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 15),
    _SwitchBootStartUpCfg_Type()
)
switchBootStartUpCfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    switchBootStartUpCfg.setStatus("current")


class _ShowSwitchStartUpStatus_Type(Integer32):
    """Custom type showSwitchStartUpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("idle", 1),
          ("success", 2),
          ("fail", 3),
          ("in-progress", 4))
    )


_ShowSwitchStartUpStatus_Type.__name__ = "Integer32"
_ShowSwitchStartUpStatus_Object = MibScalar
showSwitchStartUpStatus = _ShowSwitchStartUpStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 16),
    _ShowSwitchStartUpStatus_Type()
)
showSwitchStartUpStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showSwitchStartUpStatus.setStatus("current")
_SysSlotBootInfoTable_Object = MibTable
sysSlotBootInfoTable = _SysSlotBootInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 17)
)
if mibBuilder.loadTexts:
    sysSlotBootInfoTable.setStatus("current")
_SysSlotBootInfoEntry_Object = MibTableRow
sysSlotBootInfoEntry = _SysSlotBootInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 17, 1)
)
sysSlotBootInfoEntry.setIndexNames(
    (0, "NAG-MIB", "sysBootInfoIndex"),
)
if mibBuilder.loadTexts:
    sysSlotBootInfoEntry.setStatus("current")
_SysBootInfoIndex_Type = Integer32
_SysBootInfoIndex_Object = MibTableColumn
sysBootInfoIndex = _SysBootInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 17, 1, 1),
    _SysBootInfoIndex_Type()
)
sysBootInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysBootInfoIndex.setStatus("current")


class _SysBootImgPrimary_Type(DisplayString):
    """Custom type sysBootImgPrimary based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_SysBootImgPrimary_Type.__name__ = "DisplayString"
_SysBootImgPrimary_Object = MibTableColumn
sysBootImgPrimary = _SysBootImgPrimary_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 17, 1, 2),
    _SysBootImgPrimary_Type()
)
sysBootImgPrimary.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysBootImgPrimary.setStatus("current")


class _SysBootImgSecondary_Type(DisplayString):
    """Custom type sysBootImgSecondary based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_SysBootImgSecondary_Type.__name__ = "DisplayString"
_SysBootImgSecondary_Object = MibTableColumn
sysBootImgSecondary = _SysBootImgSecondary_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 17, 1, 3),
    _SysBootImgSecondary_Type()
)
sysBootImgSecondary.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysBootImgSecondary.setStatus("current")


class _SysBootStartupCfg_Type(DisplayString):
    """Custom type sysBootStartupCfg based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_SysBootStartupCfg_Type.__name__ = "DisplayString"
_SysBootStartupCfg_Object = MibTableColumn
sysBootStartupCfg = _SysBootStartupCfg_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 17, 1, 4),
    _SysBootStartupCfg_Type()
)
sysBootStartupCfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysBootStartupCfg.setStatus("current")
_SysSetBootPassword_ObjectIdentity = ObjectIdentity
sysSetBootPassword = _SysSetBootPassword_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 18)
)


class _OldPassword_Type(DisplayString):
    """Custom type oldPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(3, 32),
    )


_OldPassword_Type.__name__ = "DisplayString"
_OldPassword_Object = MibScalar
oldPassword = _OldPassword_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 18, 1),
    _OldPassword_Type()
)
oldPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oldPassword.setStatus("current")


class _NewPassword_Type(DisplayString):
    """Custom type newPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(3, 32),
    )


_NewPassword_Type.__name__ = "DisplayString"
_NewPassword_Object = MibScalar
newPassword = _NewPassword_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 18, 2),
    _NewPassword_Type()
)
newPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    newPassword.setStatus("current")


class _ConfirmPassword_Type(DisplayString):
    """Custom type confirmPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(3, 32),
    )


_ConfirmPassword_Type.__name__ = "DisplayString"
_ConfirmPassword_Object = MibScalar
confirmPassword = _ConfirmPassword_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 18, 3),
    _ConfirmPassword_Type()
)
confirmPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    confirmPassword.setStatus("current")


class _DeletePassword_Type(Integer32):
    """Custom type deletePassword based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_DeletePassword_Type.__name__ = "Integer32"
_DeletePassword_Object = MibScalar
deletePassword = _DeletePassword_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 18, 4),
    _DeletePassword_Type()
)
deletePassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    deletePassword.setStatus("current")


class _SysSetBootPwStatus_Type(Integer32):
    """Custom type sysSetBootPwStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SysSetBootPwStatus_Type.__name__ = "Integer32"
_SysSetBootPwStatus_Object = MibScalar
sysSetBootPwStatus = _SysSetBootPwStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 18, 5),
    _SysSetBootPwStatus_Type()
)
sysSetBootPwStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSetBootPwStatus.setStatus("current")
_SysAddUser_ObjectIdentity = ObjectIdentity
sysAddUser = _SysAddUser_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 22)
)


class _SysUserName_Type(DisplayString):
    """Custom type sysUserName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_SysUserName_Type.__name__ = "DisplayString"
_SysUserName_Object = MibScalar
sysUserName = _SysUserName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 22, 1),
    _SysUserName_Type()
)
sysUserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysUserName.setStatus("current")


class _SysUserPassword_Type(DisplayString):
    """Custom type sysUserPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_SysUserPassword_Type.__name__ = "DisplayString"
_SysUserPassword_Object = MibScalar
sysUserPassword = _SysUserPassword_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 22, 2),
    _SysUserPassword_Type()
)
sysUserPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysUserPassword.setStatus("current")


class _SysUserPasswordOption_Type(Integer32):
    """Custom type sysUserPasswordOption based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              7)
        )
    )
    namedValues = NamedValues(
        *(("uncrypted", 0),
          ("crypted", 7))
    )


_SysUserPasswordOption_Type.__name__ = "Integer32"
_SysUserPasswordOption_Object = MibScalar
sysUserPasswordOption = _SysUserPasswordOption_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 22, 3),
    _SysUserPasswordOption_Type()
)
sysUserPasswordOption.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysUserPasswordOption.setStatus("current")


class _SysUserNamePrivilege_Type(Integer32):
    """Custom type sysUserNamePrivilege based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_SysUserNamePrivilege_Type.__name__ = "Integer32"
_SysUserNamePrivilege_Object = MibScalar
sysUserNamePrivilege = _SysUserNamePrivilege_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 22, 4),
    _SysUserNamePrivilege_Type()
)
sysUserNamePrivilege.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysUserNamePrivilege.setStatus("current")


class _SysAddUserStatus_Type(Integer32):
    """Custom type sysAddUserStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("enable", 1)
    )


_SysAddUserStatus_Type.__name__ = "Integer32"
_SysAddUserStatus_Object = MibScalar
sysAddUserStatus = _SysAddUserStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 22, 5),
    _SysAddUserStatus_Type()
)
sysAddUserStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysAddUserStatus.setStatus("current")
_PriPowerTable_Object = MibTable
priPowerTable = _PriPowerTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 23)
)
if mibBuilder.loadTexts:
    priPowerTable.setStatus("current")
_PriPowerEntry_Object = MibTableRow
priPowerEntry = _PriPowerEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 23, 1)
)
priPowerEntry.setIndexNames(
    (0, "NAG-MIB", "priPowerIndex"),
)
if mibBuilder.loadTexts:
    priPowerEntry.setStatus("current")
_PriPowerIndex_Type = Integer32
_PriPowerIndex_Object = MibTableColumn
priPowerIndex = _PriPowerIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 23, 1, 1),
    _PriPowerIndex_Type()
)
priPowerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    priPowerIndex.setStatus("current")
_PriPowerPresent_Type = Integer32
_PriPowerPresent_Object = MibTableColumn
priPowerPresent = _PriPowerPresent_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 23, 1, 2),
    _PriPowerPresent_Type()
)
priPowerPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    priPowerPresent.setStatus("current")
_PriPowerSupply_Type = Integer32
_PriPowerSupply_Object = MibTableColumn
priPowerSupply = _PriPowerSupply_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 23, 1, 3),
    _PriPowerSupply_Type()
)
priPowerSupply.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    priPowerSupply.setStatus("current")
_VsfInfo_ObjectIdentity = ObjectIdentity
vsfInfo = _VsfInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 30)
)
_VsfCount_Type = Integer32
_VsfCount_Object = MibScalar
vsfCount = _VsfCount_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 30, 1),
    _VsfCount_Type()
)
vsfCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vsfCount.setStatus("current")
_VsfModuleTable_Object = MibTable
vsfModuleTable = _VsfModuleTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 30, 2)
)
if mibBuilder.loadTexts:
    vsfModuleTable.setStatus("current")
_VsfModuleEntry_Object = MibTableRow
vsfModuleEntry = _VsfModuleEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 30, 2, 1)
)
vsfModuleEntry.setIndexNames(
    (0, "NAG-MIB", "vsfSlotIndex"),
    (0, "NAG-MIB", "vsfMemberIndex"),
)
if mibBuilder.loadTexts:
    vsfModuleEntry.setStatus("current")
_VsfSlotIndex_Type = Integer32
_VsfSlotIndex_Object = MibTableColumn
vsfSlotIndex = _VsfSlotIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 30, 2, 1, 1),
    _VsfSlotIndex_Type()
)
vsfSlotIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vsfSlotIndex.setStatus("current")
_VsfMemberIndex_Type = Integer32
_VsfMemberIndex_Object = MibTableColumn
vsfMemberIndex = _VsfMemberIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 30, 2, 1, 2),
    _VsfMemberIndex_Type()
)
vsfMemberIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vsfMemberIndex.setStatus("current")


class _VsfModuleType_Type(Integer32):
    """Custom type vsfModuleType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              8,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121,
              122,
              123,
              124,
              125,
              126,
              127,
              128,
              129,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              147,
              148,
              149,
              150,
              151,
              152,
              154,
              155,
              156,
              157,
              158,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              180,
              181,
              182,
              183,
              184,
              185,
              186,
              187,
              188,
              189,
              190,
              191,
              192,
              193,
              194,
              195,
              196,
              197,
              198,
              199,
              200,
              201,
              202,
              203,
              204,
              205,
              206,
              207,
              208,
              209,
              210,
              211,
              212,
              213,
              214,
              215,
              216,
              218,
              219,
              220,
              221,
              222,
              228,
              229,
              230,
              231,
              232,
              233,
              234,
              235,
              236,
              237,
              238,
              239,
              240,
              241,
              242,
              243,
              244,
              245,
              246,
              247,
              248,
              299,
              300,
              301,
              302,
              303,
              304,
              305,
              320,
              321,
              322,
              323,
              324)
        )
    )
    namedValues = NamedValues(
        *(("typeMFC", 0),
          ("typeSFC", 1),
          ("type1GS", 2),
          ("type1GL", 3),
          ("type100M1GT", 4),
          ("type10M100MT", 8),
          ("type1-M12GB", 101),
          ("type1-12GT", 102),
          ("type1-210Gx", 103),
          ("type1-110Gx", 104),
          ("type1-CPU8245", 105),
          ("type1-BACKPLANE", 106),
          ("type1-24GB", 107),
          ("type1-24GT", 108),
          ("type1-36TX", 109),
          ("type1-4GX32TX", 110),
          ("type1-16FX", 111),
          ("type1-ES2GB", 112),
          ("type1-M4GX24TX", 113),
          ("type1-ES", 114),
          ("type1-MI", 115),
          ("type1-MII", 116),
          ("type1-12GB", 117),
          ("type1-M8GB", 118),
          ("type1-2XFP8GX16GB", 119),
          ("type1-8GX16GB", 120),
          ("type1-4GX24TX", 121),
          ("type1-L-M4GX24TX", 122),
          ("type1-1XFP8GX16GB", 123),
          ("type1-2XFP12GX12GT", 124),
          ("type1-12GX12GT", 125),
          ("type1-1XFP12GX12GT", 126),
          ("type1-48GT", 127),
          ("type1-M1XFP12GX12GT", 128),
          ("type1-4XFP", 129),
          ("type1-48GB", 130),
          ("type1-M44GT", 131),
          ("type1-M1XFP12GX12GB", 132),
          ("type1-12GX12GB", 133),
          ("type1-2XFP12GX12GB", 134),
          ("type1-4GB12GX8GT", 135),
          ("type1-2XFP24GB12GT", 136),
          ("type1-24GB12GT", 137),
          ("type1-NEWMI", 138),
          ("type1-M1XFP12GX12GTR4", 139),
          ("type1-12GX12GTR4", 140),
          ("type1-2XFP12GX12GTR4", 141),
          ("type1-E-24GB12GT", 142),
          ("type1-E-2XFP24GB12GT", 143),
          ("type1-MSC", 144),
          ("type8QSFP", 145),
          ("type1-FW", 146),
          ("type1-OF", 147),
          ("type1-MIIR2", 148),
          ("type1-E-M16GX8GB", 149),
          ("type1-E-4XS16GX8GB", 150),
          ("type1-2XFP12GX12GTR5", 151),
          ("type1-MIIR3", 152),
          ("type1-M2XS8GX16GB", 154),
          ("type1-28GB16GT4XS", 155),
          ("type1-E-48GT", 156),
          ("type1-44GB4XS", 157),
          ("type1-20XS2Q", 158),
          ("type2-M12GB", 165),
          ("type2-12GT", 166),
          ("type2-210Gx", 167),
          ("type2-110Gx", 168),
          ("type2-CPU8245", 169),
          ("type2-BACKPLANE", 170),
          ("type2-24GB", 171),
          ("type2-24GT", 172),
          ("type2-36TX", 173),
          ("type2-4GX32TX", 174),
          ("type2-16FX", 175),
          ("type2-ES2GB", 176),
          ("type2-M4GX24TX", 177),
          ("type2-ES", 178),
          ("type2-MI", 179),
          ("type2-MII", 180),
          ("type2-12GB", 181),
          ("type2-M8GB", 182),
          ("type2-2XFP8GX16GB", 183),
          ("type2-8GX16GB", 184),
          ("type2-4GX24TX", 185),
          ("type2-L-M4GX24TX", 186),
          ("type2-1XFP8GX16GB", 187),
          ("type2-2XFP12GX12GT", 188),
          ("type2-12GX12GT", 189),
          ("type2-1XFP12GX12GT", 190),
          ("type2-48GT", 191),
          ("type2-M1XFP12GX12GT", 192),
          ("type2-4XFP", 193),
          ("type2-48GB", 194),
          ("type2-M44GT", 195),
          ("type2-M1XFP12GX12GB", 196),
          ("type2-12GX12GB", 197),
          ("type2-2XFP12GX12GB", 198),
          ("type2-4GB12GX8GT", 199),
          ("type2-2XFP24GB12GT", 200),
          ("type2-24GB12GT", 201),
          ("type2-NEWMI", 202),
          ("type2-M1XFP12GX12GTR4", 203),
          ("type2-12GX12GTR4", 204),
          ("type2-2XFP12GX12GTR4", 205),
          ("type2-E-24GB12GT", 206),
          ("type2-E-2XFP24GB12GT", 207),
          ("type2-MSC", 208),
          ("type2-M1XFP12GX12GTV", 209),
          ("type2-FW", 210),
          ("type2-OF", 211),
          ("type2-MIIR2", 212),
          ("type2-E-M16GX8GB", 213),
          ("type2-E-4XS16GX8GB", 214),
          ("type2-2XFP12GX12GTR5", 215),
          ("type2-MIIR3", 216),
          ("type2-M2XS8GX16GB", 218),
          ("type2-28GB16GT4XS", 219),
          ("type2-E-48GT", 220),
          ("type2-44GB4XS", 221),
          ("type2-20XS2Q", 222),
          ("type3-M", 228),
          ("type3-MI", 229),
          ("type3-MII", 230),
          ("type3-24GT", 231),
          ("type3-24GB", 232),
          ("type3-ES-FW", 233),
          ("type3-4XFP", 234),
          ("type3-8XFP", 235),
          ("type3-24GT-V", 236),
          ("type3-24GB-V", 237),
          ("type3-24SFP-PLUS", 238),
          ("type3-SUP", 239),
          ("type3-FAB", 240),
          ("type3-MSC", 241),
          ("type3-24GT-WS", 242),
          ("type3-24GB-WS", 243),
          ("type3-FW", 244),
          ("type3-8QSFP", 245),
          ("type3-OF", 246),
          ("type3-20XS2Q", 247),
          ("type3-FAB-TWO-CHIP", 248),
          ("type3-08BACKPLANE", 299),
          ("type4-4GT", 300),
          ("type4-4FX", 301),
          ("type4-2GB", 302),
          ("type4-4TX", 303),
          ("type4-4GB", 304),
          ("type4-4FB", 305),
          ("type5-M16K-SUP", 320),
          ("type5-M16K-16Q", 321),
          ("type5-M16K-FC", 322),
          ("type5-M16K-48XS2Q", 323),
          ("type5-M16K-24T24S2XS", 324))
    )


_VsfModuleType_Type.__name__ = "Integer32"
_VsfModuleType_Object = MibTableColumn
vsfModuleType = _VsfModuleType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 30, 2, 1, 3),
    _VsfModuleType_Type()
)
vsfModuleType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vsfModuleType.setStatus("current")
_SysMonitorAlarmTable_Object = MibTable
sysMonitorAlarmTable = _SysMonitorAlarmTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 31)
)
if mibBuilder.loadTexts:
    sysMonitorAlarmTable.setStatus("current")
_SysMonitorAlarmEntry_Object = MibTableRow
sysMonitorAlarmEntry = _SysMonitorAlarmEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 31, 1)
)
sysMonitorAlarmEntry.setIndexNames(
    (0, "NAG-MIB", "sysMonitorAlarmIndex"),
)
if mibBuilder.loadTexts:
    sysMonitorAlarmEntry.setStatus("current")
_SysMonitorAlarmIndex_Type = Integer32
_SysMonitorAlarmIndex_Object = MibTableColumn
sysMonitorAlarmIndex = _SysMonitorAlarmIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 31, 1, 1),
    _SysMonitorAlarmIndex_Type()
)
sysMonitorAlarmIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    sysMonitorAlarmIndex.setStatus("current")


class _SysMonitorAlarmEnable_Type(Integer32):
    """Custom type sysMonitorAlarmEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("sysMonitorAlarmNotEnable", 0),
          ("sysMonitorAlarmEnable", 1))
    )


_SysMonitorAlarmEnable_Type.__name__ = "Integer32"
_SysMonitorAlarmEnable_Object = MibTableColumn
sysMonitorAlarmEnable = _SysMonitorAlarmEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 31, 1, 2),
    _SysMonitorAlarmEnable_Type()
)
sysMonitorAlarmEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysMonitorAlarmEnable.setStatus("current")


class _SysMonitorAlarmBindSet_Type(Integer32):
    """Custom type sysMonitorAlarmBindSet based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("input1-output1", 1),
          ("input1-output2", 2),
          ("input2-output1", 3),
          ("input2-output2", 4))
    )


_SysMonitorAlarmBindSet_Type.__name__ = "Integer32"
_SysMonitorAlarmBindSet_Object = MibTableColumn
sysMonitorAlarmBindSet = _SysMonitorAlarmBindSet_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 31, 1, 3),
    _SysMonitorAlarmBindSet_Type()
)
sysMonitorAlarmBindSet.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysMonitorAlarmBindSet.setStatus("current")


class _SysMonitorAlarmInputSet_Type(Integer32):
    """Custom type sysMonitorAlarmInputSet based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("input1-high", 1),
          ("input1-low", 2),
          ("input2-high", 3),
          ("input2-low", 4))
    )


_SysMonitorAlarmInputSet_Type.__name__ = "Integer32"
_SysMonitorAlarmInputSet_Object = MibTableColumn
sysMonitorAlarmInputSet = _SysMonitorAlarmInputSet_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 31, 1, 4),
    _SysMonitorAlarmInputSet_Type()
)
sysMonitorAlarmInputSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysMonitorAlarmInputSet.setStatus("current")


class _SysMonitorAlarmOutputSet_Type(Integer32):
    """Custom type sysMonitorAlarmOutputSet based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("output1-high", 1),
          ("output1-low", 2),
          ("output2-high", 3),
          ("output2-low", 4))
    )


_SysMonitorAlarmOutputSet_Type.__name__ = "Integer32"
_SysMonitorAlarmOutputSet_Object = MibTableColumn
sysMonitorAlarmOutputSet = _SysMonitorAlarmOutputSet_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 31, 1, 5),
    _SysMonitorAlarmOutputSet_Type()
)
sysMonitorAlarmOutputSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysMonitorAlarmOutputSet.setStatus("current")
_DeviceTypeID_Type = Integer32
_DeviceTypeID_Object = MibScalar
deviceTypeID = _DeviceTypeID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 100),
    _DeviceTypeID_Type()
)
deviceTypeID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    deviceTypeID.setStatus("current")
_RpsPowerVoltage_Type = Integer32
_RpsPowerVoltage_Object = MibScalar
rpsPowerVoltage = _RpsPowerVoltage_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 1, 101),
    _RpsPowerVoltage_Type()
)
rpsPowerVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpsPowerVoltage.setStatus("current")
_PriSpanningTree_ObjectIdentity = ObjectIdentity
priSpanningTree = _PriSpanningTree_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2)
)


class _SpanGlobalEnable_Type(Integer32):
    """Custom type spanGlobalEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SpanGlobalEnable_Type.__name__ = "Integer32"
_SpanGlobalEnable_Object = MibScalar
spanGlobalEnable = _SpanGlobalEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 1),
    _SpanGlobalEnable_Type()
)
spanGlobalEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    spanGlobalEnable.setStatus("current")
_MstpMgt_ObjectIdentity = ObjectIdentity
mstpMgt = _MstpMgt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2)
)
_MstpSystemGroup_ObjectIdentity = ObjectIdentity
mstpSystemGroup = _MstpSystemGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1)
)


class _MstpEnable_Type(Integer32):
    """Custom type mstpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_MstpEnable_Type.__name__ = "Integer32"
_MstpEnable_Object = MibScalar
mstpEnable = _MstpEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 1),
    _MstpEnable_Type()
)
mstpEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstpEnable.setStatus("current")


class _MstpTCFlush_Type(Integer32):
    """Custom type mstpTCFlush based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2),
          ("protect", 3))
    )


_MstpTCFlush_Type.__name__ = "Integer32"
_MstpTCFlush_Object = MibScalar
mstpTCFlush = _MstpTCFlush_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 2),
    _MstpTCFlush_Type()
)
mstpTCFlush.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstpTCFlush.setStatus("current")
_MstpForwardTime_Type = Integer32
_MstpForwardTime_Object = MibScalar
mstpForwardTime = _MstpForwardTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 3),
    _MstpForwardTime_Type()
)
mstpForwardTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpForwardTime.setStatus("current")
_MstpHelloTime_Type = Integer32
_MstpHelloTime_Object = MibScalar
mstpHelloTime = _MstpHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 4),
    _MstpHelloTime_Type()
)
mstpHelloTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpHelloTime.setStatus("current")
_MstpMaxage_Type = Integer32
_MstpMaxage_Object = MibScalar
mstpMaxage = _MstpMaxage_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 5),
    _MstpMaxage_Type()
)
mstpMaxage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpMaxage.setStatus("current")


class _MstpMaxhop_Type(Integer32):
    """Custom type mstpMaxhop based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 40),
    )


_MstpMaxhop_Type.__name__ = "Integer32"
_MstpMaxhop_Object = MibScalar
mstpMaxhop = _MstpMaxhop_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 6),
    _MstpMaxhop_Type()
)
mstpMaxhop.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstpMaxhop.setStatus("current")


class _MstpMode_Type(Integer32):
    """Custom type mstpMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("stp", 0),
          ("rstp", 2),
          ("mstp", 3))
    )


_MstpMode_Type.__name__ = "Integer32"
_MstpMode_Object = MibScalar
mstpMode = _MstpMode_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 7),
    _MstpMode_Type()
)
mstpMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstpMode.setStatus("current")


class _MstpName_Type(DisplayString):
    """Custom type mstpName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_MstpName_Type.__name__ = "DisplayString"
_MstpName_Object = MibScalar
mstpName = _MstpName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 8),
    _MstpName_Type()
)
mstpName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstpName.setStatus("current")


class _MstpRevisionLevel_Type(Integer32):
    """Custom type mstpRevisionLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_MstpRevisionLevel_Type.__name__ = "Integer32"
_MstpRevisionLevel_Object = MibScalar
mstpRevisionLevel = _MstpRevisionLevel_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 9),
    _MstpRevisionLevel_Type()
)
mstpRevisionLevel.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstpRevisionLevel.setStatus("current")


class _MstpBridgeForwardDelay_Type(Integer32):
    """Custom type mstpBridgeForwardDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 30),
    )


_MstpBridgeForwardDelay_Type.__name__ = "Integer32"
_MstpBridgeForwardDelay_Object = MibScalar
mstpBridgeForwardDelay = _MstpBridgeForwardDelay_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 10),
    _MstpBridgeForwardDelay_Type()
)
mstpBridgeForwardDelay.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstpBridgeForwardDelay.setStatus("current")


class _MstpBridgeHelloTime_Type(Integer32):
    """Custom type mstpBridgeHelloTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_MstpBridgeHelloTime_Type.__name__ = "Integer32"
_MstpBridgeHelloTime_Object = MibScalar
mstpBridgeHelloTime = _MstpBridgeHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 11),
    _MstpBridgeHelloTime_Type()
)
mstpBridgeHelloTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstpBridgeHelloTime.setStatus("current")


class _MstpBridgeMaxage_Type(Integer32):
    """Custom type mstpBridgeMaxage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(6, 40),
    )


_MstpBridgeMaxage_Type.__name__ = "Integer32"
_MstpBridgeMaxage_Object = MibScalar
mstpBridgeMaxage = _MstpBridgeMaxage_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 1, 12),
    _MstpBridgeMaxage_Type()
)
mstpBridgeMaxage.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstpBridgeMaxage.setStatus("current")
_MstpInstanceTable_Object = MibTable
mstpInstanceTable = _MstpInstanceTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 2)
)
if mibBuilder.loadTexts:
    mstpInstanceTable.setStatus("current")
_MstpInstanceEntry_Object = MibTableRow
mstpInstanceEntry = _MstpInstanceEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 2, 1)
)
mstpInstanceEntry.setIndexNames(
    (0, "NAG-MIB", "mstpInstanceID"),
)
if mibBuilder.loadTexts:
    mstpInstanceEntry.setStatus("current")
_MstpInstanceID_Type = Integer32
_MstpInstanceID_Object = MibTableColumn
mstpInstanceID = _MstpInstanceID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 2, 1, 1),
    _MstpInstanceID_Type()
)
mstpInstanceID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mstpInstanceID.setStatus("current")


class _MstpInstanceVlans_Type(DisplayString):
    """Custom type mstpInstanceVlans based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_MstpInstanceVlans_Type.__name__ = "DisplayString"
_MstpInstanceVlans_Object = MibTableColumn
mstpInstanceVlans = _MstpInstanceVlans_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 2, 1, 2),
    _MstpInstanceVlans_Type()
)
mstpInstanceVlans.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstpInstanceVlans.setStatus("current")


class _MstpInstanceSwitchPriority_Type(Integer32):
    """Custom type mstpInstanceSwitchPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 61440),
    )


_MstpInstanceSwitchPriority_Type.__name__ = "Integer32"
_MstpInstanceSwitchPriority_Object = MibTableColumn
mstpInstanceSwitchPriority = _MstpInstanceSwitchPriority_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 2, 1, 3),
    _MstpInstanceSwitchPriority_Type()
)
mstpInstanceSwitchPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstpInstanceSwitchPriority.setStatus("current")
_MstpInstanceRegionRootID_Type = OctetString
_MstpInstanceRegionRootID_Object = MibTableColumn
mstpInstanceRegionRootID = _MstpInstanceRegionRootID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 2, 1, 4),
    _MstpInstanceRegionRootID_Type()
)
mstpInstanceRegionRootID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpInstanceRegionRootID.setStatus("current")
_MstpInstanceIntRootPathCost_Type = Unsigned32
_MstpInstanceIntRootPathCost_Object = MibTableColumn
mstpInstanceIntRootPathCost = _MstpInstanceIntRootPathCost_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 2, 1, 5),
    _MstpInstanceIntRootPathCost_Type()
)
mstpInstanceIntRootPathCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpInstanceIntRootPathCost.setStatus("current")
_MstpInstanceRootPortID_Type = OctetString
_MstpInstanceRootPortID_Object = MibTableColumn
mstpInstanceRootPortID = _MstpInstanceRootPortID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 2, 1, 6),
    _MstpInstanceRootPortID_Type()
)
mstpInstanceRootPortID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpInstanceRootPortID.setStatus("current")
_MstpInstancePortTable_Object = MibTable
mstpInstancePortTable = _MstpInstancePortTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3)
)
if mibBuilder.loadTexts:
    mstpInstancePortTable.setStatus("current")
_MstpInstancePortEntry_Object = MibTableRow
mstpInstancePortEntry = _MstpInstancePortEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1)
)
mstpInstancePortEntry.setIndexNames(
    (0, "NAG-MIB", "mstpInstancePortInstanceID"),
    (0, "NAG-MIB", "mstpInstancePortPortIndex"),
)
if mibBuilder.loadTexts:
    mstpInstancePortEntry.setStatus("current")
_MstpInstancePortInstanceID_Type = Integer32
_MstpInstancePortInstanceID_Object = MibTableColumn
mstpInstancePortInstanceID = _MstpInstancePortInstanceID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 1),
    _MstpInstancePortInstanceID_Type()
)
mstpInstancePortInstanceID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mstpInstancePortInstanceID.setStatus("current")
_MstpInstancePortPortIndex_Type = Integer32
_MstpInstancePortPortIndex_Object = MibTableColumn
mstpInstancePortPortIndex = _MstpInstancePortPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 2),
    _MstpInstancePortPortIndex_Type()
)
mstpInstancePortPortIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mstpInstancePortPortIndex.setStatus("current")


class _MstpInstancePortCost_Type(Integer32):
    """Custom type mstpInstancePortCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 200000000),
    )


_MstpInstancePortCost_Type.__name__ = "Integer32"
_MstpInstancePortCost_Object = MibTableColumn
mstpInstancePortCost = _MstpInstancePortCost_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 3),
    _MstpInstancePortCost_Type()
)
mstpInstancePortCost.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstpInstancePortCost.setStatus("current")


class _MstpInstancePortPriority_Type(Integer32):
    """Custom type mstpInstancePortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 240),
    )


_MstpInstancePortPriority_Type.__name__ = "Integer32"
_MstpInstancePortPriority_Object = MibTableColumn
mstpInstancePortPriority = _MstpInstancePortPriority_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 4),
    _MstpInstancePortPriority_Type()
)
mstpInstancePortPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstpInstancePortPriority.setStatus("current")


class _MstpInstancePortRootGuard_Type(Integer32):
    """Custom type mstpInstancePortRootGuard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_MstpInstancePortRootGuard_Type.__name__ = "Integer32"
_MstpInstancePortRootGuard_Object = MibTableColumn
mstpInstancePortRootGuard = _MstpInstancePortRootGuard_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 5),
    _MstpInstancePortRootGuard_Type()
)
mstpInstancePortRootGuard.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstpInstancePortRootGuard.setStatus("current")
_MstpInstancePortID_Type = OctetString
_MstpInstancePortID_Object = MibTableColumn
mstpInstancePortID = _MstpInstancePortID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 6),
    _MstpInstancePortID_Type()
)
mstpInstancePortID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpInstancePortID.setStatus("current")
_MstpInstancePortExtRootPathCost_Type = Unsigned32
_MstpInstancePortExtRootPathCost_Object = MibTableColumn
mstpInstancePortExtRootPathCost = _MstpInstancePortExtRootPathCost_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 7),
    _MstpInstancePortExtRootPathCost_Type()
)
mstpInstancePortExtRootPathCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpInstancePortExtRootPathCost.setStatus("current")
_MstpInstancePortIntRootPathCost_Type = Unsigned32
_MstpInstancePortIntRootPathCost_Object = MibTableColumn
mstpInstancePortIntRootPathCost = _MstpInstancePortIntRootPathCost_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 8),
    _MstpInstancePortIntRootPathCost_Type()
)
mstpInstancePortIntRootPathCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpInstancePortIntRootPathCost.setStatus("current")


class _MstpInstancePortState_Type(Integer32):
    """Custom type mstpInstancePortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("block", 0),
          ("forwarding", 1),
          ("learning", 2))
    )


_MstpInstancePortState_Type.__name__ = "Integer32"
_MstpInstancePortState_Object = MibTableColumn
mstpInstancePortState = _MstpInstancePortState_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 9),
    _MstpInstancePortState_Type()
)
mstpInstancePortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpInstancePortState.setStatus("current")


class _MstpInstancePortRole_Type(Integer32):
    """Custom type mstpInstancePortRole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("nonstp", 0),
          ("alternate", 1),
          ("root", 2),
          ("designated", 3),
          ("backup", 4),
          ("master", 5),
          ("disabled", 6))
    )


_MstpInstancePortRole_Type.__name__ = "Integer32"
_MstpInstancePortRole_Object = MibTableColumn
mstpInstancePortRole = _MstpInstancePortRole_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 10),
    _MstpInstancePortRole_Type()
)
mstpInstancePortRole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpInstancePortRole.setStatus("current")
_MstpInstancePortDesignatedBridgeID_Type = OctetString
_MstpInstancePortDesignatedBridgeID_Object = MibTableColumn
mstpInstancePortDesignatedBridgeID = _MstpInstancePortDesignatedBridgeID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 11),
    _MstpInstancePortDesignatedBridgeID_Type()
)
mstpInstancePortDesignatedBridgeID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpInstancePortDesignatedBridgeID.setStatus("current")
_MstpInstancePortDesignatedPortID_Type = OctetString
_MstpInstancePortDesignatedPortID_Object = MibTableColumn
mstpInstancePortDesignatedPortID = _MstpInstancePortDesignatedPortID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 3, 1, 12),
    _MstpInstancePortDesignatedPortID_Type()
)
mstpInstancePortDesignatedPortID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpInstancePortDesignatedPortID.setStatus("current")
_MstpPortInfoTable_Object = MibTable
mstpPortInfoTable = _MstpPortInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4)
)
if mibBuilder.loadTexts:
    mstpPortInfoTable.setStatus("current")
_MstpPortInfoEntry_Object = MibTableRow
mstpPortInfoEntry = _MstpPortInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1)
)
mstpPortInfoEntry.setIndexNames(
    (0, "NAG-MIB", "mstpPortInfoPortIndex"),
)
if mibBuilder.loadTexts:
    mstpPortInfoEntry.setStatus("current")
_MstpPortInfoPortIndex_Type = Integer32
_MstpPortInfoPortIndex_Object = MibTableColumn
mstpPortInfoPortIndex = _MstpPortInfoPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1, 1),
    _MstpPortInfoPortIndex_Type()
)
mstpPortInfoPortIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mstpPortInfoPortIndex.setStatus("current")


class _MstpPortInfoEnable_Type(Integer32):
    """Custom type mstpPortInfoEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_MstpPortInfoEnable_Type.__name__ = "Integer32"
_MstpPortInfoEnable_Object = MibTableColumn
mstpPortInfoEnable = _MstpPortInfoEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1, 2),
    _MstpPortInfoEnable_Type()
)
mstpPortInfoEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstpPortInfoEnable.setStatus("current")


class _MstpPortLinkType_Type(Integer32):
    """Custom type mstpPortLinkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("force-false", 0),
          ("force-true", 1),
          ("auto", 2))
    )


_MstpPortLinkType_Type.__name__ = "Integer32"
_MstpPortLinkType_Object = MibTableColumn
mstpPortLinkType = _MstpPortLinkType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1, 3),
    _MstpPortLinkType_Type()
)
mstpPortLinkType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstpPortLinkType.setStatus("current")


class _MstpPortMcheck_Type(Integer32):
    """Custom type mstpPortMcheck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("untrigger", 0),
          ("trigger", 1))
    )


_MstpPortMcheck_Type.__name__ = "Integer32"
_MstpPortMcheck_Object = MibTableColumn
mstpPortMcheck = _MstpPortMcheck_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1, 4),
    _MstpPortMcheck_Type()
)
mstpPortMcheck.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstpPortMcheck.setStatus("current")


class _MstpPortPortFast_Type(Integer32):
    """Custom type mstpPortPortFast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("bpdufilter", 1),
          ("bpduguard", 2),
          ("noportfast", 3))
    )


_MstpPortPortFast_Type.__name__ = "Integer32"
_MstpPortPortFast_Object = MibTableColumn
mstpPortPortFast = _MstpPortPortFast_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1, 5),
    _MstpPortPortFast_Type()
)
mstpPortPortFast.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstpPortPortFast.setStatus("current")


class _MstpPortFormat_Type(Integer32):
    """Custom type mstpPortFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("standard", 0),
          ("privacy", 1),
          ("auto", 2))
    )


_MstpPortFormat_Type.__name__ = "Integer32"
_MstpPortFormat_Object = MibTableColumn
mstpPortFormat = _MstpPortFormat_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1, 6),
    _MstpPortFormat_Type()
)
mstpPortFormat.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstpPortFormat.setStatus("current")


class _MstpPortDigestSnp_Type(Integer32):
    """Custom type mstpPortDigestSnp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_MstpPortDigestSnp_Type.__name__ = "Integer32"
_MstpPortDigestSnp_Object = MibTableColumn
mstpPortDigestSnp = _MstpPortDigestSnp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1, 7),
    _MstpPortDigestSnp_Type()
)
mstpPortDigestSnp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstpPortDigestSnp.setStatus("current")


class _MstpPortTCFlush_Type(Integer32):
    """Custom type mstpPortTCFlush based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("useglobal", 0),
          ("enable", 1),
          ("disable", 2),
          ("protect", 3))
    )


_MstpPortTCFlush_Type.__name__ = "Integer32"
_MstpPortTCFlush_Object = MibTableColumn
mstpPortTCFlush = _MstpPortTCFlush_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 2, 2, 4, 1, 8),
    _MstpPortTCFlush_Type()
)
mstpPortTCFlush.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstpPortTCFlush.setStatus("current")
_PriPorts_ObjectIdentity = ObjectIdentity
priPorts = _PriPorts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3)
)


class _PortCount_Type(Integer32):
    """Custom type portCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 256),
    )


_PortCount_Type.__name__ = "Integer32"
_PortCount_Object = MibScalar
portCount = _PortCount_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 1),
    _PortCount_Type()
)
portCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portCount.setStatus("current")
_PortTable_Object = MibTable
portTable = _PortTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2)
)
if mibBuilder.loadTexts:
    portTable.setStatus("current")
_PriPortEntry_Object = MibTableRow
priPortEntry = _PriPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1)
)
priPortEntry.setIndexNames(
    (0, "NAG-MIB", "portIndex"),
)
if mibBuilder.loadTexts:
    priPortEntry.setStatus("current")
_PortIndex_Type = Integer32
_PortIndex_Object = MibTableColumn
portIndex = _PortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 1),
    _PortIndex_Type()
)
portIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portIndex.setStatus("current")


class _PortName_Type(DisplayString):
    """Custom type portName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_PortName_Type.__name__ = "DisplayString"
_PortName_Object = MibTableColumn
portName = _PortName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 2),
    _PortName_Type()
)
portName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portName.setStatus("current")


class _SwitchNum_Type(Integer32):
    """Custom type switchNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_SwitchNum_Type.__name__ = "Integer32"
_SwitchNum_Object = MibTableColumn
switchNum = _SwitchNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 3),
    _SwitchNum_Type()
)
switchNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchNum.setStatus("current")


class _SlotNum_Type(Integer32):
    """Custom type slotNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_SlotNum_Type.__name__ = "Integer32"
_SlotNum_Object = MibTableColumn
slotNum = _SlotNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 4),
    _SlotNum_Type()
)
slotNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotNum.setStatus("current")


class _PortType_Type(Integer32):
    """Custom type portType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              255)
        )
    )
    namedValues = NamedValues(
        *(("typeSFP", 0),
          ("typeCombo", 1),
          ("typeFiber", 2),
          ("typeSingleOptFE", 3),
          ("typeMultiOptFE", 4),
          ("typeElecFE", 5),
          ("typeSingleOptGE", 6),
          ("typeMultiOptGE", 7),
          ("typeElecGE", 8),
          ("typePortAGG", 9),
          ("typePortUsbGE", 10),
          ("typeOptXge", 11),
          ("typeElecXge", 12),
          ("other", 255))
    )


_PortType_Type.__name__ = "Integer32"
_PortType_Object = MibTableColumn
portType = _PortType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 5),
    _PortType_Type()
)
portType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portType.setStatus("current")


class _FlowControlStatus_Type(Integer32):
    """Custom type flowControlStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_FlowControlStatus_Type.__name__ = "Integer32"
_FlowControlStatus_Object = MibTableColumn
flowControlStatus = _FlowControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 6),
    _FlowControlStatus_Type()
)
flowControlStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    flowControlStatus.setStatus("current")


class _BandwidthControlStatus_Type(Integer32):
    """Custom type bandwidthControlStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ingress", 0),
          ("egress", 1),
          ("both", 2),
          ("none", 3))
    )


_BandwidthControlStatus_Type.__name__ = "Integer32"
_BandwidthControlStatus_Object = MibTableColumn
bandwidthControlStatus = _BandwidthControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 7),
    _BandwidthControlStatus_Type()
)
bandwidthControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bandwidthControlStatus.setStatus("current")


class _MaxBandwidth_Type(Integer32):
    """Custom type maxBandwidth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("bw100M", 1),
          ("bw1000M", 2),
          ("bw10000M", 3),
          ("bw40000M", 4),
          ("bw20000M", 5),
          ("bw25G", 6),
          ("bw100G", 7))
    )


_MaxBandwidth_Type.__name__ = "Integer32"
_MaxBandwidth_Object = MibTableColumn
maxBandwidth = _MaxBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 8),
    _MaxBandwidth_Type()
)
maxBandwidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxBandwidth.setStatus("current")
_ReceiveBandwidth_Type = Integer32
_ReceiveBandwidth_Object = MibTableColumn
receiveBandwidth = _ReceiveBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 9),
    _ReceiveBandwidth_Type()
)
receiveBandwidth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    receiveBandwidth.setStatus("current")
_TransmitBandwidth_Type = Integer32
_TransmitBandwidth_Object = MibTableColumn
transmitBandwidth = _TransmitBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 10),
    _TransmitBandwidth_Type()
)
transmitBandwidth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    transmitBandwidth.setStatus("current")


class _Shutdown_Type(Integer32):
    """Custom type shutdown based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("shutDown", 0),
          ("noshutdown", 1))
    )


_Shutdown_Type.__name__ = "Integer32"
_Shutdown_Object = MibTableColumn
shutdown = _Shutdown_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 12),
    _Shutdown_Type()
)
shutdown.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    shutdown.setStatus("current")


class _Loopback_Type(Integer32):
    """Custom type loopback based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("noloopback", 0),
          ("loopback", 1))
    )


_Loopback_Type.__name__ = "Integer32"
_Loopback_Object = MibTableColumn
loopback = _Loopback_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 13),
    _Loopback_Type()
)
loopback.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    loopback.setStatus("current")


class _SpeedDuplex_Type(Integer32):
    """Custom type speedDuplex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26)
        )
    )
    namedValues = NamedValues(
        *(("auto", 0),
          ("half10", 1),
          ("full10", 2),
          ("half100", 3),
          ("full100", 4),
          ("half1000", 5),
          ("full1000", 6),
          ("half-1000-M", 7),
          ("half-1000-s", 8),
          ("full-1000-M", 9),
          ("full-1000-s", 10),
          ("fx-100", 13),
          ("fx-100-phy", 14),
          ("fx-100-no-phy", 15),
          ("neg-10-auto", 16),
          ("neg-10-full", 17),
          ("neg-10-half", 18),
          ("neg-10-100-auto", 19),
          ("neg-10-100-full", 20),
          ("neg-10-100-half", 21),
          ("neg-10-100-1000-full", 22),
          ("neg-10-100-1000-half", 23),
          ("neg-full-10g", 24),
          ("full-10g", 25),
          ("full-40g", 26))
    )


_SpeedDuplex_Type.__name__ = "Integer32"
_SpeedDuplex_Object = MibTableColumn
speedDuplex = _SpeedDuplex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 14),
    _SpeedDuplex_Type()
)
speedDuplex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    speedDuplex.setStatus("current")


class _PortMode_Type(Integer32):
    """Custom type portMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("access", 1),
          ("trunk", 2),
          ("hybrid", 3))
    )


_PortMode_Type.__name__ = "Integer32"
_PortMode_Object = MibTableColumn
portMode = _PortMode_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 15),
    _PortMode_Type()
)
portMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portMode.setStatus("current")
_Pvid_Type = Integer32
_Pvid_Object = MibTableColumn
pvid = _Pvid_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 16),
    _Pvid_Type()
)
pvid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvid.setStatus("current")


class _IndicatesType_Type(Integer32):
    """Custom type indicatesType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("hundredBaseTX", 2),
          ("hundredBaseFX", 3),
          ("thousandBaseSX", 4),
          ("thousandBaseLX", 5),
          ("thousandBaseT", 6),
          ("thousandBaseGBIC", 7),
          ("thousandBaseSfp", 8),
          ("hundredBaseFxScSingleMode", 9),
          ("hundredBaseFxScMultiMode", 10),
          ("thousandBaseCX", 11),
          ("tenG", 12))
    )


_IndicatesType_Type.__name__ = "Integer32"
_IndicatesType_Object = MibTableColumn
indicatesType = _IndicatesType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 17),
    _IndicatesType_Type()
)
indicatesType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    indicatesType.setStatus("current")
_VctAction_Type = Integer32
_VctAction_Object = MibTableColumn
vctAction = _VctAction_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 18),
    _VctAction_Type()
)
vctAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vctAction.setStatus("current")


class _VctLastStatus_Type(DisplayString):
    """Custom type vctLastStatus based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1000),
    )


_VctLastStatus_Type.__name__ = "DisplayString"
_VctLastStatus_Object = MibTableColumn
vctLastStatus = _VctLastStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 19),
    _VctLastStatus_Type()
)
vctLastStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vctLastStatus.setStatus("current")
_PortTrunkAllowedvlan_Type = OctetString
_PortTrunkAllowedvlan_Object = MibTableColumn
portTrunkAllowedvlan = _PortTrunkAllowedvlan_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 20),
    _PortTrunkAllowedvlan_Type()
)
portTrunkAllowedvlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portTrunkAllowedvlan.setStatus("current")
_PortHybridTaggedAllowedvlan_Type = OctetString
_PortHybridTaggedAllowedvlan_Object = MibTableColumn
portHybridTaggedAllowedvlan = _PortHybridTaggedAllowedvlan_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 21),
    _PortHybridTaggedAllowedvlan_Type()
)
portHybridTaggedAllowedvlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portHybridTaggedAllowedvlan.setStatus("current")
_PortHybridUntaggedAllowedvlan_Type = OctetString
_PortHybridUntaggedAllowedvlan_Object = MibTableColumn
portHybridUntaggedAllowedvlan = _PortHybridUntaggedAllowedvlan_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 22),
    _PortHybridUntaggedAllowedvlan_Type()
)
portHybridUntaggedAllowedvlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portHybridUntaggedAllowedvlan.setStatus("current")


class _PortBandWidthUsage_Type(Integer32):
    """Custom type portBandWidthUsage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_PortBandWidthUsage_Type.__name__ = "Integer32"
_PortBandWidthUsage_Object = MibTableColumn
portBandWidthUsage = _PortBandWidthUsage_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 23),
    _PortBandWidthUsage_Type()
)
portBandWidthUsage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portBandWidthUsage.setStatus("current")
_LastFiveMinInPktsPerSec_Type = Counter32
_LastFiveMinInPktsPerSec_Object = MibTableColumn
lastFiveMinInPktsPerSec = _LastFiveMinInPktsPerSec_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 24),
    _LastFiveMinInPktsPerSec_Type()
)
lastFiveMinInPktsPerSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lastFiveMinInPktsPerSec.setStatus("current")
_LastFiveMinOutPktsPerSec_Type = Counter32
_LastFiveMinOutPktsPerSec_Object = MibTableColumn
lastFiveMinOutPktsPerSec = _LastFiveMinOutPktsPerSec_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 25),
    _LastFiveMinOutPktsPerSec_Type()
)
lastFiveMinOutPktsPerSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lastFiveMinOutPktsPerSec.setStatus("current")
_LastFiveSecInPktsPerSec_Type = Counter32
_LastFiveSecInPktsPerSec_Object = MibTableColumn
lastFiveSecInPktsPerSec = _LastFiveSecInPktsPerSec_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 26),
    _LastFiveSecInPktsPerSec_Type()
)
lastFiveSecInPktsPerSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lastFiveSecInPktsPerSec.setStatus("current")
_LastFiveSecOutPktsPerSec_Type = Counter32
_LastFiveSecOutPktsPerSec_Object = MibTableColumn
lastFiveSecOutPktsPerSec = _LastFiveSecOutPktsPerSec_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 27),
    _LastFiveSecOutPktsPerSec_Type()
)
lastFiveSecOutPktsPerSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lastFiveSecOutPktsPerSec.setStatus("current")


class _TransceiverSn_Type(DisplayString):
    """Custom type transceiverSn based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_TransceiverSn_Type.__name__ = "DisplayString"
_TransceiverSn_Object = MibTableColumn
transceiverSn = _TransceiverSn_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 28),
    _TransceiverSn_Type()
)
transceiverSn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    transceiverSn.setStatus("current")
_PortBlockMode_Type = Counter32
_PortBlockMode_Object = MibTableColumn
portBlockMode = _PortBlockMode_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 29),
    _PortBlockMode_Type()
)
portBlockMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portBlockMode.setStatus("current")
_PortBlockState_Type = Counter32
_PortBlockState_Object = MibTableColumn
portBlockState = _PortBlockState_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 30),
    _PortBlockState_Type()
)
portBlockState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portBlockState.setStatus("current")


class _PortComboMediaType_Type(Integer32):
    """Custom type portComboMediaType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("phyModeCopperPrefered", 1),
          ("phyModeCopperForced", 2),
          ("phyModeFiberPrefered", 3),
          ("phyModeFiberForced", 4))
    )


_PortComboMediaType_Type.__name__ = "Integer32"
_PortComboMediaType_Object = MibTableColumn
portComboMediaType = _PortComboMediaType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 31),
    _PortComboMediaType_Type()
)
portComboMediaType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portComboMediaType.setStatus("current")


class _PortDiscardPktType_Type(Integer32):
    """Custom type portDiscardPktType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("tag", 1),
          ("untag", 2),
          ("no-tag", 3),
          ("no-untag", 4))
    )


_PortDiscardPktType_Type.__name__ = "Integer32"
_PortDiscardPktType_Object = MibTableColumn
portDiscardPktType = _PortDiscardPktType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 2, 1, 32),
    _PortDiscardPktType_Type()
)
portDiscardPktType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portDiscardPktType.setStatus("current")
_StormControlTable_Object = MibTable
stormControlTable = _StormControlTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 3)
)
if mibBuilder.loadTexts:
    stormControlTable.setStatus("current")
_StormControlEntry_Object = MibTableRow
stormControlEntry = _StormControlEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 3, 1)
)
stormControlEntry.setIndexNames(
    (0, "NAG-MIB", "stormControlIndex"),
    (0, "NAG-MIB", "stormControlType"),
)
if mibBuilder.loadTexts:
    stormControlEntry.setStatus("current")
_StormControlIndex_Type = Integer32
_StormControlIndex_Object = MibTableColumn
stormControlIndex = _StormControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 3, 1, 1),
    _StormControlIndex_Type()
)
stormControlIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stormControlIndex.setStatus("current")


class _StormControlType_Type(Integer32):
    """Custom type stormControlType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("broadcast", 0),
          ("multicast", 1),
          ("unicast", 2),
          ("dlf", 3),
          ("brmc", 4),
          ("brmcdlf", 5),
          ("all", 6))
    )


_StormControlType_Type.__name__ = "Integer32"
_StormControlType_Object = MibTableColumn
stormControlType = _StormControlType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 3, 1, 2),
    _StormControlType_Type()
)
stormControlType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stormControlType.setStatus("current")
_StormControlRate_Type = Integer32
_StormControlRate_Object = MibTableColumn
stormControlRate = _StormControlRate_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 3, 1, 3),
    _StormControlRate_Type()
)
stormControlRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stormControlRate.setStatus("current")


class _StormControlStatus_Type(Integer32):
    """Custom type stormControlStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("destroy", 0),
          ("active", 1))
    )


_StormControlStatus_Type.__name__ = "Integer32"
_StormControlStatus_Object = MibTableColumn
stormControlStatus = _StormControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 3, 1, 4),
    _StormControlStatus_Type()
)
stormControlStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stormControlStatus.setStatus("current")
_LoopbackDetection_ObjectIdentity = ObjectIdentity
loopbackDetection = _LoopbackDetection_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4)
)


class _LoopbackDetecCtrlRecovery_Type(Integer32):
    """Custom type loopbackDetecCtrlRecovery based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
    )


_LoopbackDetecCtrlRecovery_Type.__name__ = "Integer32"
_LoopbackDetecCtrlRecovery_Object = MibScalar
loopbackDetecCtrlRecovery = _LoopbackDetecCtrlRecovery_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 1),
    _LoopbackDetecCtrlRecovery_Type()
)
loopbackDetecCtrlRecovery.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    loopbackDetecCtrlRecovery.setStatus("current")
_LoopbackDetecIntervalTime_ObjectIdentity = ObjectIdentity
loopbackDetecIntervalTime = _LoopbackDetecIntervalTime_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 2)
)


class _LpbackDetecExistInterval_Type(Integer32):
    """Custom type lpbackDetecExistInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 300),
    )


_LpbackDetecExistInterval_Type.__name__ = "Integer32"
_LpbackDetecExistInterval_Object = MibScalar
lpbackDetecExistInterval = _LpbackDetecExistInterval_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 2, 1),
    _LpbackDetecExistInterval_Type()
)
lpbackDetecExistInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lpbackDetecExistInterval.setStatus("current")


class _LpbackDetecNoExistInterval_Type(Integer32):
    """Custom type lpbackDetecNoExistInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30),
    )


_LpbackDetecNoExistInterval_Type.__name__ = "Integer32"
_LpbackDetecNoExistInterval_Object = MibScalar
lpbackDetecNoExistInterval = _LpbackDetecNoExistInterval_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 2, 2),
    _LpbackDetecNoExistInterval_Type()
)
lpbackDetecNoExistInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lpbackDetecNoExistInterval.setStatus("current")
_LoopbackDetecCtrlTable_Object = MibTable
loopbackDetecCtrlTable = _LoopbackDetecCtrlTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 3)
)
if mibBuilder.loadTexts:
    loopbackDetecCtrlTable.setStatus("current")
_LoopbackDetecCtrlEntry_Object = MibTableRow
loopbackDetecCtrlEntry = _LoopbackDetecCtrlEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 3, 1)
)
loopbackDetecCtrlEntry.setIndexNames(
    (0, "NAG-MIB", "lpbackDetecCtrlIndex"),
)
if mibBuilder.loadTexts:
    loopbackDetecCtrlEntry.setStatus("current")
_LpbackDetecCtrlIndex_Type = Integer32
_LpbackDetecCtrlIndex_Object = MibTableColumn
lpbackDetecCtrlIndex = _LpbackDetecCtrlIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 3, 1, 1),
    _LpbackDetecCtrlIndex_Type()
)
lpbackDetecCtrlIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    lpbackDetecCtrlIndex.setStatus("current")


class _LpbackDetecCtrlMode_Type(Integer32):
    """Custom type lpbackDetecCtrlMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("nocontrol", 0),
          ("shutdown", 1),
          ("block", 2))
    )


_LpbackDetecCtrlMode_Type.__name__ = "Integer32"
_LpbackDetecCtrlMode_Object = MibTableColumn
lpbackDetecCtrlMode = _LpbackDetecCtrlMode_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 3, 1, 2),
    _LpbackDetecCtrlMode_Type()
)
lpbackDetecCtrlMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lpbackDetecCtrlMode.setStatus("current")
_LoopbackDetecSpecVlanTable_Object = MibTable
loopbackDetecSpecVlanTable = _LoopbackDetecSpecVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 4)
)
if mibBuilder.loadTexts:
    loopbackDetecSpecVlanTable.setStatus("current")
_LoopbackDetecSpecVlanEntry_Object = MibTableRow
loopbackDetecSpecVlanEntry = _LoopbackDetecSpecVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 4, 1)
)
loopbackDetecSpecVlanEntry.setIndexNames(
    (0, "NAG-MIB", "lpbackDetecVlanPortIndex"),
)
if mibBuilder.loadTexts:
    loopbackDetecSpecVlanEntry.setStatus("current")
_LpbackDetecVlanPortIndex_Type = Integer32
_LpbackDetecVlanPortIndex_Object = MibTableColumn
lpbackDetecVlanPortIndex = _LpbackDetecVlanPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 4, 1, 1),
    _LpbackDetecVlanPortIndex_Type()
)
lpbackDetecVlanPortIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    lpbackDetecVlanPortIndex.setStatus("current")


class _LpbackDetecVlanList_Type(DisplayString):
    """Custom type lpbackDetecVlanList based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 512),
    )


_LpbackDetecVlanList_Type.__name__ = "DisplayString"
_LpbackDetecVlanList_Object = MibTableColumn
lpbackDetecVlanList = _LpbackDetecVlanList_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 4, 1, 2),
    _LpbackDetecVlanList_Type()
)
lpbackDetecVlanList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lpbackDetecVlanList.setStatus("current")


class _LpbackDetecVlanListSetFlag_Type(Integer32):
    """Custom type lpbackDetecVlanListSetFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("close", 0),
          ("open", 1))
    )


_LpbackDetecVlanListSetFlag_Type.__name__ = "Integer32"
_LpbackDetecVlanListSetFlag_Object = MibTableColumn
lpbackDetecVlanListSetFlag = _LpbackDetecVlanListSetFlag_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 4, 1, 3),
    _LpbackDetecVlanListSetFlag_Type()
)
lpbackDetecVlanListSetFlag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lpbackDetecVlanListSetFlag.setStatus("current")
_LoopbackDetecShowTable_Object = MibTable
loopbackDetecShowTable = _LoopbackDetecShowTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 5)
)
if mibBuilder.loadTexts:
    loopbackDetecShowTable.setStatus("current")
_LoopbackDetecShowEntry_Object = MibTableRow
loopbackDetecShowEntry = _LoopbackDetecShowEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 5, 1)
)
loopbackDetecShowEntry.setIndexNames(
    (0, "NAG-MIB", "lpbackDetecShowPortIndex"),
)
if mibBuilder.loadTexts:
    loopbackDetecShowEntry.setStatus("current")
_LpbackDetecShowPortIndex_Type = Integer32
_LpbackDetecShowPortIndex_Object = MibTableColumn
lpbackDetecShowPortIndex = _LpbackDetecShowPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 5, 1, 1),
    _LpbackDetecShowPortIndex_Type()
)
lpbackDetecShowPortIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    lpbackDetecShowPortIndex.setStatus("current")


class _LpbackDetecShowInformation_Type(DisplayString):
    """Custom type lpbackDetecShowInformation based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1024),
    )


_LpbackDetecShowInformation_Type.__name__ = "DisplayString"
_LpbackDetecShowInformation_Object = MibTableColumn
lpbackDetecShowInformation = _LpbackDetecShowInformation_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 4, 5, 1, 2),
    _LpbackDetecShowInformation_Type()
)
lpbackDetecShowInformation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lpbackDetecShowInformation.setStatus("current")
_StormControlPortTable_Object = MibTable
stormControlPortTable = _StormControlPortTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 5)
)
if mibBuilder.loadTexts:
    stormControlPortTable.setStatus("current")
_StormControlPortEntry_Object = MibTableRow
stormControlPortEntry = _StormControlPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 5, 1)
)
stormControlPortEntry.setIndexNames(
    (0, "NAG-MIB", "stormControlPortIndex"),
    (0, "NAG-MIB", "stormControlSuppressType"),
)
if mibBuilder.loadTexts:
    stormControlPortEntry.setStatus("current")
_StormControlPortIndex_Type = Integer32
_StormControlPortIndex_Object = MibTableColumn
stormControlPortIndex = _StormControlPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 5, 1, 1),
    _StormControlPortIndex_Type()
)
stormControlPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stormControlPortIndex.setStatus("current")


class _StormControlSuppressType_Type(Integer32):
    """Custom type stormControlSuppressType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("broadcast", 0),
          ("multicast", 1),
          ("unicast", 2))
    )


_StormControlSuppressType_Type.__name__ = "Integer32"
_StormControlSuppressType_Object = MibTableColumn
stormControlSuppressType = _StormControlSuppressType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 5, 1, 2),
    _StormControlSuppressType_Type()
)
stormControlSuppressType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stormControlSuppressType.setStatus("current")


class _StormControlSuppressRateUnit_Type(Integer32):
    """Custom type stormControlSuppressRateUnit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("kbps", 0),
          ("pps", 1))
    )


_StormControlSuppressRateUnit_Type.__name__ = "Integer32"
_StormControlSuppressRateUnit_Object = MibTableColumn
stormControlSuppressRateUnit = _StormControlSuppressRateUnit_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 5, 1, 3),
    _StormControlSuppressRateUnit_Type()
)
stormControlSuppressRateUnit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stormControlSuppressRateUnit.setStatus("current")
_StormControlSuppressRateValue_Type = Integer32
_StormControlSuppressRateValue_Object = MibTableColumn
stormControlSuppressRateValue = _StormControlSuppressRateValue_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 5, 1, 4),
    _StormControlSuppressRateValue_Type()
)
stormControlSuppressRateValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stormControlSuppressRateValue.setStatus("current")


class _StormControlSuppressStatus_Type(Integer32):
    """Custom type stormControlSuppressStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("destroy", 0),
          ("active", 1))
    )


_StormControlSuppressStatus_Type.__name__ = "Integer32"
_StormControlSuppressStatus_Object = MibTableColumn
stormControlSuppressStatus = _StormControlSuppressStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 5, 1, 5),
    _StormControlSuppressStatus_Type()
)
stormControlSuppressStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stormControlSuppressStatus.setStatus("current")
_FlowCounterTable_Object = MibTable
flowCounterTable = _FlowCounterTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6)
)
if mibBuilder.loadTexts:
    flowCounterTable.setStatus("current")
_FlowCouterEntry_Object = MibTableRow
flowCouterEntry = _FlowCouterEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1)
)
flowCouterEntry.setIndexNames(
    (0, "NAG-MIB", "flowPortIndex"),
    (0, "NAG-MIB", "flowVlanID"),
)
if mibBuilder.loadTexts:
    flowCouterEntry.setStatus("current")
_FlowPortIndex_Type = Integer32
_FlowPortIndex_Object = MibTableColumn
flowPortIndex = _FlowPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 1),
    _FlowPortIndex_Type()
)
flowPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    flowPortIndex.setStatus("current")
_FlowVlanID_Type = Integer32
_FlowVlanID_Object = MibTableColumn
flowVlanID = _FlowVlanID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 2),
    _FlowVlanID_Type()
)
flowVlanID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    flowVlanID.setStatus("current")
_FlowCounterInOctets_Type = Counter64
_FlowCounterInOctets_Object = MibTableColumn
flowCounterInOctets = _FlowCounterInOctets_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 3),
    _FlowCounterInOctets_Type()
)
flowCounterInOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    flowCounterInOctets.setStatus("current")
_FlowCounterInUcastPkts_Type = Counter64
_FlowCounterInUcastPkts_Object = MibTableColumn
flowCounterInUcastPkts = _FlowCounterInUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 4),
    _FlowCounterInUcastPkts_Type()
)
flowCounterInUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    flowCounterInUcastPkts.setStatus("current")
_FlowCounterInMulticastPkts_Type = Counter64
_FlowCounterInMulticastPkts_Object = MibTableColumn
flowCounterInMulticastPkts = _FlowCounterInMulticastPkts_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 5),
    _FlowCounterInMulticastPkts_Type()
)
flowCounterInMulticastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    flowCounterInMulticastPkts.setStatus("current")
_FlowCounterInBroadcastPkts_Type = Counter64
_FlowCounterInBroadcastPkts_Object = MibTableColumn
flowCounterInBroadcastPkts = _FlowCounterInBroadcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 6),
    _FlowCounterInBroadcastPkts_Type()
)
flowCounterInBroadcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    flowCounterInBroadcastPkts.setStatus("current")
_FlowCounterOutOctets_Type = Counter64
_FlowCounterOutOctets_Object = MibTableColumn
flowCounterOutOctets = _FlowCounterOutOctets_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 7),
    _FlowCounterOutOctets_Type()
)
flowCounterOutOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    flowCounterOutOctets.setStatus("current")
_FlowCounterOutUcastPkts_Type = Counter64
_FlowCounterOutUcastPkts_Object = MibTableColumn
flowCounterOutUcastPkts = _FlowCounterOutUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 8),
    _FlowCounterOutUcastPkts_Type()
)
flowCounterOutUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    flowCounterOutUcastPkts.setStatus("current")
_FlowCounterOutMulticastPkts_Type = Counter64
_FlowCounterOutMulticastPkts_Object = MibTableColumn
flowCounterOutMulticastPkts = _FlowCounterOutMulticastPkts_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 9),
    _FlowCounterOutMulticastPkts_Type()
)
flowCounterOutMulticastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    flowCounterOutMulticastPkts.setStatus("current")
_FlowCounterOutBroadcastPkts_Type = Counter64
_FlowCounterOutBroadcastPkts_Object = MibTableColumn
flowCounterOutBroadcastPkts = _FlowCounterOutBroadcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 10),
    _FlowCounterOutBroadcastPkts_Type()
)
flowCounterOutBroadcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    flowCounterOutBroadcastPkts.setStatus("current")


class _ClearFlowCounter_Type(Integer32):
    """Custom type clearFlowCounter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_ClearFlowCounter_Type.__name__ = "Integer32"
_ClearFlowCounter_Object = MibTableColumn
clearFlowCounter = _ClearFlowCounter_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 6, 1, 11),
    _ClearFlowCounter_Type()
)
clearFlowCounter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clearFlowCounter.setStatus("current")
_SumFlowCounterTable_Object = MibTable
sumFlowCounterTable = _SumFlowCounterTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 7)
)
if mibBuilder.loadTexts:
    sumFlowCounterTable.setStatus("current")
_SumFlowCouterEntry_Object = MibTableRow
sumFlowCouterEntry = _SumFlowCouterEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 7, 1)
)
sumFlowCouterEntry.setIndexNames(
    (0, "NAG-MIB", "sumFlowVlanID"),
)
if mibBuilder.loadTexts:
    sumFlowCouterEntry.setStatus("current")
_SumFlowVlanID_Type = Integer32
_SumFlowVlanID_Object = MibTableColumn
sumFlowVlanID = _SumFlowVlanID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 7, 1, 1),
    _SumFlowVlanID_Type()
)
sumFlowVlanID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sumFlowVlanID.setStatus("current")
_SumFlowCounterInOctets_Type = Counter64
_SumFlowCounterInOctets_Object = MibTableColumn
sumFlowCounterInOctets = _SumFlowCounterInOctets_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 7, 1, 2),
    _SumFlowCounterInOctets_Type()
)
sumFlowCounterInOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sumFlowCounterInOctets.setStatus("current")
_SumFlowCounterInPkts_Type = Counter64
_SumFlowCounterInPkts_Object = MibTableColumn
sumFlowCounterInPkts = _SumFlowCounterInPkts_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 7, 1, 3),
    _SumFlowCounterInPkts_Type()
)
sumFlowCounterInPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sumFlowCounterInPkts.setStatus("current")
_SumFlowCounterOutOctets_Type = Counter64
_SumFlowCounterOutOctets_Object = MibTableColumn
sumFlowCounterOutOctets = _SumFlowCounterOutOctets_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 7, 1, 4),
    _SumFlowCounterOutOctets_Type()
)
sumFlowCounterOutOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sumFlowCounterOutOctets.setStatus("current")
_SumFlowCounterOutPkts_Type = Counter64
_SumFlowCounterOutPkts_Object = MibTableColumn
sumFlowCounterOutPkts = _SumFlowCounterOutPkts_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 7, 1, 5),
    _SumFlowCounterOutPkts_Type()
)
sumFlowCounterOutPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sumFlowCounterOutPkts.setStatus("current")


class _ClearSumFlowCounter_Type(Integer32):
    """Custom type clearSumFlowCounter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_ClearSumFlowCounter_Type.__name__ = "Integer32"
_ClearSumFlowCounter_Object = MibTableColumn
clearSumFlowCounter = _ClearSumFlowCounter_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 7, 1, 6),
    _ClearSumFlowCounter_Type()
)
clearSumFlowCounter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clearSumFlowCounter.setStatus("current")
_PortUtilTable_Object = MibTable
portUtilTable = _PortUtilTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 10)
)
if mibBuilder.loadTexts:
    portUtilTable.setStatus("current")
_PortUtilEntry_Object = MibTableRow
portUtilEntry = _PortUtilEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 10, 1)
)
portUtilEntry.setIndexNames(
    (0, "NAG-MIB", "portUtilIndex"),
)
if mibBuilder.loadTexts:
    portUtilEntry.setStatus("current")


class _PortUtilIndex_Type(Integer32):
    """Custom type portUtilIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1024),
    )


_PortUtilIndex_Type.__name__ = "Integer32"
_PortUtilIndex_Object = MibTableColumn
portUtilIndex = _PortUtilIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 10, 1, 1),
    _PortUtilIndex_Type()
)
portUtilIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portUtilIndex.setStatus("current")
_WanIfInUtil_Type = Integer32
_WanIfInUtil_Object = MibTableColumn
wanIfInUtil = _WanIfInUtil_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 10, 1, 2),
    _WanIfInUtil_Type()
)
wanIfInUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    wanIfInUtil.setStatus("current")
_WanIfOutUtil_Type = Integer32
_WanIfOutUtil_Object = MibTableColumn
wanIfOutUtil = _WanIfOutUtil_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 10, 1, 3),
    _WanIfOutUtil_Type()
)
wanIfOutUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    wanIfOutUtil.setStatus("current")
_IfBer_Type = Integer32
_IfBer_Object = MibTableColumn
ifBer = _IfBer_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 10, 1, 4),
    _IfBer_Type()
)
ifBer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifBer.setStatus("current")
_IfPaketLostRate_Type = Integer32
_IfPaketLostRate_Object = MibTableColumn
ifPaketLostRate = _IfPaketLostRate_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 10, 1, 5),
    _IfPaketLostRate_Type()
)
ifPaketLostRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifPaketLostRate.setStatus("current")
_PortLEDShutoffTable_ObjectIdentity = ObjectIdentity
portLEDShutoffTable = _PortLEDShutoffTable_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11)
)
_PortLEDTimerange_ObjectIdentity = ObjectIdentity
portLEDTimerange = _PortLEDTimerange_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1)
)
_PortLEDTimeRangeMapTable_Object = MibTable
portLEDTimeRangeMapTable = _PortLEDTimeRangeMapTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 1)
)
if mibBuilder.loadTexts:
    portLEDTimeRangeMapTable.setStatus("current")
_PortLEDTimeRangeMapEntry_Object = MibTableRow
portLEDTimeRangeMapEntry = _PortLEDTimeRangeMapEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 1, 1)
)
portLEDTimeRangeMapEntry.setIndexNames(
    (0, "NAG-MIB", "portLEDTimeRangeMapIndex"),
)
if mibBuilder.loadTexts:
    portLEDTimeRangeMapEntry.setStatus("current")
_PortLEDTimeRangeMapIndex_Type = Integer32
_PortLEDTimeRangeMapIndex_Object = MibTableColumn
portLEDTimeRangeMapIndex = _PortLEDTimeRangeMapIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 1, 1, 1),
    _PortLEDTimeRangeMapIndex_Type()
)
portLEDTimeRangeMapIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portLEDTimeRangeMapIndex.setStatus("current")


class _PortLEDTimeRangeMapName_Type(DisplayString):
    """Custom type portLEDTimeRangeMapName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_PortLEDTimeRangeMapName_Type.__name__ = "DisplayString"
_PortLEDTimeRangeMapName_Object = MibTableColumn
portLEDTimeRangeMapName = _PortLEDTimeRangeMapName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 1, 1, 2),
    _PortLEDTimeRangeMapName_Type()
)
portLEDTimeRangeMapName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portLEDTimeRangeMapName.setStatus("current")


class _PortLEDTimeRangeMapStatus_Type(Integer32):
    """Custom type portLEDTimeRangeMapStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_PortLEDTimeRangeMapStatus_Type.__name__ = "Integer32"
_PortLEDTimeRangeMapStatus_Object = MibTableColumn
portLEDTimeRangeMapStatus = _PortLEDTimeRangeMapStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 1, 1, 3),
    _PortLEDTimeRangeMapStatus_Type()
)
portLEDTimeRangeMapStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portLEDTimeRangeMapStatus.setStatus("current")
_PortLEDTimeRangeTable_Object = MibTable
portLEDTimeRangeTable = _PortLEDTimeRangeTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2)
)
if mibBuilder.loadTexts:
    portLEDTimeRangeTable.setStatus("current")
_PortLEDTimeRangeEntry_Object = MibTableRow
portLEDTimeRangeEntry = _PortLEDTimeRangeEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1)
)
portLEDTimeRangeEntry.setIndexNames(
    (0, "NAG-MIB", "portLEDTimeRangeIndex"),
    (0, "NAG-MIB", "portLEDTimeRangeSubIndex"),
)
if mibBuilder.loadTexts:
    portLEDTimeRangeEntry.setStatus("current")
_PortLEDTimeRangeIndex_Type = Integer32
_PortLEDTimeRangeIndex_Object = MibTableColumn
portLEDTimeRangeIndex = _PortLEDTimeRangeIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 1),
    _PortLEDTimeRangeIndex_Type()
)
portLEDTimeRangeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portLEDTimeRangeIndex.setStatus("current")
_PortLEDTimeRangeSubIndex_Type = Integer32
_PortLEDTimeRangeSubIndex_Object = MibTableColumn
portLEDTimeRangeSubIndex = _PortLEDTimeRangeSubIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 2),
    _PortLEDTimeRangeSubIndex_Type()
)
portLEDTimeRangeSubIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portLEDTimeRangeSubIndex.setStatus("current")


class _PortLEDTimeRangeType_Type(Integer32):
    """Custom type portLEDTimeRangeType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("absolute", 1),
          ("periodic", 2))
    )


_PortLEDTimeRangeType_Type.__name__ = "Integer32"
_PortLEDTimeRangeType_Object = MibTableColumn
portLEDTimeRangeType = _PortLEDTimeRangeType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 3),
    _PortLEDTimeRangeType_Type()
)
portLEDTimeRangeType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portLEDTimeRangeType.setStatus("current")


class _PortLEDTimeRangeStartWeek_Type(Bits):
    """Custom type portLEDTimeRangeStartWeek based on Bits"""
    namedValues = NamedValues(
        *(("monday", 0),
          ("tuesday", 1),
          ("wednesday", 2),
          ("thursday", 3),
          ("friday", 4),
          ("saturday", 5),
          ("sunday", 6))
    )

_PortLEDTimeRangeStartWeek_Type.__name__ = "Bits"
_PortLEDTimeRangeStartWeek_Object = MibTableColumn
portLEDTimeRangeStartWeek = _PortLEDTimeRangeStartWeek_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 4),
    _PortLEDTimeRangeStartWeek_Type()
)
portLEDTimeRangeStartWeek.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portLEDTimeRangeStartWeek.setStatus("current")
_PortLEDTimeRangeStartDate_Type = DisplayString
_PortLEDTimeRangeStartDate_Object = MibTableColumn
portLEDTimeRangeStartDate = _PortLEDTimeRangeStartDate_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 5),
    _PortLEDTimeRangeStartDate_Type()
)
portLEDTimeRangeStartDate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portLEDTimeRangeStartDate.setStatus("current")
_PortLEDTimeRangeStartTime_Type = DisplayString
_PortLEDTimeRangeStartTime_Object = MibTableColumn
portLEDTimeRangeStartTime = _PortLEDTimeRangeStartTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 6),
    _PortLEDTimeRangeStartTime_Type()
)
portLEDTimeRangeStartTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portLEDTimeRangeStartTime.setStatus("current")


class _PortLEDTimeRangeEndWeek_Type(Bits):
    """Custom type portLEDTimeRangeEndWeek based on Bits"""
    namedValues = NamedValues(
        *(("monday", 0),
          ("tuesday", 1),
          ("wednesday", 2),
          ("thursday", 3),
          ("friday", 4),
          ("saturday", 5),
          ("sunday", 6))
    )

_PortLEDTimeRangeEndWeek_Type.__name__ = "Bits"
_PortLEDTimeRangeEndWeek_Object = MibTableColumn
portLEDTimeRangeEndWeek = _PortLEDTimeRangeEndWeek_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 7),
    _PortLEDTimeRangeEndWeek_Type()
)
portLEDTimeRangeEndWeek.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portLEDTimeRangeEndWeek.setStatus("current")
_PortLEDTimeRangeEndDate_Type = DisplayString
_PortLEDTimeRangeEndDate_Object = MibTableColumn
portLEDTimeRangeEndDate = _PortLEDTimeRangeEndDate_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 8),
    _PortLEDTimeRangeEndDate_Type()
)
portLEDTimeRangeEndDate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portLEDTimeRangeEndDate.setStatus("current")
_PortLEDTimeRangeEndTime_Type = DisplayString
_PortLEDTimeRangeEndTime_Object = MibTableColumn
portLEDTimeRangeEndTime = _PortLEDTimeRangeEndTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 9),
    _PortLEDTimeRangeEndTime_Type()
)
portLEDTimeRangeEndTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portLEDTimeRangeEndTime.setStatus("current")


class _PortLEDTimeRangeStatus_Type(Integer32):
    """Custom type portLEDTimeRangeStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_PortLEDTimeRangeStatus_Type.__name__ = "Integer32"
_PortLEDTimeRangeStatus_Object = MibTableColumn
portLEDTimeRangeStatus = _PortLEDTimeRangeStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 1, 2, 1, 10),
    _PortLEDTimeRangeStatus_Type()
)
portLEDTimeRangeStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portLEDTimeRangeStatus.setStatus("current")
_PortLEDConfig_ObjectIdentity = ObjectIdentity
portLEDConfig = _PortLEDConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 2)
)


class _PortLEDTimeRangeName_Type(DisplayString):
    """Custom type portLEDTimeRangeName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_PortLEDTimeRangeName_Type.__name__ = "DisplayString"
_PortLEDTimeRangeName_Object = MibScalar
portLEDTimeRangeName = _PortLEDTimeRangeName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 2, 1),
    _PortLEDTimeRangeName_Type()
)
portLEDTimeRangeName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portLEDTimeRangeName.setStatus("current")


class _PortLEDState_Type(Integer32):
    """Custom type portLEDState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("allOn", 0),
          ("allOff", 1))
    )


_PortLEDState_Type.__name__ = "Integer32"
_PortLEDState_Object = MibScalar
portLEDState = _PortLEDState_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 2, 2),
    _PortLEDState_Type()
)
portLEDState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portLEDState.setStatus("current")


class _PortLEDTimeRangeDelete_Type(Integer32):
    """Custom type portLEDTimeRangeDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_PortLEDTimeRangeDelete_Type.__name__ = "Integer32"
_PortLEDTimeRangeDelete_Object = MibScalar
portLEDTimeRangeDelete = _PortLEDTimeRangeDelete_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 11, 2, 3),
    _PortLEDTimeRangeDelete_Type()
)
portLEDTimeRangeDelete.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    portLEDTimeRangeDelete.setStatus("current")
_PortTruckAllowedVlanTable_Object = MibTable
portTruckAllowedVlanTable = _PortTruckAllowedVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 12)
)
if mibBuilder.loadTexts:
    portTruckAllowedVlanTable.setStatus("current")
_PortTruckAllowedVlanEntry_Object = MibTableRow
portTruckAllowedVlanEntry = _PortTruckAllowedVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 12, 1)
)
portTruckAllowedVlanEntry.setIndexNames(
    (0, "NAG-MIB", "portTruckPortIndex"),
)
if mibBuilder.loadTexts:
    portTruckAllowedVlanEntry.setStatus("current")
_PortTruckPortIndex_Type = Integer32
_PortTruckPortIndex_Object = MibTableColumn
portTruckPortIndex = _PortTruckPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 12, 1, 1),
    _PortTruckPortIndex_Type()
)
portTruckPortIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    portTruckPortIndex.setStatus("current")
_PortTruckAllowedVlan_Type = OctetString
_PortTruckAllowedVlan_Object = MibTableColumn
portTruckAllowedVlan = _PortTruckAllowedVlan_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 12, 1, 2),
    _PortTruckAllowedVlan_Type()
)
portTruckAllowedVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portTruckAllowedVlan.setStatus("current")
_PortTruckAllowedVlanAdd_Type = OctetString
_PortTruckAllowedVlanAdd_Object = MibTableColumn
portTruckAllowedVlanAdd = _PortTruckAllowedVlanAdd_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 12, 1, 3),
    _PortTruckAllowedVlanAdd_Type()
)
portTruckAllowedVlanAdd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portTruckAllowedVlanAdd.setStatus("current")
_PortTruckAllowedVlanExcept_Type = OctetString
_PortTruckAllowedVlanExcept_Object = MibTableColumn
portTruckAllowedVlanExcept = _PortTruckAllowedVlanExcept_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 12, 1, 4),
    _PortTruckAllowedVlanExcept_Type()
)
portTruckAllowedVlanExcept.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portTruckAllowedVlanExcept.setStatus("current")
_PortTruckAllowedVlanRemove_Type = OctetString
_PortTruckAllowedVlanRemove_Object = MibTableColumn
portTruckAllowedVlanRemove = _PortTruckAllowedVlanRemove_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 12, 1, 5),
    _PortTruckAllowedVlanRemove_Type()
)
portTruckAllowedVlanRemove.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portTruckAllowedVlanRemove.setStatus("current")


class _PortTruckAllowedVlanAll_Type(Integer32):
    """Custom type portTruckAllowedVlanAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("all", 1))
    )


_PortTruckAllowedVlanAll_Type.__name__ = "Integer32"
_PortTruckAllowedVlanAll_Object = MibTableColumn
portTruckAllowedVlanAll = _PortTruckAllowedVlanAll_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 12, 1, 6),
    _PortTruckAllowedVlanAll_Type()
)
portTruckAllowedVlanAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portTruckAllowedVlanAll.setStatus("current")
_PortHybridTaggedAllowedVlanTable_Object = MibTable
portHybridTaggedAllowedVlanTable = _PortHybridTaggedAllowedVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 13)
)
if mibBuilder.loadTexts:
    portHybridTaggedAllowedVlanTable.setStatus("current")
_PortHybridTaggedAllowedVlanEntry_Object = MibTableRow
portHybridTaggedAllowedVlanEntry = _PortHybridTaggedAllowedVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 13, 1)
)
portHybridTaggedAllowedVlanEntry.setIndexNames(
    (0, "NAG-MIB", "portHybridTaggedPortIndex"),
)
if mibBuilder.loadTexts:
    portHybridTaggedAllowedVlanEntry.setStatus("current")
_PortHybridTaggedPortIndex_Type = Integer32
_PortHybridTaggedPortIndex_Object = MibTableColumn
portHybridTaggedPortIndex = _PortHybridTaggedPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 13, 1, 1),
    _PortHybridTaggedPortIndex_Type()
)
portHybridTaggedPortIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    portHybridTaggedPortIndex.setStatus("current")
_PortHybridTaggedAllowedVlan_Type = OctetString
_PortHybridTaggedAllowedVlan_Object = MibTableColumn
portHybridTaggedAllowedVlan = _PortHybridTaggedAllowedVlan_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 13, 1, 2),
    _PortHybridTaggedAllowedVlan_Type()
)
portHybridTaggedAllowedVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portHybridTaggedAllowedVlan.setStatus("current")
_PortHybridTaggedAllowedVlanAdd_Type = OctetString
_PortHybridTaggedAllowedVlanAdd_Object = MibTableColumn
portHybridTaggedAllowedVlanAdd = _PortHybridTaggedAllowedVlanAdd_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 13, 1, 3),
    _PortHybridTaggedAllowedVlanAdd_Type()
)
portHybridTaggedAllowedVlanAdd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portHybridTaggedAllowedVlanAdd.setStatus("current")
_PortHybridTaggedAllowedVlanExcept_Type = OctetString
_PortHybridTaggedAllowedVlanExcept_Object = MibTableColumn
portHybridTaggedAllowedVlanExcept = _PortHybridTaggedAllowedVlanExcept_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 13, 1, 4),
    _PortHybridTaggedAllowedVlanExcept_Type()
)
portHybridTaggedAllowedVlanExcept.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portHybridTaggedAllowedVlanExcept.setStatus("current")
_PortHybridTaggedAllowedVlanRemove_Type = OctetString
_PortHybridTaggedAllowedVlanRemove_Object = MibTableColumn
portHybridTaggedAllowedVlanRemove = _PortHybridTaggedAllowedVlanRemove_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 13, 1, 5),
    _PortHybridTaggedAllowedVlanRemove_Type()
)
portHybridTaggedAllowedVlanRemove.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portHybridTaggedAllowedVlanRemove.setStatus("current")


class _PortHybridTaggedAllowedVlanAll_Type(Integer32):
    """Custom type portHybridTaggedAllowedVlanAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("all", 1))
    )


_PortHybridTaggedAllowedVlanAll_Type.__name__ = "Integer32"
_PortHybridTaggedAllowedVlanAll_Object = MibTableColumn
portHybridTaggedAllowedVlanAll = _PortHybridTaggedAllowedVlanAll_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 13, 1, 6),
    _PortHybridTaggedAllowedVlanAll_Type()
)
portHybridTaggedAllowedVlanAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portHybridTaggedAllowedVlanAll.setStatus("current")
_PortHybridUntaggedAllowedVlanTable_Object = MibTable
portHybridUntaggedAllowedVlanTable = _PortHybridUntaggedAllowedVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 14)
)
if mibBuilder.loadTexts:
    portHybridUntaggedAllowedVlanTable.setStatus("current")
_PortHybridUntaggedAllowedVlanEntry_Object = MibTableRow
portHybridUntaggedAllowedVlanEntry = _PortHybridUntaggedAllowedVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 14, 1)
)
portHybridUntaggedAllowedVlanEntry.setIndexNames(
    (0, "NAG-MIB", "portHybridUntaggedPortIndex"),
)
if mibBuilder.loadTexts:
    portHybridUntaggedAllowedVlanEntry.setStatus("current")
_PortHybridUntaggedPortIndex_Type = Integer32
_PortHybridUntaggedPortIndex_Object = MibTableColumn
portHybridUntaggedPortIndex = _PortHybridUntaggedPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 14, 1, 1),
    _PortHybridUntaggedPortIndex_Type()
)
portHybridUntaggedPortIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    portHybridUntaggedPortIndex.setStatus("current")
_PortHybridUntaggedAllowedVlan_Type = OctetString
_PortHybridUntaggedAllowedVlan_Object = MibTableColumn
portHybridUntaggedAllowedVlan = _PortHybridUntaggedAllowedVlan_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 14, 1, 2),
    _PortHybridUntaggedAllowedVlan_Type()
)
portHybridUntaggedAllowedVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portHybridUntaggedAllowedVlan.setStatus("current")
_PortHybridUntaggedAllowedVlanAdd_Type = OctetString
_PortHybridUntaggedAllowedVlanAdd_Object = MibTableColumn
portHybridUntaggedAllowedVlanAdd = _PortHybridUntaggedAllowedVlanAdd_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 14, 1, 3),
    _PortHybridUntaggedAllowedVlanAdd_Type()
)
portHybridUntaggedAllowedVlanAdd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portHybridUntaggedAllowedVlanAdd.setStatus("current")
_PortHybridUntaggedAllowedVlanExcept_Type = OctetString
_PortHybridUntaggedAllowedVlanExcept_Object = MibTableColumn
portHybridUntaggedAllowedVlanExcept = _PortHybridUntaggedAllowedVlanExcept_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 14, 1, 4),
    _PortHybridUntaggedAllowedVlanExcept_Type()
)
portHybridUntaggedAllowedVlanExcept.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portHybridUntaggedAllowedVlanExcept.setStatus("current")
_PortHybridUntaggedAllowedVlanRemove_Type = OctetString
_PortHybridUntaggedAllowedVlanRemove_Object = MibTableColumn
portHybridUntaggedAllowedVlanRemove = _PortHybridUntaggedAllowedVlanRemove_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 14, 1, 5),
    _PortHybridUntaggedAllowedVlanRemove_Type()
)
portHybridUntaggedAllowedVlanRemove.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portHybridUntaggedAllowedVlanRemove.setStatus("current")


class _PortHybridUntaggedAllowedVlanAll_Type(Integer32):
    """Custom type portHybridUntaggedAllowedVlanAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("all", 1))
    )


_PortHybridUntaggedAllowedVlanAll_Type.__name__ = "Integer32"
_PortHybridUntaggedAllowedVlanAll_Object = MibTableColumn
portHybridUntaggedAllowedVlanAll = _PortHybridUntaggedAllowedVlanAll_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 3, 14, 1, 6),
    _PortHybridUntaggedAllowedVlanAll_Type()
)
portHybridUntaggedAllowedVlanAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portHybridUntaggedAllowedVlanAll.setStatus("current")
_PriIpConfig_ObjectIdentity = ObjectIdentity
priIpConfig = _PriIpConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 4)
)
_NetDefaultGateway_Type = IpAddress
_NetDefaultGateway_Object = MibScalar
netDefaultGateway = _NetDefaultGateway_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 1),
    _NetDefaultGateway_Type()
)
netDefaultGateway.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    netDefaultGateway.setStatus("current")


class _IpHttpState_Type(Integer32):
    """Custom type ipHttpState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_IpHttpState_Type.__name__ = "Integer32"
_IpHttpState_Object = MibScalar
ipHttpState = _IpHttpState_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 2),
    _IpHttpState_Type()
)
ipHttpState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipHttpState.setStatus("current")
_IPAddrTable_Object = MibTable
iPAddrTable = _IPAddrTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 3)
)
if mibBuilder.loadTexts:
    iPAddrTable.setStatus("current")
_IPAddrEntry_Object = MibTableRow
iPAddrEntry = _IPAddrEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 3, 1)
)
iPAddrEntry.setIndexNames(
    (0, "NAG-MIB", "iPAddrVid"),
    (0, "NAG-MIB", "iPAddrIPAddress"),
)
if mibBuilder.loadTexts:
    iPAddrEntry.setStatus("current")
_IPAddrVid_Type = Integer32
_IPAddrVid_Object = MibTableColumn
iPAddrVid = _IPAddrVid_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 3, 1, 1),
    _IPAddrVid_Type()
)
iPAddrVid.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    iPAddrVid.setStatus("current")
_IPAddrIPAddress_Type = IpAddress
_IPAddrIPAddress_Object = MibTableColumn
iPAddrIPAddress = _IPAddrIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 3, 1, 2),
    _IPAddrIPAddress_Type()
)
iPAddrIPAddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    iPAddrIPAddress.setStatus("current")
_IPAddrSubnetMask_Type = IpAddress
_IPAddrSubnetMask_Object = MibTableColumn
iPAddrSubnetMask = _IPAddrSubnetMask_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 3, 1, 3),
    _IPAddrSubnetMask_Type()
)
iPAddrSubnetMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    iPAddrSubnetMask.setStatus("current")


class _IPAddrPrimaryInterface_Type(Integer32):
    """Custom type iPAddrPrimaryInterface based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("primary", 0),
          ("secondary", 1))
    )


_IPAddrPrimaryInterface_Type.__name__ = "Integer32"
_IPAddrPrimaryInterface_Object = MibTableColumn
iPAddrPrimaryInterface = _IPAddrPrimaryInterface_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 3, 1, 4),
    _IPAddrPrimaryInterface_Type()
)
iPAddrPrimaryInterface.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    iPAddrPrimaryInterface.setStatus("current")


class _IPAddrStatus_Type(Integer32):
    """Custom type iPAddrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_IPAddrStatus_Type.__name__ = "Integer32"
_IPAddrStatus_Object = MibTableColumn
iPAddrStatus = _IPAddrStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 3, 1, 5),
    _IPAddrStatus_Type()
)
iPAddrStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    iPAddrStatus.setStatus("current")
_InterfaceTable_Object = MibTable
interfaceTable = _InterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 4)
)
if mibBuilder.loadTexts:
    interfaceTable.setStatus("current")
_InterfaceEntry_Object = MibTableRow
interfaceEntry = _InterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 4, 1)
)
interfaceEntry.setIndexNames(
    (0, "NAG-MIB", "intfacetype"),
    (0, "NAG-MIB", "intfaceID"),
)
if mibBuilder.loadTexts:
    interfaceEntry.setStatus("current")


class _Intfacetype_Type(Integer32):
    """Custom type intfacetype based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("vintf", 1),
          ("loopback", 2),
          ("tunnel", 3))
    )


_Intfacetype_Type.__name__ = "Integer32"
_Intfacetype_Object = MibTableColumn
intfacetype = _Intfacetype_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 4, 1, 1),
    _Intfacetype_Type()
)
intfacetype.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    intfacetype.setStatus("current")
_IntfaceID_Type = Integer32
_IntfaceID_Object = MibTableColumn
intfaceID = _IntfaceID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 4, 1, 2),
    _IntfaceID_Type()
)
intfaceID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    intfaceID.setStatus("current")
_IntfaceIndex_Type = Integer32
_IntfaceIndex_Object = MibTableColumn
intfaceIndex = _IntfaceIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 4, 1, 3),
    _IntfaceIndex_Type()
)
intfaceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intfaceIndex.setStatus("current")


class _IntfaceStatus_Type(Integer32):
    """Custom type intfaceStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_IntfaceStatus_Type.__name__ = "Integer32"
_IntfaceStatus_Object = MibTableColumn
intfaceStatus = _IntfaceStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 4, 4, 1, 5),
    _IntfaceStatus_Type()
)
intfaceStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    intfaceStatus.setStatus("current")
_PriVlanConfig_ObjectIdentity = ObjectIdentity
priVlanConfig = _PriVlanConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5)
)
_VlanInfoTable_Object = MibTable
vlanInfoTable = _VlanInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 1)
)
if mibBuilder.loadTexts:
    vlanInfoTable.setStatus("current")
_VlanInfoEntry_Object = MibTableRow
vlanInfoEntry = _VlanInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 1, 1)
)
vlanInfoEntry.setIndexNames(
    (0, "NAG-MIB", "vlanID"),
)
if mibBuilder.loadTexts:
    vlanInfoEntry.setStatus("current")


class _VlanID_Type(Integer32):
    """Custom type vlanID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_VlanID_Type.__name__ = "Integer32"
_VlanID_Object = MibTableColumn
vlanID = _VlanID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 1, 1, 1),
    _VlanID_Type()
)
vlanID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vlanID.setStatus("current")


class _VlanName_Type(DisplayString):
    """Custom type vlanName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_VlanName_Type.__name__ = "DisplayString"
_VlanName_Object = MibTableColumn
vlanName = _VlanName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 1, 1, 2),
    _VlanName_Type()
)
vlanName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vlanName.setStatus("current")


class _VlanPortNumber_Type(Integer32):
    """Custom type vlanPortNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_VlanPortNumber_Type.__name__ = "Integer32"
_VlanPortNumber_Object = MibTableColumn
vlanPortNumber = _VlanPortNumber_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 1, 1, 3),
    _VlanPortNumber_Type()
)
vlanPortNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanPortNumber.setStatus("current")


class _VlanRowStatus_Type(Integer32):
    """Custom type vlanRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_VlanRowStatus_Type.__name__ = "Integer32"
_VlanRowStatus_Object = MibTableColumn
vlanRowStatus = _VlanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 1, 1, 4),
    _VlanRowStatus_Type()
)
vlanRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vlanRowStatus.setStatus("current")
_MvlanInfoTable_Object = MibTable
mvlanInfoTable = _MvlanInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 2)
)
if mibBuilder.loadTexts:
    mvlanInfoTable.setStatus("current")
_MvlanInfoEntry_Object = MibTableRow
mvlanInfoEntry = _MvlanInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 2, 1)
)
mvlanInfoEntry.setIndexNames(
    (0, "NAG-MIB", "mvlanID"),
)
if mibBuilder.loadTexts:
    mvlanInfoEntry.setStatus("current")


class _MvlanID_Type(Integer32):
    """Custom type mvlanID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_MvlanID_Type.__name__ = "Integer32"
_MvlanID_Object = MibTableColumn
mvlanID = _MvlanID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 2, 1, 1),
    _MvlanID_Type()
)
mvlanID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mvlanID.setStatus("current")


class _MvlanStatus_Type(Integer32):
    """Custom type mvlanStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_MvlanStatus_Type.__name__ = "Integer32"
_MvlanStatus_Object = MibTableColumn
mvlanStatus = _MvlanStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 2, 1, 2),
    _MvlanStatus_Type()
)
mvlanStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mvlanStatus.setStatus("current")


class _MvlanAssoVlanList_Type(DisplayString):
    """Custom type mvlanAssoVlanList based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 100),
    )


_MvlanAssoVlanList_Type.__name__ = "DisplayString"
_MvlanAssoVlanList_Object = MibTableColumn
mvlanAssoVlanList = _MvlanAssoVlanList_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 2, 1, 3),
    _MvlanAssoVlanList_Type()
)
mvlanAssoVlanList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mvlanAssoVlanList.setStatus("current")


class _MvlanAssoVlanStatus_Type(Integer32):
    """Custom type mvlanAssoVlanStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_MvlanAssoVlanStatus_Type.__name__ = "Integer32"
_MvlanAssoVlanStatus_Object = MibTableColumn
mvlanAssoVlanStatus = _MvlanAssoVlanStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 2, 1, 4),
    _MvlanAssoVlanStatus_Type()
)
mvlanAssoVlanStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mvlanAssoVlanStatus.setStatus("current")


class _MvlanMode_Type(Integer32):
    """Custom type mvlanMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("dynamic", 1),
          ("compatible", 2))
    )


_MvlanMode_Type.__name__ = "Integer32"
_MvlanMode_Object = MibTableColumn
mvlanMode = _MvlanMode_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 2, 1, 5),
    _MvlanMode_Type()
)
mvlanMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mvlanMode.setStatus("current")
_MvlanPortInfoTable_Object = MibTable
mvlanPortInfoTable = _MvlanPortInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 3)
)
if mibBuilder.loadTexts:
    mvlanPortInfoTable.setStatus("current")
_MvlanPortInfoEntry_Object = MibTableRow
mvlanPortInfoEntry = _MvlanPortInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 3, 1)
)
mvlanPortInfoEntry.setIndexNames(
    (0, "NAG-MIB", "mvlanVId"),
    (0, "NAG-MIB", "mvlanPortIndex"),
)
if mibBuilder.loadTexts:
    mvlanPortInfoEntry.setStatus("current")


class _MvlanVId_Type(Integer32):
    """Custom type mvlanVId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_MvlanVId_Type.__name__ = "Integer32"
_MvlanVId_Object = MibTableColumn
mvlanVId = _MvlanVId_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 3, 1, 1),
    _MvlanVId_Type()
)
mvlanVId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mvlanVId.setStatus("current")
_MvlanPortIndex_Type = Integer32
_MvlanPortIndex_Object = MibTableColumn
mvlanPortIndex = _MvlanPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 3, 1, 2),
    _MvlanPortIndex_Type()
)
mvlanPortIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mvlanPortIndex.setStatus("current")


class _MvlanAssoPortTagid_Type(Integer32):
    """Custom type mvlanAssoPortTagid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_MvlanAssoPortTagid_Type.__name__ = "Integer32"
_MvlanAssoPortTagid_Object = MibTableColumn
mvlanAssoPortTagid = _MvlanAssoPortTagid_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 3, 1, 3),
    _MvlanAssoPortTagid_Type()
)
mvlanAssoPortTagid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mvlanAssoPortTagid.setStatus("current")


class _MvlanPortStatus_Type(Integer32):
    """Custom type mvlanPortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_MvlanPortStatus_Type.__name__ = "Integer32"
_MvlanPortStatus_Object = MibTableColumn
mvlanPortStatus = _MvlanPortStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 3, 1, 4),
    _MvlanPortStatus_Type()
)
mvlanPortStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mvlanPortStatus.setStatus("current")
_VlanFlowCounterTable_Object = MibTable
vlanFlowCounterTable = _VlanFlowCounterTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4)
)
if mibBuilder.loadTexts:
    vlanFlowCounterTable.setStatus("current")
_VlanFlowCounterEntry_Object = MibTableRow
vlanFlowCounterEntry = _VlanFlowCounterEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1)
)
vlanFlowCounterEntry.setIndexNames(
    (0, "NAG-MIB", "vlanID"),
)
if mibBuilder.loadTexts:
    vlanFlowCounterEntry.setStatus("current")


class _VlanFCVlanID_Type(Integer32):
    """Custom type vlanFCVlanID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_VlanFCVlanID_Type.__name__ = "Integer32"
_VlanFCVlanID_Object = MibTableColumn
vlanFCVlanID = _VlanFCVlanID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 1),
    _VlanFCVlanID_Type()
)
vlanFCVlanID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    vlanFCVlanID.setStatus("current")
_VlanInOctets_Type = Counter64
_VlanInOctets_Object = MibTableColumn
vlanInOctets = _VlanInOctets_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 2),
    _VlanInOctets_Type()
)
vlanInOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanInOctets.setStatus("current")
_VlanInUcastPkts_Type = Counter64
_VlanInUcastPkts_Object = MibTableColumn
vlanInUcastPkts = _VlanInUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 3),
    _VlanInUcastPkts_Type()
)
vlanInUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanInUcastPkts.setStatus("current")
_VlanInMulticastPkts_Type = Counter64
_VlanInMulticastPkts_Object = MibTableColumn
vlanInMulticastPkts = _VlanInMulticastPkts_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 4),
    _VlanInMulticastPkts_Type()
)
vlanInMulticastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanInMulticastPkts.setStatus("current")
_VlanInBroadcastPkts_Type = Counter64
_VlanInBroadcastPkts_Object = MibTableColumn
vlanInBroadcastPkts = _VlanInBroadcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 5),
    _VlanInBroadcastPkts_Type()
)
vlanInBroadcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanInBroadcastPkts.setStatus("current")
_VlanOutOctets_Type = Counter64
_VlanOutOctets_Object = MibTableColumn
vlanOutOctets = _VlanOutOctets_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 6),
    _VlanOutOctets_Type()
)
vlanOutOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanOutOctets.setStatus("current")
_VlanOutUcastPkts_Type = Counter64
_VlanOutUcastPkts_Object = MibTableColumn
vlanOutUcastPkts = _VlanOutUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 7),
    _VlanOutUcastPkts_Type()
)
vlanOutUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanOutUcastPkts.setStatus("current")
_VlanOutMulticastPkts_Type = Counter64
_VlanOutMulticastPkts_Object = MibTableColumn
vlanOutMulticastPkts = _VlanOutMulticastPkts_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 8),
    _VlanOutMulticastPkts_Type()
)
vlanOutMulticastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanOutMulticastPkts.setStatus("current")
_VlanOutBroadcastPkts_Type = Counter64
_VlanOutBroadcastPkts_Object = MibTableColumn
vlanOutBroadcastPkts = _VlanOutBroadcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 9),
    _VlanOutBroadcastPkts_Type()
)
vlanOutBroadcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanOutBroadcastPkts.setStatus("current")


class _ClearVlanFlowCounter_Type(Integer32):
    """Custom type clearVlanFlowCounter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_ClearVlanFlowCounter_Type.__name__ = "Integer32"
_ClearVlanFlowCounter_Object = MibTableColumn
clearVlanFlowCounter = _ClearVlanFlowCounter_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 5, 4, 1, 10),
    _ClearVlanFlowCounter_Type()
)
clearVlanFlowCounter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clearVlanFlowCounter.setStatus("current")
_PriJumblyStacking_ObjectIdentity = ObjectIdentity
priJumblyStacking = _PriJumblyStacking_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 6)
)
_SysStackUnitNumber_Type = Integer32
_SysStackUnitNumber_Object = MibScalar
sysStackUnitNumber = _SysStackUnitNumber_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 6, 1),
    _SysStackUnitNumber_Type()
)
sysStackUnitNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysStackUnitNumber.setStatus("current")
_JumblyStackingInfoTable_Object = MibTable
jumblyStackingInfoTable = _JumblyStackingInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 6, 2)
)
if mibBuilder.loadTexts:
    jumblyStackingInfoTable.setStatus("current")
_JumblyStackingInfoEntry_Object = MibTableRow
jumblyStackingInfoEntry = _JumblyStackingInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 6, 2, 1)
)
jumblyStackingInfoEntry.setIndexNames(
    (0, "NAG-MIB", "swUnitIndex"),
)
if mibBuilder.loadTexts:
    jumblyStackingInfoEntry.setStatus("current")
_StackingUnitIndex_Type = Integer32
_StackingUnitIndex_Object = MibTableColumn
stackingUnitIndex = _StackingUnitIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 6, 2, 1, 1),
    _StackingUnitIndex_Type()
)
stackingUnitIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stackingUnitIndex.setStatus("current")


class _SwHardwareVersion_Type(DisplayString):
    """Custom type swHardwareVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_SwHardwareVersion_Type.__name__ = "DisplayString"
_SwHardwareVersion_Object = MibTableColumn
swHardwareVersion = _SwHardwareVersion_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 6, 2, 1, 2),
    _SwHardwareVersion_Type()
)
swHardwareVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    swHardwareVersion.setStatus("current")


class _SwSoftwareVersion_Type(DisplayString):
    """Custom type swSoftwareVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_SwSoftwareVersion_Type.__name__ = "DisplayString"
_SwSoftwareVersion_Object = MibTableColumn
swSoftwareVersion = _SwSoftwareVersion_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 6, 2, 1, 3),
    _SwSoftwareVersion_Type()
)
swSoftwareVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    swSoftwareVersion.setStatus("current")


class _SwCPUMac_Type(MacAddress):
    """Custom type swCPUMac based on MacAddress"""
    subtypeSpec = MacAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_SwCPUMac_Type.__name__ = "MacAddress"
_SwCPUMac_Object = MibTableColumn
swCPUMac = _SwCPUMac_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 6, 2, 1, 4),
    _SwCPUMac_Type()
)
swCPUMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    swCPUMac.setStatus("current")


class _SwType_Type(DisplayString):
    """Custom type swType based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_SwType_Type.__name__ = "DisplayString"
_SwType_Object = MibTableColumn
swType = _SwType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 6, 2, 1, 5),
    _SwType_Type()
)
swType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    swType.setStatus("current")
_PriUamSecurityPortMib_ObjectIdentity = ObjectIdentity
priUamSecurityPortMib = _PriUamSecurityPortMib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 7)
)
_PortSecurityTable_Object = MibTable
portSecurityTable = _PortSecurityTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1)
)
if mibBuilder.loadTexts:
    portSecurityTable.setStatus("current")
_PortSecurityEntry_Object = MibTableRow
portSecurityEntry = _PortSecurityEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1)
)
portSecurityEntry.setIndexNames(
    (0, "NAG-MIB", "psPortIndex"),
)
if mibBuilder.loadTexts:
    portSecurityEntry.setStatus("current")
_PsPortIndex_Type = Integer32
_PsPortIndex_Object = MibTableColumn
psPortIndex = _PsPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1, 1),
    _PsPortIndex_Type()
)
psPortIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    psPortIndex.setStatus("current")


class _PsPortSecurity_Type(Integer32):
    """Custom type psPortSecurity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_PsPortSecurity_Type.__name__ = "Integer32"
_PsPortSecurity_Object = MibTableColumn
psPortSecurity = _PsPortSecurity_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1, 2),
    _PsPortSecurity_Type()
)
psPortSecurity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    psPortSecurity.setStatus("current")


class _PsSecuritytSaticMacAdd_Type(MacAddress):
    """Custom type psSecuritytSaticMacAdd based on MacAddress"""
    subtypeSpec = MacAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_PsSecuritytSaticMacAdd_Type.__name__ = "MacAddress"
_PsSecuritytSaticMacAdd_Object = MibTableColumn
psSecuritytSaticMacAdd = _PsSecuritytSaticMacAdd_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1, 3),
    _PsSecuritytSaticMacAdd_Type()
)
psSecuritytSaticMacAdd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    psSecuritytSaticMacAdd.setStatus("current")


class _PsSecurityStaticMacDel_Type(MacAddress):
    """Custom type psSecurityStaticMacDel based on MacAddress"""
    subtypeSpec = MacAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_PsSecurityStaticMacDel_Type.__name__ = "MacAddress"
_PsSecurityStaticMacDel_Object = MibTableColumn
psSecurityStaticMacDel = _PsSecurityStaticMacDel_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1, 4),
    _PsSecurityStaticMacDel_Type()
)
psSecurityStaticMacDel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    psSecurityStaticMacDel.setStatus("current")


class _PsSecurityPortLock_Type(Integer32):
    """Custom type psSecurityPortLock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("unlock", 0),
          ("lock", 1))
    )


_PsSecurityPortLock_Type.__name__ = "Integer32"
_PsSecurityPortLock_Object = MibTableColumn
psSecurityPortLock = _PsSecurityPortLock_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1, 5),
    _PsSecurityPortLock_Type()
)
psSecurityPortLock.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    psSecurityPortLock.setStatus("current")


class _PsSecurityPortMax_Type(Integer32):
    """Custom type psSecurityPortMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_PsSecurityPortMax_Type.__name__ = "Integer32"
_PsSecurityPortMax_Object = MibTableColumn
psSecurityPortMax = _PsSecurityPortMax_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1, 6),
    _PsSecurityPortMax_Type()
)
psSecurityPortMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    psSecurityPortMax.setStatus("current")


class _PsSecurityPortConvertmac_Type(Integer32):
    """Custom type psSecurityPortConvertmac based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
    )


_PsSecurityPortConvertmac_Type.__name__ = "Integer32"
_PsSecurityPortConvertmac_Object = MibTableColumn
psSecurityPortConvertmac = _PsSecurityPortConvertmac_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1, 7),
    _PsSecurityPortConvertmac_Type()
)
psSecurityPortConvertmac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    psSecurityPortConvertmac.setStatus("current")


class _PsSecurityPortLocktimer_Type(Integer32):
    """Custom type psSecurityPortLocktimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 300),
    )


_PsSecurityPortLocktimer_Type.__name__ = "Integer32"
_PsSecurityPortLocktimer_Object = MibTableColumn
psSecurityPortLocktimer = _PsSecurityPortLocktimer_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 1, 1, 8),
    _PsSecurityPortLocktimer_Type()
)
psSecurityPortLocktimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    psSecurityPortLocktimer.setStatus("current")
_SecurityMacPortTable_Object = MibTable
securityMacPortTable = _SecurityMacPortTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 2)
)
if mibBuilder.loadTexts:
    securityMacPortTable.setStatus("current")
_SecurityMacPortEntry_Object = MibTableRow
securityMacPortEntry = _SecurityMacPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 2, 1)
)
securityMacPortEntry.setIndexNames(
    (0, "NAG-MIB", "secPortIndex"),
    (0, "NAG-MIB", "secMacAdress"),
)
if mibBuilder.loadTexts:
    securityMacPortEntry.setStatus("current")
_SecPortIndex_Type = Integer32
_SecPortIndex_Object = MibTableColumn
secPortIndex = _SecPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 2, 1, 1),
    _SecPortIndex_Type()
)
secPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    secPortIndex.setStatus("current")


class _SecMacAdress_Type(MacAddress):
    """Custom type secMacAdress based on MacAddress"""
    subtypeSpec = MacAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_SecMacAdress_Type.__name__ = "MacAddress"
_SecMacAdress_Object = MibTableColumn
secMacAdress = _SecMacAdress_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 2, 1, 2),
    _SecMacAdress_Type()
)
secMacAdress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    secMacAdress.setStatus("current")
_SecVid_Type = Integer32
_SecVid_Object = MibTableColumn
secVid = _SecVid_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 7, 2, 1, 3),
    _SecVid_Type()
)
secVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    secVid.setStatus("current")
_PriIgmpSnoopingMib_ObjectIdentity = ObjectIdentity
priIgmpSnoopingMib = _PriIgmpSnoopingMib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8)
)


class _PriIgmpSnoopingGlobalEnable_Type(Integer32):
    """Custom type priIgmpSnoopingGlobalEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_PriIgmpSnoopingGlobalEnable_Type.__name__ = "Integer32"
_PriIgmpSnoopingGlobalEnable_Object = MibScalar
priIgmpSnoopingGlobalEnable = _PriIgmpSnoopingGlobalEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 1),
    _PriIgmpSnoopingGlobalEnable_Type()
)
priIgmpSnoopingGlobalEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priIgmpSnoopingGlobalEnable.setStatus("current")
_PriIgmpSnoopingVlanTable_Object = MibTable
priIgmpSnoopingVlanTable = _PriIgmpSnoopingVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2)
)
if mibBuilder.loadTexts:
    priIgmpSnoopingVlanTable.setStatus("current")
_PriIgmpSnoopingEntry_Object = MibTableRow
priIgmpSnoopingEntry = _PriIgmpSnoopingEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1)
)
priIgmpSnoopingEntry.setIndexNames(
    (0, "NAG-MIB", "priIgmpSnoopingvlanID"),
)
if mibBuilder.loadTexts:
    priIgmpSnoopingEntry.setStatus("current")
_PriIgmpSnoopingvlanID_Type = Integer32
_PriIgmpSnoopingvlanID_Object = MibTableColumn
priIgmpSnoopingvlanID = _PriIgmpSnoopingvlanID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 1),
    _PriIgmpSnoopingvlanID_Type()
)
priIgmpSnoopingvlanID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    priIgmpSnoopingvlanID.setStatus("current")


class _PriIgmpSnoopingvlanEnable_Type(Integer32):
    """Custom type priIgmpSnoopingvlanEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_PriIgmpSnoopingvlanEnable_Type.__name__ = "Integer32"
_PriIgmpSnoopingvlanEnable_Object = MibTableColumn
priIgmpSnoopingvlanEnable = _PriIgmpSnoopingvlanEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 2),
    _PriIgmpSnoopingvlanEnable_Type()
)
priIgmpSnoopingvlanEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priIgmpSnoopingvlanEnable.setStatus("current")


class _PriIgmpSnoopingleave_Type(Integer32):
    """Custom type priIgmpSnoopingleave based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no-immediate-leave", 0),
          ("immediate-leave", 1))
    )


_PriIgmpSnoopingleave_Type.__name__ = "Integer32"
_PriIgmpSnoopingleave_Object = MibTableColumn
priIgmpSnoopingleave = _PriIgmpSnoopingleave_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 3),
    _PriIgmpSnoopingleave_Type()
)
priIgmpSnoopingleave.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priIgmpSnoopingleave.setStatus("current")


class _PriIgmpSnoopingL2gen_Type(Integer32):
    """Custom type priIgmpSnoopingL2gen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no-l2-general-querier", 0),
          ("l2-general-querier", 1))
    )


_PriIgmpSnoopingL2gen_Type.__name__ = "Integer32"
_PriIgmpSnoopingL2gen_Object = MibTableColumn
priIgmpSnoopingL2gen = _PriIgmpSnoopingL2gen_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 4),
    _PriIgmpSnoopingL2gen_Type()
)
priIgmpSnoopingL2gen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priIgmpSnoopingL2gen.setStatus("current")


class _PriIgmpSnoopingGroupNum_Type(Integer32):
    """Custom type priIgmpSnoopingGroupNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_PriIgmpSnoopingGroupNum_Type.__name__ = "Integer32"
_PriIgmpSnoopingGroupNum_Object = MibTableColumn
priIgmpSnoopingGroupNum = _PriIgmpSnoopingGroupNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 5),
    _PriIgmpSnoopingGroupNum_Type()
)
priIgmpSnoopingGroupNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priIgmpSnoopingGroupNum.setStatus("current")


class _PriIgmpSnoopingSourceNum_Type(Integer32):
    """Custom type priIgmpSnoopingSourceNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_PriIgmpSnoopingSourceNum_Type.__name__ = "Integer32"
_PriIgmpSnoopingSourceNum_Object = MibTableColumn
priIgmpSnoopingSourceNum = _PriIgmpSnoopingSourceNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 6),
    _PriIgmpSnoopingSourceNum_Type()
)
priIgmpSnoopingSourceNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priIgmpSnoopingSourceNum.setStatus("current")


class _PriIgmpSnoopingPort_Type(OctetString):
    """Custom type priIgmpSnoopingPort based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_PriIgmpSnoopingPort_Type.__name__ = "OctetString"
_PriIgmpSnoopingPort_Object = MibTableColumn
priIgmpSnoopingPort = _PriIgmpSnoopingPort_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 7),
    _PriIgmpSnoopingPort_Type()
)
priIgmpSnoopingPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priIgmpSnoopingPort.setStatus("current")


class _PriIgmpSnoopingNoPort_Type(OctetString):
    """Custom type priIgmpSnoopingNoPort based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_PriIgmpSnoopingNoPort_Type.__name__ = "OctetString"
_PriIgmpSnoopingNoPort_Object = MibTableColumn
priIgmpSnoopingNoPort = _PriIgmpSnoopingNoPort_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 8),
    _PriIgmpSnoopingNoPort_Type()
)
priIgmpSnoopingNoPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priIgmpSnoopingNoPort.setStatus("current")


class _PriIgmpSnoopingPortTime_Type(Integer32):
    """Custom type priIgmpSnoopingPortTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_PriIgmpSnoopingPortTime_Type.__name__ = "Integer32"
_PriIgmpSnoopingPortTime_Object = MibTableColumn
priIgmpSnoopingPortTime = _PriIgmpSnoopingPortTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 9),
    _PriIgmpSnoopingPortTime_Type()
)
priIgmpSnoopingPortTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priIgmpSnoopingPortTime.setStatus("current")


class _PriIgmpSnoopingQueryInterval_Type(Integer32):
    """Custom type priIgmpSnoopingQueryInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_PriIgmpSnoopingQueryInterval_Type.__name__ = "Integer32"
_PriIgmpSnoopingQueryInterval_Object = MibTableColumn
priIgmpSnoopingQueryInterval = _PriIgmpSnoopingQueryInterval_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 10),
    _PriIgmpSnoopingQueryInterval_Type()
)
priIgmpSnoopingQueryInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priIgmpSnoopingQueryInterval.setStatus("current")


class _PriIgmpSnoopingQueryMrsp_Type(Integer32):
    """Custom type priIgmpSnoopingQueryMrsp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 25),
    )


_PriIgmpSnoopingQueryMrsp_Type.__name__ = "Integer32"
_PriIgmpSnoopingQueryMrsp_Object = MibTableColumn
priIgmpSnoopingQueryMrsp = _PriIgmpSnoopingQueryMrsp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 11),
    _PriIgmpSnoopingQueryMrsp_Type()
)
priIgmpSnoopingQueryMrsp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priIgmpSnoopingQueryMrsp.setStatus("current")


class _PriIgmpSnoopingQueryRobustness_Type(Integer32):
    """Custom type priIgmpSnoopingQueryRobustness based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 10),
    )


_PriIgmpSnoopingQueryRobustness_Type.__name__ = "Integer32"
_PriIgmpSnoopingQueryRobustness_Object = MibTableColumn
priIgmpSnoopingQueryRobustness = _PriIgmpSnoopingQueryRobustness_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 12),
    _PriIgmpSnoopingQueryRobustness_Type()
)
priIgmpSnoopingQueryRobustness.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priIgmpSnoopingQueryRobustness.setStatus("current")


class _PriIgmpSnoopingSuppression_Type(Integer32):
    """Custom type priIgmpSnoopingSuppression based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_PriIgmpSnoopingSuppression_Type.__name__ = "Integer32"
_PriIgmpSnoopingSuppression_Object = MibTableColumn
priIgmpSnoopingSuppression = _PriIgmpSnoopingSuppression_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 2, 1, 13),
    _PriIgmpSnoopingSuppression_Type()
)
priIgmpSnoopingSuppression.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priIgmpSnoopingSuppression.setStatus("current")
_PriIgmpSnoopingBindTable_Object = MibTable
priIgmpSnoopingBindTable = _PriIgmpSnoopingBindTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 3)
)
if mibBuilder.loadTexts:
    priIgmpSnoopingBindTable.setStatus("current")
_PriIgmpSnoopingBindEntry_Object = MibTableRow
priIgmpSnoopingBindEntry = _PriIgmpSnoopingBindEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 3, 1)
)
priIgmpSnoopingBindEntry.setIndexNames(
    (0, "NAG-MIB", "priIgmpSnoopingVlanID"),
    (0, "NAG-MIB", "priIgmpSnoopingGroupAddress"),
)
if mibBuilder.loadTexts:
    priIgmpSnoopingBindEntry.setStatus("current")
_PriIgmpSnoopingVlanID_Type = Integer32
_PriIgmpSnoopingVlanID_Object = MibTableColumn
priIgmpSnoopingVlanID = _PriIgmpSnoopingVlanID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 3, 1, 1),
    _PriIgmpSnoopingVlanID_Type()
)
priIgmpSnoopingVlanID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    priIgmpSnoopingVlanID.setStatus("current")
_PriIgmpSnoopingGroupAddress_Type = IpAddress
_PriIgmpSnoopingGroupAddress_Object = MibTableColumn
priIgmpSnoopingGroupAddress = _PriIgmpSnoopingGroupAddress_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 3, 1, 2),
    _PriIgmpSnoopingGroupAddress_Type()
)
priIgmpSnoopingGroupAddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    priIgmpSnoopingGroupAddress.setStatus("current")
_PriIgmpSnoopingPortBitmap_Type = OctetString
_PriIgmpSnoopingPortBitmap_Object = MibTableColumn
priIgmpSnoopingPortBitmap = _PriIgmpSnoopingPortBitmap_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 3, 1, 3),
    _PriIgmpSnoopingPortBitmap_Type()
)
priIgmpSnoopingPortBitmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    priIgmpSnoopingPortBitmap.setStatus("current")
_PriIgmpSnoopingLimitPortTable_Object = MibTable
priIgmpSnoopingLimitPortTable = _PriIgmpSnoopingLimitPortTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 4)
)
if mibBuilder.loadTexts:
    priIgmpSnoopingLimitPortTable.setStatus("current")
_PriIgmpSnoopingLimitPortEntry_Object = MibTableRow
priIgmpSnoopingLimitPortEntry = _PriIgmpSnoopingLimitPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 4, 1)
)
priIgmpSnoopingLimitPortEntry.setIndexNames(
    (0, "NAG-MIB", "priIgmpSnoopingLimitVlanID"),
    (0, "NAG-MIB", "priIgmpSnoopingLimitPortIndex"),
)
if mibBuilder.loadTexts:
    priIgmpSnoopingLimitPortEntry.setStatus("current")
_PriIgmpSnoopingLimitVlanID_Type = Integer32
_PriIgmpSnoopingLimitVlanID_Object = MibTableColumn
priIgmpSnoopingLimitVlanID = _PriIgmpSnoopingLimitVlanID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 4, 1, 1),
    _PriIgmpSnoopingLimitVlanID_Type()
)
priIgmpSnoopingLimitVlanID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    priIgmpSnoopingLimitVlanID.setStatus("current")
_PriIgmpSnoopingLimitPortIndex_Type = Integer32
_PriIgmpSnoopingLimitPortIndex_Object = MibTableColumn
priIgmpSnoopingLimitPortIndex = _PriIgmpSnoopingLimitPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 4, 1, 2),
    _PriIgmpSnoopingLimitPortIndex_Type()
)
priIgmpSnoopingLimitPortIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    priIgmpSnoopingLimitPortIndex.setStatus("current")


class _PriIgmpSnoopingLimitPortGroupNum_Type(Integer32):
    """Custom type priIgmpSnoopingLimitPortGroupNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_PriIgmpSnoopingLimitPortGroupNum_Type.__name__ = "Integer32"
_PriIgmpSnoopingLimitPortGroupNum_Object = MibTableColumn
priIgmpSnoopingLimitPortGroupNum = _PriIgmpSnoopingLimitPortGroupNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 4, 1, 3),
    _PriIgmpSnoopingLimitPortGroupNum_Type()
)
priIgmpSnoopingLimitPortGroupNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priIgmpSnoopingLimitPortGroupNum.setStatus("current")


class _PriIgmpSnoopingLimitPortSourceNum_Type(Integer32):
    """Custom type priIgmpSnoopingLimitPortSourceNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_PriIgmpSnoopingLimitPortSourceNum_Type.__name__ = "Integer32"
_PriIgmpSnoopingLimitPortSourceNum_Object = MibTableColumn
priIgmpSnoopingLimitPortSourceNum = _PriIgmpSnoopingLimitPortSourceNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 4, 1, 4),
    _PriIgmpSnoopingLimitPortSourceNum_Type()
)
priIgmpSnoopingLimitPortSourceNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priIgmpSnoopingLimitPortSourceNum.setStatus("current")


class _PriIgmpSnoopingLimitPortStrategy_Type(Integer32):
    """Custom type priIgmpSnoopingLimitPortStrategy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("replace", 1),
          ("drop", 2))
    )


_PriIgmpSnoopingLimitPortStrategy_Type.__name__ = "Integer32"
_PriIgmpSnoopingLimitPortStrategy_Object = MibTableColumn
priIgmpSnoopingLimitPortStrategy = _PriIgmpSnoopingLimitPortStrategy_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 4, 1, 5),
    _PriIgmpSnoopingLimitPortStrategy_Type()
)
priIgmpSnoopingLimitPortStrategy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priIgmpSnoopingLimitPortStrategy.setStatus("current")


class _PriIgmpSnoopingLimitPortStatus_Type(Integer32):
    """Custom type priIgmpSnoopingLimitPortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_PriIgmpSnoopingLimitPortStatus_Type.__name__ = "Integer32"
_PriIgmpSnoopingLimitPortStatus_Object = MibTableColumn
priIgmpSnoopingLimitPortStatus = _PriIgmpSnoopingLimitPortStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 4, 1, 6),
    _PriIgmpSnoopingLimitPortStatus_Type()
)
priIgmpSnoopingLimitPortStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priIgmpSnoopingLimitPortStatus.setStatus("current")
_PriIgmpSnoopingPortCtrlPktTable_Object = MibTable
priIgmpSnoopingPortCtrlPktTable = _PriIgmpSnoopingPortCtrlPktTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 5)
)
if mibBuilder.loadTexts:
    priIgmpSnoopingPortCtrlPktTable.setStatus("current")
_PriIgmpSnoopingPortCtrlPktEntry_Object = MibTableRow
priIgmpSnoopingPortCtrlPktEntry = _PriIgmpSnoopingPortCtrlPktEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 5, 1)
)
priIgmpSnoopingPortCtrlPktEntry.setIndexNames(
    (0, "NAG-MIB", "priIgmpSnoopingPortCtrlPktDrop"),
)
if mibBuilder.loadTexts:
    priIgmpSnoopingPortCtrlPktEntry.setStatus("current")


class _PriIgmpSnoopingPortCtrlPktDrop_Type(Integer32):
    """Custom type priIgmpSnoopingPortCtrlPktDrop based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("query", 1),
          ("report", 2),
          ("query-and-report", 3),
          ("no-query", 4),
          ("no-report", 5))
    )


_PriIgmpSnoopingPortCtrlPktDrop_Type.__name__ = "Integer32"
_PriIgmpSnoopingPortCtrlPktDrop_Object = MibTableColumn
priIgmpSnoopingPortCtrlPktDrop = _PriIgmpSnoopingPortCtrlPktDrop_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 5, 1, 1),
    _PriIgmpSnoopingPortCtrlPktDrop_Type()
)
priIgmpSnoopingPortCtrlPktDrop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priIgmpSnoopingPortCtrlPktDrop.setStatus("current")
_PriIgmpSnoopingPortAuthTable_Object = MibTable
priIgmpSnoopingPortAuthTable = _PriIgmpSnoopingPortAuthTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 6)
)
if mibBuilder.loadTexts:
    priIgmpSnoopingPortAuthTable.setStatus("current")
_PriIgmpSnoopingPortAuthEntry_Object = MibTableRow
priIgmpSnoopingPortAuthEntry = _PriIgmpSnoopingPortAuthEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 6, 1)
)
priIgmpSnoopingPortAuthEntry.setIndexNames(
    (0, "NAG-MIB", "priIgmpSnoopingPortAuthEnable"),
)
if mibBuilder.loadTexts:
    priIgmpSnoopingPortAuthEntry.setStatus("current")


class _PriIgmpSnoopingPortAuthEnable_Type(Integer32):
    """Custom type priIgmpSnoopingPortAuthEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_PriIgmpSnoopingPortAuthEnable_Type.__name__ = "Integer32"
_PriIgmpSnoopingPortAuthEnable_Object = MibTableColumn
priIgmpSnoopingPortAuthEnable = _PriIgmpSnoopingPortAuthEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 6, 1, 1),
    _PriIgmpSnoopingPortAuthEnable_Type()
)
priIgmpSnoopingPortAuthEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priIgmpSnoopingPortAuthEnable.setStatus("current")


class _PriIgmpSnoopingPortAuthFreeRule_Type(OctetString):
    """Custom type priIgmpSnoopingPortAuthFreeRule based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_PriIgmpSnoopingPortAuthFreeRule_Type.__name__ = "OctetString"
_PriIgmpSnoopingPortAuthFreeRule_Object = MibTableColumn
priIgmpSnoopingPortAuthFreeRule = _PriIgmpSnoopingPortAuthFreeRule_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 8, 6, 1, 2),
    _PriIgmpSnoopingPortAuthFreeRule_Type()
)
priIgmpSnoopingPortAuthFreeRule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    priIgmpSnoopingPortAuthFreeRule.setStatus("current")
_PriQinQmib_ObjectIdentity = ObjectIdentity
priQinQmib = _PriQinQmib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 9)
)
_Dot1qTunnelTable_Object = MibTable
dot1qTunnelTable = _Dot1qTunnelTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 1)
)
if mibBuilder.loadTexts:
    dot1qTunnelTable.setStatus("current")
_Dot1qTunnelEntry_Object = MibTableRow
dot1qTunnelEntry = _Dot1qTunnelEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 1, 1)
)
dot1qTunnelEntry.setIndexNames(
    (0, "NAG-MIB", "qinqPortIndex"),
)
if mibBuilder.loadTexts:
    dot1qTunnelEntry.setStatus("current")
_QinqPortIndex_Type = Integer32
_QinqPortIndex_Object = MibTableColumn
qinqPortIndex = _QinqPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 1, 1, 1),
    _QinqPortIndex_Type()
)
qinqPortIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    qinqPortIndex.setStatus("current")


class _TunnelPortEnable_Type(Integer32):
    """Custom type tunnelPortEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_TunnelPortEnable_Type.__name__ = "Integer32"
_TunnelPortEnable_Object = MibTableColumn
tunnelPortEnable = _TunnelPortEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 1, 1, 2),
    _TunnelPortEnable_Type()
)
tunnelPortEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tunnelPortEnable.setStatus("current")
_TunnelPortType_Type = Integer32
_TunnelPortType_Object = MibTableColumn
tunnelPortType = _TunnelPortType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 1, 1, 3),
    _TunnelPortType_Type()
)
tunnelPortType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tunnelPortType.setStatus("current")
_VlanTranslationTable_Object = MibTable
vlanTranslationTable = _VlanTranslationTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 2)
)
if mibBuilder.loadTexts:
    vlanTranslationTable.setStatus("current")
_VlanTranslationEntry_Object = MibTableRow
vlanTranslationEntry = _VlanTranslationEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 2, 1)
)
vlanTranslationEntry.setIndexNames(
    (0, "NAG-MIB", "translatPortIndex"),
)
if mibBuilder.loadTexts:
    vlanTranslationEntry.setStatus("current")
_TranslatPortIndex_Type = Integer32
_TranslatPortIndex_Object = MibTableColumn
translatPortIndex = _TranslatPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 2, 1, 1),
    _TranslatPortIndex_Type()
)
translatPortIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    translatPortIndex.setStatus("current")


class _TranslationEnable_Type(Integer32):
    """Custom type translationEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_TranslationEnable_Type.__name__ = "Integer32"
_TranslationEnable_Object = MibTableColumn
translationEnable = _TranslationEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 2, 1, 2),
    _TranslationEnable_Type()
)
translationEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    translationEnable.setStatus("current")


class _TranslationDropType_Type(Integer32):
    """Custom type translationDropType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("in", 1),
          ("out", 2),
          ("both", 3),
          ("noIn", 4),
          ("noOut", 5),
          ("noBoth", 6))
    )


_TranslationDropType_Type.__name__ = "Integer32"
_TranslationDropType_Object = MibTableColumn
translationDropType = _TranslationDropType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 2, 1, 3),
    _TranslationDropType_Type()
)
translationDropType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    translationDropType.setStatus("current")
_VlanTranslationTypeTable_Object = MibTable
vlanTranslationTypeTable = _VlanTranslationTypeTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 3)
)
if mibBuilder.loadTexts:
    vlanTranslationTypeTable.setStatus("current")
_VlanTranslationTypeEntry_Object = MibTableRow
vlanTranslationTypeEntry = _VlanTranslationTypeEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 3, 1)
)
vlanTranslationTypeEntry.setIndexNames(
    (0, "NAG-MIB", "translatPortTypeIndex"),
    (0, "NAG-MIB", "translationType"),
    (0, "NAG-MIB", "translationOldVlanid"),
    (0, "NAG-MIB", "translationNewVlanid"),
)
if mibBuilder.loadTexts:
    vlanTranslationTypeEntry.setStatus("current")
_TranslatPortTypeIndex_Type = Integer32
_TranslatPortTypeIndex_Object = MibTableColumn
translatPortTypeIndex = _TranslatPortTypeIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 3, 1, 1),
    _TranslatPortTypeIndex_Type()
)
translatPortTypeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    translatPortTypeIndex.setStatus("current")


class _TranslationType_Type(Integer32):
    """Custom type translationType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("in", 1),
          ("out", 2))
    )


_TranslationType_Type.__name__ = "Integer32"
_TranslationType_Object = MibTableColumn
translationType = _TranslationType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 3, 1, 2),
    _TranslationType_Type()
)
translationType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    translationType.setStatus("current")


class _TranslationOldVlanid_Type(Integer32):
    """Custom type translationOldVlanid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_TranslationOldVlanid_Type.__name__ = "Integer32"
_TranslationOldVlanid_Object = MibTableColumn
translationOldVlanid = _TranslationOldVlanid_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 3, 1, 3),
    _TranslationOldVlanid_Type()
)
translationOldVlanid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    translationOldVlanid.setStatus("current")


class _TranslationNewVlanid_Type(Integer32):
    """Custom type translationNewVlanid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_TranslationNewVlanid_Type.__name__ = "Integer32"
_TranslationNewVlanid_Object = MibTableColumn
translationNewVlanid = _TranslationNewVlanid_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 3, 1, 4),
    _TranslationNewVlanid_Type()
)
translationNewVlanid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    translationNewVlanid.setStatus("current")


class _TranslationTypeStatus_Type(Integer32):
    """Custom type translationTypeStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_TranslationTypeStatus_Type.__name__ = "Integer32"
_TranslationTypeStatus_Object = MibTableColumn
translationTypeStatus = _TranslationTypeStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 9, 3, 1, 5),
    _TranslationTypeStatus_Type()
)
translationTypeStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    translationTypeStatus.setStatus("current")
_Prisecurity_ObjectIdentity = ObjectIdentity
prisecurity = _Prisecurity_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10)
)
_Acl_ObjectIdentity = ObjectIdentity
acl = _Acl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1)
)
_FireWall_ObjectIdentity = ObjectIdentity
fireWall = _FireWall_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 1)
)


class _FireWallEnable_Type(Integer32):
    """Custom type fireWallEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_FireWallEnable_Type.__name__ = "Integer32"
_FireWallEnable_Object = MibScalar
fireWallEnable = _FireWallEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 1, 1),
    _FireWallEnable_Type()
)
fireWallEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fireWallEnable.setStatus("current")
_TimeRange_ObjectIdentity = ObjectIdentity
timeRange = _TimeRange_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2)
)
_TimeRangeMapTable_Object = MibTable
timeRangeMapTable = _TimeRangeMapTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 1)
)
if mibBuilder.loadTexts:
    timeRangeMapTable.setStatus("current")
_TimeRangeMapEntry_Object = MibTableRow
timeRangeMapEntry = _TimeRangeMapEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 1, 1)
)
timeRangeMapEntry.setIndexNames(
    (0, "NAG-MIB", "timeRangeMapIndex"),
)
if mibBuilder.loadTexts:
    timeRangeMapEntry.setStatus("current")
_TimeRangeMapIndex_Type = Integer32
_TimeRangeMapIndex_Object = MibTableColumn
timeRangeMapIndex = _TimeRangeMapIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 1, 1, 1),
    _TimeRangeMapIndex_Type()
)
timeRangeMapIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    timeRangeMapIndex.setStatus("current")


class _TimeRangeMapName_Type(DisplayString):
    """Custom type timeRangeMapName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_TimeRangeMapName_Type.__name__ = "DisplayString"
_TimeRangeMapName_Object = MibTableColumn
timeRangeMapName = _TimeRangeMapName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 1, 1, 2),
    _TimeRangeMapName_Type()
)
timeRangeMapName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    timeRangeMapName.setStatus("current")


class _TimeRangeMapStatus_Type(Integer32):
    """Custom type timeRangeMapStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_TimeRangeMapStatus_Type.__name__ = "Integer32"
_TimeRangeMapStatus_Object = MibTableColumn
timeRangeMapStatus = _TimeRangeMapStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 1, 1, 3),
    _TimeRangeMapStatus_Type()
)
timeRangeMapStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    timeRangeMapStatus.setStatus("current")
_TimeRangeTable_Object = MibTable
timeRangeTable = _TimeRangeTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2)
)
if mibBuilder.loadTexts:
    timeRangeTable.setStatus("current")
_TimeRangeEntry_Object = MibTableRow
timeRangeEntry = _TimeRangeEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1)
)
timeRangeEntry.setIndexNames(
    (0, "NAG-MIB", "timeRangeIndex"),
    (0, "NAG-MIB", "timeRangeSubIndex"),
)
if mibBuilder.loadTexts:
    timeRangeEntry.setStatus("current")
_TimeRangeIndex_Type = Integer32
_TimeRangeIndex_Object = MibTableColumn
timeRangeIndex = _TimeRangeIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 1),
    _TimeRangeIndex_Type()
)
timeRangeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    timeRangeIndex.setStatus("current")
_TimeRangeSubIndex_Type = Integer32
_TimeRangeSubIndex_Object = MibTableColumn
timeRangeSubIndex = _TimeRangeSubIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 2),
    _TimeRangeSubIndex_Type()
)
timeRangeSubIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    timeRangeSubIndex.setStatus("current")


class _TimeRangeType_Type(Integer32):
    """Custom type timeRangeType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("absolute", 1),
          ("periodic", 2))
    )


_TimeRangeType_Type.__name__ = "Integer32"
_TimeRangeType_Object = MibTableColumn
timeRangeType = _TimeRangeType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 3),
    _TimeRangeType_Type()
)
timeRangeType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    timeRangeType.setStatus("current")


class _TimeRangeStartWeek_Type(Bits):
    """Custom type timeRangeStartWeek based on Bits"""
    namedValues = NamedValues(
        *(("monday", 0),
          ("tuesday", 1),
          ("wednesday", 2),
          ("thursday", 3),
          ("friday", 4),
          ("saturday", 5),
          ("sunday", 6))
    )

_TimeRangeStartWeek_Type.__name__ = "Bits"
_TimeRangeStartWeek_Object = MibTableColumn
timeRangeStartWeek = _TimeRangeStartWeek_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 4),
    _TimeRangeStartWeek_Type()
)
timeRangeStartWeek.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    timeRangeStartWeek.setStatus("current")
_TimeRangeStartDate_Type = DisplayString
_TimeRangeStartDate_Object = MibTableColumn
timeRangeStartDate = _TimeRangeStartDate_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 5),
    _TimeRangeStartDate_Type()
)
timeRangeStartDate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    timeRangeStartDate.setStatus("current")
_TimeRangeStartTime_Type = DisplayString
_TimeRangeStartTime_Object = MibTableColumn
timeRangeStartTime = _TimeRangeStartTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 6),
    _TimeRangeStartTime_Type()
)
timeRangeStartTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    timeRangeStartTime.setStatus("current")


class _TimeRangeEndWeek_Type(Bits):
    """Custom type timeRangeEndWeek based on Bits"""
    namedValues = NamedValues(
        *(("monday", 0),
          ("tuesday", 1),
          ("wednesday", 2),
          ("thursday", 3),
          ("friday", 4),
          ("saturday", 5),
          ("sunday", 6))
    )

_TimeRangeEndWeek_Type.__name__ = "Bits"
_TimeRangeEndWeek_Object = MibTableColumn
timeRangeEndWeek = _TimeRangeEndWeek_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 7),
    _TimeRangeEndWeek_Type()
)
timeRangeEndWeek.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    timeRangeEndWeek.setStatus("current")
_TimeRangeEndDate_Type = DisplayString
_TimeRangeEndDate_Object = MibTableColumn
timeRangeEndDate = _TimeRangeEndDate_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 8),
    _TimeRangeEndDate_Type()
)
timeRangeEndDate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    timeRangeEndDate.setStatus("current")
_TimeRangeEndTime_Type = DisplayString
_TimeRangeEndTime_Object = MibTableColumn
timeRangeEndTime = _TimeRangeEndTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 9),
    _TimeRangeEndTime_Type()
)
timeRangeEndTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    timeRangeEndTime.setStatus("current")


class _TimeRangeStatus_Type(Integer32):
    """Custom type timeRangeStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_TimeRangeStatus_Type.__name__ = "Integer32"
_TimeRangeStatus_Object = MibTableColumn
timeRangeStatus = _TimeRangeStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 2, 2, 1, 10),
    _TimeRangeStatus_Type()
)
timeRangeStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    timeRangeStatus.setStatus("current")
_AclConfig_ObjectIdentity = ObjectIdentity
aclConfig = _AclConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3)
)
_NumAclGroupTable_Object = MibTable
numAclGroupTable = _NumAclGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 1)
)
if mibBuilder.loadTexts:
    numAclGroupTable.setStatus("current")
_NumAclGroupEntry_Object = MibTableRow
numAclGroupEntry = _NumAclGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 1, 1)
)
numAclGroupEntry.setIndexNames(
    (0, "NAG-MIB", "numAclGroupAclIndex"),
)
if mibBuilder.loadTexts:
    numAclGroupEntry.setStatus("current")
_NumAclGroupAclIndex_Type = Integer32
_NumAclGroupAclIndex_Object = MibTableColumn
numAclGroupAclIndex = _NumAclGroupAclIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 1, 1, 1),
    _NumAclGroupAclIndex_Type()
)
numAclGroupAclIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    numAclGroupAclIndex.setStatus("current")


class _NumAclGroupMatchOrder_Type(Integer32):
    """Custom type numAclGroupMatchOrder based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("autoPriority", 0),
          ("configPriority", 1))
    )


_NumAclGroupMatchOrder_Type.__name__ = "Integer32"
_NumAclGroupMatchOrder_Object = MibTableColumn
numAclGroupMatchOrder = _NumAclGroupMatchOrder_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 1, 1, 2),
    _NumAclGroupMatchOrder_Type()
)
numAclGroupMatchOrder.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    numAclGroupMatchOrder.setStatus("current")
_NumAclGroupSubitemNum_Type = Integer32
_NumAclGroupSubitemNum_Object = MibTableColumn
numAclGroupSubitemNum = _NumAclGroupSubitemNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 1, 1, 3),
    _NumAclGroupSubitemNum_Type()
)
numAclGroupSubitemNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    numAclGroupSubitemNum.setStatus("current")


class _NumAclGroupStatus_Type(Integer32):
    """Custom type numAclGroupStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_NumAclGroupStatus_Type.__name__ = "Integer32"
_NumAclGroupStatus_Object = MibTableColumn
numAclGroupStatus = _NumAclGroupStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 1, 1, 4),
    _NumAclGroupStatus_Type()
)
numAclGroupStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    numAclGroupStatus.setStatus("current")
_NameAclGroupTable_Object = MibTable
nameAclGroupTable = _NameAclGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 2)
)
if mibBuilder.loadTexts:
    nameAclGroupTable.setStatus("current")
_NameAclGroupEntry_Object = MibTableRow
nameAclGroupEntry = _NameAclGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 2, 1)
)
nameAclGroupEntry.setIndexNames(
    (0, "NAG-MIB", "nameAclGroupAclIndex"),
)
if mibBuilder.loadTexts:
    nameAclGroupEntry.setStatus("current")
_NameAclGroupAclIndex_Type = Integer32
_NameAclGroupAclIndex_Object = MibTableColumn
nameAclGroupAclIndex = _NameAclGroupAclIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 2, 1, 1),
    _NameAclGroupAclIndex_Type()
)
nameAclGroupAclIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nameAclGroupAclIndex.setStatus("current")


class _NameAclGroupAclName_Type(DisplayString):
    """Custom type nameAclGroupAclName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_NameAclGroupAclName_Type.__name__ = "DisplayString"
_NameAclGroupAclName_Object = MibTableColumn
nameAclGroupAclName = _NameAclGroupAclName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 2, 1, 2),
    _NameAclGroupAclName_Type()
)
nameAclGroupAclName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    nameAclGroupAclName.setStatus("current")


class _NameAclGroupAclType_Type(Integer32):
    """Custom type nameAclGroupAclType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("ipStandard", 0),
          ("ipExtern", 1),
          ("macStandard", 2),
          ("macExtern", 3),
          ("macIpExtern", 4),
          ("macIpStandard", 5),
          ("ipv6Standard", 6),
          ("ipv6Extern", 7))
    )


_NameAclGroupAclType_Type.__name__ = "Integer32"
_NameAclGroupAclType_Object = MibTableColumn
nameAclGroupAclType = _NameAclGroupAclType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 2, 1, 3),
    _NameAclGroupAclType_Type()
)
nameAclGroupAclType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    nameAclGroupAclType.setStatus("current")


class _NameAclGroupMatchOrder_Type(Integer32):
    """Custom type nameAclGroupMatchOrder based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("autoPriority", 0),
          ("configPriority", 1))
    )


_NameAclGroupMatchOrder_Type.__name__ = "Integer32"
_NameAclGroupMatchOrder_Object = MibTableColumn
nameAclGroupMatchOrder = _NameAclGroupMatchOrder_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 2, 1, 4),
    _NameAclGroupMatchOrder_Type()
)
nameAclGroupMatchOrder.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    nameAclGroupMatchOrder.setStatus("current")
_NameAclGroupSubitemNum_Type = Integer32
_NameAclGroupSubitemNum_Object = MibTableColumn
nameAclGroupSubitemNum = _NameAclGroupSubitemNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 2, 1, 5),
    _NameAclGroupSubitemNum_Type()
)
nameAclGroupSubitemNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nameAclGroupSubitemNum.setStatus("current")


class _NameAclGroupStatus_Type(Integer32):
    """Custom type nameAclGroupStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_NameAclGroupStatus_Type.__name__ = "Integer32"
_NameAclGroupStatus_Object = MibTableColumn
nameAclGroupStatus = _NameAclGroupStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 2, 1, 6),
    _NameAclGroupStatus_Type()
)
nameAclGroupStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    nameAclGroupStatus.setStatus("current")
_IpStandardAclTable_Object = MibTable
ipStandardAclTable = _IpStandardAclTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3)
)
if mibBuilder.loadTexts:
    ipStandardAclTable.setStatus("current")
_IpStandardAclEntry_Object = MibTableRow
ipStandardAclEntry = _IpStandardAclEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3, 1)
)
ipStandardAclEntry.setIndexNames(
    (0, "NAG-MIB", "ipStandardIndex"),
    (0, "NAG-MIB", "ipStandardSubIndex"),
)
if mibBuilder.loadTexts:
    ipStandardAclEntry.setStatus("current")
_IpStandardIndex_Type = Integer32
_IpStandardIndex_Object = MibTableColumn
ipStandardIndex = _IpStandardIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3, 1, 1),
    _IpStandardIndex_Type()
)
ipStandardIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStandardIndex.setStatus("current")
_IpStandardSubIndex_Type = Integer32
_IpStandardSubIndex_Object = MibTableColumn
ipStandardSubIndex = _IpStandardSubIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3, 1, 2),
    _IpStandardSubIndex_Type()
)
ipStandardSubIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStandardSubIndex.setStatus("current")
_IpStandardPriority_Type = Integer32
_IpStandardPriority_Object = MibTableColumn
ipStandardPriority = _IpStandardPriority_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3, 1, 3),
    _IpStandardPriority_Type()
)
ipStandardPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipStandardPriority.setStatus("current")


class _IpStandardAct_Type(Integer32):
    """Custom type ipStandardAct based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("deny", 0),
          ("permit", 1))
    )


_IpStandardAct_Type.__name__ = "Integer32"
_IpStandardAct_Object = MibTableColumn
ipStandardAct = _IpStandardAct_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3, 1, 4),
    _IpStandardAct_Type()
)
ipStandardAct.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipStandardAct.setStatus("current")
_IpStandardSrcIp_Type = IpAddress
_IpStandardSrcIp_Object = MibTableColumn
ipStandardSrcIp = _IpStandardSrcIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3, 1, 5),
    _IpStandardSrcIp_Type()
)
ipStandardSrcIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipStandardSrcIp.setStatus("current")
_IpStandardSrcIpWild_Type = IpAddress
_IpStandardSrcIpWild_Object = MibTableColumn
ipStandardSrcIpWild = _IpStandardSrcIpWild_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3, 1, 6),
    _IpStandardSrcIpWild_Type()
)
ipStandardSrcIpWild.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipStandardSrcIpWild.setStatus("current")


class _IpStandardStatus_Type(Integer32):
    """Custom type ipStandardStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_IpStandardStatus_Type.__name__ = "Integer32"
_IpStandardStatus_Object = MibTableColumn
ipStandardStatus = _IpStandardStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 3, 1, 7),
    _IpStandardStatus_Type()
)
ipStandardStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipStandardStatus.setStatus("current")
_IpExternAclTable_Object = MibTable
ipExternAclTable = _IpExternAclTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4)
)
if mibBuilder.loadTexts:
    ipExternAclTable.setStatus("current")
_IpExternAclEntry_Object = MibTableRow
ipExternAclEntry = _IpExternAclEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1)
)
ipExternAclEntry.setIndexNames(
    (0, "NAG-MIB", "ipExternIndex"),
    (0, "NAG-MIB", "ipExternSubIndex"),
)
if mibBuilder.loadTexts:
    ipExternAclEntry.setStatus("current")
_IpExternIndex_Type = Integer32
_IpExternIndex_Object = MibTableColumn
ipExternIndex = _IpExternIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 1),
    _IpExternIndex_Type()
)
ipExternIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipExternIndex.setStatus("current")
_IpExternSubIndex_Type = Integer32
_IpExternSubIndex_Object = MibTableColumn
ipExternSubIndex = _IpExternSubIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 2),
    _IpExternSubIndex_Type()
)
ipExternSubIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipExternSubIndex.setStatus("current")
_IpExternPriority_Type = Integer32
_IpExternPriority_Object = MibTableColumn
ipExternPriority = _IpExternPriority_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 3),
    _IpExternPriority_Type()
)
ipExternPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipExternPriority.setStatus("current")


class _IpExternAct_Type(Integer32):
    """Custom type ipExternAct based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("deny", 0),
          ("permit", 1))
    )


_IpExternAct_Type.__name__ = "Integer32"
_IpExternAct_Object = MibTableColumn
ipExternAct = _IpExternAct_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 4),
    _IpExternAct_Type()
)
ipExternAct.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipExternAct.setStatus("current")


class _IpExternProtocal_Type(Integer32):
    """Custom type ipExternProtocal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
        ValueRangeConstraint(65535, 65535),
    )


_IpExternProtocal_Type.__name__ = "Integer32"
_IpExternProtocal_Object = MibTableColumn
ipExternProtocal = _IpExternProtocal_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 5),
    _IpExternProtocal_Type()
)
ipExternProtocal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipExternProtocal.setStatus("current")
_IpExternSrcIp_Type = IpAddress
_IpExternSrcIp_Object = MibTableColumn
ipExternSrcIp = _IpExternSrcIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 6),
    _IpExternSrcIp_Type()
)
ipExternSrcIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipExternSrcIp.setStatus("current")
_IpExternSrcIpWild_Type = IpAddress
_IpExternSrcIpWild_Object = MibTableColumn
ipExternSrcIpWild = _IpExternSrcIpWild_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 7),
    _IpExternSrcIpWild_Type()
)
ipExternSrcIpWild.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipExternSrcIpWild.setStatus("current")
_IpExternDstIp_Type = IpAddress
_IpExternDstIp_Object = MibTableColumn
ipExternDstIp = _IpExternDstIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 8),
    _IpExternDstIp_Type()
)
ipExternDstIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipExternDstIp.setStatus("current")
_IpExternDstIpWild_Type = IpAddress
_IpExternDstIpWild_Object = MibTableColumn
ipExternDstIpWild = _IpExternDstIpWild_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 9),
    _IpExternDstIpWild_Type()
)
ipExternDstIpWild.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipExternDstIpWild.setStatus("current")


class _IpExternTimeRangeName_Type(DisplayString):
    """Custom type ipExternTimeRangeName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_IpExternTimeRangeName_Type.__name__ = "DisplayString"
_IpExternTimeRangeName_Object = MibTableColumn
ipExternTimeRangeName = _IpExternTimeRangeName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 10),
    _IpExternTimeRangeName_Type()
)
ipExternTimeRangeName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipExternTimeRangeName.setStatus("current")


class _IpExternSrcOp_Type(Integer32):
    """Custom type ipExternSrcOp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noOperator", 0),
          ("eq", 1),
          ("range", 2))
    )


_IpExternSrcOp_Type.__name__ = "Integer32"
_IpExternSrcOp_Object = MibTableColumn
ipExternSrcOp = _IpExternSrcOp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 11),
    _IpExternSrcOp_Type()
)
ipExternSrcOp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipExternSrcOp.setStatus("current")


class _IpExternSrcPort1_Type(Integer32):
    """Custom type ipExternSrcPort1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_IpExternSrcPort1_Type.__name__ = "Integer32"
_IpExternSrcPort1_Object = MibTableColumn
ipExternSrcPort1 = _IpExternSrcPort1_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 12),
    _IpExternSrcPort1_Type()
)
ipExternSrcPort1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipExternSrcPort1.setStatus("current")


class _IpExternSrcPort2_Type(Integer32):
    """Custom type ipExternSrcPort2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_IpExternSrcPort2_Type.__name__ = "Integer32"
_IpExternSrcPort2_Object = MibTableColumn
ipExternSrcPort2 = _IpExternSrcPort2_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 13),
    _IpExternSrcPort2_Type()
)
ipExternSrcPort2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipExternSrcPort2.setStatus("current")


class _IpExternDstOp_Type(Integer32):
    """Custom type ipExternDstOp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noOperator", 0),
          ("eq", 1),
          ("range", 2))
    )


_IpExternDstOp_Type.__name__ = "Integer32"
_IpExternDstOp_Object = MibTableColumn
ipExternDstOp = _IpExternDstOp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 14),
    _IpExternDstOp_Type()
)
ipExternDstOp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipExternDstOp.setStatus("current")


class _IpExternDstPort1_Type(Integer32):
    """Custom type ipExternDstPort1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_IpExternDstPort1_Type.__name__ = "Integer32"
_IpExternDstPort1_Object = MibTableColumn
ipExternDstPort1 = _IpExternDstPort1_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 15),
    _IpExternDstPort1_Type()
)
ipExternDstPort1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipExternDstPort1.setStatus("current")


class _IpExternDstPort2_Type(Integer32):
    """Custom type ipExternDstPort2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_IpExternDstPort2_Type.__name__ = "Integer32"
_IpExternDstPort2_Object = MibTableColumn
ipExternDstPort2 = _IpExternDstPort2_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 16),
    _IpExternDstPort2_Type()
)
ipExternDstPort2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipExternDstPort2.setStatus("current")


class _IpExternStatus_Type(Integer32):
    """Custom type ipExternStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_IpExternStatus_Type.__name__ = "Integer32"
_IpExternStatus_Object = MibTableColumn
ipExternStatus = _IpExternStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 4, 1, 17),
    _IpExternStatus_Type()
)
ipExternStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipExternStatus.setStatus("current")
_MacStandardAclTable_Object = MibTable
macStandardAclTable = _MacStandardAclTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5)
)
if mibBuilder.loadTexts:
    macStandardAclTable.setStatus("current")
_MacStandardAclEntry_Object = MibTableRow
macStandardAclEntry = _MacStandardAclEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5, 1)
)
macStandardAclEntry.setIndexNames(
    (0, "NAG-MIB", "macStandardIndex"),
    (0, "NAG-MIB", "macStandardSubIndex"),
)
if mibBuilder.loadTexts:
    macStandardAclEntry.setStatus("current")
_MacStandardIndex_Type = Integer32
_MacStandardIndex_Object = MibTableColumn
macStandardIndex = _MacStandardIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5, 1, 1),
    _MacStandardIndex_Type()
)
macStandardIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macStandardIndex.setStatus("current")
_MacStandardSubIndex_Type = Integer32
_MacStandardSubIndex_Object = MibTableColumn
macStandardSubIndex = _MacStandardSubIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5, 1, 2),
    _MacStandardSubIndex_Type()
)
macStandardSubIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macStandardSubIndex.setStatus("current")
_MacStandardPriority_Type = Integer32
_MacStandardPriority_Object = MibTableColumn
macStandardPriority = _MacStandardPriority_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5, 1, 3),
    _MacStandardPriority_Type()
)
macStandardPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macStandardPriority.setStatus("current")


class _MacStandardAct_Type(Integer32):
    """Custom type macStandardAct based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("deny", 0),
          ("permit", 1))
    )


_MacStandardAct_Type.__name__ = "Integer32"
_MacStandardAct_Object = MibTableColumn
macStandardAct = _MacStandardAct_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5, 1, 4),
    _MacStandardAct_Type()
)
macStandardAct.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macStandardAct.setStatus("current")


class _MacStandardSrcMac_Type(DisplayString):
    """Custom type macStandardSrcMac based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_MacStandardSrcMac_Type.__name__ = "DisplayString"
_MacStandardSrcMac_Object = MibTableColumn
macStandardSrcMac = _MacStandardSrcMac_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5, 1, 5),
    _MacStandardSrcMac_Type()
)
macStandardSrcMac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macStandardSrcMac.setStatus("current")


class _MacStandardSrcMacWild_Type(DisplayString):
    """Custom type macStandardSrcMacWild based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_MacStandardSrcMacWild_Type.__name__ = "DisplayString"
_MacStandardSrcMacWild_Object = MibTableColumn
macStandardSrcMacWild = _MacStandardSrcMacWild_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5, 1, 6),
    _MacStandardSrcMacWild_Type()
)
macStandardSrcMacWild.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macStandardSrcMacWild.setStatus("current")


class _MacStandardStatus_Type(Integer32):
    """Custom type macStandardStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_MacStandardStatus_Type.__name__ = "Integer32"
_MacStandardStatus_Object = MibTableColumn
macStandardStatus = _MacStandardStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 5, 1, 7),
    _MacStandardStatus_Type()
)
macStandardStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macStandardStatus.setStatus("current")
_MacExternAclTable_Object = MibTable
macExternAclTable = _MacExternAclTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6)
)
if mibBuilder.loadTexts:
    macExternAclTable.setStatus("current")
_MacExternAclEntry_Object = MibTableRow
macExternAclEntry = _MacExternAclEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1)
)
macExternAclEntry.setIndexNames(
    (0, "NAG-MIB", "macExternIndex"),
    (0, "NAG-MIB", "macExternSubIndex"),
)
if mibBuilder.loadTexts:
    macExternAclEntry.setStatus("current")
_MacExternIndex_Type = Integer32
_MacExternIndex_Object = MibTableColumn
macExternIndex = _MacExternIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 1),
    _MacExternIndex_Type()
)
macExternIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macExternIndex.setStatus("current")
_MacExternSubIndex_Type = Integer32
_MacExternSubIndex_Object = MibTableColumn
macExternSubIndex = _MacExternSubIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 2),
    _MacExternSubIndex_Type()
)
macExternSubIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macExternSubIndex.setStatus("current")
_MacExternPriority_Type = Integer32
_MacExternPriority_Object = MibTableColumn
macExternPriority = _MacExternPriority_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 3),
    _MacExternPriority_Type()
)
macExternPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macExternPriority.setStatus("current")


class _MacExternAct_Type(Integer32):
    """Custom type macExternAct based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("deny", 0),
          ("permit", 1))
    )


_MacExternAct_Type.__name__ = "Integer32"
_MacExternAct_Object = MibTableColumn
macExternAct = _MacExternAct_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 4),
    _MacExternAct_Type()
)
macExternAct.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macExternAct.setStatus("current")


class _MacExternSrcMac_Type(DisplayString):
    """Custom type macExternSrcMac based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_MacExternSrcMac_Type.__name__ = "DisplayString"
_MacExternSrcMac_Object = MibTableColumn
macExternSrcMac = _MacExternSrcMac_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 5),
    _MacExternSrcMac_Type()
)
macExternSrcMac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macExternSrcMac.setStatus("current")


class _MacExternSrcMacWild_Type(DisplayString):
    """Custom type macExternSrcMacWild based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_MacExternSrcMacWild_Type.__name__ = "DisplayString"
_MacExternSrcMacWild_Object = MibTableColumn
macExternSrcMacWild = _MacExternSrcMacWild_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 6),
    _MacExternSrcMacWild_Type()
)
macExternSrcMacWild.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macExternSrcMacWild.setStatus("current")


class _MacExternDstMac_Type(DisplayString):
    """Custom type macExternDstMac based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_MacExternDstMac_Type.__name__ = "DisplayString"
_MacExternDstMac_Object = MibTableColumn
macExternDstMac = _MacExternDstMac_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 7),
    _MacExternDstMac_Type()
)
macExternDstMac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macExternDstMac.setStatus("current")


class _MacExternDstMacWild_Type(DisplayString):
    """Custom type macExternDstMacWild based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_MacExternDstMacWild_Type.__name__ = "DisplayString"
_MacExternDstMacWild_Object = MibTableColumn
macExternDstMacWild = _MacExternDstMacWild_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 8),
    _MacExternDstMacWild_Type()
)
macExternDstMacWild.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macExternDstMacWild.setStatus("current")
_MacExternPacketType_Type = Integer32
_MacExternPacketType_Object = MibTableColumn
macExternPacketType = _MacExternPacketType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 9),
    _MacExternPacketType_Type()
)
macExternPacketType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macExternPacketType.setStatus("current")


class _MacExternEtherType_Type(Integer32):
    """Custom type macExternEtherType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1536, 65535),
    )


_MacExternEtherType_Type.__name__ = "Integer32"
_MacExternEtherType_Object = MibTableColumn
macExternEtherType = _MacExternEtherType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 10),
    _MacExternEtherType_Type()
)
macExternEtherType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macExternEtherType.setStatus("current")


class _MacExternEtherTypeWild_Type(Integer32):
    """Custom type macExternEtherTypeWild based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_MacExternEtherTypeWild_Type.__name__ = "Integer32"
_MacExternEtherTypeWild_Object = MibTableColumn
macExternEtherTypeWild = _MacExternEtherTypeWild_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 11),
    _MacExternEtherTypeWild_Type()
)
macExternEtherTypeWild.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macExternEtherTypeWild.setStatus("current")


class _MacExternCos_Type(Integer32):
    """Custom type macExternCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_MacExternCos_Type.__name__ = "Integer32"
_MacExternCos_Object = MibTableColumn
macExternCos = _MacExternCos_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 12),
    _MacExternCos_Type()
)
macExternCos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macExternCos.setStatus("current")


class _MacExternCosWild_Type(Integer32):
    """Custom type macExternCosWild based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_MacExternCosWild_Type.__name__ = "Integer32"
_MacExternCosWild_Object = MibTableColumn
macExternCosWild = _MacExternCosWild_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 13),
    _MacExternCosWild_Type()
)
macExternCosWild.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macExternCosWild.setStatus("current")


class _MacExternVlanId_Type(Integer32):
    """Custom type macExternVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_MacExternVlanId_Type.__name__ = "Integer32"
_MacExternVlanId_Object = MibTableColumn
macExternVlanId = _MacExternVlanId_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 14),
    _MacExternVlanId_Type()
)
macExternVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macExternVlanId.setStatus("current")


class _MacExternVlanIdWild_Type(Integer32):
    """Custom type macExternVlanIdWild based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_MacExternVlanIdWild_Type.__name__ = "Integer32"
_MacExternVlanIdWild_Object = MibTableColumn
macExternVlanIdWild = _MacExternVlanIdWild_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 15),
    _MacExternVlanIdWild_Type()
)
macExternVlanIdWild.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macExternVlanIdWild.setStatus("current")


class _MacExternStatus_Type(Integer32):
    """Custom type macExternStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_MacExternStatus_Type.__name__ = "Integer32"
_MacExternStatus_Object = MibTableColumn
macExternStatus = _MacExternStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 6, 1, 16),
    _MacExternStatus_Type()
)
macExternStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macExternStatus.setStatus("current")
_Ipv6StandardAclTable_Object = MibTable
ipv6StandardAclTable = _Ipv6StandardAclTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7)
)
if mibBuilder.loadTexts:
    ipv6StandardAclTable.setStatus("current")
_Ipv6StandardAclEntry_Object = MibTableRow
ipv6StandardAclEntry = _Ipv6StandardAclEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7, 1)
)
ipv6StandardAclEntry.setIndexNames(
    (0, "NAG-MIB", "ipv6StandardIndex"),
    (0, "NAG-MIB", "ipv6StandardSubIndex"),
)
if mibBuilder.loadTexts:
    ipv6StandardAclEntry.setStatus("current")
_Ipv6StandardIndex_Type = Integer32
_Ipv6StandardIndex_Object = MibTableColumn
ipv6StandardIndex = _Ipv6StandardIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7, 1, 1),
    _Ipv6StandardIndex_Type()
)
ipv6StandardIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6StandardIndex.setStatus("current")
_Ipv6StandardSubIndex_Type = Integer32
_Ipv6StandardSubIndex_Object = MibTableColumn
ipv6StandardSubIndex = _Ipv6StandardSubIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7, 1, 2),
    _Ipv6StandardSubIndex_Type()
)
ipv6StandardSubIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6StandardSubIndex.setStatus("current")
_Ipv6StandardPriority_Type = Integer32
_Ipv6StandardPriority_Object = MibTableColumn
ipv6StandardPriority = _Ipv6StandardPriority_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7, 1, 3),
    _Ipv6StandardPriority_Type()
)
ipv6StandardPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6StandardPriority.setStatus("current")


class _Ipv6StandardAct_Type(Integer32):
    """Custom type ipv6StandardAct based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("deny", 0),
          ("permit", 1))
    )


_Ipv6StandardAct_Type.__name__ = "Integer32"
_Ipv6StandardAct_Object = MibTableColumn
ipv6StandardAct = _Ipv6StandardAct_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7, 1, 4),
    _Ipv6StandardAct_Type()
)
ipv6StandardAct.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6StandardAct.setStatus("current")


class _Ipv6StandardSrcIp_Type(DisplayString):
    """Custom type ipv6StandardSrcIp based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 40),
    )


_Ipv6StandardSrcIp_Type.__name__ = "DisplayString"
_Ipv6StandardSrcIp_Object = MibTableColumn
ipv6StandardSrcIp = _Ipv6StandardSrcIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7, 1, 5),
    _Ipv6StandardSrcIp_Type()
)
ipv6StandardSrcIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6StandardSrcIp.setStatus("current")


class _Ipv6StandardSrcPrefixLen_Type(Integer32):
    """Custom type ipv6StandardSrcPrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_Ipv6StandardSrcPrefixLen_Type.__name__ = "Integer32"
_Ipv6StandardSrcPrefixLen_Object = MibTableColumn
ipv6StandardSrcPrefixLen = _Ipv6StandardSrcPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7, 1, 6),
    _Ipv6StandardSrcPrefixLen_Type()
)
ipv6StandardSrcPrefixLen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6StandardSrcPrefixLen.setStatus("current")


class _Ipv6StandardStatus_Type(Integer32):
    """Custom type ipv6StandardStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_Ipv6StandardStatus_Type.__name__ = "Integer32"
_Ipv6StandardStatus_Object = MibTableColumn
ipv6StandardStatus = _Ipv6StandardStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 7, 1, 7),
    _Ipv6StandardStatus_Type()
)
ipv6StandardStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6StandardStatus.setStatus("current")
_Ipv6ExternAclTable_Object = MibTable
ipv6ExternAclTable = _Ipv6ExternAclTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8)
)
if mibBuilder.loadTexts:
    ipv6ExternAclTable.setStatus("current")
_Ipv6ExternAclEntry_Object = MibTableRow
ipv6ExternAclEntry = _Ipv6ExternAclEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1)
)
ipv6ExternAclEntry.setIndexNames(
    (0, "NAG-MIB", "ipv6ExternIndex"),
    (0, "NAG-MIB", "ipv6ExternSubIndex"),
)
if mibBuilder.loadTexts:
    ipv6ExternAclEntry.setStatus("current")
_Ipv6ExternIndex_Type = Integer32
_Ipv6ExternIndex_Object = MibTableColumn
ipv6ExternIndex = _Ipv6ExternIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 1),
    _Ipv6ExternIndex_Type()
)
ipv6ExternIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6ExternIndex.setStatus("current")
_Ipv6ExternSubIndex_Type = Integer32
_Ipv6ExternSubIndex_Object = MibTableColumn
ipv6ExternSubIndex = _Ipv6ExternSubIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 2),
    _Ipv6ExternSubIndex_Type()
)
ipv6ExternSubIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6ExternSubIndex.setStatus("current")
_Ipv6ExternPriority_Type = Integer32
_Ipv6ExternPriority_Object = MibTableColumn
ipv6ExternPriority = _Ipv6ExternPriority_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 3),
    _Ipv6ExternPriority_Type()
)
ipv6ExternPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6ExternPriority.setStatus("current")


class _Ipv6ExternAct_Type(Integer32):
    """Custom type ipv6ExternAct based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("deny", 0),
          ("permit", 1))
    )


_Ipv6ExternAct_Type.__name__ = "Integer32"
_Ipv6ExternAct_Object = MibTableColumn
ipv6ExternAct = _Ipv6ExternAct_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 4),
    _Ipv6ExternAct_Type()
)
ipv6ExternAct.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6ExternAct.setStatus("current")


class _Ipv6ExternProtocal_Type(Integer32):
    """Custom type ipv6ExternProtocal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_Ipv6ExternProtocal_Type.__name__ = "Integer32"
_Ipv6ExternProtocal_Object = MibTableColumn
ipv6ExternProtocal = _Ipv6ExternProtocal_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 5),
    _Ipv6ExternProtocal_Type()
)
ipv6ExternProtocal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6ExternProtocal.setStatus("current")


class _Ipv6ExternSrcIp_Type(DisplayString):
    """Custom type ipv6ExternSrcIp based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 40),
    )


_Ipv6ExternSrcIp_Type.__name__ = "DisplayString"
_Ipv6ExternSrcIp_Object = MibTableColumn
ipv6ExternSrcIp = _Ipv6ExternSrcIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 6),
    _Ipv6ExternSrcIp_Type()
)
ipv6ExternSrcIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6ExternSrcIp.setStatus("current")


class _Ipv6ExternSrcPreLen_Type(Integer32):
    """Custom type ipv6ExternSrcPreLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_Ipv6ExternSrcPreLen_Type.__name__ = "Integer32"
_Ipv6ExternSrcPreLen_Object = MibTableColumn
ipv6ExternSrcPreLen = _Ipv6ExternSrcPreLen_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 7),
    _Ipv6ExternSrcPreLen_Type()
)
ipv6ExternSrcPreLen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6ExternSrcPreLen.setStatus("current")


class _Ipv6ExternDstIp_Type(DisplayString):
    """Custom type ipv6ExternDstIp based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 40),
    )


_Ipv6ExternDstIp_Type.__name__ = "DisplayString"
_Ipv6ExternDstIp_Object = MibTableColumn
ipv6ExternDstIp = _Ipv6ExternDstIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 8),
    _Ipv6ExternDstIp_Type()
)
ipv6ExternDstIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6ExternDstIp.setStatus("current")


class _Ipv6ExternDstPreLen_Type(Integer32):
    """Custom type ipv6ExternDstPreLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_Ipv6ExternDstPreLen_Type.__name__ = "Integer32"
_Ipv6ExternDstPreLen_Object = MibTableColumn
ipv6ExternDstPreLen = _Ipv6ExternDstPreLen_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 9),
    _Ipv6ExternDstPreLen_Type()
)
ipv6ExternDstPreLen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6ExternDstPreLen.setStatus("current")
_Ipv6ExternTimeRangeName_Type = DisplayString
_Ipv6ExternTimeRangeName_Object = MibTableColumn
ipv6ExternTimeRangeName = _Ipv6ExternTimeRangeName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 10),
    _Ipv6ExternTimeRangeName_Type()
)
ipv6ExternTimeRangeName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6ExternTimeRangeName.setStatus("current")


class _Ipv6ExternSrcOp_Type(Integer32):
    """Custom type ipv6ExternSrcOp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              3,
              5)
        )
    )
    namedValues = NamedValues(
        *(("noOperator", 0),
          ("eq", 3),
          ("range", 5))
    )


_Ipv6ExternSrcOp_Type.__name__ = "Integer32"
_Ipv6ExternSrcOp_Object = MibTableColumn
ipv6ExternSrcOp = _Ipv6ExternSrcOp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 11),
    _Ipv6ExternSrcOp_Type()
)
ipv6ExternSrcOp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6ExternSrcOp.setStatus("current")


class _Ipv6ExternSrcPort1_Type(Integer32):
    """Custom type ipv6ExternSrcPort1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Ipv6ExternSrcPort1_Type.__name__ = "Integer32"
_Ipv6ExternSrcPort1_Object = MibTableColumn
ipv6ExternSrcPort1 = _Ipv6ExternSrcPort1_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 12),
    _Ipv6ExternSrcPort1_Type()
)
ipv6ExternSrcPort1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6ExternSrcPort1.setStatus("current")


class _Ipv6ExternSrcPort2_Type(Integer32):
    """Custom type ipv6ExternSrcPort2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Ipv6ExternSrcPort2_Type.__name__ = "Integer32"
_Ipv6ExternSrcPort2_Object = MibTableColumn
ipv6ExternSrcPort2 = _Ipv6ExternSrcPort2_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 13),
    _Ipv6ExternSrcPort2_Type()
)
ipv6ExternSrcPort2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6ExternSrcPort2.setStatus("current")


class _Ipv6ExternDstOp_Type(Integer32):
    """Custom type ipv6ExternDstOp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              3,
              5)
        )
    )
    namedValues = NamedValues(
        *(("noOperator", 0),
          ("eq", 3),
          ("range", 5))
    )


_Ipv6ExternDstOp_Type.__name__ = "Integer32"
_Ipv6ExternDstOp_Object = MibTableColumn
ipv6ExternDstOp = _Ipv6ExternDstOp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 14),
    _Ipv6ExternDstOp_Type()
)
ipv6ExternDstOp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6ExternDstOp.setStatus("current")


class _Ipv6ExternDstPort1_Type(Integer32):
    """Custom type ipv6ExternDstPort1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Ipv6ExternDstPort1_Type.__name__ = "Integer32"
_Ipv6ExternDstPort1_Object = MibTableColumn
ipv6ExternDstPort1 = _Ipv6ExternDstPort1_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 15),
    _Ipv6ExternDstPort1_Type()
)
ipv6ExternDstPort1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6ExternDstPort1.setStatus("current")


class _Ipv6ExternDstPort2_Type(Integer32):
    """Custom type ipv6ExternDstPort2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Ipv6ExternDstPort2_Type.__name__ = "Integer32"
_Ipv6ExternDstPort2_Object = MibTableColumn
ipv6ExternDstPort2 = _Ipv6ExternDstPort2_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 16),
    _Ipv6ExternDstPort2_Type()
)
ipv6ExternDstPort2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6ExternDstPort2.setStatus("current")


class _Ipv6ExternStatus_Type(Integer32):
    """Custom type ipv6ExternStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_Ipv6ExternStatus_Type.__name__ = "Integer32"
_Ipv6ExternStatus_Object = MibTableColumn
ipv6ExternStatus = _Ipv6ExternStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 8, 1, 17),
    _Ipv6ExternStatus_Type()
)
ipv6ExternStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6ExternStatus.setStatus("current")
_MacIpExternAclTable_Object = MibTable
macIpExternAclTable = _MacIpExternAclTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9)
)
if mibBuilder.loadTexts:
    macIpExternAclTable.setStatus("current")
_MacIpExternAclEntry_Object = MibTableRow
macIpExternAclEntry = _MacIpExternAclEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1)
)
macIpExternAclEntry.setIndexNames(
    (0, "NAG-MIB", "macIpExternIndex"),
    (0, "NAG-MIB", "macIpExternSubIndex"),
)
if mibBuilder.loadTexts:
    macIpExternAclEntry.setStatus("current")
_MacIpExternIndex_Type = Integer32
_MacIpExternIndex_Object = MibTableColumn
macIpExternIndex = _MacIpExternIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 1),
    _MacIpExternIndex_Type()
)
macIpExternIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macIpExternIndex.setStatus("current")
_MacIpExternSubIndex_Type = Integer32
_MacIpExternSubIndex_Object = MibTableColumn
macIpExternSubIndex = _MacIpExternSubIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 2),
    _MacIpExternSubIndex_Type()
)
macIpExternSubIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macIpExternSubIndex.setStatus("current")
_MacIpExternPriority_Type = Integer32
_MacIpExternPriority_Object = MibTableColumn
macIpExternPriority = _MacIpExternPriority_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 3),
    _MacIpExternPriority_Type()
)
macIpExternPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macIpExternPriority.setStatus("current")


class _MacIpExternAct_Type(Integer32):
    """Custom type macIpExternAct based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("deny", 0),
          ("permit", 1))
    )


_MacIpExternAct_Type.__name__ = "Integer32"
_MacIpExternAct_Object = MibTableColumn
macIpExternAct = _MacIpExternAct_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 4),
    _MacIpExternAct_Type()
)
macIpExternAct.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macIpExternAct.setStatus("current")


class _MacIpExternProtocal_Type(Integer32):
    """Custom type macIpExternProtocal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
        ValueRangeConstraint(65535, 65535),
    )


_MacIpExternProtocal_Type.__name__ = "Integer32"
_MacIpExternProtocal_Object = MibTableColumn
macIpExternProtocal = _MacIpExternProtocal_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 5),
    _MacIpExternProtocal_Type()
)
macIpExternProtocal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macIpExternProtocal.setStatus("current")


class _MacIpExternSrcMac_Type(DisplayString):
    """Custom type macIpExternSrcMac based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_MacIpExternSrcMac_Type.__name__ = "DisplayString"
_MacIpExternSrcMac_Object = MibTableColumn
macIpExternSrcMac = _MacIpExternSrcMac_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 6),
    _MacIpExternSrcMac_Type()
)
macIpExternSrcMac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macIpExternSrcMac.setStatus("current")


class _MacIpExternSrcMacWild_Type(DisplayString):
    """Custom type macIpExternSrcMacWild based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_MacIpExternSrcMacWild_Type.__name__ = "DisplayString"
_MacIpExternSrcMacWild_Object = MibTableColumn
macIpExternSrcMacWild = _MacIpExternSrcMacWild_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 7),
    _MacIpExternSrcMacWild_Type()
)
macIpExternSrcMacWild.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macIpExternSrcMacWild.setStatus("current")


class _MacIpExternDstMac_Type(DisplayString):
    """Custom type macIpExternDstMac based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_MacIpExternDstMac_Type.__name__ = "DisplayString"
_MacIpExternDstMac_Object = MibTableColumn
macIpExternDstMac = _MacIpExternDstMac_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 8),
    _MacIpExternDstMac_Type()
)
macIpExternDstMac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macIpExternDstMac.setStatus("current")


class _MacIpExternDstMacWild_Type(DisplayString):
    """Custom type macIpExternDstMacWild based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_MacIpExternDstMacWild_Type.__name__ = "DisplayString"
_MacIpExternDstMacWild_Object = MibTableColumn
macIpExternDstMacWild = _MacIpExternDstMacWild_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 9),
    _MacIpExternDstMacWild_Type()
)
macIpExternDstMacWild.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macIpExternDstMacWild.setStatus("current")
_MacIpExternSrcIp_Type = IpAddress
_MacIpExternSrcIp_Object = MibTableColumn
macIpExternSrcIp = _MacIpExternSrcIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 10),
    _MacIpExternSrcIp_Type()
)
macIpExternSrcIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macIpExternSrcIp.setStatus("current")
_MacIpExternSrcIpWild_Type = IpAddress
_MacIpExternSrcIpWild_Object = MibTableColumn
macIpExternSrcIpWild = _MacIpExternSrcIpWild_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 11),
    _MacIpExternSrcIpWild_Type()
)
macIpExternSrcIpWild.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macIpExternSrcIpWild.setStatus("current")
_MacIpExternDstIp_Type = IpAddress
_MacIpExternDstIp_Object = MibTableColumn
macIpExternDstIp = _MacIpExternDstIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 12),
    _MacIpExternDstIp_Type()
)
macIpExternDstIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macIpExternDstIp.setStatus("current")
_MacIpExternDstIpWild_Type = IpAddress
_MacIpExternDstIpWild_Object = MibTableColumn
macIpExternDstIpWild = _MacIpExternDstIpWild_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 13),
    _MacIpExternDstIpWild_Type()
)
macIpExternDstIpWild.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macIpExternDstIpWild.setStatus("current")


class _MacIpExternTimeRangeName_Type(DisplayString):
    """Custom type macIpExternTimeRangeName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_MacIpExternTimeRangeName_Type.__name__ = "DisplayString"
_MacIpExternTimeRangeName_Object = MibTableColumn
macIpExternTimeRangeName = _MacIpExternTimeRangeName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 14),
    _MacIpExternTimeRangeName_Type()
)
macIpExternTimeRangeName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macIpExternTimeRangeName.setStatus("current")


class _MacIpExternSrcOp_Type(Integer32):
    """Custom type macIpExternSrcOp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              3,
              5)
        )
    )
    namedValues = NamedValues(
        *(("noOperator", 0),
          ("eq", 3),
          ("range", 5))
    )


_MacIpExternSrcOp_Type.__name__ = "Integer32"
_MacIpExternSrcOp_Object = MibTableColumn
macIpExternSrcOp = _MacIpExternSrcOp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 15),
    _MacIpExternSrcOp_Type()
)
macIpExternSrcOp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macIpExternSrcOp.setStatus("current")


class _MacIpExternSrcPort1_Type(Integer32):
    """Custom type macIpExternSrcPort1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_MacIpExternSrcPort1_Type.__name__ = "Integer32"
_MacIpExternSrcPort1_Object = MibTableColumn
macIpExternSrcPort1 = _MacIpExternSrcPort1_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 16),
    _MacIpExternSrcPort1_Type()
)
macIpExternSrcPort1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macIpExternSrcPort1.setStatus("current")


class _MacIpExternSrcPort2_Type(Integer32):
    """Custom type macIpExternSrcPort2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_MacIpExternSrcPort2_Type.__name__ = "Integer32"
_MacIpExternSrcPort2_Object = MibTableColumn
macIpExternSrcPort2 = _MacIpExternSrcPort2_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 17),
    _MacIpExternSrcPort2_Type()
)
macIpExternSrcPort2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macIpExternSrcPort2.setStatus("current")


class _MacIpExternDstOp_Type(Integer32):
    """Custom type macIpExternDstOp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noOperator", 0),
          ("eq", 1),
          ("range", 2))
    )


_MacIpExternDstOp_Type.__name__ = "Integer32"
_MacIpExternDstOp_Object = MibTableColumn
macIpExternDstOp = _MacIpExternDstOp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 18),
    _MacIpExternDstOp_Type()
)
macIpExternDstOp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macIpExternDstOp.setStatus("current")


class _MacIpExternDstPort1_Type(Integer32):
    """Custom type macIpExternDstPort1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_MacIpExternDstPort1_Type.__name__ = "Integer32"
_MacIpExternDstPort1_Object = MibTableColumn
macIpExternDstPort1 = _MacIpExternDstPort1_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 19),
    _MacIpExternDstPort1_Type()
)
macIpExternDstPort1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macIpExternDstPort1.setStatus("current")


class _MacIpExternDstPort2_Type(Integer32):
    """Custom type macIpExternDstPort2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_MacIpExternDstPort2_Type.__name__ = "Integer32"
_MacIpExternDstPort2_Object = MibTableColumn
macIpExternDstPort2 = _MacIpExternDstPort2_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 20),
    _MacIpExternDstPort2_Type()
)
macIpExternDstPort2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macIpExternDstPort2.setStatus("current")


class _MacIpExternPrecedence_Type(Integer32):
    """Custom type macIpExternPrecedence based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_MacIpExternPrecedence_Type.__name__ = "Integer32"
_MacIpExternPrecedence_Object = MibTableColumn
macIpExternPrecedence = _MacIpExternPrecedence_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 21),
    _MacIpExternPrecedence_Type()
)
macIpExternPrecedence.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macIpExternPrecedence.setStatus("current")


class _MacIpExternTos_Type(Integer32):
    """Custom type macIpExternTos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_MacIpExternTos_Type.__name__ = "Integer32"
_MacIpExternTos_Object = MibTableColumn
macIpExternTos = _MacIpExternTos_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 22),
    _MacIpExternTos_Type()
)
macIpExternTos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macIpExternTos.setStatus("current")


class _MacIpExternStatus_Type(Integer32):
    """Custom type macIpExternStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_MacIpExternStatus_Type.__name__ = "Integer32"
_MacIpExternStatus_Object = MibTableColumn
macIpExternStatus = _MacIpExternStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 23),
    _MacIpExternStatus_Type()
)
macIpExternStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macIpExternStatus.setStatus("current")


class _MacIpExternVlanId_Type(Integer32):
    """Custom type macIpExternVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_MacIpExternVlanId_Type.__name__ = "Integer32"
_MacIpExternVlanId_Object = MibTableColumn
macIpExternVlanId = _MacIpExternVlanId_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 24),
    _MacIpExternVlanId_Type()
)
macIpExternVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macIpExternVlanId.setStatus("current")


class _MacIpExternVlanIdWild_Type(Integer32):
    """Custom type macIpExternVlanIdWild based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_MacIpExternVlanIdWild_Type.__name__ = "Integer32"
_MacIpExternVlanIdWild_Object = MibTableColumn
macIpExternVlanIdWild = _MacIpExternVlanIdWild_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 3, 9, 1, 25),
    _MacIpExternVlanIdWild_Type()
)
macIpExternVlanIdWild.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macIpExternVlanIdWild.setStatus("current")
_AclAttach_ObjectIdentity = ObjectIdentity
aclAttach = _AclAttach_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4)
)
_AclActiveTable_Object = MibTable
aclActiveTable = _AclActiveTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1)
)
if mibBuilder.loadTexts:
    aclActiveTable.setStatus("current")
_AclActiveEntry_Object = MibTableRow
aclActiveEntry = _AclActiveEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1, 1)
)
aclActiveEntry.setIndexNames(
    (0, "NAG-MIB", "aclActiveBindType"),
    (0, "NAG-MIB", "aclActiveIndex"),
    (0, "NAG-MIB", "aclActiveType"),
    (0, "NAG-MIB", "aclActiveDirection"),
)
if mibBuilder.loadTexts:
    aclActiveEntry.setStatus("current")


class _AclActiveBindType_Type(Integer32):
    """Custom type aclActiveBindType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("port", 0),
          ("vlan", 1))
    )


_AclActiveBindType_Type.__name__ = "Integer32"
_AclActiveBindType_Object = MibTableColumn
aclActiveBindType = _AclActiveBindType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1, 1, 1),
    _AclActiveBindType_Type()
)
aclActiveBindType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclActiveBindType.setStatus("current")
_AclActiveIndex_Type = Integer32
_AclActiveIndex_Object = MibTableColumn
aclActiveIndex = _AclActiveIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1, 1, 2),
    _AclActiveIndex_Type()
)
aclActiveIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclActiveIndex.setStatus("current")


class _AclActiveType_Type(Integer32):
    """Custom type aclActiveType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              5,
              8)
        )
    )
    namedValues = NamedValues(
        *(("ip", 1),
          ("ipv6", 3),
          ("mac", 5),
          ("macIp", 8))
    )


_AclActiveType_Type.__name__ = "Integer32"
_AclActiveType_Object = MibTableColumn
aclActiveType = _AclActiveType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1, 1, 3),
    _AclActiveType_Type()
)
aclActiveType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclActiveType.setStatus("current")


class _AclActiveDirection_Type(Integer32):
    """Custom type aclActiveDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("out", 0),
          ("in", 1))
    )


_AclActiveDirection_Type.__name__ = "Integer32"
_AclActiveDirection_Object = MibTableColumn
aclActiveDirection = _AclActiveDirection_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1, 1, 4),
    _AclActiveDirection_Type()
)
aclActiveDirection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclActiveDirection.setStatus("current")
_AclActiveAclIndex_Type = Integer32
_AclActiveAclIndex_Object = MibTableColumn
aclActiveAclIndex = _AclActiveAclIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1, 1, 5),
    _AclActiveAclIndex_Type()
)
aclActiveAclIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclActiveAclIndex.setStatus("current")


class _AclActiveStatistic_Type(Integer32):
    """Custom type aclActiveStatistic based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AclActiveStatistic_Type.__name__ = "Integer32"
_AclActiveStatistic_Object = MibTableColumn
aclActiveStatistic = _AclActiveStatistic_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1, 1, 6),
    _AclActiveStatistic_Type()
)
aclActiveStatistic.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclActiveStatistic.setStatus("current")


class _AclActiveStatus_Type(Integer32):
    """Custom type aclActiveStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AclActiveStatus_Type.__name__ = "Integer32"
_AclActiveStatus_Object = MibTableColumn
aclActiveStatus = _AclActiveStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 1, 1, 7),
    _AclActiveStatus_Type()
)
aclActiveStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclActiveStatus.setStatus("current")
_AclStatisticClearTable_Object = MibTable
aclStatisticClearTable = _AclStatisticClearTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 2)
)
if mibBuilder.loadTexts:
    aclStatisticClearTable.setStatus("current")
_AclStatisticClearEntry_Object = MibTableRow
aclStatisticClearEntry = _AclStatisticClearEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 2, 1)
)
aclStatisticClearEntry.setIndexNames(
    (0, "NAG-MIB", "aclActiveBindType"),
    (0, "NAG-MIB", "aclActiveDirection"),
    (0, "NAG-MIB", "aclActiveIndex"),
)
if mibBuilder.loadTexts:
    aclStatisticClearEntry.setStatus("current")


class _AclStatisticClearBindType_Type(Integer32):
    """Custom type aclStatisticClearBindType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("port", 0),
          ("vlan", 1))
    )


_AclStatisticClearBindType_Type.__name__ = "Integer32"
_AclStatisticClearBindType_Object = MibTableColumn
aclStatisticClearBindType = _AclStatisticClearBindType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 2, 1, 1),
    _AclStatisticClearBindType_Type()
)
aclStatisticClearBindType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclStatisticClearBindType.setStatus("current")


class _AclStatisticClearDirection_Type(Integer32):
    """Custom type aclStatisticClearDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("out", 0),
          ("in", 1))
    )


_AclStatisticClearDirection_Type.__name__ = "Integer32"
_AclStatisticClearDirection_Object = MibTableColumn
aclStatisticClearDirection = _AclStatisticClearDirection_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 2, 1, 2),
    _AclStatisticClearDirection_Type()
)
aclStatisticClearDirection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclStatisticClearDirection.setStatus("current")
_AclStatisticClearIndex_Type = Integer32
_AclStatisticClearIndex_Object = MibTableColumn
aclStatisticClearIndex = _AclStatisticClearIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 2, 1, 3),
    _AclStatisticClearIndex_Type()
)
aclStatisticClearIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclStatisticClearIndex.setStatus("current")


class _AclStatisticClearStatus_Type(Integer32):
    """Custom type aclStatisticClearStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AclStatisticClearStatus_Type.__name__ = "Integer32"
_AclStatisticClearStatus_Object = MibTableColumn
aclStatisticClearStatus = _AclStatisticClearStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 1, 4, 2, 1, 4),
    _AclStatisticClearStatus_Type()
)
aclStatisticClearStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclStatisticClearStatus.setStatus("current")
_SshMgt_ObjectIdentity = ObjectIdentity
sshMgt = _SshMgt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2)
)


class _SshServerStatus_Type(Integer32):
    """Custom type sshServerStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SshServerStatus_Type.__name__ = "Integer32"
_SshServerStatus_Object = MibScalar
sshServerStatus = _SshServerStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 1),
    _SshServerStatus_Type()
)
sshServerStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshServerStatus.setStatus("current")
_SshServerVersion_Type = Integer32
_SshServerVersion_Object = MibScalar
sshServerVersion = _SshServerVersion_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 2),
    _SshServerVersion_Type()
)
sshServerVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sshServerVersion.setStatus("current")


class _SshTimeout_Type(Integer32):
    """Custom type sshTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 600),
    )


_SshTimeout_Type.__name__ = "Integer32"
_SshTimeout_Object = MibScalar
sshTimeout = _SshTimeout_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 3),
    _SshTimeout_Type()
)
sshTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshTimeout.setStatus("current")


class _SshAuthRetries_Type(Integer32):
    """Custom type sshAuthRetries based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_SshAuthRetries_Type.__name__ = "Integer32"
_SshAuthRetries_Object = MibScalar
sshAuthRetries = _SshAuthRetries_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 4),
    _SshAuthRetries_Type()
)
sshAuthRetries.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshAuthRetries.setStatus("current")
_SshUseTable_Object = MibTable
sshUseTable = _SshUseTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 5)
)
if mibBuilder.loadTexts:
    sshUseTable.setStatus("current")
_SshUseEntry_Object = MibTableRow
sshUseEntry = _SshUseEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 5, 1)
)
sshUseEntry.setIndexNames(
    (0, "NAG-MIB", "sshUserIndex"),
)
if mibBuilder.loadTexts:
    sshUseEntry.setStatus("current")
_SshUserIndex_Type = Integer32
_SshUserIndex_Object = MibTableColumn
sshUserIndex = _SshUserIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 5, 1, 1),
    _SshUserIndex_Type()
)
sshUserIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    sshUserIndex.setStatus("current")


class _SshUserName_Type(DisplayString):
    """Custom type sshUserName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_SshUserName_Type.__name__ = "DisplayString"
_SshUserName_Object = MibTableColumn
sshUserName = _SshUserName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 5, 1, 2),
    _SshUserName_Type()
)
sshUserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshUserName.setStatus("current")


class _SshUserType_Type(Integer32):
    """Custom type sshUserType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              7)
        )
    )
    namedValues = NamedValues(
        *(("noCryptograph", 0),
          ("cryptograph", 7))
    )


_SshUserType_Type.__name__ = "Integer32"
_SshUserType_Object = MibTableColumn
sshUserType = _SshUserType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 5, 1, 3),
    _SshUserType_Type()
)
sshUserType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshUserType.setStatus("current")


class _SshUserPassword_Type(DisplayString):
    """Custom type sshUserPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_SshUserPassword_Type.__name__ = "DisplayString"
_SshUserPassword_Object = MibTableColumn
sshUserPassword = _SshUserPassword_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 5, 1, 4),
    _SshUserPassword_Type()
)
sshUserPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshUserPassword.setStatus("current")


class _SshUserStatus_Type(Integer32):
    """Custom type sshUserStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_SshUserStatus_Type.__name__ = "Integer32"
_SshUserStatus_Object = MibTableColumn
sshUserStatus = _SshUserStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 5, 1, 5),
    _SshUserStatus_Type()
)
sshUserStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshUserStatus.setStatus("current")
_SshConnInfoTable_Object = MibTable
sshConnInfoTable = _SshConnInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 6)
)
if mibBuilder.loadTexts:
    sshConnInfoTable.setStatus("current")
_SshConnInfoEntry_Object = MibTableRow
sshConnInfoEntry = _SshConnInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 6, 1)
)
sshConnInfoEntry.setIndexNames(
    (0, "NAG-MIB", "sshConnID"),
)
if mibBuilder.loadTexts:
    sshConnInfoEntry.setStatus("current")
_SshConnID_Type = Integer32
_SshConnID_Object = MibTableColumn
sshConnID = _SshConnID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 6, 1, 1),
    _SshConnID_Type()
)
sshConnID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sshConnID.setStatus("current")
_SshConnVersion_Type = Integer32
_SshConnVersion_Object = MibTableColumn
sshConnVersion = _SshConnVersion_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 6, 1, 2),
    _SshConnVersion_Type()
)
sshConnVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sshConnVersion.setStatus("current")


class _SshConnStatus_Type(Integer32):
    """Custom type sshConnStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("negotiationStart", 1),
          ("authenticationStart", 2),
          ("sessionStart", 3))
    )


_SshConnStatus_Type.__name__ = "Integer32"
_SshConnStatus_Object = MibTableColumn
sshConnStatus = _SshConnStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 6, 1, 3),
    _SshConnStatus_Type()
)
sshConnStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sshConnStatus.setStatus("current")
_SshConnUserName_Type = DisplayString
_SshConnUserName_Object = MibTableColumn
sshConnUserName = _SshConnUserName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 2, 6, 1, 4),
    _SshConnUserName_Type()
)
sshConnUserName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sshConnUserName.setStatus("current")
_TacacsMgt_ObjectIdentity = ObjectIdentity
tacacsMgt = _TacacsMgt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3)
)
_TacacsServerHostTable_Object = MibTable
tacacsServerHostTable = _TacacsServerHostTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1)
)
if mibBuilder.loadTexts:
    tacacsServerHostTable.setStatus("current")
_TacacsServerHostEntry_Object = MibTableRow
tacacsServerHostEntry = _TacacsServerHostEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1, 1)
)
tacacsServerHostEntry.setIndexNames(
    (0, "NAG-MIB", "tacacsServerHostIndex"),
)
if mibBuilder.loadTexts:
    tacacsServerHostEntry.setStatus("current")
_TacacsServerHostIndex_Type = Integer32
_TacacsServerHostIndex_Object = MibTableColumn
tacacsServerHostIndex = _TacacsServerHostIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1, 1, 1),
    _TacacsServerHostIndex_Type()
)
tacacsServerHostIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    tacacsServerHostIndex.setStatus("current")
_TacacsServerHostIP_Type = IpAddress
_TacacsServerHostIP_Object = MibTableColumn
tacacsServerHostIP = _TacacsServerHostIP_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1, 1, 2),
    _TacacsServerHostIP_Type()
)
tacacsServerHostIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacacsServerHostIP.setStatus("current")


class _TacacsServerHostPort_Type(Integer32):
    """Custom type tacacsServerHostPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_TacacsServerHostPort_Type.__name__ = "Integer32"
_TacacsServerHostPort_Object = MibTableColumn
tacacsServerHostPort = _TacacsServerHostPort_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1, 1, 3),
    _TacacsServerHostPort_Type()
)
tacacsServerHostPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacacsServerHostPort.setStatus("current")


class _TacacsServerHostPrimary_Type(Integer32):
    """Custom type tacacsServerHostPrimary based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("noPrimary", 0),
          ("primary", 1))
    )


_TacacsServerHostPrimary_Type.__name__ = "Integer32"
_TacacsServerHostPrimary_Object = MibTableColumn
tacacsServerHostPrimary = _TacacsServerHostPrimary_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1, 1, 4),
    _TacacsServerHostPrimary_Type()
)
tacacsServerHostPrimary.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacacsServerHostPrimary.setStatus("current")


class _TacacsServerHostStatus_Type(Integer32):
    """Custom type tacacsServerHostStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_TacacsServerHostStatus_Type.__name__ = "Integer32"
_TacacsServerHostStatus_Object = MibTableColumn
tacacsServerHostStatus = _TacacsServerHostStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1, 1, 5),
    _TacacsServerHostStatus_Type()
)
tacacsServerHostStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacacsServerHostStatus.setStatus("current")


class _TacacsServerHostKey_Type(DisplayString):
    """Custom type tacacsServerHostKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_TacacsServerHostKey_Type.__name__ = "DisplayString"
_TacacsServerHostKey_Object = MibTableColumn
tacacsServerHostKey = _TacacsServerHostKey_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1, 1, 6),
    _TacacsServerHostKey_Type()
)
tacacsServerHostKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacacsServerHostKey.setStatus("current")


class _TacacsServerHostTimeout_Type(Integer32):
    """Custom type tacacsServerHostTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 60),
    )


_TacacsServerHostTimeout_Type.__name__ = "Integer32"
_TacacsServerHostTimeout_Object = MibTableColumn
tacacsServerHostTimeout = _TacacsServerHostTimeout_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 1, 1, 7),
    _TacacsServerHostTimeout_Type()
)
tacacsServerHostTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacacsServerHostTimeout.setStatus("current")


class _TacacsServerTimeout_Type(Integer32):
    """Custom type tacacsServerTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_TacacsServerTimeout_Type.__name__ = "Integer32"
_TacacsServerTimeout_Object = MibScalar
tacacsServerTimeout = _TacacsServerTimeout_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 2),
    _TacacsServerTimeout_Type()
)
tacacsServerTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacacsServerTimeout.setStatus("current")


class _TacacsServerKey_Type(DisplayString):
    """Custom type tacacsServerKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_TacacsServerKey_Type.__name__ = "DisplayString"
_TacacsServerKey_Object = MibScalar
tacacsServerKey = _TacacsServerKey_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 3, 3),
    _TacacsServerKey_Type()
)
tacacsServerKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacacsServerKey.setStatus("current")
_Am_ObjectIdentity = ObjectIdentity
am = _Am_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4)
)


class _AmGlobalEnable_Type(Integer32):
    """Custom type amGlobalEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AmGlobalEnable_Type.__name__ = "Integer32"
_AmGlobalEnable_Object = MibScalar
amGlobalEnable = _AmGlobalEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 1),
    _AmGlobalEnable_Type()
)
amGlobalEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amGlobalEnable.setStatus("current")
_AmPortInfoTable_Object = MibTable
amPortInfoTable = _AmPortInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2)
)
if mibBuilder.loadTexts:
    amPortInfoTable.setStatus("current")
_AmPortInfoEntry_Object = MibTableRow
amPortInfoEntry = _AmPortInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2, 1)
)
amPortInfoEntry.setIndexNames(
    (0, "NAG-MIB", "amPortIndex"),
    (0, "NAG-MIB", "amPortIp"),
)
if mibBuilder.loadTexts:
    amPortInfoEntry.setStatus("current")
_AmPortIndex_Type = Integer32
_AmPortIndex_Object = MibTableColumn
amPortIndex = _AmPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2, 1, 1),
    _AmPortIndex_Type()
)
amPortIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    amPortIndex.setStatus("current")


class _AmPortEnable_Type(Integer32):
    """Custom type amPortEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AmPortEnable_Type.__name__ = "Integer32"
_AmPortEnable_Object = MibTableColumn
amPortEnable = _AmPortEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2, 1, 2),
    _AmPortEnable_Type()
)
amPortEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amPortEnable.setStatus("current")


class _AmPortForwardingType_Type(Integer32):
    """Custom type amPortForwardingType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ip-pool", 1),
          ("mac-ip-pool", 2))
    )


_AmPortForwardingType_Type.__name__ = "Integer32"
_AmPortForwardingType_Object = MibTableColumn
amPortForwardingType = _AmPortForwardingType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2, 1, 3),
    _AmPortForwardingType_Type()
)
amPortForwardingType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amPortForwardingType.setStatus("current")
_AmPortIp_Type = IpAddress
_AmPortIp_Object = MibTableColumn
amPortIp = _AmPortIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2, 1, 4),
    _AmPortIp_Type()
)
amPortIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amPortIp.setStatus("current")


class _AmPortMac_Type(MacAddress):
    """Custom type amPortMac based on MacAddress"""
    subtypeSpec = MacAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_AmPortMac_Type.__name__ = "MacAddress"
_AmPortMac_Object = MibTableColumn
amPortMac = _AmPortMac_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2, 1, 5),
    _AmPortMac_Type()
)
amPortMac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amPortMac.setStatus("current")


class _AmPortCount_Type(Integer32):
    """Custom type amPortCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_AmPortCount_Type.__name__ = "Integer32"
_AmPortCount_Object = MibTableColumn
amPortCount = _AmPortCount_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2, 1, 6),
    _AmPortCount_Type()
)
amPortCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amPortCount.setStatus("current")


class _AmPortStatus_Type(Integer32):
    """Custom type amPortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_AmPortStatus_Type.__name__ = "Integer32"
_AmPortStatus_Object = MibTableColumn
amPortStatus = _AmPortStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 4, 2, 1, 7),
    _AmPortStatus_Type()
)
amPortStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amPortStatus.setStatus("current")
_RadiusMgt_ObjectIdentity = ObjectIdentity
radiusMgt = _RadiusMgt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5)
)


class _AaaEnabled_Type(Integer32):
    """Custom type aaaEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AaaEnabled_Type.__name__ = "Integer32"
_AaaEnabled_Object = MibScalar
aaaEnabled = _AaaEnabled_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 1),
    _AaaEnabled_Type()
)
aaaEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aaaEnabled.setStatus("current")


class _AaaAccount_Type(Integer32):
    """Custom type aaaAccount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AaaAccount_Type.__name__ = "Integer32"
_AaaAccount_Object = MibScalar
aaaAccount = _AaaAccount_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 2),
    _AaaAccount_Type()
)
aaaAccount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aaaAccount.setStatus("current")


class _AaaAccountUpdate_Type(Integer32):
    """Custom type aaaAccountUpdate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AaaAccountUpdate_Type.__name__ = "Integer32"
_AaaAccountUpdate_Object = MibScalar
aaaAccountUpdate = _AaaAccountUpdate_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 3),
    _AaaAccountUpdate_Type()
)
aaaAccountUpdate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aaaAccountUpdate.setStatus("current")


class _AaaAccountBindingDHCP_Type(Integer32):
    """Custom type aaaAccountBindingDHCP based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AaaAccountBindingDHCP_Type.__name__ = "Integer32"
_AaaAccountBindingDHCP_Object = MibScalar
aaaAccountBindingDHCP = _AaaAccountBindingDHCP_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 4),
    _AaaAccountBindingDHCP_Type()
)
aaaAccountBindingDHCP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aaaAccountBindingDHCP.setStatus("current")
_RadiusAuthenServerHostTable_Object = MibTable
radiusAuthenServerHostTable = _RadiusAuthenServerHostTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5)
)
if mibBuilder.loadTexts:
    radiusAuthenServerHostTable.setStatus("current")
_RadiusAuthenServerHostEntry_Object = MibTableRow
radiusAuthenServerHostEntry = _RadiusAuthenServerHostEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5, 1)
)
radiusAuthenServerHostEntry.setIndexNames(
    (0, "NAG-MIB", "radiusAuthenServerHostIndex"),
)
if mibBuilder.loadTexts:
    radiusAuthenServerHostEntry.setStatus("current")
_RadiusAuthenServerHostIndex_Type = Integer32
_RadiusAuthenServerHostIndex_Object = MibTableColumn
radiusAuthenServerHostIndex = _RadiusAuthenServerHostIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5, 1, 1),
    _RadiusAuthenServerHostIndex_Type()
)
radiusAuthenServerHostIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    radiusAuthenServerHostIndex.setStatus("current")


class _RadiusAuthenServerHostIP_Type(DisplayString):
    """Custom type radiusAuthenServerHostIP based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 39),
    )


_RadiusAuthenServerHostIP_Type.__name__ = "DisplayString"
_RadiusAuthenServerHostIP_Object = MibTableColumn
radiusAuthenServerHostIP = _RadiusAuthenServerHostIP_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5, 1, 2),
    _RadiusAuthenServerHostIP_Type()
)
radiusAuthenServerHostIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusAuthenServerHostIP.setStatus("current")


class _RadiusAuthenServerHostPort_Type(Integer32):
    """Custom type radiusAuthenServerHostPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RadiusAuthenServerHostPort_Type.__name__ = "Integer32"
_RadiusAuthenServerHostPort_Object = MibTableColumn
radiusAuthenServerHostPort = _RadiusAuthenServerHostPort_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5, 1, 3),
    _RadiusAuthenServerHostPort_Type()
)
radiusAuthenServerHostPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusAuthenServerHostPort.setStatus("current")


class _RadiusAutServerHostKey_Type(DisplayString):
    """Custom type radiusAutServerHostKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_RadiusAutServerHostKey_Type.__name__ = "DisplayString"
_RadiusAutServerHostKey_Object = MibTableColumn
radiusAutServerHostKey = _RadiusAutServerHostKey_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5, 1, 4),
    _RadiusAutServerHostKey_Type()
)
radiusAutServerHostKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusAutServerHostKey.setStatus("current")


class _RadiusAuthenServerHostPrimary_Type(Integer32):
    """Custom type radiusAuthenServerHostPrimary based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("noPrimary", 0),
          ("primary", 1))
    )


_RadiusAuthenServerHostPrimary_Type.__name__ = "Integer32"
_RadiusAuthenServerHostPrimary_Object = MibTableColumn
radiusAuthenServerHostPrimary = _RadiusAuthenServerHostPrimary_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5, 1, 5),
    _RadiusAuthenServerHostPrimary_Type()
)
radiusAuthenServerHostPrimary.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusAuthenServerHostPrimary.setStatus("current")


class _RadiusAutServerHostAccessMode_Type(Integer32):
    """Custom type radiusAutServerHostAccessMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("dot1x", 1),
          ("telnet", 2))
    )


_RadiusAutServerHostAccessMode_Type.__name__ = "Integer32"
_RadiusAutServerHostAccessMode_Object = MibTableColumn
radiusAutServerHostAccessMode = _RadiusAutServerHostAccessMode_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5, 1, 6),
    _RadiusAutServerHostAccessMode_Type()
)
radiusAutServerHostAccessMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusAutServerHostAccessMode.setStatus("current")


class _RadiusAuthenServerHostStatus_Type(Integer32):
    """Custom type radiusAuthenServerHostStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_RadiusAuthenServerHostStatus_Type.__name__ = "Integer32"
_RadiusAuthenServerHostStatus_Object = MibTableColumn
radiusAuthenServerHostStatus = _RadiusAuthenServerHostStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 5, 1, 7),
    _RadiusAuthenServerHostStatus_Type()
)
radiusAuthenServerHostStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusAuthenServerHostStatus.setStatus("current")
_RadiusAcctServerHostTable_Object = MibTable
radiusAcctServerHostTable = _RadiusAcctServerHostTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 6)
)
if mibBuilder.loadTexts:
    radiusAcctServerHostTable.setStatus("current")
_RadiusAcctServerHostEntry_Object = MibTableRow
radiusAcctServerHostEntry = _RadiusAcctServerHostEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 6, 1)
)
radiusAcctServerHostEntry.setIndexNames(
    (0, "NAG-MIB", "radiusAcctServerHostIndex"),
)
if mibBuilder.loadTexts:
    radiusAcctServerHostEntry.setStatus("current")
_RadiusAcctServerHostIndex_Type = Integer32
_RadiusAcctServerHostIndex_Object = MibTableColumn
radiusAcctServerHostIndex = _RadiusAcctServerHostIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 6, 1, 1),
    _RadiusAcctServerHostIndex_Type()
)
radiusAcctServerHostIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    radiusAcctServerHostIndex.setStatus("current")


class _RadiusAcctServerHostIP_Type(DisplayString):
    """Custom type radiusAcctServerHostIP based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 39),
    )


_RadiusAcctServerHostIP_Type.__name__ = "DisplayString"
_RadiusAcctServerHostIP_Object = MibTableColumn
radiusAcctServerHostIP = _RadiusAcctServerHostIP_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 6, 1, 2),
    _RadiusAcctServerHostIP_Type()
)
radiusAcctServerHostIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusAcctServerHostIP.setStatus("current")


class _RadiusAcctServerHostPort_Type(Integer32):
    """Custom type radiusAcctServerHostPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RadiusAcctServerHostPort_Type.__name__ = "Integer32"
_RadiusAcctServerHostPort_Object = MibTableColumn
radiusAcctServerHostPort = _RadiusAcctServerHostPort_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 6, 1, 3),
    _RadiusAcctServerHostPort_Type()
)
radiusAcctServerHostPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusAcctServerHostPort.setStatus("current")


class _RadiusAcctServerHostKey_Type(DisplayString):
    """Custom type radiusAcctServerHostKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_RadiusAcctServerHostKey_Type.__name__ = "DisplayString"
_RadiusAcctServerHostKey_Object = MibTableColumn
radiusAcctServerHostKey = _RadiusAcctServerHostKey_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 6, 1, 4),
    _RadiusAcctServerHostKey_Type()
)
radiusAcctServerHostKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusAcctServerHostKey.setStatus("current")


class _RadiusAcctServerHostPrimary_Type(Integer32):
    """Custom type radiusAcctServerHostPrimary based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("noPrimary", 0),
          ("primary", 1))
    )


_RadiusAcctServerHostPrimary_Type.__name__ = "Integer32"
_RadiusAcctServerHostPrimary_Object = MibTableColumn
radiusAcctServerHostPrimary = _RadiusAcctServerHostPrimary_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 6, 1, 5),
    _RadiusAcctServerHostPrimary_Type()
)
radiusAcctServerHostPrimary.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusAcctServerHostPrimary.setStatus("current")


class _RadiusAcctServerHostStatus_Type(Integer32):
    """Custom type radiusAcctServerHostStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_RadiusAcctServerHostStatus_Type.__name__ = "Integer32"
_RadiusAcctServerHostStatus_Object = MibTableColumn
radiusAcctServerHostStatus = _RadiusAcctServerHostStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 6, 1, 6),
    _RadiusAcctServerHostStatus_Type()
)
radiusAcctServerHostStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusAcctServerHostStatus.setStatus("current")


class _RadiusServerTimeout_Type(Integer32):
    """Custom type radiusServerTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RadiusServerTimeout_Type.__name__ = "Integer32"
_RadiusServerTimeout_Object = MibScalar
radiusServerTimeout = _RadiusServerTimeout_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 7),
    _RadiusServerTimeout_Type()
)
radiusServerTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusServerTimeout.setStatus("current")


class _RadiusServerRetransmit_Type(Integer32):
    """Custom type radiusServerRetransmit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_RadiusServerRetransmit_Type.__name__ = "Integer32"
_RadiusServerRetransmit_Object = MibScalar
radiusServerRetransmit = _RadiusServerRetransmit_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 8),
    _RadiusServerRetransmit_Type()
)
radiusServerRetransmit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusServerRetransmit.setStatus("current")


class _RadiusServerDeadTime_Type(Integer32):
    """Custom type radiusServerDeadTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RadiusServerDeadTime_Type.__name__ = "Integer32"
_RadiusServerDeadTime_Object = MibScalar
radiusServerDeadTime = _RadiusServerDeadTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 9),
    _RadiusServerDeadTime_Type()
)
radiusServerDeadTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusServerDeadTime.setStatus("current")


class _RadiusServerKey_Type(DisplayString):
    """Custom type radiusServerKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_RadiusServerKey_Type.__name__ = "DisplayString"
_RadiusServerKey_Object = MibScalar
radiusServerKey = _RadiusServerKey_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 10),
    _RadiusServerKey_Type()
)
radiusServerKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusServerKey.setStatus("current")


class _RadiusServerAccountTimeOut_Type(Integer32):
    """Custom type radiusServerAccountTimeOut based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(60, 3600),
    )


_RadiusServerAccountTimeOut_Type.__name__ = "Integer32"
_RadiusServerAccountTimeOut_Object = MibScalar
radiusServerAccountTimeOut = _RadiusServerAccountTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 11),
    _RadiusServerAccountTimeOut_Type()
)
radiusServerAccountTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusServerAccountTimeOut.setStatus("current")
_RadiusServerNasIpv4_Type = IpAddress
_RadiusServerNasIpv4_Object = MibScalar
radiusServerNasIpv4 = _RadiusServerNasIpv4_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 12),
    _RadiusServerNasIpv4_Type()
)
radiusServerNasIpv4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusServerNasIpv4.setStatus("current")


class _RadiusServerNasIpv6_Type(DisplayString):
    """Custom type radiusServerNasIpv6 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 39),
    )


_RadiusServerNasIpv6_Type.__name__ = "DisplayString"
_RadiusServerNasIpv6_Object = MibScalar
radiusServerNasIpv6 = _RadiusServerNasIpv6_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 10, 5, 13),
    _RadiusServerNasIpv6_Type()
)
radiusServerNasIpv6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusServerNasIpv6.setStatus("current")
_PriQos_ObjectIdentity = ObjectIdentity
priQos = _PriQos_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11)
)
_Qos_ObjectIdentity = ObjectIdentity
qos = _Qos_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1)
)


class _QosEnable_Type(Integer32):
    """Custom type qosEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_QosEnable_Type.__name__ = "Integer32"
_QosEnable_Object = MibScalar
qosEnable = _QosEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 1),
    _QosEnable_Type()
)
qosEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosEnable.setStatus("current")
_QosPortTable_Object = MibTable
qosPortTable = _QosPortTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2)
)
if mibBuilder.loadTexts:
    qosPortTable.setStatus("current")
_QosPortEntry_Object = MibTableRow
qosPortEntry = _QosPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1)
)
qosPortEntry.setIndexNames(
    (0, "NAG-MIB", "qosPortIndex"),
)
if mibBuilder.loadTexts:
    qosPortEntry.setStatus("current")
_QosPortIndex_Type = Integer32
_QosPortIndex_Object = MibTableColumn
qosPortIndex = _QosPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1, 1),
    _QosPortIndex_Type()
)
qosPortIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    qosPortIndex.setStatus("current")


class _QosPortType_Type(Integer32):
    """Custom type qosPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("trust", 0),
          ("cos", 1),
          ("dscpMutation", 2),
          ("priorityQueueOut", 3))
    )


_QosPortType_Type.__name__ = "Integer32"
_QosPortType_Object = MibTableColumn
qosPortType = _QosPortType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1, 2),
    _QosPortType_Type()
)
qosPortType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPortType.setStatus("current")


class _QosPortCos_Type(Integer32):
    """Custom type qosPortCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosPortCos_Type.__name__ = "Integer32"
_QosPortCos_Object = MibTableColumn
qosPortCos = _QosPortCos_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1, 3),
    _QosPortCos_Type()
)
qosPortCos.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPortCos.setStatus("current")


class _QosPortTrust_Type(Integer32):
    """Custom type qosPortTrust based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("priority", 0),
          ("priAndPassThroughDscp", 1),
          ("priAndPassThroughCos", 2),
          ("priAndPassThroughCosAndPassThroughDscp", 3),
          ("cos", 4),
          ("cosAndPassThroughDscp", 5),
          ("cosAndPassThroughCos", 6),
          ("cosAndPassThroughCosAndPassThroughDscp", 7),
          ("dscp", 8),
          ("dscpAndPassThroughCos", 9),
          ("dscpAndPassThroughDscp", 10),
          ("dscpAndPassThroughDscpAndPassThroughCos", 11),
          ("ipPrecedence", 12),
          ("ipPreAndPassThroughCos", 13),
          ("ipPreAndPassThroughDSCP", 14),
          ("ipPreAndPassThroughDSCPAndPassThroughCos", 15),
          ("mplsEXP", 16))
    )


_QosPortTrust_Type.__name__ = "Integer32"
_QosPortTrust_Object = MibTableColumn
qosPortTrust = _QosPortTrust_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1, 4),
    _QosPortTrust_Type()
)
qosPortTrust.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPortTrust.setStatus("current")


class _QosPortPriority_Type(Integer32):
    """Custom type qosPortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosPortPriority_Type.__name__ = "Integer32"
_QosPortPriority_Object = MibTableColumn
qosPortPriority = _QosPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1, 5),
    _QosPortPriority_Type()
)
qosPortPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPortPriority.setStatus("current")
_QosPortMutation_Type = DisplayString
_QosPortMutation_Object = MibTableColumn
qosPortMutation = _QosPortMutation_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1, 6),
    _QosPortMutation_Type()
)
qosPortMutation.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPortMutation.setStatus("current")


class _QosPortQueue_Type(Integer32):
    """Custom type qosPortQueue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("priorityQueue", 0),
          ("wrrQueue", 1))
    )


_QosPortQueue_Type.__name__ = "Integer32"
_QosPortQueue_Object = MibTableColumn
qosPortQueue = _QosPortQueue_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1, 7),
    _QosPortQueue_Type()
)
qosPortQueue.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPortQueue.setStatus("current")


class _QosPortStatus_Type(Integer32):
    """Custom type qosPortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_QosPortStatus_Type.__name__ = "Integer32"
_QosPortStatus_Object = MibTableColumn
qosPortStatus = _QosPortStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 2, 1, 8),
    _QosPortStatus_Type()
)
qosPortStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPortStatus.setStatus("current")
_QosClassMapTable_Object = MibTable
qosClassMapTable = _QosClassMapTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3)
)
if mibBuilder.loadTexts:
    qosClassMapTable.setStatus("current")
_QosclassmapEntry_Object = MibTableRow
qosclassmapEntry = _QosclassmapEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1)
)
qosclassmapEntry.setIndexNames(
    (0, "NAG-MIB", "qosClassMapName"),
)
if mibBuilder.loadTexts:
    qosclassmapEntry.setStatus("current")


class _QosClassMapName_Type(DisplayString):
    """Custom type qosClassMapName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_QosClassMapName_Type.__name__ = "DisplayString"
_QosClassMapName_Object = MibTableColumn
qosClassMapName = _QosClassMapName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 1),
    _QosClassMapName_Type()
)
qosClassMapName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    qosClassMapName.setStatus("current")


class _QosClassMapType_Type(Integer32):
    """Custom type qosClassMapType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("configurClassMap", 0),
          ("accessGroup", 1),
          ("dscp", 2),
          ("ippre", 3),
          ("vlan", 4),
          ("v6dscp", 5),
          ("v6Flow", 7),
          ("v6AccessGroup", 8),
          ("cos", 9),
          ("exptopmost", 10))
    )


_QosClassMapType_Type.__name__ = "Integer32"
_QosClassMapType_Object = MibTableColumn
qosClassMapType = _QosClassMapType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 2),
    _QosClassMapType_Type()
)
qosClassMapType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosClassMapType.setStatus("current")
_QosClassMapAccessGroup_Type = DisplayString
_QosClassMapAccessGroup_Object = MibTableColumn
qosClassMapAccessGroup = _QosClassMapAccessGroup_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 3),
    _QosClassMapAccessGroup_Type()
)
qosClassMapAccessGroup.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosClassMapAccessGroup.setStatus("current")
_QosClassMapDscp_Type = DisplayString
_QosClassMapDscp_Object = MibTableColumn
qosClassMapDscp = _QosClassMapDscp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 4),
    _QosClassMapDscp_Type()
)
qosClassMapDscp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosClassMapDscp.setStatus("current")
_QosClassMapV6Dscp_Type = DisplayString
_QosClassMapV6Dscp_Object = MibTableColumn
qosClassMapV6Dscp = _QosClassMapV6Dscp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 5),
    _QosClassMapV6Dscp_Type()
)
qosClassMapV6Dscp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosClassMapV6Dscp.setStatus("current")
_QosClassMapIpPre_Type = DisplayString
_QosClassMapIpPre_Object = MibTableColumn
qosClassMapIpPre = _QosClassMapIpPre_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 6),
    _QosClassMapIpPre_Type()
)
qosClassMapIpPre.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosClassMapIpPre.setStatus("current")
_QosClassMapV6AccGroup_Type = DisplayString
_QosClassMapV6AccGroup_Object = MibTableColumn
qosClassMapV6AccGroup = _QosClassMapV6AccGroup_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 7),
    _QosClassMapV6AccGroup_Type()
)
qosClassMapV6AccGroup.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosClassMapV6AccGroup.setStatus("current")
_QosClassMapV6Flow_Type = DisplayString
_QosClassMapV6Flow_Object = MibTableColumn
qosClassMapV6Flow = _QosClassMapV6Flow_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 8),
    _QosClassMapV6Flow_Type()
)
qosClassMapV6Flow.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosClassMapV6Flow.setStatus("current")
_QosClassMapVlan_Type = DisplayString
_QosClassMapVlan_Object = MibTableColumn
qosClassMapVlan = _QosClassMapVlan_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 9),
    _QosClassMapVlan_Type()
)
qosClassMapVlan.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosClassMapVlan.setStatus("current")
_QosClassCos_Type = DisplayString
_QosClassCos_Object = MibTableColumn
qosClassCos = _QosClassCos_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 10),
    _QosClassCos_Type()
)
qosClassCos.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosClassCos.setStatus("current")
_QosClassMapEXPtopmost_Type = DisplayString
_QosClassMapEXPtopmost_Object = MibTableColumn
qosClassMapEXPtopmost = _QosClassMapEXPtopmost_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 11),
    _QosClassMapEXPtopmost_Type()
)
qosClassMapEXPtopmost.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosClassMapEXPtopmost.setStatus("current")


class _QosClassMapStatus_Type(Integer32):
    """Custom type qosClassMapStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_QosClassMapStatus_Type.__name__ = "Integer32"
_QosClassMapStatus_Object = MibTableColumn
qosClassMapStatus = _QosClassMapStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 3, 1, 12),
    _QosClassMapStatus_Type()
)
qosClassMapStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosClassMapStatus.setStatus("current")
_QosPolicyTable_Object = MibTable
qosPolicyTable = _QosPolicyTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4)
)
if mibBuilder.loadTexts:
    qosPolicyTable.setStatus("current")
_QosPolicyEntry_Object = MibTableRow
qosPolicyEntry = _QosPolicyEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1)
)
qosPolicyEntry.setIndexNames(
    (0, "NAG-MIB", "qosPolicyName"),
)
if mibBuilder.loadTexts:
    qosPolicyEntry.setStatus("current")


class _QosPolicyName_Type(DisplayString):
    """Custom type qosPolicyName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_QosPolicyName_Type.__name__ = "DisplayString"
_QosPolicyName_Object = MibTableColumn
qosPolicyName = _QosPolicyName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 1),
    _QosPolicyName_Type()
)
qosPolicyName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    qosPolicyName.setStatus("current")


class _QosPolicyClassMap_Type(DisplayString):
    """Custom type qosPolicyClassMap based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_QosPolicyClassMap_Type.__name__ = "DisplayString"
_QosPolicyClassMap_Object = MibTableColumn
qosPolicyClassMap = _QosPolicyClassMap_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 2),
    _QosPolicyClassMap_Type()
)
qosPolicyClassMap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPolicyClassMap.setStatus("current")


class _QosPolicyType_Type(Integer32):
    """Custom type qosPolicyType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("policymap", 0),
          ("matchclassmap", 1),
          ("sp", 2),
          ("aggregatePolicer", 3))
    )


_QosPolicyType_Type.__name__ = "Integer32"
_QosPolicyType_Object = MibTableColumn
qosPolicyType = _QosPolicyType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 3),
    _QosPolicyType_Type()
)
qosPolicyType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPolicyType.setStatus("current")


class _QosPolicyRateKbps_Type(Integer32):
    """Custom type qosPolicyRateKbps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10000000),
    )


_QosPolicyRateKbps_Type.__name__ = "Integer32"
_QosPolicyRateKbps_Object = MibTableColumn
qosPolicyRateKbps = _QosPolicyRateKbps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 4),
    _QosPolicyRateKbps_Type()
)
qosPolicyRateKbps.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPolicyRateKbps.setStatus("current")


class _QosPolicyNormalBurstKbps_Type(Integer32):
    """Custom type qosPolicyNormalBurstKbps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000000),
    )


_QosPolicyNormalBurstKbps_Type.__name__ = "Integer32"
_QosPolicyNormalBurstKbps_Object = MibTableColumn
qosPolicyNormalBurstKbps = _QosPolicyNormalBurstKbps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 5),
    _QosPolicyNormalBurstKbps_Type()
)
qosPolicyNormalBurstKbps.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPolicyNormalBurstKbps.setStatus("current")


class _QosPolicyMaximumBurstKbps_Type(Integer32):
    """Custom type qosPolicyMaximumBurstKbps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000000),
    )


_QosPolicyMaximumBurstKbps_Type.__name__ = "Integer32"
_QosPolicyMaximumBurstKbps_Object = MibTableColumn
qosPolicyMaximumBurstKbps = _QosPolicyMaximumBurstKbps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 6),
    _QosPolicyMaximumBurstKbps_Type()
)
qosPolicyMaximumBurstKbps.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPolicyMaximumBurstKbps.setStatus("current")


class _QosPolicyPeakKbps_Type(Integer32):
    """Custom type qosPolicyPeakKbps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000000),
    )


_QosPolicyPeakKbps_Type.__name__ = "Integer32"
_QosPolicyPeakKbps_Object = MibTableColumn
qosPolicyPeakKbps = _QosPolicyPeakKbps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 7),
    _QosPolicyPeakKbps_Type()
)
qosPolicyPeakKbps.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPolicyPeakKbps.setStatus("current")


class _QosPolicyConformAction_Type(Integer32):
    """Custom type qosPolicyConformAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("transmit", 0),
          ("drop", 1),
          ("set-dscp-transmit", 2),
          ("set-prec-transmit", 3))
    )


_QosPolicyConformAction_Type.__name__ = "Integer32"
_QosPolicyConformAction_Object = MibTableColumn
qosPolicyConformAction = _QosPolicyConformAction_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 8),
    _QosPolicyConformAction_Type()
)
qosPolicyConformAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPolicyConformAction.setStatus("current")


class _QosPolicyConformActionChangeValue_Type(Integer32):
    """Custom type qosPolicyConformActionChangeValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_QosPolicyConformActionChangeValue_Type.__name__ = "Integer32"
_QosPolicyConformActionChangeValue_Object = MibTableColumn
qosPolicyConformActionChangeValue = _QosPolicyConformActionChangeValue_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 9),
    _QosPolicyConformActionChangeValue_Type()
)
qosPolicyConformActionChangeValue.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPolicyConformActionChangeValue.setStatus("current")


class _QosPolicyExceedAction_Type(Integer32):
    """Custom type qosPolicyExceedAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("transmit", 0),
          ("drop", 1),
          ("policeDscpTransmit", 2))
    )


_QosPolicyExceedAction_Type.__name__ = "Integer32"
_QosPolicyExceedAction_Object = MibTableColumn
qosPolicyExceedAction = _QosPolicyExceedAction_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 10),
    _QosPolicyExceedAction_Type()
)
qosPolicyExceedAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPolicyExceedAction.setStatus("current")


class _QosPolicyViolateAction_Type(Integer32):
    """Custom type qosPolicyViolateAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("transmit", 0),
          ("drop", 1),
          ("policeDscpTransmit", 2))
    )


_QosPolicyViolateAction_Type.__name__ = "Integer32"
_QosPolicyViolateAction_Object = MibTableColumn
qosPolicyViolateAction = _QosPolicyViolateAction_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 11),
    _QosPolicyViolateAction_Type()
)
qosPolicyViolateAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPolicyViolateAction.setStatus("current")
_QosPolicyAggregatePolicer_Type = DisplayString
_QosPolicyAggregatePolicer_Object = MibTableColumn
qosPolicyAggregatePolicer = _QosPolicyAggregatePolicer_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 12),
    _QosPolicyAggregatePolicer_Type()
)
qosPolicyAggregatePolicer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPolicyAggregatePolicer.setStatus("current")


class _QosPolicyStatus_Type(Integer32):
    """Custom type qosPolicyStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_QosPolicyStatus_Type.__name__ = "Integer32"
_QosPolicyStatus_Object = MibTableColumn
qosPolicyStatus = _QosPolicyStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 4, 1, 13),
    _QosPolicyStatus_Type()
)
qosPolicyStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPolicyStatus.setStatus("current")
_QosAggPolicerTable_Object = MibTable
qosAggPolicerTable = _QosAggPolicerTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5)
)
if mibBuilder.loadTexts:
    qosAggPolicerTable.setStatus("current")
_QosAggPolicerEntry_Object = MibTableRow
qosAggPolicerEntry = _QosAggPolicerEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1)
)
qosAggPolicerEntry.setIndexNames(
    (0, "NAG-MIB", "qosAggPolicerName"),
)
if mibBuilder.loadTexts:
    qosAggPolicerEntry.setStatus("current")


class _QosAggPolicerName_Type(DisplayString):
    """Custom type qosAggPolicerName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_QosAggPolicerName_Type.__name__ = "DisplayString"
_QosAggPolicerName_Object = MibTableColumn
qosAggPolicerName = _QosAggPolicerName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 1),
    _QosAggPolicerName_Type()
)
qosAggPolicerName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    qosAggPolicerName.setStatus("current")


class _QosAggPolicerRateKbps_Type(Integer32):
    """Custom type qosAggPolicerRateKbps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10000000),
    )


_QosAggPolicerRateKbps_Type.__name__ = "Integer32"
_QosAggPolicerRateKbps_Object = MibTableColumn
qosAggPolicerRateKbps = _QosAggPolicerRateKbps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 2),
    _QosAggPolicerRateKbps_Type()
)
qosAggPolicerRateKbps.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosAggPolicerRateKbps.setStatus("current")


class _QosAggPolicerNormalBurstKbps_Type(Integer32):
    """Custom type qosAggPolicerNormalBurstKbps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000000),
    )


_QosAggPolicerNormalBurstKbps_Type.__name__ = "Integer32"
_QosAggPolicerNormalBurstKbps_Object = MibTableColumn
qosAggPolicerNormalBurstKbps = _QosAggPolicerNormalBurstKbps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 3),
    _QosAggPolicerNormalBurstKbps_Type()
)
qosAggPolicerNormalBurstKbps.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosAggPolicerNormalBurstKbps.setStatus("current")


class _QosAggPolicerMaximumBurstKbps_Type(Integer32):
    """Custom type qosAggPolicerMaximumBurstKbps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000000),
    )


_QosAggPolicerMaximumBurstKbps_Type.__name__ = "Integer32"
_QosAggPolicerMaximumBurstKbps_Object = MibTableColumn
qosAggPolicerMaximumBurstKbps = _QosAggPolicerMaximumBurstKbps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 4),
    _QosAggPolicerMaximumBurstKbps_Type()
)
qosAggPolicerMaximumBurstKbps.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosAggPolicerMaximumBurstKbps.setStatus("current")


class _QosAggPolicerPeakKbps_Type(Integer32):
    """Custom type qosAggPolicerPeakKbps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000000),
    )


_QosAggPolicerPeakKbps_Type.__name__ = "Integer32"
_QosAggPolicerPeakKbps_Object = MibTableColumn
qosAggPolicerPeakKbps = _QosAggPolicerPeakKbps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 5),
    _QosAggPolicerPeakKbps_Type()
)
qosAggPolicerPeakKbps.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosAggPolicerPeakKbps.setStatus("current")


class _QosAggPolicerConformAction_Type(Integer32):
    """Custom type qosAggPolicerConformAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("transmit", 0),
          ("drop", 1),
          ("set-dscp-transmit", 2),
          ("set-prec-transmit", 3))
    )


_QosAggPolicerConformAction_Type.__name__ = "Integer32"
_QosAggPolicerConformAction_Object = MibTableColumn
qosAggPolicerConformAction = _QosAggPolicerConformAction_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 6),
    _QosAggPolicerConformAction_Type()
)
qosAggPolicerConformAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosAggPolicerConformAction.setStatus("current")


class _QosAggPolicerConformActionChangeValue_Type(Integer32):
    """Custom type qosAggPolicerConformActionChangeValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_QosAggPolicerConformActionChangeValue_Type.__name__ = "Integer32"
_QosAggPolicerConformActionChangeValue_Object = MibTableColumn
qosAggPolicerConformActionChangeValue = _QosAggPolicerConformActionChangeValue_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 7),
    _QosAggPolicerConformActionChangeValue_Type()
)
qosAggPolicerConformActionChangeValue.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosAggPolicerConformActionChangeValue.setStatus("current")


class _QosAggPolicerExceedAction_Type(Integer32):
    """Custom type qosAggPolicerExceedAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("transmit", 0),
          ("drop", 1),
          ("policeDscpTransmit", 2))
    )


_QosAggPolicerExceedAction_Type.__name__ = "Integer32"
_QosAggPolicerExceedAction_Object = MibTableColumn
qosAggPolicerExceedAction = _QosAggPolicerExceedAction_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 8),
    _QosAggPolicerExceedAction_Type()
)
qosAggPolicerExceedAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosAggPolicerExceedAction.setStatus("current")


class _QosAggPolicerViolateAction_Type(Integer32):
    """Custom type qosAggPolicerViolateAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("transmit", 0),
          ("drop", 1),
          ("policeDscpTransmit", 2))
    )


_QosAggPolicerViolateAction_Type.__name__ = "Integer32"
_QosAggPolicerViolateAction_Object = MibTableColumn
qosAggPolicerViolateAction = _QosAggPolicerViolateAction_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 9),
    _QosAggPolicerViolateAction_Type()
)
qosAggPolicerViolateAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosAggPolicerViolateAction.setStatus("current")


class _QosAggPolicerStatus_Type(Integer32):
    """Custom type qosAggPolicerStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_QosAggPolicerStatus_Type.__name__ = "Integer32"
_QosAggPolicerStatus_Object = MibTableColumn
qosAggPolicerStatus = _QosAggPolicerStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 5, 1, 10),
    _QosAggPolicerStatus_Type()
)
qosAggPolicerStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosAggPolicerStatus.setStatus("current")
_QosSetTable_Object = MibTable
qosSetTable = _QosSetTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6)
)
if mibBuilder.loadTexts:
    qosSetTable.setStatus("current")
_QosSetEntry_Object = MibTableRow
qosSetEntry = _QosSetEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1)
)
qosSetEntry.setIndexNames(
    (0, "NAG-MIB", "qosSetPolicyMapName"),
)
if mibBuilder.loadTexts:
    qosSetEntry.setStatus("current")


class _QosSetPolicyMapName_Type(DisplayString):
    """Custom type qosSetPolicyMapName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_QosSetPolicyMapName_Type.__name__ = "DisplayString"
_QosSetPolicyMapName_Object = MibTableColumn
qosSetPolicyMapName = _QosSetPolicyMapName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 1),
    _QosSetPolicyMapName_Type()
)
qosSetPolicyMapName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    qosSetPolicyMapName.setStatus("current")


class _QosSetClassMapName_Type(DisplayString):
    """Custom type qosSetClassMapName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_QosSetClassMapName_Type.__name__ = "DisplayString"
_QosSetClassMapName_Object = MibTableColumn
qosSetClassMapName = _QosSetClassMapName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 2),
    _QosSetClassMapName_Type()
)
qosSetClassMapName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosSetClassMapName.setStatus("current")


class _QosSetType_Type(Integer32):
    """Custom type qosSetType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("dscp", 1),
          ("precedence", 2),
          ("nextHop", 3),
          ("v6Dscp", 4),
          ("v6FlowLabel", 6),
          ("v6nextHop", 7),
          ("cos", 8),
          ("expimposition", 9))
    )


_QosSetType_Type.__name__ = "Integer32"
_QosSetType_Object = MibTableColumn
qosSetType = _QosSetType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 3),
    _QosSetType_Type()
)
qosSetType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosSetType.setStatus("current")


class _QosSetdscp_Type(Integer32):
    """Custom type qosSetdscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_QosSetdscp_Type.__name__ = "Integer32"
_QosSetdscp_Object = MibTableColumn
qosSetdscp = _QosSetdscp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 4),
    _QosSetdscp_Type()
)
qosSetdscp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosSetdscp.setStatus("current")


class _QosSetprecedence_Type(Integer32):
    """Custom type qosSetprecedence based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosSetprecedence_Type.__name__ = "Integer32"
_QosSetprecedence_Object = MibTableColumn
qosSetprecedence = _QosSetprecedence_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 5),
    _QosSetprecedence_Type()
)
qosSetprecedence.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosSetprecedence.setStatus("current")
_QosSetnextHop_Type = IpAddress
_QosSetnextHop_Object = MibTableColumn
qosSetnextHop = _QosSetnextHop_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 6),
    _QosSetnextHop_Type()
)
qosSetnextHop.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosSetnextHop.setStatus("current")


class _QosSetv6Dscp_Type(Integer32):
    """Custom type qosSetv6Dscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_QosSetv6Dscp_Type.__name__ = "Integer32"
_QosSetv6Dscp_Object = MibTableColumn
qosSetv6Dscp = _QosSetv6Dscp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 7),
    _QosSetv6Dscp_Type()
)
qosSetv6Dscp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosSetv6Dscp.setStatus("current")


class _QosSetv6FlowLabel_Type(Integer32):
    """Custom type qosSetv6FlowLabel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1048575),
    )


_QosSetv6FlowLabel_Type.__name__ = "Integer32"
_QosSetv6FlowLabel_Object = MibTableColumn
qosSetv6FlowLabel = _QosSetv6FlowLabel_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 8),
    _QosSetv6FlowLabel_Type()
)
qosSetv6FlowLabel.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosSetv6FlowLabel.setStatus("current")
_QosSetv6nextHop_Type = DisplayString
_QosSetv6nextHop_Object = MibTableColumn
qosSetv6nextHop = _QosSetv6nextHop_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 9),
    _QosSetv6nextHop_Type()
)
qosSetv6nextHop.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosSetv6nextHop.setStatus("current")


class _QosSetCos_Type(Integer32):
    """Custom type qosSetCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosSetCos_Type.__name__ = "Integer32"
_QosSetCos_Object = MibTableColumn
qosSetCos = _QosSetCos_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 10),
    _QosSetCos_Type()
)
qosSetCos.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosSetCos.setStatus("current")


class _QosSetEXPimposition_Type(Integer32):
    """Custom type qosSetEXPimposition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosSetEXPimposition_Type.__name__ = "Integer32"
_QosSetEXPimposition_Object = MibTableColumn
qosSetEXPimposition = _QosSetEXPimposition_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 11),
    _QosSetEXPimposition_Type()
)
qosSetEXPimposition.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosSetEXPimposition.setStatus("current")


class _QosSetStatus_Type(Integer32):
    """Custom type qosSetStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_QosSetStatus_Type.__name__ = "Integer32"
_QosSetStatus_Object = MibTableColumn
qosSetStatus = _QosSetStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 6, 1, 12),
    _QosSetStatus_Type()
)
qosSetStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosSetStatus.setStatus("current")
_QosPortBindTable_Object = MibTable
qosPortBindTable = _QosPortBindTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 7)
)
if mibBuilder.loadTexts:
    qosPortBindTable.setStatus("current")
_QosPortBindEntry_Object = MibTableRow
qosPortBindEntry = _QosPortBindEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 7, 1)
)
qosPortBindEntry.setIndexNames(
    (0, "NAG-MIB", "qosPortBindIndex"),
    (0, "NAG-MIB", "qosPortBindPolicy"),
)
if mibBuilder.loadTexts:
    qosPortBindEntry.setStatus("current")
_QosPortBindIndex_Type = Integer32
_QosPortBindIndex_Object = MibTableColumn
qosPortBindIndex = _QosPortBindIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 7, 1, 1),
    _QosPortBindIndex_Type()
)
qosPortBindIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    qosPortBindIndex.setStatus("current")


class _QosPortBindPolicy_Type(DisplayString):
    """Custom type qosPortBindPolicy based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_QosPortBindPolicy_Type.__name__ = "DisplayString"
_QosPortBindPolicy_Object = MibTableColumn
qosPortBindPolicy = _QosPortBindPolicy_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 7, 1, 2),
    _QosPortBindPolicy_Type()
)
qosPortBindPolicy.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    qosPortBindPolicy.setStatus("current")


class _QosPortBindType_Type(Integer32):
    """Custom type qosPortBindType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("input", 1),
          ("output", 2),
          ("noinput", 3),
          ("nooutput", 4))
    )


_QosPortBindType_Type.__name__ = "Integer32"
_QosPortBindType_Object = MibTableColumn
qosPortBindType = _QosPortBindType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 7, 1, 3),
    _QosPortBindType_Type()
)
qosPortBindType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPortBindType.setStatus("current")
_QosPortQueueTable_Object = MibTable
qosPortQueueTable = _QosPortQueueTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8)
)
if mibBuilder.loadTexts:
    qosPortQueueTable.setStatus("current")
_QosPortQueueEntry_Object = MibTableRow
qosPortQueueEntry = _QosPortQueueEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1)
)
qosPortQueueEntry.setIndexNames(
    (0, "NAG-MIB", "qosPortQueueIndex"),
)
if mibBuilder.loadTexts:
    qosPortQueueEntry.setStatus("current")
_QosPortQueueIndex_Type = Integer32
_QosPortQueueIndex_Object = MibTableColumn
qosPortQueueIndex = _QosPortQueueIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 1),
    _QosPortQueueIndex_Type()
)
qosPortQueueIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    qosPortQueueIndex.setStatus("current")
_QosPortQueueWeight1_Type = Integer32
_QosPortQueueWeight1_Object = MibTableColumn
qosPortQueueWeight1 = _QosPortQueueWeight1_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 2),
    _QosPortQueueWeight1_Type()
)
qosPortQueueWeight1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPortQueueWeight1.setStatus("current")
_QosPortQueueWeight2_Type = Integer32
_QosPortQueueWeight2_Object = MibTableColumn
qosPortQueueWeight2 = _QosPortQueueWeight2_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 3),
    _QosPortQueueWeight2_Type()
)
qosPortQueueWeight2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPortQueueWeight2.setStatus("current")
_QosPortQueueWeight3_Type = Integer32
_QosPortQueueWeight3_Object = MibTableColumn
qosPortQueueWeight3 = _QosPortQueueWeight3_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 4),
    _QosPortQueueWeight3_Type()
)
qosPortQueueWeight3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPortQueueWeight3.setStatus("current")
_QosPortQueueWeight4_Type = Integer32
_QosPortQueueWeight4_Object = MibTableColumn
qosPortQueueWeight4 = _QosPortQueueWeight4_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 5),
    _QosPortQueueWeight4_Type()
)
qosPortQueueWeight4.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPortQueueWeight4.setStatus("current")
_QosPortQueueWeight5_Type = Integer32
_QosPortQueueWeight5_Object = MibTableColumn
qosPortQueueWeight5 = _QosPortQueueWeight5_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 6),
    _QosPortQueueWeight5_Type()
)
qosPortQueueWeight5.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPortQueueWeight5.setStatus("current")
_QosPortQueueWeight6_Type = Integer32
_QosPortQueueWeight6_Object = MibTableColumn
qosPortQueueWeight6 = _QosPortQueueWeight6_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 7),
    _QosPortQueueWeight6_Type()
)
qosPortQueueWeight6.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPortQueueWeight6.setStatus("current")
_QosPortQueueWeight7_Type = Integer32
_QosPortQueueWeight7_Object = MibTableColumn
qosPortQueueWeight7 = _QosPortQueueWeight7_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 8),
    _QosPortQueueWeight7_Type()
)
qosPortQueueWeight7.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPortQueueWeight7.setStatus("current")
_QosPortQueueWeight8_Type = Integer32
_QosPortQueueWeight8_Object = MibTableColumn
qosPortQueueWeight8 = _QosPortQueueWeight8_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 9),
    _QosPortQueueWeight8_Type()
)
qosPortQueueWeight8.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPortQueueWeight8.setStatus("current")


class _QosPortQueueStatus_Type(Integer32):
    """Custom type qosPortQueueStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_QosPortQueueStatus_Type.__name__ = "Integer32"
_QosPortQueueStatus_Object = MibTableColumn
qosPortQueueStatus = _QosPortQueueStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 8, 1, 10),
    _QosPortQueueStatus_Type()
)
qosPortQueueStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosPortQueueStatus.setStatus("current")
_QosMap_ObjectIdentity = ObjectIdentity
qosMap = _QosMap_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10)
)


class _QosMapType_Type(Integer32):
    """Custom type qosMapType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("cosDscp", 1),
          ("dscpCos", 2),
          ("dscpMutation", 3),
          ("ipPrecDscp", 4),
          ("policedDscp", 5),
          ("expdscp", 6),
          ("dscpexp", 7))
    )


_QosMapType_Type.__name__ = "Integer32"
_QosMapType_Object = MibScalar
qosMapType = _QosMapType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 1),
    _QosMapType_Type()
)
qosMapType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosMapType.setStatus("current")
_QosMapDscp1_Type = Integer32
_QosMapDscp1_Object = MibScalar
qosMapDscp1 = _QosMapDscp1_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 2),
    _QosMapDscp1_Type()
)
qosMapDscp1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosMapDscp1.setStatus("current")
_QosMapDscp2_Type = Integer32
_QosMapDscp2_Object = MibScalar
qosMapDscp2 = _QosMapDscp2_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 3),
    _QosMapDscp2_Type()
)
qosMapDscp2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosMapDscp2.setStatus("current")
_QosMapDscp3_Type = Integer32
_QosMapDscp3_Object = MibScalar
qosMapDscp3 = _QosMapDscp3_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 4),
    _QosMapDscp3_Type()
)
qosMapDscp3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosMapDscp3.setStatus("current")
_QosMapDscp4_Type = Integer32
_QosMapDscp4_Object = MibScalar
qosMapDscp4 = _QosMapDscp4_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 5),
    _QosMapDscp4_Type()
)
qosMapDscp4.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosMapDscp4.setStatus("current")
_QosMapDscp5_Type = Integer32
_QosMapDscp5_Object = MibScalar
qosMapDscp5 = _QosMapDscp5_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 6),
    _QosMapDscp5_Type()
)
qosMapDscp5.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosMapDscp5.setStatus("current")
_QosMapDscp6_Type = Integer32
_QosMapDscp6_Object = MibScalar
qosMapDscp6 = _QosMapDscp6_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 7),
    _QosMapDscp6_Type()
)
qosMapDscp6.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosMapDscp6.setStatus("current")
_QosMapDscp7_Type = Integer32
_QosMapDscp7_Object = MibScalar
qosMapDscp7 = _QosMapDscp7_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 8),
    _QosMapDscp7_Type()
)
qosMapDscp7.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosMapDscp7.setStatus("current")
_QosMapDscp8_Type = Integer32
_QosMapDscp8_Object = MibScalar
qosMapDscp8 = _QosMapDscp8_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 9),
    _QosMapDscp8_Type()
)
qosMapDscp8.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosMapDscp8.setStatus("current")
_QosMapCos_Type = Integer32
_QosMapCos_Object = MibScalar
qosMapCos = _QosMapCos_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 10),
    _QosMapCos_Type()
)
qosMapCos.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosMapCos.setStatus("current")


class _QosMapEXP_Type(Integer32):
    """Custom type qosMapEXP based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosMapEXP_Type.__name__ = "Integer32"
_QosMapEXP_Object = MibScalar
qosMapEXP = _QosMapEXP_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 11),
    _QosMapEXP_Type()
)
qosMapEXP.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosMapEXP.setStatus("current")
_QosMapMarkDownDscp_Type = Integer32
_QosMapMarkDownDscp_Object = MibScalar
qosMapMarkDownDscp = _QosMapMarkDownDscp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 12),
    _QosMapMarkDownDscp_Type()
)
qosMapMarkDownDscp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosMapMarkDownDscp.setStatus("current")


class _QosMapMarkDownType_Type(Integer32):
    """Custom type qosMapMarkDownType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("normal-burst", 0),
          ("max-burst", 1))
    )


_QosMapMarkDownType_Type.__name__ = "Integer32"
_QosMapMarkDownType_Object = MibScalar
qosMapMarkDownType = _QosMapMarkDownType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 13),
    _QosMapMarkDownType_Type()
)
qosMapMarkDownType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosMapMarkDownType.setStatus("current")


class _QosMapMutationName_Type(DisplayString):
    """Custom type qosMapMutationName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_QosMapMutationName_Type.__name__ = "DisplayString"
_QosMapMutationName_Object = MibScalar
qosMapMutationName = _QosMapMutationName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 14),
    _QosMapMutationName_Type()
)
qosMapMutationName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosMapMutationName.setStatus("current")
_QosMapMutationOut_Type = Integer32
_QosMapMutationOut_Object = MibScalar
qosMapMutationOut = _QosMapMutationOut_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 15),
    _QosMapMutationOut_Type()
)
qosMapMutationOut.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosMapMutationOut.setStatus("current")


class _QosMapStatus_Type(Integer32):
    """Custom type qosMapStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_QosMapStatus_Type.__name__ = "Integer32"
_QosMapStatus_Object = MibScalar
qosMapStatus = _QosMapStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 10, 16),
    _QosMapStatus_Type()
)
qosMapStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosMapStatus.setStatus("current")
_Showqos_ObjectIdentity = ObjectIdentity
showqos = _Showqos_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11)
)
_ShowclassmapTable_Object = MibTable
showclassmapTable = _ShowclassmapTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 1)
)
if mibBuilder.loadTexts:
    showclassmapTable.setStatus("current")
_ShowclassmapEntry_Object = MibTableRow
showclassmapEntry = _ShowclassmapEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 1, 1)
)
showclassmapEntry.setIndexNames(
    (0, "NAG-MIB", "showclassmapname"),
)
if mibBuilder.loadTexts:
    showclassmapEntry.setStatus("current")


class _Showclassmapname_Type(DisplayString):
    """Custom type showclassmapname based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_Showclassmapname_Type.__name__ = "DisplayString"
_Showclassmapname_Object = MibTableColumn
showclassmapname = _Showclassmapname_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 1, 1, 1),
    _Showclassmapname_Type()
)
showclassmapname.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    showclassmapname.setStatus("current")


class _Showclassmapmatch_Type(DisplayString):
    """Custom type showclassmapmatch based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 512),
    )


_Showclassmapmatch_Type.__name__ = "DisplayString"
_Showclassmapmatch_Object = MibTableColumn
showclassmapmatch = _Showclassmapmatch_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 1, 1, 2),
    _Showclassmapmatch_Type()
)
showclassmapmatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showclassmapmatch.setStatus("current")
_ShowpolicymapTable_Object = MibTable
showpolicymapTable = _ShowpolicymapTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 2)
)
if mibBuilder.loadTexts:
    showpolicymapTable.setStatus("current")
_ShowpolicymapEntry_Object = MibTableRow
showpolicymapEntry = _ShowpolicymapEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 2, 1)
)
showpolicymapEntry.setIndexNames(
    (0, "NAG-MIB", "showpolicymapname"),
)
if mibBuilder.loadTexts:
    showpolicymapEntry.setStatus("current")


class _Showpolicymapname_Type(DisplayString):
    """Custom type showpolicymapname based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_Showpolicymapname_Type.__name__ = "DisplayString"
_Showpolicymapname_Object = MibTableColumn
showpolicymapname = _Showpolicymapname_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 2, 1, 1),
    _Showpolicymapname_Type()
)
showpolicymapname.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    showpolicymapname.setStatus("current")


class _Showpolicymapcontent_Type(DisplayString):
    """Custom type showpolicymapcontent based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 512),
    )


_Showpolicymapcontent_Type.__name__ = "DisplayString"
_Showpolicymapcontent_Object = MibTableColumn
showpolicymapcontent = _Showpolicymapcontent_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 2, 1, 2),
    _Showpolicymapcontent_Type()
)
showpolicymapcontent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showpolicymapcontent.setStatus("current")
_ShowqosaggregatepolicerTable_Object = MibTable
showqosaggregatepolicerTable = _ShowqosaggregatepolicerTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 3)
)
if mibBuilder.loadTexts:
    showqosaggregatepolicerTable.setStatus("current")
_ShowqosaggregatepolicerEntry_Object = MibTableRow
showqosaggregatepolicerEntry = _ShowqosaggregatepolicerEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 3, 1)
)
showqosaggregatepolicerEntry.setIndexNames(
    (0, "NAG-MIB", "showqosaggregatepolicername"),
)
if mibBuilder.loadTexts:
    showqosaggregatepolicerEntry.setStatus("current")


class _Showqosaggregatepolicername_Type(DisplayString):
    """Custom type showqosaggregatepolicername based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_Showqosaggregatepolicername_Type.__name__ = "DisplayString"
_Showqosaggregatepolicername_Object = MibTableColumn
showqosaggregatepolicername = _Showqosaggregatepolicername_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 3, 1, 1),
    _Showqosaggregatepolicername_Type()
)
showqosaggregatepolicername.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    showqosaggregatepolicername.setStatus("current")


class _Showqosaggregatepolicercontent_Type(DisplayString):
    """Custom type showqosaggregatepolicercontent based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 512),
    )


_Showqosaggregatepolicercontent_Type.__name__ = "DisplayString"
_Showqosaggregatepolicercontent_Object = MibTableColumn
showqosaggregatepolicercontent = _Showqosaggregatepolicercontent_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 3, 1, 2),
    _Showqosaggregatepolicercontent_Type()
)
showqosaggregatepolicercontent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showqosaggregatepolicercontent.setStatus("current")
_ShowmlsqosinterfaceTable_Object = MibTable
showmlsqosinterfaceTable = _ShowmlsqosinterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 4)
)
if mibBuilder.loadTexts:
    showmlsqosinterfaceTable.setStatus("current")
_ShowmlsqosinterfaceEntry_Object = MibTableRow
showmlsqosinterfaceEntry = _ShowmlsqosinterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 4, 1)
)
showmlsqosinterfaceEntry.setIndexNames(
    (0, "NAG-MIB", "showmlsqosinterfaceIndex"),
)
if mibBuilder.loadTexts:
    showmlsqosinterfaceEntry.setStatus("current")
_ShowmlsqosinterfaceIndex_Type = Integer32
_ShowmlsqosinterfaceIndex_Object = MibTableColumn
showmlsqosinterfaceIndex = _ShowmlsqosinterfaceIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 4, 1, 1),
    _ShowmlsqosinterfaceIndex_Type()
)
showmlsqosinterfaceIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    showmlsqosinterfaceIndex.setStatus("current")


class _Showmlsqosinterfaceqoscontent_Type(DisplayString):
    """Custom type showmlsqosinterfaceqoscontent based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 512),
    )


_Showmlsqosinterfaceqoscontent_Type.__name__ = "DisplayString"
_Showmlsqosinterfaceqoscontent_Object = MibTableColumn
showmlsqosinterfaceqoscontent = _Showmlsqosinterfaceqoscontent_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 4, 1, 2),
    _Showmlsqosinterfaceqoscontent_Type()
)
showmlsqosinterfaceqoscontent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showmlsqosinterfaceqoscontent.setStatus("current")
_Showmlsqosmaps_ObjectIdentity = ObjectIdentity
showmlsqosmaps = _Showmlsqosmaps_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5)
)


class _Showmlsqosmapscosdscp_Type(DisplayString):
    """Custom type showmlsqosmapscosdscp based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 512),
    )


_Showmlsqosmapscosdscp_Type.__name__ = "DisplayString"
_Showmlsqosmapscosdscp_Object = MibScalar
showmlsqosmapscosdscp = _Showmlsqosmapscosdscp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5, 1),
    _Showmlsqosmapscosdscp_Type()
)
showmlsqosmapscosdscp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showmlsqosmapscosdscp.setStatus("current")


class _Showmlsqosmapscosqueue_Type(DisplayString):
    """Custom type showmlsqosmapscosqueue based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 512),
    )


_Showmlsqosmapscosqueue_Type.__name__ = "DisplayString"
_Showmlsqosmapscosqueue_Object = MibScalar
showmlsqosmapscosqueue = _Showmlsqosmapscosqueue_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5, 2),
    _Showmlsqosmapscosqueue_Type()
)
showmlsqosmapscosqueue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showmlsqosmapscosqueue.setStatus("current")


class _Showmlsqosmapsdscpcos_Type(DisplayString):
    """Custom type showmlsqosmapsdscpcos based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 512),
    )


_Showmlsqosmapsdscpcos_Type.__name__ = "DisplayString"
_Showmlsqosmapsdscpcos_Object = MibScalar
showmlsqosmapsdscpcos = _Showmlsqosmapsdscpcos_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5, 3),
    _Showmlsqosmapsdscpcos_Type()
)
showmlsqosmapsdscpcos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showmlsqosmapsdscpcos.setStatus("current")


class _Showmlsqosmapsipprecdscp_Type(DisplayString):
    """Custom type showmlsqosmapsipprecdscp based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 512),
    )


_Showmlsqosmapsipprecdscp_Type.__name__ = "DisplayString"
_Showmlsqosmapsipprecdscp_Object = MibScalar
showmlsqosmapsipprecdscp = _Showmlsqosmapsipprecdscp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5, 4),
    _Showmlsqosmapsipprecdscp_Type()
)
showmlsqosmapsipprecdscp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showmlsqosmapsipprecdscp.setStatus("current")


class _Showmlsqosmapspoliceddscp_Type(DisplayString):
    """Custom type showmlsqosmapspoliceddscp based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 512),
    )


_Showmlsqosmapspoliceddscp_Type.__name__ = "DisplayString"
_Showmlsqosmapspoliceddscp_Object = MibScalar
showmlsqosmapspoliceddscp = _Showmlsqosmapspoliceddscp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5, 5),
    _Showmlsqosmapspoliceddscp_Type()
)
showmlsqosmapspoliceddscp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showmlsqosmapspoliceddscp.setStatus("current")


class _Showmlsqosmapspoliceddscpnormalburst_Type(DisplayString):
    """Custom type showmlsqosmapspoliceddscpnormalburst based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 512),
    )


_Showmlsqosmapspoliceddscpnormalburst_Type.__name__ = "DisplayString"
_Showmlsqosmapspoliceddscpnormalburst_Object = MibScalar
showmlsqosmapspoliceddscpnormalburst = _Showmlsqosmapspoliceddscpnormalburst_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5, 6),
    _Showmlsqosmapspoliceddscpnormalburst_Type()
)
showmlsqosmapspoliceddscpnormalburst.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showmlsqosmapspoliceddscpnormalburst.setStatus("current")


class _Showmlsqosmapsexpdscp_Type(DisplayString):
    """Custom type showmlsqosmapsexpdscp based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 512),
    )


_Showmlsqosmapsexpdscp_Type.__name__ = "DisplayString"
_Showmlsqosmapsexpdscp_Object = MibScalar
showmlsqosmapsexpdscp = _Showmlsqosmapsexpdscp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5, 7),
    _Showmlsqosmapsexpdscp_Type()
)
showmlsqosmapsexpdscp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showmlsqosmapsexpdscp.setStatus("current")


class _Showmlsqosmapsdscpexp_Type(DisplayString):
    """Custom type showmlsqosmapsdscpexp based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 512),
    )


_Showmlsqosmapsdscpexp_Type.__name__ = "DisplayString"
_Showmlsqosmapsdscpexp_Object = MibScalar
showmlsqosmapsdscpexp = _Showmlsqosmapsdscpexp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 5, 8),
    _Showmlsqosmapsdscpexp_Type()
)
showmlsqosmapsdscpexp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showmlsqosmapsdscpexp.setStatus("current")
_ShowmlsqosmapsdscpmutationTable_Object = MibTable
showmlsqosmapsdscpmutationTable = _ShowmlsqosmapsdscpmutationTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 6)
)
if mibBuilder.loadTexts:
    showmlsqosmapsdscpmutationTable.setStatus("current")
_ShowmlsqosmapsdscpmutationEntry_Object = MibTableRow
showmlsqosmapsdscpmutationEntry = _ShowmlsqosmapsdscpmutationEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 6, 1)
)
showmlsqosmapsdscpmutationEntry.setIndexNames(
    (0, "NAG-MIB", "showmlsqosmapsdscpmutationname"),
)
if mibBuilder.loadTexts:
    showmlsqosmapsdscpmutationEntry.setStatus("current")


class _Showmlsqosmapsdscpmutationname_Type(DisplayString):
    """Custom type showmlsqosmapsdscpmutationname based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_Showmlsqosmapsdscpmutationname_Type.__name__ = "DisplayString"
_Showmlsqosmapsdscpmutationname_Object = MibTableColumn
showmlsqosmapsdscpmutationname = _Showmlsqosmapsdscpmutationname_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 6, 1, 1),
    _Showmlsqosmapsdscpmutationname_Type()
)
showmlsqosmapsdscpmutationname.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    showmlsqosmapsdscpmutationname.setStatus("current")


class _Showmlsqosmapsdscpmutationcontent_Type(DisplayString):
    """Custom type showmlsqosmapsdscpmutationcontent based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 512),
    )


_Showmlsqosmapsdscpmutationcontent_Type.__name__ = "DisplayString"
_Showmlsqosmapsdscpmutationcontent_Object = MibTableColumn
showmlsqosmapsdscpmutationcontent = _Showmlsqosmapsdscpmutationcontent_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 1, 11, 6, 1, 2),
    _Showmlsqosmapsdscpmutationcontent_Type()
)
showmlsqosmapsdscpmutationcontent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showmlsqosmapsdscpmutationcontent.setStatus("current")
_Qos3_ObjectIdentity = ObjectIdentity
qos3 = _Qos3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2)
)
_Qos3PolicyMapGroupTable_Object = MibTable
qos3PolicyMapGroupTable = _Qos3PolicyMapGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 1)
)
if mibBuilder.loadTexts:
    qos3PolicyMapGroupTable.setStatus("current")
_Qos3PolicyMapGroupEntry_Object = MibTableRow
qos3PolicyMapGroupEntry = _Qos3PolicyMapGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 1, 1)
)
qos3PolicyMapGroupEntry.setIndexNames(
    (0, "NAG-MIB", "qos3PolicyMapGroupIndex"),
)
if mibBuilder.loadTexts:
    qos3PolicyMapGroupEntry.setStatus("current")
_Qos3PolicyMapGroupIndex_Type = Integer32
_Qos3PolicyMapGroupIndex_Object = MibTableColumn
qos3PolicyMapGroupIndex = _Qos3PolicyMapGroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 1, 1, 1),
    _Qos3PolicyMapGroupIndex_Type()
)
qos3PolicyMapGroupIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3PolicyMapGroupIndex.setStatus("current")


class _Qos3PolicyMapGroupName_Type(DisplayString):
    """Custom type qos3PolicyMapGroupName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_Qos3PolicyMapGroupName_Type.__name__ = "DisplayString"
_Qos3PolicyMapGroupName_Object = MibTableColumn
qos3PolicyMapGroupName = _Qos3PolicyMapGroupName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 1, 1, 2),
    _Qos3PolicyMapGroupName_Type()
)
qos3PolicyMapGroupName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyMapGroupName.setStatus("current")


class _Qos3PolicyMapGroupIsExt_Type(Integer32):
    """Custom type qos3PolicyMapGroupIsExt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Qos3PolicyMapGroupIsExt_Type.__name__ = "Integer32"
_Qos3PolicyMapGroupIsExt_Object = MibTableColumn
qos3PolicyMapGroupIsExt = _Qos3PolicyMapGroupIsExt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 1, 1, 3),
    _Qos3PolicyMapGroupIsExt_Type()
)
qos3PolicyMapGroupIsExt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyMapGroupIsExt.setStatus("current")


class _Qos3PolicyMapGroupStatus_Type(Integer32):
    """Custom type qos3PolicyMapGroupStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_Qos3PolicyMapGroupStatus_Type.__name__ = "Integer32"
_Qos3PolicyMapGroupStatus_Object = MibTableColumn
qos3PolicyMapGroupStatus = _Qos3PolicyMapGroupStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 1, 1, 4),
    _Qos3PolicyMapGroupStatus_Type()
)
qos3PolicyMapGroupStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyMapGroupStatus.setStatus("current")
_Qos3ClassMapTable_Object = MibTable
qos3ClassMapTable = _Qos3ClassMapTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 2)
)
if mibBuilder.loadTexts:
    qos3ClassMapTable.setStatus("current")
_Qos3ClassMapEntry_Object = MibTableRow
qos3ClassMapEntry = _Qos3ClassMapEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 2, 1)
)
qos3ClassMapEntry.setIndexNames(
    (0, "NAG-MIB", "qos3ClassMapName"),
)
if mibBuilder.loadTexts:
    qos3ClassMapEntry.setStatus("current")


class _Qos3ClassMapName_Type(DisplayString):
    """Custom type qos3ClassMapName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_Qos3ClassMapName_Type.__name__ = "DisplayString"
_Qos3ClassMapName_Object = MibTableColumn
qos3ClassMapName = _Qos3ClassMapName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 2, 1, 1),
    _Qos3ClassMapName_Type()
)
qos3ClassMapName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3ClassMapName.setStatus("current")


class _Qos3ClassMapType_Type(Integer32):
    """Custom type qos3ClassMapType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("cos", 0),
          ("dscp", 1),
          ("ipPrecedence", 2),
          ("ipv6Dscp", 3),
          ("ipv6Flowlabel", 4),
          ("exp", 5),
          ("vlan", 6),
          ("aclIndex", 7))
    )


_Qos3ClassMapType_Type.__name__ = "Integer32"
_Qos3ClassMapType_Object = MibTableColumn
qos3ClassMapType = _Qos3ClassMapType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 2, 1, 2),
    _Qos3ClassMapType_Type()
)
qos3ClassMapType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3ClassMapType.setStatus("current")
_Qos3ClassMapValue_Type = DisplayString
_Qos3ClassMapValue_Object = MibTableColumn
qos3ClassMapValue = _Qos3ClassMapValue_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 2, 1, 3),
    _Qos3ClassMapValue_Type()
)
qos3ClassMapValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3ClassMapValue.setStatus("current")
_Qos3ClassMapUsedTime_Type = Integer32
_Qos3ClassMapUsedTime_Object = MibTableColumn
qos3ClassMapUsedTime = _Qos3ClassMapUsedTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 2, 1, 4),
    _Qos3ClassMapUsedTime_Type()
)
qos3ClassMapUsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3ClassMapUsedTime.setStatus("current")


class _Qos3ClassMapStatus_Type(Integer32):
    """Custom type qos3ClassMapStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2),
          ("remove", 3))
    )


_Qos3ClassMapStatus_Type.__name__ = "Integer32"
_Qos3ClassMapStatus_Object = MibTableColumn
qos3ClassMapStatus = _Qos3ClassMapStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 2, 1, 5),
    _Qos3ClassMapStatus_Type()
)
qos3ClassMapStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3ClassMapStatus.setStatus("current")
_Qos3AggregatePolicyTable_Object = MibTable
qos3AggregatePolicyTable = _Qos3AggregatePolicyTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3)
)
if mibBuilder.loadTexts:
    qos3AggregatePolicyTable.setStatus("current")
_Qos3AggregatePolicyEntry_Object = MibTableRow
qos3AggregatePolicyEntry = _Qos3AggregatePolicyEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1)
)
qos3AggregatePolicyEntry.setIndexNames(
    (0, "NAG-MIB", "qos3AggPolicyMapName"),
)
if mibBuilder.loadTexts:
    qos3AggregatePolicyEntry.setStatus("current")


class _Qos3AggPolicyMapName_Type(DisplayString):
    """Custom type qos3AggPolicyMapName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_Qos3AggPolicyMapName_Type.__name__ = "DisplayString"
_Qos3AggPolicyMapName_Object = MibTableColumn
qos3AggPolicyMapName = _Qos3AggPolicyMapName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 1),
    _Qos3AggPolicyMapName_Type()
)
qos3AggPolicyMapName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3AggPolicyMapName.setStatus("current")


class _Qos3AggPolicyCIRKbps_Type(Integer32):
    """Custom type qos3AggPolicyCIRKbps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10000000),
    )


_Qos3AggPolicyCIRKbps_Type.__name__ = "Integer32"
_Qos3AggPolicyCIRKbps_Object = MibTableColumn
qos3AggPolicyCIRKbps = _Qos3AggPolicyCIRKbps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 2),
    _Qos3AggPolicyCIRKbps_Type()
)
qos3AggPolicyCIRKbps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3AggPolicyCIRKbps.setStatus("current")


class _Qos3AggPolicyCBSKbps_Type(Integer32):
    """Custom type qos3AggPolicyCBSKbps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000000),
    )


_Qos3AggPolicyCBSKbps_Type.__name__ = "Integer32"
_Qos3AggPolicyCBSKbps_Object = MibTableColumn
qos3AggPolicyCBSKbps = _Qos3AggPolicyCBSKbps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 3),
    _Qos3AggPolicyCBSKbps_Type()
)
qos3AggPolicyCBSKbps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3AggPolicyCBSKbps.setStatus("current")


class _Qos3AggPolicyPBSKbps_Type(Integer32):
    """Custom type qos3AggPolicyPBSKbps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000000),
    )


_Qos3AggPolicyPBSKbps_Type.__name__ = "Integer32"
_Qos3AggPolicyPBSKbps_Object = MibTableColumn
qos3AggPolicyPBSKbps = _Qos3AggPolicyPBSKbps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 4),
    _Qos3AggPolicyPBSKbps_Type()
)
qos3AggPolicyPBSKbps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3AggPolicyPBSKbps.setStatus("current")


class _Qos3AggPolicyPIRKbps_Type(Integer32):
    """Custom type qos3AggPolicyPIRKbps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10000000),
    )


_Qos3AggPolicyPIRKbps_Type.__name__ = "Integer32"
_Qos3AggPolicyPIRKbps_Object = MibTableColumn
qos3AggPolicyPIRKbps = _Qos3AggPolicyPIRKbps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 5),
    _Qos3AggPolicyPIRKbps_Type()
)
qos3AggPolicyPIRKbps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3AggPolicyPIRKbps.setStatus("current")


class _Qos3AggPolicyConformAction_Type(Bits):
    """Custom type qos3AggPolicyConformAction based on Bits"""
    namedValues = NamedValues(
        *(("transmit", 0),
          ("drop", 1),
          ("cos", 2),
          ("dscp", 3),
          ("ipPrecedence", 4),
          ("intp", 5),
          ("dp", 6))
    )

_Qos3AggPolicyConformAction_Type.__name__ = "Bits"
_Qos3AggPolicyConformAction_Object = MibTableColumn
qos3AggPolicyConformAction = _Qos3AggPolicyConformAction_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 6),
    _Qos3AggPolicyConformAction_Type()
)
qos3AggPolicyConformAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3AggPolicyConformAction.setStatus("current")


class _Qos3AggPolicyconformSetCos_Type(Integer32):
    """Custom type qos3AggPolicyconformSetCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos3AggPolicyconformSetCos_Type.__name__ = "Integer32"
_Qos3AggPolicyconformSetCos_Object = MibTableColumn
qos3AggPolicyconformSetCos = _Qos3AggPolicyconformSetCos_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 7),
    _Qos3AggPolicyconformSetCos_Type()
)
qos3AggPolicyconformSetCos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3AggPolicyconformSetCos.setStatus("current")


class _Qos3AggPolicyconformSetDscp_Type(Integer32):
    """Custom type qos3AggPolicyconformSetDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_Qos3AggPolicyconformSetDscp_Type.__name__ = "Integer32"
_Qos3AggPolicyconformSetDscp_Object = MibTableColumn
qos3AggPolicyconformSetDscp = _Qos3AggPolicyconformSetDscp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 8),
    _Qos3AggPolicyconformSetDscp_Type()
)
qos3AggPolicyconformSetDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3AggPolicyconformSetDscp.setStatus("current")


class _Qos3AggPolicyconformSetPrec_Type(Integer32):
    """Custom type qos3AggPolicyconformSetPrec based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos3AggPolicyconformSetPrec_Type.__name__ = "Integer32"
_Qos3AggPolicyconformSetPrec_Object = MibTableColumn
qos3AggPolicyconformSetPrec = _Qos3AggPolicyconformSetPrec_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 9),
    _Qos3AggPolicyconformSetPrec_Type()
)
qos3AggPolicyconformSetPrec.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3AggPolicyconformSetPrec.setStatus("current")


class _Qos3AggPolicyconformSetIntp_Type(Integer32):
    """Custom type qos3AggPolicyconformSetIntp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos3AggPolicyconformSetIntp_Type.__name__ = "Integer32"
_Qos3AggPolicyconformSetIntp_Object = MibTableColumn
qos3AggPolicyconformSetIntp = _Qos3AggPolicyconformSetIntp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 10),
    _Qos3AggPolicyconformSetIntp_Type()
)
qos3AggPolicyconformSetIntp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3AggPolicyconformSetIntp.setStatus("current")


class _Qos3AggPolicyconformSetDp_Type(Integer32):
    """Custom type qos3AggPolicyconformSetDp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_Qos3AggPolicyconformSetDp_Type.__name__ = "Integer32"
_Qos3AggPolicyconformSetDp_Object = MibTableColumn
qos3AggPolicyconformSetDp = _Qos3AggPolicyconformSetDp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 11),
    _Qos3AggPolicyconformSetDp_Type()
)
qos3AggPolicyconformSetDp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3AggPolicyconformSetDp.setStatus("current")


class _Qos3AggPolicyExceedAction_Type(Bits):
    """Custom type qos3AggPolicyExceedAction based on Bits"""
    namedValues = NamedValues(
        *(("transmit", 0),
          ("drop", 1),
          ("cos", 2),
          ("dscp", 3),
          ("ipPrecedence", 4),
          ("intp", 5),
          ("dp", 6),
          ("policiedIntpTransmit", 7))
    )

_Qos3AggPolicyExceedAction_Type.__name__ = "Bits"
_Qos3AggPolicyExceedAction_Object = MibTableColumn
qos3AggPolicyExceedAction = _Qos3AggPolicyExceedAction_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 12),
    _Qos3AggPolicyExceedAction_Type()
)
qos3AggPolicyExceedAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3AggPolicyExceedAction.setStatus("current")


class _Qos3AggPolicyExceedSetCos_Type(Integer32):
    """Custom type qos3AggPolicyExceedSetCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos3AggPolicyExceedSetCos_Type.__name__ = "Integer32"
_Qos3AggPolicyExceedSetCos_Object = MibTableColumn
qos3AggPolicyExceedSetCos = _Qos3AggPolicyExceedSetCos_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 13),
    _Qos3AggPolicyExceedSetCos_Type()
)
qos3AggPolicyExceedSetCos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3AggPolicyExceedSetCos.setStatus("current")


class _Qos3AggPolicyExceedSetDscp_Type(Integer32):
    """Custom type qos3AggPolicyExceedSetDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_Qos3AggPolicyExceedSetDscp_Type.__name__ = "Integer32"
_Qos3AggPolicyExceedSetDscp_Object = MibTableColumn
qos3AggPolicyExceedSetDscp = _Qos3AggPolicyExceedSetDscp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 14),
    _Qos3AggPolicyExceedSetDscp_Type()
)
qos3AggPolicyExceedSetDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3AggPolicyExceedSetDscp.setStatus("current")


class _Qos3AggPolicyExceedSetPrec_Type(Integer32):
    """Custom type qos3AggPolicyExceedSetPrec based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos3AggPolicyExceedSetPrec_Type.__name__ = "Integer32"
_Qos3AggPolicyExceedSetPrec_Object = MibTableColumn
qos3AggPolicyExceedSetPrec = _Qos3AggPolicyExceedSetPrec_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 15),
    _Qos3AggPolicyExceedSetPrec_Type()
)
qos3AggPolicyExceedSetPrec.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3AggPolicyExceedSetPrec.setStatus("current")


class _Qos3AggPolicyExceedSetIntp_Type(Integer32):
    """Custom type qos3AggPolicyExceedSetIntp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos3AggPolicyExceedSetIntp_Type.__name__ = "Integer32"
_Qos3AggPolicyExceedSetIntp_Object = MibTableColumn
qos3AggPolicyExceedSetIntp = _Qos3AggPolicyExceedSetIntp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 16),
    _Qos3AggPolicyExceedSetIntp_Type()
)
qos3AggPolicyExceedSetIntp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3AggPolicyExceedSetIntp.setStatus("current")


class _Qos3AggPolicyExceedSetDp_Type(Integer32):
    """Custom type qos3AggPolicyExceedSetDp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_Qos3AggPolicyExceedSetDp_Type.__name__ = "Integer32"
_Qos3AggPolicyExceedSetDp_Object = MibTableColumn
qos3AggPolicyExceedSetDp = _Qos3AggPolicyExceedSetDp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 17),
    _Qos3AggPolicyExceedSetDp_Type()
)
qos3AggPolicyExceedSetDp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3AggPolicyExceedSetDp.setStatus("current")


class _Qos3AggPolicyViolateAction_Type(Bits):
    """Custom type qos3AggPolicyViolateAction based on Bits"""
    namedValues = NamedValues(
        *(("transmit", 0),
          ("drop", 1),
          ("cos", 2),
          ("dscp", 3),
          ("ipPrecedence", 4),
          ("intp", 5),
          ("dp", 6),
          ("policiedIntpTransmit", 7))
    )

_Qos3AggPolicyViolateAction_Type.__name__ = "Bits"
_Qos3AggPolicyViolateAction_Object = MibTableColumn
qos3AggPolicyViolateAction = _Qos3AggPolicyViolateAction_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 18),
    _Qos3AggPolicyViolateAction_Type()
)
qos3AggPolicyViolateAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3AggPolicyViolateAction.setStatus("current")


class _Qos3AggPolicyViolateSetCos_Type(Integer32):
    """Custom type qos3AggPolicyViolateSetCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos3AggPolicyViolateSetCos_Type.__name__ = "Integer32"
_Qos3AggPolicyViolateSetCos_Object = MibTableColumn
qos3AggPolicyViolateSetCos = _Qos3AggPolicyViolateSetCos_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 19),
    _Qos3AggPolicyViolateSetCos_Type()
)
qos3AggPolicyViolateSetCos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3AggPolicyViolateSetCos.setStatus("current")


class _Qos3AggPolicyViolateSetDscp_Type(Integer32):
    """Custom type qos3AggPolicyViolateSetDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_Qos3AggPolicyViolateSetDscp_Type.__name__ = "Integer32"
_Qos3AggPolicyViolateSetDscp_Object = MibTableColumn
qos3AggPolicyViolateSetDscp = _Qos3AggPolicyViolateSetDscp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 20),
    _Qos3AggPolicyViolateSetDscp_Type()
)
qos3AggPolicyViolateSetDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3AggPolicyViolateSetDscp.setStatus("current")


class _Qos3AggPolicyViolateSetPrec_Type(Integer32):
    """Custom type qos3AggPolicyViolateSetPrec based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos3AggPolicyViolateSetPrec_Type.__name__ = "Integer32"
_Qos3AggPolicyViolateSetPrec_Object = MibTableColumn
qos3AggPolicyViolateSetPrec = _Qos3AggPolicyViolateSetPrec_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 21),
    _Qos3AggPolicyViolateSetPrec_Type()
)
qos3AggPolicyViolateSetPrec.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3AggPolicyViolateSetPrec.setStatus("current")


class _Qos3AggPolicyViolateSetIntp_Type(Integer32):
    """Custom type qos3AggPolicyViolateSetIntp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos3AggPolicyViolateSetIntp_Type.__name__ = "Integer32"
_Qos3AggPolicyViolateSetIntp_Object = MibTableColumn
qos3AggPolicyViolateSetIntp = _Qos3AggPolicyViolateSetIntp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 22),
    _Qos3AggPolicyViolateSetIntp_Type()
)
qos3AggPolicyViolateSetIntp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3AggPolicyViolateSetIntp.setStatus("current")


class _Qos3AggPolicyViolateSetDp_Type(Integer32):
    """Custom type qos3AggPolicyViolateSetDp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_Qos3AggPolicyViolateSetDp_Type.__name__ = "Integer32"
_Qos3AggPolicyViolateSetDp_Object = MibTableColumn
qos3AggPolicyViolateSetDp = _Qos3AggPolicyViolateSetDp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 23),
    _Qos3AggPolicyViolateSetDp_Type()
)
qos3AggPolicyViolateSetDp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3AggPolicyViolateSetDp.setStatus("current")


class _Qos3AggPolicyStatus_Type(Integer32):
    """Custom type qos3AggPolicyStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_Qos3AggPolicyStatus_Type.__name__ = "Integer32"
_Qos3AggPolicyStatus_Object = MibTableColumn
qos3AggPolicyStatus = _Qos3AggPolicyStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 3, 1, 24),
    _Qos3AggPolicyStatus_Type()
)
qos3AggPolicyStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3AggPolicyStatus.setStatus("current")
_Qos3PolicyTable_Object = MibTable
qos3PolicyTable = _Qos3PolicyTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4)
)
if mibBuilder.loadTexts:
    qos3PolicyTable.setStatus("current")
_Qos3PolicyEntry_Object = MibTableRow
qos3PolicyEntry = _Qos3PolicyEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1)
)
qos3PolicyEntry.setIndexNames(
    (0, "NAG-MIB", "qos3PolicyMapIndex"),
    (0, "NAG-MIB", "qos3PolicyClassMapName"),
)
if mibBuilder.loadTexts:
    qos3PolicyEntry.setStatus("current")
_Qos3PolicyMapIndex_Type = Integer32
_Qos3PolicyMapIndex_Object = MibTableColumn
qos3PolicyMapIndex = _Qos3PolicyMapIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 1),
    _Qos3PolicyMapIndex_Type()
)
qos3PolicyMapIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3PolicyMapIndex.setStatus("current")


class _Qos3PolicyClassMapName_Type(DisplayString):
    """Custom type qos3PolicyClassMapName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_Qos3PolicyClassMapName_Type.__name__ = "DisplayString"
_Qos3PolicyClassMapName_Object = MibTableColumn
qos3PolicyClassMapName = _Qos3PolicyClassMapName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 2),
    _Qos3PolicyClassMapName_Type()
)
qos3PolicyClassMapName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3PolicyClassMapName.setStatus("current")


class _Qos3PolicyInsertClassMapName_Type(DisplayString):
    """Custom type qos3PolicyInsertClassMapName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_Qos3PolicyInsertClassMapName_Type.__name__ = "DisplayString"
_Qos3PolicyInsertClassMapName_Object = MibTableColumn
qos3PolicyInsertClassMapName = _Qos3PolicyInsertClassMapName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 3),
    _Qos3PolicyInsertClassMapName_Type()
)
qos3PolicyInsertClassMapName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyInsertClassMapName.setStatus("current")


class _Qos3PolicyType_Type(Bits):
    """Custom type qos3PolicyType based on Bits"""
    namedValues = NamedValues(
        *(("pidAction", 0),
          ("colorAction", 1),
          ("aggregateAction", 2))
    )

_Qos3PolicyType_Type.__name__ = "Bits"
_Qos3PolicyType_Object = MibTableColumn
qos3PolicyType = _Qos3PolicyType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 4),
    _Qos3PolicyType_Type()
)
qos3PolicyType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyType.setStatus("current")


class _Qos3PolicyCIRKbps_Type(Integer32):
    """Custom type qos3PolicyCIRKbps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10000000),
    )


_Qos3PolicyCIRKbps_Type.__name__ = "Integer32"
_Qos3PolicyCIRKbps_Object = MibTableColumn
qos3PolicyCIRKbps = _Qos3PolicyCIRKbps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 5),
    _Qos3PolicyCIRKbps_Type()
)
qos3PolicyCIRKbps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyCIRKbps.setStatus("current")


class _Qos3PolicyCBSKbps_Type(Integer32):
    """Custom type qos3PolicyCBSKbps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000000),
    )


_Qos3PolicyCBSKbps_Type.__name__ = "Integer32"
_Qos3PolicyCBSKbps_Object = MibTableColumn
qos3PolicyCBSKbps = _Qos3PolicyCBSKbps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 6),
    _Qos3PolicyCBSKbps_Type()
)
qos3PolicyCBSKbps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyCBSKbps.setStatus("current")


class _Qos3PolicyPBSKbps_Type(Integer32):
    """Custom type qos3PolicyPBSKbps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000000),
    )


_Qos3PolicyPBSKbps_Type.__name__ = "Integer32"
_Qos3PolicyPBSKbps_Object = MibTableColumn
qos3PolicyPBSKbps = _Qos3PolicyPBSKbps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 7),
    _Qos3PolicyPBSKbps_Type()
)
qos3PolicyPBSKbps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyPBSKbps.setStatus("current")


class _Qos3PolicyPIRKbps_Type(Integer32):
    """Custom type qos3PolicyPIRKbps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10000000),
    )


_Qos3PolicyPIRKbps_Type.__name__ = "Integer32"
_Qos3PolicyPIRKbps_Object = MibTableColumn
qos3PolicyPIRKbps = _Qos3PolicyPIRKbps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 8),
    _Qos3PolicyPIRKbps_Type()
)
qos3PolicyPIRKbps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyPIRKbps.setStatus("current")


class _Qos3PolicyConformAction_Type(Bits):
    """Custom type qos3PolicyConformAction based on Bits"""
    namedValues = NamedValues(
        *(("transmit", 0),
          ("drop", 1),
          ("cos", 2),
          ("dscp", 3),
          ("ipPrecedence", 4),
          ("intp", 5),
          ("dp", 6))
    )

_Qos3PolicyConformAction_Type.__name__ = "Bits"
_Qos3PolicyConformAction_Object = MibTableColumn
qos3PolicyConformAction = _Qos3PolicyConformAction_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 9),
    _Qos3PolicyConformAction_Type()
)
qos3PolicyConformAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyConformAction.setStatus("current")


class _Qos3PolicyconformSetCos_Type(Integer32):
    """Custom type qos3PolicyconformSetCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos3PolicyconformSetCos_Type.__name__ = "Integer32"
_Qos3PolicyconformSetCos_Object = MibTableColumn
qos3PolicyconformSetCos = _Qos3PolicyconformSetCos_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 10),
    _Qos3PolicyconformSetCos_Type()
)
qos3PolicyconformSetCos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyconformSetCos.setStatus("current")


class _Qos3PolicyconformSetDscp_Type(Integer32):
    """Custom type qos3PolicyconformSetDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_Qos3PolicyconformSetDscp_Type.__name__ = "Integer32"
_Qos3PolicyconformSetDscp_Object = MibTableColumn
qos3PolicyconformSetDscp = _Qos3PolicyconformSetDscp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 11),
    _Qos3PolicyconformSetDscp_Type()
)
qos3PolicyconformSetDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyconformSetDscp.setStatus("current")


class _Qos3PolicyconformSetPrec_Type(Integer32):
    """Custom type qos3PolicyconformSetPrec based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos3PolicyconformSetPrec_Type.__name__ = "Integer32"
_Qos3PolicyconformSetPrec_Object = MibTableColumn
qos3PolicyconformSetPrec = _Qos3PolicyconformSetPrec_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 12),
    _Qos3PolicyconformSetPrec_Type()
)
qos3PolicyconformSetPrec.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyconformSetPrec.setStatus("current")


class _Qos3PolicyconformSetIntp_Type(Integer32):
    """Custom type qos3PolicyconformSetIntp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos3PolicyconformSetIntp_Type.__name__ = "Integer32"
_Qos3PolicyconformSetIntp_Object = MibTableColumn
qos3PolicyconformSetIntp = _Qos3PolicyconformSetIntp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 13),
    _Qos3PolicyconformSetIntp_Type()
)
qos3PolicyconformSetIntp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyconformSetIntp.setStatus("current")


class _Qos3PolicyconformSetDp_Type(Integer32):
    """Custom type qos3PolicyconformSetDp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_Qos3PolicyconformSetDp_Type.__name__ = "Integer32"
_Qos3PolicyconformSetDp_Object = MibTableColumn
qos3PolicyconformSetDp = _Qos3PolicyconformSetDp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 14),
    _Qos3PolicyconformSetDp_Type()
)
qos3PolicyconformSetDp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyconformSetDp.setStatus("current")


class _Qos3PolicyExceedAction_Type(Bits):
    """Custom type qos3PolicyExceedAction based on Bits"""
    namedValues = NamedValues(
        *(("transmit", 0),
          ("drop", 1),
          ("cos", 2),
          ("dscp", 3),
          ("ipPrecedence", 4),
          ("intp", 5),
          ("dp", 6),
          ("policiedIntpTransmit", 7))
    )

_Qos3PolicyExceedAction_Type.__name__ = "Bits"
_Qos3PolicyExceedAction_Object = MibTableColumn
qos3PolicyExceedAction = _Qos3PolicyExceedAction_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 15),
    _Qos3PolicyExceedAction_Type()
)
qos3PolicyExceedAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyExceedAction.setStatus("current")


class _Qos3PolicyExceedSetCos_Type(Integer32):
    """Custom type qos3PolicyExceedSetCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos3PolicyExceedSetCos_Type.__name__ = "Integer32"
_Qos3PolicyExceedSetCos_Object = MibTableColumn
qos3PolicyExceedSetCos = _Qos3PolicyExceedSetCos_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 16),
    _Qos3PolicyExceedSetCos_Type()
)
qos3PolicyExceedSetCos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyExceedSetCos.setStatus("current")


class _Qos3PolicyExceedSetDscp_Type(Integer32):
    """Custom type qos3PolicyExceedSetDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_Qos3PolicyExceedSetDscp_Type.__name__ = "Integer32"
_Qos3PolicyExceedSetDscp_Object = MibTableColumn
qos3PolicyExceedSetDscp = _Qos3PolicyExceedSetDscp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 17),
    _Qos3PolicyExceedSetDscp_Type()
)
qos3PolicyExceedSetDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyExceedSetDscp.setStatus("current")


class _Qos3PolicyExceedSetPrec_Type(Integer32):
    """Custom type qos3PolicyExceedSetPrec based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos3PolicyExceedSetPrec_Type.__name__ = "Integer32"
_Qos3PolicyExceedSetPrec_Object = MibTableColumn
qos3PolicyExceedSetPrec = _Qos3PolicyExceedSetPrec_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 18),
    _Qos3PolicyExceedSetPrec_Type()
)
qos3PolicyExceedSetPrec.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyExceedSetPrec.setStatus("current")


class _Qos3PolicyExceedSetIntp_Type(Integer32):
    """Custom type qos3PolicyExceedSetIntp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos3PolicyExceedSetIntp_Type.__name__ = "Integer32"
_Qos3PolicyExceedSetIntp_Object = MibTableColumn
qos3PolicyExceedSetIntp = _Qos3PolicyExceedSetIntp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 19),
    _Qos3PolicyExceedSetIntp_Type()
)
qos3PolicyExceedSetIntp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyExceedSetIntp.setStatus("current")


class _Qos3PolicyExceedSetDp_Type(Integer32):
    """Custom type qos3PolicyExceedSetDp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_Qos3PolicyExceedSetDp_Type.__name__ = "Integer32"
_Qos3PolicyExceedSetDp_Object = MibTableColumn
qos3PolicyExceedSetDp = _Qos3PolicyExceedSetDp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 20),
    _Qos3PolicyExceedSetDp_Type()
)
qos3PolicyExceedSetDp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyExceedSetDp.setStatus("current")


class _Qos3PolicyViolateAction_Type(Bits):
    """Custom type qos3PolicyViolateAction based on Bits"""
    namedValues = NamedValues(
        *(("transmit", 0),
          ("drop", 1),
          ("cos", 2),
          ("dscp", 3),
          ("ipPrecedence", 4),
          ("intp", 5),
          ("dp", 6),
          ("policiedIntpTransmit", 7))
    )

_Qos3PolicyViolateAction_Type.__name__ = "Bits"
_Qos3PolicyViolateAction_Object = MibTableColumn
qos3PolicyViolateAction = _Qos3PolicyViolateAction_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 21),
    _Qos3PolicyViolateAction_Type()
)
qos3PolicyViolateAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyViolateAction.setStatus("current")


class _Qos3PolicyViolateSetCos_Type(Integer32):
    """Custom type qos3PolicyViolateSetCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos3PolicyViolateSetCos_Type.__name__ = "Integer32"
_Qos3PolicyViolateSetCos_Object = MibTableColumn
qos3PolicyViolateSetCos = _Qos3PolicyViolateSetCos_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 22),
    _Qos3PolicyViolateSetCos_Type()
)
qos3PolicyViolateSetCos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyViolateSetCos.setStatus("current")


class _Qos3PolicyViolateSetDscp_Type(Integer32):
    """Custom type qos3PolicyViolateSetDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_Qos3PolicyViolateSetDscp_Type.__name__ = "Integer32"
_Qos3PolicyViolateSetDscp_Object = MibTableColumn
qos3PolicyViolateSetDscp = _Qos3PolicyViolateSetDscp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 23),
    _Qos3PolicyViolateSetDscp_Type()
)
qos3PolicyViolateSetDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyViolateSetDscp.setStatus("current")


class _Qos3PolicyViolateSetPrec_Type(Integer32):
    """Custom type qos3PolicyViolateSetPrec based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos3PolicyViolateSetPrec_Type.__name__ = "Integer32"
_Qos3PolicyViolateSetPrec_Object = MibTableColumn
qos3PolicyViolateSetPrec = _Qos3PolicyViolateSetPrec_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 24),
    _Qos3PolicyViolateSetPrec_Type()
)
qos3PolicyViolateSetPrec.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyViolateSetPrec.setStatus("current")


class _Qos3PolicyViolateSetIntp_Type(Integer32):
    """Custom type qos3PolicyViolateSetIntp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos3PolicyViolateSetIntp_Type.__name__ = "Integer32"
_Qos3PolicyViolateSetIntp_Object = MibTableColumn
qos3PolicyViolateSetIntp = _Qos3PolicyViolateSetIntp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 25),
    _Qos3PolicyViolateSetIntp_Type()
)
qos3PolicyViolateSetIntp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyViolateSetIntp.setStatus("current")


class _Qos3PolicyViolateSetDp_Type(Integer32):
    """Custom type qos3PolicyViolateSetDp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_Qos3PolicyViolateSetDp_Type.__name__ = "Integer32"
_Qos3PolicyViolateSetDp_Object = MibTableColumn
qos3PolicyViolateSetDp = _Qos3PolicyViolateSetDp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 26),
    _Qos3PolicyViolateSetDp_Type()
)
qos3PolicyViolateSetDp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyViolateSetDp.setStatus("current")
_Qos3PolicyAggregatePolicer_Type = DisplayString
_Qos3PolicyAggregatePolicer_Object = MibTableColumn
qos3PolicyAggregatePolicer = _Qos3PolicyAggregatePolicer_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 27),
    _Qos3PolicyAggregatePolicer_Type()
)
qos3PolicyAggregatePolicer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyAggregatePolicer.setStatus("current")


class _Qos3PolicyAccounting_Type(Integer32):
    """Custom type qos3PolicyAccounting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Qos3PolicyAccounting_Type.__name__ = "Integer32"
_Qos3PolicyAccounting_Object = MibTableColumn
qos3PolicyAccounting = _Qos3PolicyAccounting_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 28),
    _Qos3PolicyAccounting_Type()
)
qos3PolicyAccounting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyAccounting.setStatus("current")


class _Qos3PolicyPidAction_Type(Bits):
    """Custom type qos3PolicyPidAction based on Bits"""
    namedValues = NamedValues(
        *(("cos", 0),
          ("dscp", 1),
          ("ipPrecedence", 2),
          ("ipNextHop", 3),
          ("exp", 4),
          ("ipv6NextHop", 5),
          ("intp", 6),
          ("dp", 7),
          ("setCvid", 8),
          ("setSvid", 9),
          ("setSTpid", 10),
          ("addSvid", 11),
          ("delCvid", 12),
          ("setTunnelId", 13),
          ("transmit", 14),
          ("drop", 15))
    )

_Qos3PolicyPidAction_Type.__name__ = "Bits"
_Qos3PolicyPidAction_Object = MibTableColumn
qos3PolicyPidAction = _Qos3PolicyPidAction_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 29),
    _Qos3PolicyPidAction_Type()
)
qos3PolicyPidAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyPidAction.setStatus("current")


class _Qos3SetCos_Type(Integer32):
    """Custom type qos3SetCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos3SetCos_Type.__name__ = "Integer32"
_Qos3SetCos_Object = MibTableColumn
qos3SetCos = _Qos3SetCos_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 30),
    _Qos3SetCos_Type()
)
qos3SetCos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3SetCos.setStatus("current")


class _Qos3SetIpDscp_Type(Integer32):
    """Custom type qos3SetIpDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_Qos3SetIpDscp_Type.__name__ = "Integer32"
_Qos3SetIpDscp_Object = MibTableColumn
qos3SetIpDscp = _Qos3SetIpDscp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 31),
    _Qos3SetIpDscp_Type()
)
qos3SetIpDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3SetIpDscp.setStatus("current")


class _Qos3SetIpPrec_Type(Integer32):
    """Custom type qos3SetIpPrec based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos3SetIpPrec_Type.__name__ = "Integer32"
_Qos3SetIpPrec_Object = MibTableColumn
qos3SetIpPrec = _Qos3SetIpPrec_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 32),
    _Qos3SetIpPrec_Type()
)
qos3SetIpPrec.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3SetIpPrec.setStatus("current")


class _Qos3SetIntp_Type(Integer32):
    """Custom type qos3SetIntp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos3SetIntp_Type.__name__ = "Integer32"
_Qos3SetIntp_Object = MibTableColumn
qos3SetIntp = _Qos3SetIntp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 33),
    _Qos3SetIntp_Type()
)
qos3SetIntp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3SetIntp.setStatus("current")


class _Qos3SetDp_Type(Integer32):
    """Custom type qos3SetDp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_Qos3SetDp_Type.__name__ = "Integer32"
_Qos3SetDp_Object = MibTableColumn
qos3SetDp = _Qos3SetDp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 34),
    _Qos3SetDp_Type()
)
qos3SetDp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3SetDp.setStatus("current")


class _Qos3SetCVid_Type(Integer32):
    """Custom type qos3SetCVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_Qos3SetCVid_Type.__name__ = "Integer32"
_Qos3SetCVid_Object = MibTableColumn
qos3SetCVid = _Qos3SetCVid_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 35),
    _Qos3SetCVid_Type()
)
qos3SetCVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3SetCVid.setStatus("current")


class _Qos3SetSVid_Type(Integer32):
    """Custom type qos3SetSVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_Qos3SetSVid_Type.__name__ = "Integer32"
_Qos3SetSVid_Object = MibTableColumn
qos3SetSVid = _Qos3SetSVid_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 36),
    _Qos3SetSVid_Type()
)
qos3SetSVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3SetSVid.setStatus("current")


class _Qos3SetSTpid_Type(Integer32):
    """Custom type qos3SetSTpid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("value0x8100", 1),
          ("value0x88a8", 2),
          ("value0x9100", 3))
    )


_Qos3SetSTpid_Type.__name__ = "Integer32"
_Qos3SetSTpid_Object = MibTableColumn
qos3SetSTpid = _Qos3SetSTpid_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 37),
    _Qos3SetSTpid_Type()
)
qos3SetSTpid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3SetSTpid.setStatus("current")


class _Qos3AddSVid_Type(Integer32):
    """Custom type qos3AddSVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_Qos3AddSVid_Type.__name__ = "Integer32"
_Qos3AddSVid_Object = MibTableColumn
qos3AddSVid = _Qos3AddSVid_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 38),
    _Qos3AddSVid_Type()
)
qos3AddSVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3AddSVid.setStatus("current")


class _Qos3DelCVid_Type(Integer32):
    """Custom type qos3DelCVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Qos3DelCVid_Type.__name__ = "Integer32"
_Qos3DelCVid_Object = MibTableColumn
qos3DelCVid = _Qos3DelCVid_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 39),
    _Qos3DelCVid_Type()
)
qos3DelCVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3DelCVid.setStatus("current")


class _Qos3SetTunnelId_Type(Integer32):
    """Custom type qos3SetTunnelId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 50),
    )


_Qos3SetTunnelId_Type.__name__ = "Integer32"
_Qos3SetTunnelId_Object = MibTableColumn
qos3SetTunnelId = _Qos3SetTunnelId_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 40),
    _Qos3SetTunnelId_Type()
)
qos3SetTunnelId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3SetTunnelId.setStatus("current")


class _Qos3SetIpDefaultPBR_Type(Integer32):
    """Custom type qos3SetIpDefaultPBR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Qos3SetIpDefaultPBR_Type.__name__ = "Integer32"
_Qos3SetIpDefaultPBR_Object = MibTableColumn
qos3SetIpDefaultPBR = _Qos3SetIpDefaultPBR_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 41),
    _Qos3SetIpDefaultPBR_Type()
)
qos3SetIpDefaultPBR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3SetIpDefaultPBR.setStatus("current")


class _Qos3SetIpVrf_Type(Integer32):
    """Custom type qos3SetIpVrf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 252),
    )


_Qos3SetIpVrf_Type.__name__ = "Integer32"
_Qos3SetIpVrf_Object = MibTableColumn
qos3SetIpVrf = _Qos3SetIpVrf_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 42),
    _Qos3SetIpVrf_Type()
)
qos3SetIpVrf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3SetIpVrf.setStatus("current")
_Qos3SetIpNextHop_Type = IpAddress
_Qos3SetIpNextHop_Object = MibTableColumn
qos3SetIpNextHop = _Qos3SetIpNextHop_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 43),
    _Qos3SetIpNextHop_Type()
)
qos3SetIpNextHop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3SetIpNextHop.setStatus("current")


class _Qos3SetExp_Type(Integer32):
    """Custom type qos3SetExp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos3SetExp_Type.__name__ = "Integer32"
_Qos3SetExp_Object = MibTableColumn
qos3SetExp = _Qos3SetExp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 44),
    _Qos3SetExp_Type()
)
qos3SetExp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3SetExp.setStatus("current")


class _Qos3SetIpv6DefaultPBR_Type(Integer32):
    """Custom type qos3SetIpv6DefaultPBR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Qos3SetIpv6DefaultPBR_Type.__name__ = "Integer32"
_Qos3SetIpv6DefaultPBR_Object = MibTableColumn
qos3SetIpv6DefaultPBR = _Qos3SetIpv6DefaultPBR_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 45),
    _Qos3SetIpv6DefaultPBR_Type()
)
qos3SetIpv6DefaultPBR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3SetIpv6DefaultPBR.setStatus("current")


class _Qos3SetIpv6Vrf_Type(Integer32):
    """Custom type qos3SetIpv6Vrf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 252),
    )


_Qos3SetIpv6Vrf_Type.__name__ = "Integer32"
_Qos3SetIpv6Vrf_Object = MibTableColumn
qos3SetIpv6Vrf = _Qos3SetIpv6Vrf_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 46),
    _Qos3SetIpv6Vrf_Type()
)
qos3SetIpv6Vrf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3SetIpv6Vrf.setStatus("current")


class _Qos3SetIpv6NextHop_Type(DisplayString):
    """Custom type qos3SetIpv6NextHop based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 40),
    )


_Qos3SetIpv6NextHop_Type.__name__ = "DisplayString"
_Qos3SetIpv6NextHop_Object = MibTableColumn
qos3SetIpv6NextHop = _Qos3SetIpv6NextHop_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 47),
    _Qos3SetIpv6NextHop_Type()
)
qos3SetIpv6NextHop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3SetIpv6NextHop.setStatus("current")


class _Qos3PolicyStatus_Type(Integer32):
    """Custom type qos3PolicyStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2),
          ("removeColorAct", 3),
          ("removeAggregateAct", 4),
          ("removePidAct", 5))
    )


_Qos3PolicyStatus_Type.__name__ = "Integer32"
_Qos3PolicyStatus_Object = MibTableColumn
qos3PolicyStatus = _Qos3PolicyStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 4, 1, 48),
    _Qos3PolicyStatus_Type()
)
qos3PolicyStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PolicyStatus.setStatus("current")
_Qos3PortTable_Object = MibTable
qos3PortTable = _Qos3PortTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5)
)
if mibBuilder.loadTexts:
    qos3PortTable.setStatus("current")
_Qos3PortEntry_Object = MibTableRow
qos3PortEntry = _Qos3PortEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5, 1)
)
qos3PortEntry.setIndexNames(
    (0, "NAG-MIB", "qos3PortIndex"),
)
if mibBuilder.loadTexts:
    qos3PortEntry.setStatus("current")
_Qos3PortIndex_Type = Integer32
_Qos3PortIndex_Object = MibTableColumn
qos3PortIndex = _Qos3PortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5, 1, 1),
    _Qos3PortIndex_Type()
)
qos3PortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3PortIndex.setStatus("current")


class _Qos3PortCos_Type(Integer32):
    """Custom type qos3PortCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos3PortCos_Type.__name__ = "Integer32"
_Qos3PortCos_Object = MibTableColumn
qos3PortCos = _Qos3PortCos_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5, 1, 2),
    _Qos3PortCos_Type()
)
qos3PortCos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PortCos.setStatus("current")


class _Qos3PortTrust_Type(Bits):
    """Custom type qos3PortTrust based on Bits"""
    namedValues = NamedValues(
        *(("cosEnable", 0),
          ("dscpEnable", 1),
          ("expEnable", 2),
          ("cosDisable", 3),
          ("dscpDisable", 4),
          ("expDisbable", 5))
    )

_Qos3PortTrust_Type.__name__ = "Bits"
_Qos3PortTrust_Object = MibTableColumn
qos3PortTrust = _Qos3PortTrust_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5, 1, 3),
    _Qos3PortTrust_Type()
)
qos3PortTrust.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PortTrust.setStatus("current")


class _Qos3PortWredEnable_Type(Integer32):
    """Custom type qos3PortWredEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("tail", 0),
          ("wred", 1))
    )


_Qos3PortWredEnable_Type.__name__ = "Integer32"
_Qos3PortWredEnable_Object = MibTableColumn
qos3PortWredEnable = _Qos3PortWredEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5, 1, 4),
    _Qos3PortWredEnable_Type()
)
qos3PortWredEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PortWredEnable.setStatus("current")


class _Qos3PortQueueAlgorithm_Type(Integer32):
    """Custom type qos3PortQueueAlgorithm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("sp", 0),
          ("wrr", 1),
          ("wdrr", 2))
    )


_Qos3PortQueueAlgorithm_Type.__name__ = "Integer32"
_Qos3PortQueueAlgorithm_Object = MibTableColumn
qos3PortQueueAlgorithm = _Qos3PortQueueAlgorithm_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5, 1, 5),
    _Qos3PortQueueAlgorithm_Type()
)
qos3PortQueueAlgorithm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PortQueueAlgorithm.setStatus("current")


class _Qos3PortPassThroughCos_Type(Integer32):
    """Custom type qos3PortPassThroughCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Qos3PortPassThroughCos_Type.__name__ = "Integer32"
_Qos3PortPassThroughCos_Object = MibTableColumn
qos3PortPassThroughCos = _Qos3PortPassThroughCos_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5, 1, 6),
    _Qos3PortPassThroughCos_Type()
)
qos3PortPassThroughCos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PortPassThroughCos.setStatus("current")


class _Qos3PortPassThroughDscp_Type(Integer32):
    """Custom type qos3PortPassThroughDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Qos3PortPassThroughDscp_Type.__name__ = "Integer32"
_Qos3PortPassThroughDscp_Object = MibTableColumn
qos3PortPassThroughDscp = _Qos3PortPassThroughDscp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 5, 1, 7),
    _Qos3PortPassThroughDscp_Type()
)
qos3PortPassThroughDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3PortPassThroughDscp.setStatus("current")
_Qos3QueueWeightTable_Object = MibTable
qos3QueueWeightTable = _Qos3QueueWeightTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6)
)
if mibBuilder.loadTexts:
    qos3QueueWeightTable.setStatus("current")
_Qos3QueueWeightEntry_Object = MibTableRow
qos3QueueWeightEntry = _Qos3QueueWeightEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1)
)
qos3QueueWeightEntry.setIndexNames(
    (0, "NAG-MIB", "qos3QueueWeightPortIndex"),
    (0, "NAG-MIB", "qos3QueueWeightType"),
)
if mibBuilder.loadTexts:
    qos3QueueWeightEntry.setStatus("current")
_Qos3QueueWeightPortIndex_Type = Integer32
_Qos3QueueWeightPortIndex_Object = MibTableColumn
qos3QueueWeightPortIndex = _Qos3QueueWeightPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 1),
    _Qos3QueueWeightPortIndex_Type()
)
qos3QueueWeightPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3QueueWeightPortIndex.setStatus("current")


class _Qos3QueueWeightType_Type(Integer32):
    """Custom type qos3QueueWeightType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("wrr", 0),
          ("wdrr", 1))
    )


_Qos3QueueWeightType_Type.__name__ = "Integer32"
_Qos3QueueWeightType_Object = MibTableColumn
qos3QueueWeightType = _Qos3QueueWeightType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 2),
    _Qos3QueueWeightType_Type()
)
qos3QueueWeightType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3QueueWeightType.setStatus("current")


class _Qos3QueueWeight0_Type(Integer32):
    """Custom type qos3QueueWeight0 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32767),
    )


_Qos3QueueWeight0_Type.__name__ = "Integer32"
_Qos3QueueWeight0_Object = MibTableColumn
qos3QueueWeight0 = _Qos3QueueWeight0_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 3),
    _Qos3QueueWeight0_Type()
)
qos3QueueWeight0.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3QueueWeight0.setStatus("current")


class _Qos3QueueWeight1_Type(Integer32):
    """Custom type qos3QueueWeight1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32767),
    )


_Qos3QueueWeight1_Type.__name__ = "Integer32"
_Qos3QueueWeight1_Object = MibTableColumn
qos3QueueWeight1 = _Qos3QueueWeight1_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 4),
    _Qos3QueueWeight1_Type()
)
qos3QueueWeight1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3QueueWeight1.setStatus("current")


class _Qos3QueueWeight2_Type(Integer32):
    """Custom type qos3QueueWeight2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32767),
    )


_Qos3QueueWeight2_Type.__name__ = "Integer32"
_Qos3QueueWeight2_Object = MibTableColumn
qos3QueueWeight2 = _Qos3QueueWeight2_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 5),
    _Qos3QueueWeight2_Type()
)
qos3QueueWeight2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3QueueWeight2.setStatus("current")


class _Qos3QueueWeight3_Type(Integer32):
    """Custom type qos3QueueWeight3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32767),
    )


_Qos3QueueWeight3_Type.__name__ = "Integer32"
_Qos3QueueWeight3_Object = MibTableColumn
qos3QueueWeight3 = _Qos3QueueWeight3_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 6),
    _Qos3QueueWeight3_Type()
)
qos3QueueWeight3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3QueueWeight3.setStatus("current")


class _Qos3QueueWeight4_Type(Integer32):
    """Custom type qos3QueueWeight4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32767),
    )


_Qos3QueueWeight4_Type.__name__ = "Integer32"
_Qos3QueueWeight4_Object = MibTableColumn
qos3QueueWeight4 = _Qos3QueueWeight4_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 7),
    _Qos3QueueWeight4_Type()
)
qos3QueueWeight4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3QueueWeight4.setStatus("current")


class _Qos3QueueWeight5_Type(Integer32):
    """Custom type qos3QueueWeight5 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32767),
    )


_Qos3QueueWeight5_Type.__name__ = "Integer32"
_Qos3QueueWeight5_Object = MibTableColumn
qos3QueueWeight5 = _Qos3QueueWeight5_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 8),
    _Qos3QueueWeight5_Type()
)
qos3QueueWeight5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3QueueWeight5.setStatus("current")


class _Qos3QueueWeight6_Type(Integer32):
    """Custom type qos3QueueWeight6 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32767),
    )


_Qos3QueueWeight6_Type.__name__ = "Integer32"
_Qos3QueueWeight6_Object = MibTableColumn
qos3QueueWeight6 = _Qos3QueueWeight6_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 9),
    _Qos3QueueWeight6_Type()
)
qos3QueueWeight6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3QueueWeight6.setStatus("current")


class _Qos3QueueWeight7_Type(Integer32):
    """Custom type qos3QueueWeight7 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32767),
    )


_Qos3QueueWeight7_Type.__name__ = "Integer32"
_Qos3QueueWeight7_Object = MibTableColumn
qos3QueueWeight7 = _Qos3QueueWeight7_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 10),
    _Qos3QueueWeight7_Type()
)
qos3QueueWeight7.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3QueueWeight7.setStatus("current")


class _Qos3QueueWeightStatus_Type(Integer32):
    """Custom type qos3QueueWeightStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_Qos3QueueWeightStatus_Type.__name__ = "Integer32"
_Qos3QueueWeightStatus_Object = MibTableColumn
qos3QueueWeightStatus = _Qos3QueueWeightStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 6, 1, 11),
    _Qos3QueueWeightStatus_Type()
)
qos3QueueWeightStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3QueueWeightStatus.setStatus("current")
_Qos3QueueBindWidthTable_Object = MibTable
qos3QueueBindWidthTable = _Qos3QueueBindWidthTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 7)
)
if mibBuilder.loadTexts:
    qos3QueueBindWidthTable.setStatus("current")
_Qos3QueueBindWidthEntry_Object = MibTableRow
qos3QueueBindWidthEntry = _Qos3QueueBindWidthEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 7, 1)
)
qos3QueueBindWidthEntry.setIndexNames(
    (0, "NAG-MIB", "qos3QueueBindWidthPortIndex"),
    (0, "NAG-MIB", "qos3QueueBindWidthQueueId"),
)
if mibBuilder.loadTexts:
    qos3QueueBindWidthEntry.setStatus("current")
_Qos3QueueBindWidthPortIndex_Type = Integer32
_Qos3QueueBindWidthPortIndex_Object = MibTableColumn
qos3QueueBindWidthPortIndex = _Qos3QueueBindWidthPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 7, 1, 1),
    _Qos3QueueBindWidthPortIndex_Type()
)
qos3QueueBindWidthPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3QueueBindWidthPortIndex.setStatus("current")


class _Qos3QueueBindWidthQueueId_Type(Integer32):
    """Custom type qos3QueueBindWidthQueueId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_Qos3QueueBindWidthQueueId_Type.__name__ = "Integer32"
_Qos3QueueBindWidthQueueId_Object = MibTableColumn
qos3QueueBindWidthQueueId = _Qos3QueueBindWidthQueueId_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 7, 1, 2),
    _Qos3QueueBindWidthQueueId_Type()
)
qos3QueueBindWidthQueueId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3QueueBindWidthQueueId.setStatus("current")


class _Qos3QueueBindWidthMin_Type(Integer32):
    """Custom type qos3QueueBindWidthMin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128000),
    )


_Qos3QueueBindWidthMin_Type.__name__ = "Integer32"
_Qos3QueueBindWidthMin_Object = MibTableColumn
qos3QueueBindWidthMin = _Qos3QueueBindWidthMin_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 7, 1, 3),
    _Qos3QueueBindWidthMin_Type()
)
qos3QueueBindWidthMin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3QueueBindWidthMin.setStatus("current")


class _Qos3QueueBindWidthMax_Type(Integer32):
    """Custom type qos3QueueBindWidthMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128000),
    )


_Qos3QueueBindWidthMax_Type.__name__ = "Integer32"
_Qos3QueueBindWidthMax_Object = MibTableColumn
qos3QueueBindWidthMax = _Qos3QueueBindWidthMax_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 7, 1, 4),
    _Qos3QueueBindWidthMax_Type()
)
qos3QueueBindWidthMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3QueueBindWidthMax.setStatus("current")


class _Qos3QueueBindWidthStatus_Type(Integer32):
    """Custom type qos3QueueBindWidthStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_Qos3QueueBindWidthStatus_Type.__name__ = "Integer32"
_Qos3QueueBindWidthStatus_Object = MibTableColumn
qos3QueueBindWidthStatus = _Qos3QueueBindWidthStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 7, 1, 5),
    _Qos3QueueBindWidthStatus_Type()
)
qos3QueueBindWidthStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3QueueBindWidthStatus.setStatus("current")
_Qos3QueueWredTable_Object = MibTable
qos3QueueWredTable = _Qos3QueueWredTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8)
)
if mibBuilder.loadTexts:
    qos3QueueWredTable.setStatus("current")
_Qos3QueueWredEntry_Object = MibTableRow
qos3QueueWredEntry = _Qos3QueueWredEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8, 1)
)
qos3QueueWredEntry.setIndexNames(
    (0, "NAG-MIB", "qos3QueueWredPortIndex"),
    (0, "NAG-MIB", "qos3QueueWredQueueId"),
    (0, "NAG-MIB", "qos3QueueWredDp"),
)
if mibBuilder.loadTexts:
    qos3QueueWredEntry.setStatus("current")
_Qos3QueueWredPortIndex_Type = Integer32
_Qos3QueueWredPortIndex_Object = MibTableColumn
qos3QueueWredPortIndex = _Qos3QueueWredPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8, 1, 1),
    _Qos3QueueWredPortIndex_Type()
)
qos3QueueWredPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3QueueWredPortIndex.setStatus("current")


class _Qos3QueueWredQueueId_Type(Integer32):
    """Custom type qos3QueueWredQueueId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_Qos3QueueWredQueueId_Type.__name__ = "Integer32"
_Qos3QueueWredQueueId_Object = MibTableColumn
qos3QueueWredQueueId = _Qos3QueueWredQueueId_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8, 1, 2),
    _Qos3QueueWredQueueId_Type()
)
qos3QueueWredQueueId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3QueueWredQueueId.setStatus("current")


class _Qos3QueueWredDp_Type(Integer32):
    """Custom type qos3QueueWredDp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_Qos3QueueWredDp_Type.__name__ = "Integer32"
_Qos3QueueWredDp_Object = MibTableColumn
qos3QueueWredDp = _Qos3QueueWredDp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8, 1, 3),
    _Qos3QueueWredDp_Type()
)
qos3QueueWredDp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3QueueWredDp.setStatus("current")


class _Qos3QueueWredDpStart_Type(Integer32):
    """Custom type qos3QueueWredDpStart based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_Qos3QueueWredDpStart_Type.__name__ = "Integer32"
_Qos3QueueWredDpStart_Object = MibTableColumn
qos3QueueWredDpStart = _Qos3QueueWredDpStart_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8, 1, 4),
    _Qos3QueueWredDpStart_Type()
)
qos3QueueWredDpStart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3QueueWredDpStart.setStatus("current")


class _Qos3QueueWredDpEnd_Type(Integer32):
    """Custom type qos3QueueWredDpEnd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_Qos3QueueWredDpEnd_Type.__name__ = "Integer32"
_Qos3QueueWredDpEnd_Object = MibTableColumn
qos3QueueWredDpEnd = _Qos3QueueWredDpEnd_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8, 1, 5),
    _Qos3QueueWredDpEnd_Type()
)
qos3QueueWredDpEnd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3QueueWredDpEnd.setStatus("current")


class _Qos3QueueWredDpMaxRate_Type(Integer32):
    """Custom type qos3QueueWredDpMaxRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_Qos3QueueWredDpMaxRate_Type.__name__ = "Integer32"
_Qos3QueueWredDpMaxRate_Object = MibTableColumn
qos3QueueWredDpMaxRate = _Qos3QueueWredDpMaxRate_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8, 1, 6),
    _Qos3QueueWredDpMaxRate_Type()
)
qos3QueueWredDpMaxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3QueueWredDpMaxRate.setStatus("current")


class _Qos3QueueWredStatus_Type(Integer32):
    """Custom type qos3QueueWredStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_Qos3QueueWredStatus_Type.__name__ = "Integer32"
_Qos3QueueWredStatus_Object = MibTableColumn
qos3QueueWredStatus = _Qos3QueueWredStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 8, 1, 7),
    _Qos3QueueWredStatus_Type()
)
qos3QueueWredStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3QueueWredStatus.setStatus("current")
_Qos3MapTable_Object = MibTable
qos3MapTable = _Qos3MapTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9)
)
if mibBuilder.loadTexts:
    qos3MapTable.setStatus("current")
_Qos3MapEntry_Object = MibTableRow
qos3MapEntry = _Qos3MapEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1)
)
qos3MapEntry.setIndexNames(
    (0, "NAG-MIB", "qos3MapType"),
)
if mibBuilder.loadTexts:
    qos3MapEntry.setStatus("current")


class _Qos3MapType_Type(Integer32):
    """Custom type qos3MapType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("cosToIntp", 0),
          ("cosToDp", 1),
          ("expToIntp", 2),
          ("expToDp", 3),
          ("intpToCos", 4),
          ("intpToDscp", 5),
          ("intpToExp", 6),
          ("cosToCosGreen", 7),
          ("cosToCosYellow", 8),
          ("cosToCosRed", 9),
          ("cosToDscpGreen", 10),
          ("cosToDscpYellow", 11),
          ("cosToDscpRed", 12))
    )


_Qos3MapType_Type.__name__ = "Integer32"
_Qos3MapType_Object = MibTableColumn
qos3MapType = _Qos3MapType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 1),
    _Qos3MapType_Type()
)
qos3MapType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3MapType.setStatus("current")


class _Qos3MapAtoB1_Type(Integer32):
    """Custom type qos3MapAtoB1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 119),
    )


_Qos3MapAtoB1_Type.__name__ = "Integer32"
_Qos3MapAtoB1_Object = MibTableColumn
qos3MapAtoB1 = _Qos3MapAtoB1_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 2),
    _Qos3MapAtoB1_Type()
)
qos3MapAtoB1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3MapAtoB1.setStatus("current")


class _Qos3MapAtoB2_Type(Integer32):
    """Custom type qos3MapAtoB2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 119),
    )


_Qos3MapAtoB2_Type.__name__ = "Integer32"
_Qos3MapAtoB2_Object = MibTableColumn
qos3MapAtoB2 = _Qos3MapAtoB2_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 3),
    _Qos3MapAtoB2_Type()
)
qos3MapAtoB2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3MapAtoB2.setStatus("current")


class _Qos3MapAtoB3_Type(Integer32):
    """Custom type qos3MapAtoB3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 119),
    )


_Qos3MapAtoB3_Type.__name__ = "Integer32"
_Qos3MapAtoB3_Object = MibTableColumn
qos3MapAtoB3 = _Qos3MapAtoB3_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 4),
    _Qos3MapAtoB3_Type()
)
qos3MapAtoB3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3MapAtoB3.setStatus("current")


class _Qos3MapAtoB4_Type(Integer32):
    """Custom type qos3MapAtoB4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 119),
    )


_Qos3MapAtoB4_Type.__name__ = "Integer32"
_Qos3MapAtoB4_Object = MibTableColumn
qos3MapAtoB4 = _Qos3MapAtoB4_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 5),
    _Qos3MapAtoB4_Type()
)
qos3MapAtoB4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3MapAtoB4.setStatus("current")


class _Qos3MapAtoB5_Type(Integer32):
    """Custom type qos3MapAtoB5 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 119),
    )


_Qos3MapAtoB5_Type.__name__ = "Integer32"
_Qos3MapAtoB5_Object = MibTableColumn
qos3MapAtoB5 = _Qos3MapAtoB5_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 6),
    _Qos3MapAtoB5_Type()
)
qos3MapAtoB5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3MapAtoB5.setStatus("current")


class _Qos3MapAtoB6_Type(Integer32):
    """Custom type qos3MapAtoB6 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 119),
    )


_Qos3MapAtoB6_Type.__name__ = "Integer32"
_Qos3MapAtoB6_Object = MibTableColumn
qos3MapAtoB6 = _Qos3MapAtoB6_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 7),
    _Qos3MapAtoB6_Type()
)
qos3MapAtoB6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3MapAtoB6.setStatus("current")


class _Qos3MapAtoB7_Type(Integer32):
    """Custom type qos3MapAtoB7 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 119),
    )


_Qos3MapAtoB7_Type.__name__ = "Integer32"
_Qos3MapAtoB7_Object = MibTableColumn
qos3MapAtoB7 = _Qos3MapAtoB7_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 8),
    _Qos3MapAtoB7_Type()
)
qos3MapAtoB7.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3MapAtoB7.setStatus("current")


class _Qos3MapAtoB8_Type(Integer32):
    """Custom type qos3MapAtoB8 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 119),
    )


_Qos3MapAtoB8_Type.__name__ = "Integer32"
_Qos3MapAtoB8_Object = MibTableColumn
qos3MapAtoB8 = _Qos3MapAtoB8_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 9),
    _Qos3MapAtoB8_Type()
)
qos3MapAtoB8.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3MapAtoB8.setStatus("current")


class _Qos3MapStatus_Type(Integer32):
    """Custom type qos3MapStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_Qos3MapStatus_Type.__name__ = "Integer32"
_Qos3MapStatus_Object = MibTableColumn
qos3MapStatus = _Qos3MapStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 9, 1, 10),
    _Qos3MapStatus_Type()
)
qos3MapStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3MapStatus.setStatus("current")
_Qos3MapDscpTable_Object = MibTable
qos3MapDscpTable = _Qos3MapDscpTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 10)
)
if mibBuilder.loadTexts:
    qos3MapDscpTable.setStatus("current")
_Qos3MapDscpEntry_Object = MibTableRow
qos3MapDscpEntry = _Qos3MapDscpEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 10, 1)
)
qos3MapDscpEntry.setIndexNames(
    (0, "NAG-MIB", "qos3MapDscpType"),
    (0, "NAG-MIB", "qos3MapDscpIndex"),
)
if mibBuilder.loadTexts:
    qos3MapDscpEntry.setStatus("current")


class _Qos3MapDscpType_Type(Integer32):
    """Custom type qos3MapDscpType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("dscpToIntp", 0),
          ("dscpToDp", 1),
          ("dscpToDscp", 2),
          ("dscpToDscpGreen", 3),
          ("dscpToDscpYellow", 4),
          ("dscpToDscpRed", 5),
          ("dscpToCosGreen", 6),
          ("dscpToCosYellow", 7),
          ("dscpToCosRed", 8))
    )


_Qos3MapDscpType_Type.__name__ = "Integer32"
_Qos3MapDscpType_Object = MibTableColumn
qos3MapDscpType = _Qos3MapDscpType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 10, 1, 1),
    _Qos3MapDscpType_Type()
)
qos3MapDscpType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3MapDscpType.setStatus("current")


class _Qos3MapDscpIndex_Type(Integer32):
    """Custom type qos3MapDscpIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_Qos3MapDscpIndex_Type.__name__ = "Integer32"
_Qos3MapDscpIndex_Object = MibTableColumn
qos3MapDscpIndex = _Qos3MapDscpIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 10, 1, 2),
    _Qos3MapDscpIndex_Type()
)
qos3MapDscpIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3MapDscpIndex.setStatus("current")


class _Qos3MapDscpValue_Type(Integer32):
    """Custom type qos3MapDscpValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_Qos3MapDscpValue_Type.__name__ = "Integer32"
_Qos3MapDscpValue_Object = MibTableColumn
qos3MapDscpValue = _Qos3MapDscpValue_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 10, 1, 3),
    _Qos3MapDscpValue_Type()
)
qos3MapDscpValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3MapDscpValue.setStatus("current")


class _Qos3mapDscpStatus_Type(Integer32):
    """Custom type qos3mapDscpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_Qos3mapDscpStatus_Type.__name__ = "Integer32"
_Qos3mapDscpStatus_Object = MibTableColumn
qos3mapDscpStatus = _Qos3mapDscpStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 10, 1, 4),
    _Qos3mapDscpStatus_Type()
)
qos3mapDscpStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3mapDscpStatus.setStatus("current")
_Qos3ServicePolicyTable_Object = MibTable
qos3ServicePolicyTable = _Qos3ServicePolicyTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 11)
)
if mibBuilder.loadTexts:
    qos3ServicePolicyTable.setStatus("current")
_Qos3ServicePolicyEntry_Object = MibTableRow
qos3ServicePolicyEntry = _Qos3ServicePolicyEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 11, 1)
)
qos3ServicePolicyEntry.setIndexNames(
    (0, "NAG-MIB", "qos3ServicePolicyBindType"),
    (0, "NAG-MIB", "qos3ServicePolicyDirection"),
    (0, "NAG-MIB", "qos3ServicePolicyIndex"),
)
if mibBuilder.loadTexts:
    qos3ServicePolicyEntry.setStatus("current")


class _Qos3ServicePolicyBindType_Type(Integer32):
    """Custom type qos3ServicePolicyBindType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("port", 0),
          ("vlan", 1))
    )


_Qos3ServicePolicyBindType_Type.__name__ = "Integer32"
_Qos3ServicePolicyBindType_Object = MibTableColumn
qos3ServicePolicyBindType = _Qos3ServicePolicyBindType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 11, 1, 1),
    _Qos3ServicePolicyBindType_Type()
)
qos3ServicePolicyBindType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3ServicePolicyBindType.setStatus("current")
_Qos3ServicePolicyIndex_Type = Integer32
_Qos3ServicePolicyIndex_Object = MibTableColumn
qos3ServicePolicyIndex = _Qos3ServicePolicyIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 11, 1, 2),
    _Qos3ServicePolicyIndex_Type()
)
qos3ServicePolicyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3ServicePolicyIndex.setStatus("current")


class _Qos3ServicePolicyDirection_Type(Integer32):
    """Custom type qos3ServicePolicyDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("out", 0),
          ("in", 1),
          ("ext", 2))
    )


_Qos3ServicePolicyDirection_Type.__name__ = "Integer32"
_Qos3ServicePolicyDirection_Object = MibTableColumn
qos3ServicePolicyDirection = _Qos3ServicePolicyDirection_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 11, 1, 3),
    _Qos3ServicePolicyDirection_Type()
)
qos3ServicePolicyDirection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3ServicePolicyDirection.setStatus("current")


class _Qos3ServicePolicyName_Type(DisplayString):
    """Custom type qos3ServicePolicyName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_Qos3ServicePolicyName_Type.__name__ = "DisplayString"
_Qos3ServicePolicyName_Object = MibTableColumn
qos3ServicePolicyName = _Qos3ServicePolicyName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 11, 1, 4),
    _Qos3ServicePolicyName_Type()
)
qos3ServicePolicyName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3ServicePolicyName.setStatus("current")


class _Qos3SercivePolicyStatus_Type(Integer32):
    """Custom type qos3SercivePolicyStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_Qos3SercivePolicyStatus_Type.__name__ = "Integer32"
_Qos3SercivePolicyStatus_Object = MibTableColumn
qos3SercivePolicyStatus = _Qos3SercivePolicyStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 11, 1, 5),
    _Qos3SercivePolicyStatus_Type()
)
qos3SercivePolicyStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3SercivePolicyStatus.setStatus("current")
_Qos3StatisticClearTable_Object = MibTable
qos3StatisticClearTable = _Qos3StatisticClearTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 12)
)
if mibBuilder.loadTexts:
    qos3StatisticClearTable.setStatus("current")
_Qos3StatisticClearEntry_Object = MibTableRow
qos3StatisticClearEntry = _Qos3StatisticClearEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 12, 1)
)
qos3StatisticClearEntry.setIndexNames(
    (0, "NAG-MIB", "qos3StatisticClearBindType"),
    (0, "NAG-MIB", "qos3StatisticClearDirection"),
    (0, "NAG-MIB", "qos3StatisticClearIndex"),
)
if mibBuilder.loadTexts:
    qos3StatisticClearEntry.setStatus("current")


class _Qos3StatisticClearBindType_Type(Integer32):
    """Custom type qos3StatisticClearBindType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("port", 0),
          ("vlan", 1))
    )


_Qos3StatisticClearBindType_Type.__name__ = "Integer32"
_Qos3StatisticClearBindType_Object = MibTableColumn
qos3StatisticClearBindType = _Qos3StatisticClearBindType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 12, 1, 1),
    _Qos3StatisticClearBindType_Type()
)
qos3StatisticClearBindType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3StatisticClearBindType.setStatus("current")
_Qos3StatisticClearIndex_Type = Integer32
_Qos3StatisticClearIndex_Object = MibTableColumn
qos3StatisticClearIndex = _Qos3StatisticClearIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 12, 1, 2),
    _Qos3StatisticClearIndex_Type()
)
qos3StatisticClearIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3StatisticClearIndex.setStatus("current")


class _Qos3StatisticClearDirection_Type(Integer32):
    """Custom type qos3StatisticClearDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("out", 0),
          ("in", 1))
    )


_Qos3StatisticClearDirection_Type.__name__ = "Integer32"
_Qos3StatisticClearDirection_Object = MibTableColumn
qos3StatisticClearDirection = _Qos3StatisticClearDirection_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 12, 1, 3),
    _Qos3StatisticClearDirection_Type()
)
qos3StatisticClearDirection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3StatisticClearDirection.setStatus("current")


class _Qos3StatisticClearStatus_Type(Integer32):
    """Custom type qos3StatisticClearStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Qos3StatisticClearStatus_Type.__name__ = "Integer32"
_Qos3StatisticClearStatus_Object = MibTableColumn
qos3StatisticClearStatus = _Qos3StatisticClearStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 12, 1, 4),
    _Qos3StatisticClearStatus_Type()
)
qos3StatisticClearStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3StatisticClearStatus.setStatus("current")
_Qos3Ets_ObjectIdentity = ObjectIdentity
qos3Ets = _Qos3Ets_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13)
)
_Qos3EtsTable_Object = MibTable
qos3EtsTable = _Qos3EtsTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 1)
)
if mibBuilder.loadTexts:
    qos3EtsTable.setStatus("current")
_Qos3EtsEntry_Object = MibTableRow
qos3EtsEntry = _Qos3EtsEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 1, 1)
)
qos3EtsEntry.setIndexNames(
    (0, "NAG-MIB", "qos3EtsPortIndex"),
)
if mibBuilder.loadTexts:
    qos3EtsEntry.setStatus("current")
_Qos3EtsPortIndex_Type = Integer32
_Qos3EtsPortIndex_Object = MibTableColumn
qos3EtsPortIndex = _Qos3EtsPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 1, 1, 1),
    _Qos3EtsPortIndex_Type()
)
qos3EtsPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3EtsPortIndex.setStatus("current")


class _Qos3EtsScheduleStatusConfig_Type(Integer32):
    """Custom type qos3EtsScheduleStatusConfig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("normal", 0),
          ("uc", 1),
          ("mc", 2),
          ("ets", 3))
    )


_Qos3EtsScheduleStatusConfig_Type.__name__ = "Integer32"
_Qos3EtsScheduleStatusConfig_Object = MibTableColumn
qos3EtsScheduleStatusConfig = _Qos3EtsScheduleStatusConfig_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 1, 1, 2),
    _Qos3EtsScheduleStatusConfig_Type()
)
qos3EtsScheduleStatusConfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3EtsScheduleStatusConfig.setStatus("current")


class _Qos3EtsStatus_Type(Integer32):
    """Custom type qos3EtsStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Qos3EtsStatus_Type.__name__ = "Integer32"
_Qos3EtsStatus_Object = MibTableColumn
qos3EtsStatus = _Qos3EtsStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 1, 1, 3),
    _Qos3EtsStatus_Type()
)
qos3EtsStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3EtsStatus.setStatus("current")
_Qos3McQueueBindWidthTable_Object = MibTable
qos3McQueueBindWidthTable = _Qos3McQueueBindWidthTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 2)
)
if mibBuilder.loadTexts:
    qos3McQueueBindWidthTable.setStatus("current")
_Qos3McQueueBindWidthEntry_Object = MibTableRow
qos3McQueueBindWidthEntry = _Qos3McQueueBindWidthEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 2, 1)
)
qos3McQueueBindWidthEntry.setIndexNames(
    (0, "NAG-MIB", "qos3McQueueBindWidthPortIndex"),
    (0, "NAG-MIB", "qos3McQueueID"),
)
if mibBuilder.loadTexts:
    qos3McQueueBindWidthEntry.setStatus("current")
_Qos3McQueueBindWidthPortIndex_Type = Integer32
_Qos3McQueueBindWidthPortIndex_Object = MibTableColumn
qos3McQueueBindWidthPortIndex = _Qos3McQueueBindWidthPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 2, 1, 1),
    _Qos3McQueueBindWidthPortIndex_Type()
)
qos3McQueueBindWidthPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3McQueueBindWidthPortIndex.setStatus("current")


class _Qos3McQueueID_Type(Integer32):
    """Custom type qos3McQueueID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_Qos3McQueueID_Type.__name__ = "Integer32"
_Qos3McQueueID_Object = MibTableColumn
qos3McQueueID = _Qos3McQueueID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 2, 1, 2),
    _Qos3McQueueID_Type()
)
qos3McQueueID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3McQueueID.setStatus("current")


class _Qos3McQueueBindWidthMin_Type(Integer32):
    """Custom type qos3McQueueBindWidthMin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128000),
    )


_Qos3McQueueBindWidthMin_Type.__name__ = "Integer32"
_Qos3McQueueBindWidthMin_Object = MibTableColumn
qos3McQueueBindWidthMin = _Qos3McQueueBindWidthMin_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 2, 1, 3),
    _Qos3McQueueBindWidthMin_Type()
)
qos3McQueueBindWidthMin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3McQueueBindWidthMin.setStatus("current")


class _Qos3McQueueBindWidthMax_Type(Integer32):
    """Custom type qos3McQueueBindWidthMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128000),
    )


_Qos3McQueueBindWidthMax_Type.__name__ = "Integer32"
_Qos3McQueueBindWidthMax_Object = MibTableColumn
qos3McQueueBindWidthMax = _Qos3McQueueBindWidthMax_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 2, 1, 4),
    _Qos3McQueueBindWidthMax_Type()
)
qos3McQueueBindWidthMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3McQueueBindWidthMax.setStatus("current")


class _Qos3McQueueBindWidthStatus_Type(Integer32):
    """Custom type qos3McQueueBindWidthStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Qos3McQueueBindWidthStatus_Type.__name__ = "Integer32"
_Qos3McQueueBindWidthStatus_Object = MibTableColumn
qos3McQueueBindWidthStatus = _Qos3McQueueBindWidthStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 2, 1, 5),
    _Qos3McQueueBindWidthStatus_Type()
)
qos3McQueueBindWidthStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3McQueueBindWidthStatus.setStatus("current")
_Qos3SchedulePolicyMapTable_Object = MibTable
qos3SchedulePolicyMapTable = _Qos3SchedulePolicyMapTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 3)
)
if mibBuilder.loadTexts:
    qos3SchedulePolicyMapTable.setStatus("current")
_Qos3SchedulePolicyMapEntry_Object = MibTableRow
qos3SchedulePolicyMapEntry = _Qos3SchedulePolicyMapEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 3, 1)
)
qos3SchedulePolicyMapEntry.setIndexNames(
    (0, "NAG-MIB", "qos3SchedulePolicyMapIndex"),
)
if mibBuilder.loadTexts:
    qos3SchedulePolicyMapEntry.setStatus("current")
_Qos3SchedulePolicyMapIndex_Type = Integer32
_Qos3SchedulePolicyMapIndex_Object = MibTableColumn
qos3SchedulePolicyMapIndex = _Qos3SchedulePolicyMapIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 3, 1, 1),
    _Qos3SchedulePolicyMapIndex_Type()
)
qos3SchedulePolicyMapIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3SchedulePolicyMapIndex.setStatus("current")


class _Qos3SchedulePolicyName_Type(DisplayString):
    """Custom type qos3SchedulePolicyName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_Qos3SchedulePolicyName_Type.__name__ = "DisplayString"
_Qos3SchedulePolicyName_Object = MibTableColumn
qos3SchedulePolicyName = _Qos3SchedulePolicyName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 3, 1, 2),
    _Qos3SchedulePolicyName_Type()
)
qos3SchedulePolicyName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3SchedulePolicyName.setStatus("current")


class _Qos3SchedulePolicyStatus_Type(Integer32):
    """Custom type qos3SchedulePolicyStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_Qos3SchedulePolicyStatus_Type.__name__ = "Integer32"
_Qos3SchedulePolicyStatus_Object = MibTableColumn
qos3SchedulePolicyStatus = _Qos3SchedulePolicyStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 3, 1, 3),
    _Qos3SchedulePolicyStatus_Type()
)
qos3SchedulePolicyStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3SchedulePolicyStatus.setStatus("current")
_Qos3NodeScheduleTable_Object = MibTable
qos3NodeScheduleTable = _Qos3NodeScheduleTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 4)
)
if mibBuilder.loadTexts:
    qos3NodeScheduleTable.setStatus("current")
_Qos3NodeScheduleEntry_Object = MibTableRow
qos3NodeScheduleEntry = _Qos3NodeScheduleEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 4, 1)
)
qos3NodeScheduleEntry.setIndexNames(
    (0, "NAG-MIB", "qos3NodeSchedulePolicyIndex"),
    (0, "NAG-MIB", "qos3NodeScheduleLevelID"),
    (0, "NAG-MIB", "qos3NodeScheduleNodeID"),
)
if mibBuilder.loadTexts:
    qos3NodeScheduleEntry.setStatus("current")
_Qos3NodeSchedulePolicyIndex_Type = Integer32
_Qos3NodeSchedulePolicyIndex_Object = MibTableColumn
qos3NodeSchedulePolicyIndex = _Qos3NodeSchedulePolicyIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 4, 1, 1),
    _Qos3NodeSchedulePolicyIndex_Type()
)
qos3NodeSchedulePolicyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3NodeSchedulePolicyIndex.setStatus("current")


class _Qos3NodeScheduleLevelID_Type(Integer32):
    """Custom type qos3NodeScheduleLevelID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_Qos3NodeScheduleLevelID_Type.__name__ = "Integer32"
_Qos3NodeScheduleLevelID_Object = MibTableColumn
qos3NodeScheduleLevelID = _Qos3NodeScheduleLevelID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 4, 1, 2),
    _Qos3NodeScheduleLevelID_Type()
)
qos3NodeScheduleLevelID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3NodeScheduleLevelID.setStatus("current")


class _Qos3NodeScheduleNodeID_Type(Integer32):
    """Custom type qos3NodeScheduleNodeID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_Qos3NodeScheduleNodeID_Type.__name__ = "Integer32"
_Qos3NodeScheduleNodeID_Object = MibTableColumn
qos3NodeScheduleNodeID = _Qos3NodeScheduleNodeID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 4, 1, 3),
    _Qos3NodeScheduleNodeID_Type()
)
qos3NodeScheduleNodeID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3NodeScheduleNodeID.setStatus("current")


class _Qos3NodeScheduleStatus_Type(Integer32):
    """Custom type qos3NodeScheduleStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_Qos3NodeScheduleStatus_Type.__name__ = "Integer32"
_Qos3NodeScheduleStatus_Object = MibTableColumn
qos3NodeScheduleStatus = _Qos3NodeScheduleStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 4, 1, 4),
    _Qos3NodeScheduleStatus_Type()
)
qos3NodeScheduleStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3NodeScheduleStatus.setStatus("current")
_Qos3ScheduleQueueAlgorithmTable_Object = MibTable
qos3ScheduleQueueAlgorithmTable = _Qos3ScheduleQueueAlgorithmTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 5)
)
if mibBuilder.loadTexts:
    qos3ScheduleQueueAlgorithmTable.setStatus("current")
_Qos3ScheduleQueueAlgorithmEntry_Object = MibTableRow
qos3ScheduleQueueAlgorithmEntry = _Qos3ScheduleQueueAlgorithmEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 5, 1)
)
qos3ScheduleQueueAlgorithmEntry.setIndexNames(
    (0, "NAG-MIB", "qos3ScheduleQueueAlgorithmPolicyIndex"),
    (0, "NAG-MIB", "qos3ScheduleQueueAlgorithmLevelID"),
    (0, "NAG-MIB", "qos3ScheduleQueueAlgorithmNodeID"),
)
if mibBuilder.loadTexts:
    qos3ScheduleQueueAlgorithmEntry.setStatus("current")
_Qos3ScheduleQueueAlgorithmPolicyIndex_Type = Integer32
_Qos3ScheduleQueueAlgorithmPolicyIndex_Object = MibTableColumn
qos3ScheduleQueueAlgorithmPolicyIndex = _Qos3ScheduleQueueAlgorithmPolicyIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 5, 1, 1),
    _Qos3ScheduleQueueAlgorithmPolicyIndex_Type()
)
qos3ScheduleQueueAlgorithmPolicyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3ScheduleQueueAlgorithmPolicyIndex.setStatus("current")


class _Qos3ScheduleQueueAlgorithmLevelID_Type(Integer32):
    """Custom type qos3ScheduleQueueAlgorithmLevelID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_Qos3ScheduleQueueAlgorithmLevelID_Type.__name__ = "Integer32"
_Qos3ScheduleQueueAlgorithmLevelID_Object = MibTableColumn
qos3ScheduleQueueAlgorithmLevelID = _Qos3ScheduleQueueAlgorithmLevelID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 5, 1, 2),
    _Qos3ScheduleQueueAlgorithmLevelID_Type()
)
qos3ScheduleQueueAlgorithmLevelID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3ScheduleQueueAlgorithmLevelID.setStatus("current")


class _Qos3ScheduleQueueAlgorithmNodeID_Type(Integer32):
    """Custom type qos3ScheduleQueueAlgorithmNodeID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_Qos3ScheduleQueueAlgorithmNodeID_Type.__name__ = "Integer32"
_Qos3ScheduleQueueAlgorithmNodeID_Object = MibTableColumn
qos3ScheduleQueueAlgorithmNodeID = _Qos3ScheduleQueueAlgorithmNodeID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 5, 1, 3),
    _Qos3ScheduleQueueAlgorithmNodeID_Type()
)
qos3ScheduleQueueAlgorithmNodeID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3ScheduleQueueAlgorithmNodeID.setStatus("current")


class _Qos3ScheduleQueueAlgorithmConfig_Type(Integer32):
    """Custom type qos3ScheduleQueueAlgorithmConfig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("rr", 0),
          ("sp", 1),
          ("wrr", 2),
          ("wdrr", 3))
    )


_Qos3ScheduleQueueAlgorithmConfig_Type.__name__ = "Integer32"
_Qos3ScheduleQueueAlgorithmConfig_Object = MibTableColumn
qos3ScheduleQueueAlgorithmConfig = _Qos3ScheduleQueueAlgorithmConfig_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 5, 1, 4),
    _Qos3ScheduleQueueAlgorithmConfig_Type()
)
qos3ScheduleQueueAlgorithmConfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3ScheduleQueueAlgorithmConfig.setStatus("current")


class _Qos3ScheduleQueueAlgorithmStatus_Type(Integer32):
    """Custom type qos3ScheduleQueueAlgorithmStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_Qos3ScheduleQueueAlgorithmStatus_Type.__name__ = "Integer32"
_Qos3ScheduleQueueAlgorithmStatus_Object = MibTableColumn
qos3ScheduleQueueAlgorithmStatus = _Qos3ScheduleQueueAlgorithmStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 5, 1, 5),
    _Qos3ScheduleQueueAlgorithmStatus_Type()
)
qos3ScheduleQueueAlgorithmStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3ScheduleQueueAlgorithmStatus.setStatus("current")
_Qos3ScheduleQueueWeightTable_Object = MibTable
qos3ScheduleQueueWeightTable = _Qos3ScheduleQueueWeightTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6)
)
if mibBuilder.loadTexts:
    qos3ScheduleQueueWeightTable.setStatus("current")
_Qos3ScheduleQueueWeightEntry_Object = MibTableRow
qos3ScheduleQueueWeightEntry = _Qos3ScheduleQueueWeightEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6, 1)
)
qos3ScheduleQueueWeightEntry.setIndexNames(
    (0, "NAG-MIB", "qos3ScheduleQueueWeightPolicyIndex"),
    (0, "NAG-MIB", "qos3ScheduleQueueWeightLevelID"),
    (0, "NAG-MIB", "qos3ScheduleQueueWeightNodeID"),
    (0, "NAG-MIB", "qos3ScheduleQueueAlgorithm"),
    (0, "NAG-MIB", "qos3ScheduleQueueWeightQueueID"),
)
if mibBuilder.loadTexts:
    qos3ScheduleQueueWeightEntry.setStatus("current")
_Qos3ScheduleQueueWeightPolicyIndex_Type = Integer32
_Qos3ScheduleQueueWeightPolicyIndex_Object = MibTableColumn
qos3ScheduleQueueWeightPolicyIndex = _Qos3ScheduleQueueWeightPolicyIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6, 1, 1),
    _Qos3ScheduleQueueWeightPolicyIndex_Type()
)
qos3ScheduleQueueWeightPolicyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3ScheduleQueueWeightPolicyIndex.setStatus("current")
_Qos3ScheduleQueueWeightLevelID_Type = Integer32
_Qos3ScheduleQueueWeightLevelID_Object = MibTableColumn
qos3ScheduleQueueWeightLevelID = _Qos3ScheduleQueueWeightLevelID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6, 1, 2),
    _Qos3ScheduleQueueWeightLevelID_Type()
)
qos3ScheduleQueueWeightLevelID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3ScheduleQueueWeightLevelID.setStatus("current")
_Qos3ScheduleQueueWeightNodeID_Type = Integer32
_Qos3ScheduleQueueWeightNodeID_Object = MibTableColumn
qos3ScheduleQueueWeightNodeID = _Qos3ScheduleQueueWeightNodeID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6, 1, 3),
    _Qos3ScheduleQueueWeightNodeID_Type()
)
qos3ScheduleQueueWeightNodeID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3ScheduleQueueWeightNodeID.setStatus("current")


class _Qos3ScheduleQueueAlgorithm_Type(Integer32):
    """Custom type qos3ScheduleQueueAlgorithm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("wrr", 0),
          ("wdrr", 1))
    )


_Qos3ScheduleQueueAlgorithm_Type.__name__ = "Integer32"
_Qos3ScheduleQueueAlgorithm_Object = MibTableColumn
qos3ScheduleQueueAlgorithm = _Qos3ScheduleQueueAlgorithm_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6, 1, 4),
    _Qos3ScheduleQueueAlgorithm_Type()
)
qos3ScheduleQueueAlgorithm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3ScheduleQueueAlgorithm.setStatus("current")


class _Qos3ScheduleQueueWeightQueueID_Type(Integer32):
    """Custom type qos3ScheduleQueueWeightQueueID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 18),
    )


_Qos3ScheduleQueueWeightQueueID_Type.__name__ = "Integer32"
_Qos3ScheduleQueueWeightQueueID_Object = MibTableColumn
qos3ScheduleQueueWeightQueueID = _Qos3ScheduleQueueWeightQueueID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6, 1, 5),
    _Qos3ScheduleQueueWeightQueueID_Type()
)
qos3ScheduleQueueWeightQueueID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3ScheduleQueueWeightQueueID.setStatus("current")


class _Qos3ScheduleQueueWeightValue_Type(Integer32):
    """Custom type qos3ScheduleQueueWeightValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32767),
    )


_Qos3ScheduleQueueWeightValue_Type.__name__ = "Integer32"
_Qos3ScheduleQueueWeightValue_Object = MibTableColumn
qos3ScheduleQueueWeightValue = _Qos3ScheduleQueueWeightValue_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6, 1, 6),
    _Qos3ScheduleQueueWeightValue_Type()
)
qos3ScheduleQueueWeightValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3ScheduleQueueWeightValue.setStatus("current")


class _Qos3ScheduleQueueWeightStatus_Type(Integer32):
    """Custom type qos3ScheduleQueueWeightStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Qos3ScheduleQueueWeightStatus_Type.__name__ = "Integer32"
_Qos3ScheduleQueueWeightStatus_Object = MibTableColumn
qos3ScheduleQueueWeightStatus = _Qos3ScheduleQueueWeightStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 6, 1, 7),
    _Qos3ScheduleQueueWeightStatus_Type()
)
qos3ScheduleQueueWeightStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3ScheduleQueueWeightStatus.setStatus("current")
_Qos3ScheduleQueueInputTable_Object = MibTable
qos3ScheduleQueueInputTable = _Qos3ScheduleQueueInputTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7)
)
if mibBuilder.loadTexts:
    qos3ScheduleQueueInputTable.setStatus("current")
_Qos3ScheduleQueueInputEntry_Object = MibTableRow
qos3ScheduleQueueInputEntry = _Qos3ScheduleQueueInputEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7, 1)
)
qos3ScheduleQueueInputEntry.setIndexNames(
    (0, "NAG-MIB", "qos3ScheduleQueueInputPolicyIndex"),
    (0, "NAG-MIB", "qos3ScheduleQueueInputLevelID"),
    (0, "NAG-MIB", "qos3ScheduleQueueInputNodeID"),
    (0, "NAG-MIB", "qos3ScheduleQueueInputQueueID"),
)
if mibBuilder.loadTexts:
    qos3ScheduleQueueInputEntry.setStatus("current")
_Qos3ScheduleQueueInputPolicyIndex_Type = Integer32
_Qos3ScheduleQueueInputPolicyIndex_Object = MibTableColumn
qos3ScheduleQueueInputPolicyIndex = _Qos3ScheduleQueueInputPolicyIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7, 1, 1),
    _Qos3ScheduleQueueInputPolicyIndex_Type()
)
qos3ScheduleQueueInputPolicyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3ScheduleQueueInputPolicyIndex.setStatus("current")
_Qos3ScheduleQueueInputLevelID_Type = Integer32
_Qos3ScheduleQueueInputLevelID_Object = MibTableColumn
qos3ScheduleQueueInputLevelID = _Qos3ScheduleQueueInputLevelID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7, 1, 2),
    _Qos3ScheduleQueueInputLevelID_Type()
)
qos3ScheduleQueueInputLevelID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3ScheduleQueueInputLevelID.setStatus("current")
_Qos3ScheduleQueueInputNodeID_Type = Integer32
_Qos3ScheduleQueueInputNodeID_Object = MibTableColumn
qos3ScheduleQueueInputNodeID = _Qos3ScheduleQueueInputNodeID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7, 1, 3),
    _Qos3ScheduleQueueInputNodeID_Type()
)
qos3ScheduleQueueInputNodeID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3ScheduleQueueInputNodeID.setStatus("current")
_Qos3ScheduleQueueInputQueueID_Type = Integer32
_Qos3ScheduleQueueInputQueueID_Object = MibTableColumn
qos3ScheduleQueueInputQueueID = _Qos3ScheduleQueueInputQueueID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7, 1, 4),
    _Qos3ScheduleQueueInputQueueID_Type()
)
qos3ScheduleQueueInputQueueID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3ScheduleQueueInputQueueID.setStatus("current")


class _Qos3ScheduleQueueInputType_Type(Integer32):
    """Custom type qos3ScheduleQueueInputType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("uc", 0),
          ("mc", 1),
          ("node", 2))
    )


_Qos3ScheduleQueueInputType_Type.__name__ = "Integer32"
_Qos3ScheduleQueueInputType_Object = MibTableColumn
qos3ScheduleQueueInputType = _Qos3ScheduleQueueInputType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7, 1, 5),
    _Qos3ScheduleQueueInputType_Type()
)
qos3ScheduleQueueInputType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3ScheduleQueueInputType.setStatus("current")
_Qos3ScheduleQueueInputTypeValue_Type = Integer32
_Qos3ScheduleQueueInputTypeValue_Object = MibTableColumn
qos3ScheduleQueueInputTypeValue = _Qos3ScheduleQueueInputTypeValue_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7, 1, 6),
    _Qos3ScheduleQueueInputTypeValue_Type()
)
qos3ScheduleQueueInputTypeValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3ScheduleQueueInputTypeValue.setStatus("current")


class _Qos3ScheduleQueueInputStatus_Type(Integer32):
    """Custom type qos3ScheduleQueueInputStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Qos3ScheduleQueueInputStatus_Type.__name__ = "Integer32"
_Qos3ScheduleQueueInputStatus_Object = MibTableColumn
qos3ScheduleQueueInputStatus = _Qos3ScheduleQueueInputStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 7, 1, 7),
    _Qos3ScheduleQueueInputStatus_Type()
)
qos3ScheduleQueueInputStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3ScheduleQueueInputStatus.setStatus("current")
_Qos3ScheduleBindWidthTable_Object = MibTable
qos3ScheduleBindWidthTable = _Qos3ScheduleBindWidthTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 8)
)
if mibBuilder.loadTexts:
    qos3ScheduleBindWidthTable.setStatus("current")
_Qos3ScheduleBindWidthEntry_Object = MibTableRow
qos3ScheduleBindWidthEntry = _Qos3ScheduleBindWidthEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 8, 1)
)
qos3ScheduleBindWidthEntry.setIndexNames(
    (0, "NAG-MIB", "qos3ScheduleBindWidthPolicyIndex"),
    (0, "NAG-MIB", "qos3ScheduleBindWidthLevelID"),
    (0, "NAG-MIB", "qos3ScheduleBindWidthNodeID"),
)
if mibBuilder.loadTexts:
    qos3ScheduleBindWidthEntry.setStatus("current")
_Qos3ScheduleBindWidthPolicyIndex_Type = Integer32
_Qos3ScheduleBindWidthPolicyIndex_Object = MibTableColumn
qos3ScheduleBindWidthPolicyIndex = _Qos3ScheduleBindWidthPolicyIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 8, 1, 1),
    _Qos3ScheduleBindWidthPolicyIndex_Type()
)
qos3ScheduleBindWidthPolicyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3ScheduleBindWidthPolicyIndex.setStatus("current")
_Qos3ScheduleBindWidthLevelID_Type = Integer32
_Qos3ScheduleBindWidthLevelID_Object = MibTableColumn
qos3ScheduleBindWidthLevelID = _Qos3ScheduleBindWidthLevelID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 8, 1, 2),
    _Qos3ScheduleBindWidthLevelID_Type()
)
qos3ScheduleBindWidthLevelID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3ScheduleBindWidthLevelID.setStatus("current")
_Qos3ScheduleBindWidthNodeID_Type = Integer32
_Qos3ScheduleBindWidthNodeID_Object = MibTableColumn
qos3ScheduleBindWidthNodeID = _Qos3ScheduleBindWidthNodeID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 8, 1, 3),
    _Qos3ScheduleBindWidthNodeID_Type()
)
qos3ScheduleBindWidthNodeID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3ScheduleBindWidthNodeID.setStatus("current")


class _Qos3ScheduleBindWidthMin_Type(Integer32):
    """Custom type qos3ScheduleBindWidthMin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12800),
    )


_Qos3ScheduleBindWidthMin_Type.__name__ = "Integer32"
_Qos3ScheduleBindWidthMin_Object = MibTableColumn
qos3ScheduleBindWidthMin = _Qos3ScheduleBindWidthMin_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 8, 1, 4),
    _Qos3ScheduleBindWidthMin_Type()
)
qos3ScheduleBindWidthMin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3ScheduleBindWidthMin.setStatus("current")


class _Qos3ScheduleBindWidthMax_Type(Integer32):
    """Custom type qos3ScheduleBindWidthMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12800),
    )


_Qos3ScheduleBindWidthMax_Type.__name__ = "Integer32"
_Qos3ScheduleBindWidthMax_Object = MibTableColumn
qos3ScheduleBindWidthMax = _Qos3ScheduleBindWidthMax_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 8, 1, 5),
    _Qos3ScheduleBindWidthMax_Type()
)
qos3ScheduleBindWidthMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3ScheduleBindWidthMax.setStatus("current")


class _Qos3ScheduleBindWidthStatus_Type(Integer32):
    """Custom type qos3ScheduleBindWidthStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Qos3ScheduleBindWidthStatus_Type.__name__ = "Integer32"
_Qos3ScheduleBindWidthStatus_Object = MibTableColumn
qos3ScheduleBindWidthStatus = _Qos3ScheduleBindWidthStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 8, 1, 6),
    _Qos3ScheduleBindWidthStatus_Type()
)
qos3ScheduleBindWidthStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3ScheduleBindWidthStatus.setStatus("current")
_Qos3SchedulePolicyBindTable_Object = MibTable
qos3SchedulePolicyBindTable = _Qos3SchedulePolicyBindTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 9)
)
if mibBuilder.loadTexts:
    qos3SchedulePolicyBindTable.setStatus("current")
_Qos3SchedulePolicyBindEntry_Object = MibTableRow
qos3SchedulePolicyBindEntry = _Qos3SchedulePolicyBindEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 9, 1)
)
qos3SchedulePolicyBindEntry.setIndexNames(
    (0, "NAG-MIB", "qos3SchedulePolicyBindPortIndex"),
)
if mibBuilder.loadTexts:
    qos3SchedulePolicyBindEntry.setStatus("current")
_Qos3SchedulePolicyBindPortIndex_Type = Integer32
_Qos3SchedulePolicyBindPortIndex_Object = MibTableColumn
qos3SchedulePolicyBindPortIndex = _Qos3SchedulePolicyBindPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 9, 1, 1),
    _Qos3SchedulePolicyBindPortIndex_Type()
)
qos3SchedulePolicyBindPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3SchedulePolicyBindPortIndex.setStatus("current")


class _Qos3SchedulePolicyBindPolicyName_Type(DisplayString):
    """Custom type qos3SchedulePolicyBindPolicyName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_Qos3SchedulePolicyBindPolicyName_Type.__name__ = "DisplayString"
_Qos3SchedulePolicyBindPolicyName_Object = MibTableColumn
qos3SchedulePolicyBindPolicyName = _Qos3SchedulePolicyBindPolicyName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 9, 1, 2),
    _Qos3SchedulePolicyBindPolicyName_Type()
)
qos3SchedulePolicyBindPolicyName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3SchedulePolicyBindPolicyName.setStatus("current")


class _Qos3SchedulePolicyBindStatus_Type(Integer32):
    """Custom type qos3SchedulePolicyBindStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Qos3SchedulePolicyBindStatus_Type.__name__ = "Integer32"
_Qos3SchedulePolicyBindStatus_Object = MibTableColumn
qos3SchedulePolicyBindStatus = _Qos3SchedulePolicyBindStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 13, 9, 1, 3),
    _Qos3SchedulePolicyBindStatus_Type()
)
qos3SchedulePolicyBindStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3SchedulePolicyBindStatus.setStatus("current")
_Qos3MapIntpExtendTable_Object = MibTable
qos3MapIntpExtendTable = _Qos3MapIntpExtendTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 14)
)
if mibBuilder.loadTexts:
    qos3MapIntpExtendTable.setStatus("current")
_Qos3MapIntpExtendEntry_Object = MibTableRow
qos3MapIntpExtendEntry = _Qos3MapIntpExtendEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 14, 1)
)
qos3MapIntpExtendEntry.setIndexNames(
    (0, "NAG-MIB", "qos3MapIntpExtendType"),
    (0, "NAG-MIB", "qos3MapIntpExtendIndex"),
)
if mibBuilder.loadTexts:
    qos3MapIntpExtendEntry.setStatus("current")


class _Qos3MapIntpExtendType_Type(Integer32):
    """Custom type qos3MapIntpExtendType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("intpToCos", 0),
          ("intpToDscp", 1),
          ("intpToExp", 2),
          ("intpToQueue", 3),
          ("intpToDp", 4),
          ("intpToIntpRed", 5),
          ("intpToIntpYellow", 6))
    )


_Qos3MapIntpExtendType_Type.__name__ = "Integer32"
_Qos3MapIntpExtendType_Object = MibTableColumn
qos3MapIntpExtendType = _Qos3MapIntpExtendType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 14, 1, 1),
    _Qos3MapIntpExtendType_Type()
)
qos3MapIntpExtendType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3MapIntpExtendType.setStatus("current")


class _Qos3MapIntpExtendIndex_Type(Integer32):
    """Custom type qos3MapIntpExtendIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 119),
    )


_Qos3MapIntpExtendIndex_Type.__name__ = "Integer32"
_Qos3MapIntpExtendIndex_Object = MibTableColumn
qos3MapIntpExtendIndex = _Qos3MapIntpExtendIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 14, 1, 2),
    _Qos3MapIntpExtendIndex_Type()
)
qos3MapIntpExtendIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos3MapIntpExtendIndex.setStatus("current")


class _Qos3MapIntpExtendValue_Type(Integer32):
    """Custom type qos3MapIntpExtendValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 119),
    )


_Qos3MapIntpExtendValue_Type.__name__ = "Integer32"
_Qos3MapIntpExtendValue_Object = MibTableColumn
qos3MapIntpExtendValue = _Qos3MapIntpExtendValue_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 14, 1, 3),
    _Qos3MapIntpExtendValue_Type()
)
qos3MapIntpExtendValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3MapIntpExtendValue.setStatus("current")


class _Qos3mapIntpExtendStatus_Type(Integer32):
    """Custom type qos3mapIntpExtendStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_Qos3mapIntpExtendStatus_Type.__name__ = "Integer32"
_Qos3mapIntpExtendStatus_Object = MibTableColumn
qos3mapIntpExtendStatus = _Qos3mapIntpExtendStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 14, 1, 4),
    _Qos3mapIntpExtendStatus_Type()
)
qos3mapIntpExtendStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3mapIntpExtendStatus.setStatus("current")
_Qos3EgressRemark_ObjectIdentity = ObjectIdentity
qos3EgressRemark = _Qos3EgressRemark_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 15)
)


class _Qos3EgressGreenRemark_Type(Integer32):
    """Custom type qos3EgressGreenRemark based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Qos3EgressGreenRemark_Type.__name__ = "Integer32"
_Qos3EgressGreenRemark_Object = MibScalar
qos3EgressGreenRemark = _Qos3EgressGreenRemark_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 15, 1),
    _Qos3EgressGreenRemark_Type()
)
qos3EgressGreenRemark.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qos3EgressGreenRemark.setStatus("current")
_ShowQos3_ObjectIdentity = ObjectIdentity
showQos3 = _ShowQos3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16)
)
_ShowQos3VlanTable_Object = MibTable
showQos3VlanTable = _ShowQos3VlanTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1)
)
if mibBuilder.loadTexts:
    showQos3VlanTable.setStatus("current")
_ShowQos3VlanEntry_Object = MibTableRow
showQos3VlanEntry = _ShowQos3VlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1)
)
showQos3VlanEntry.setIndexNames(
    (0, "NAG-MIB", "showQos3VlanId"),
    (0, "NAG-MIB", "showQos3PolicyDirection"),
    (0, "NAG-MIB", "showQos3ClassmapName"),
)
if mibBuilder.loadTexts:
    showQos3VlanEntry.setStatus("current")


class _ShowQos3VlanId_Type(Integer32):
    """Custom type showQos3VlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_ShowQos3VlanId_Type.__name__ = "Integer32"
_ShowQos3VlanId_Object = MibTableColumn
showQos3VlanId = _ShowQos3VlanId_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1, 1),
    _ShowQos3VlanId_Type()
)
showQos3VlanId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    showQos3VlanId.setStatus("current")


class _ShowQos3PolicyDirection_Type(Integer32):
    """Custom type showQos3PolicyDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("in", 0),
          ("out", 1),
          ("pre", 2),
          ("ext", 3))
    )


_ShowQos3PolicyDirection_Type.__name__ = "Integer32"
_ShowQos3PolicyDirection_Object = MibTableColumn
showQos3PolicyDirection = _ShowQos3PolicyDirection_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1, 2),
    _ShowQos3PolicyDirection_Type()
)
showQos3PolicyDirection.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    showQos3PolicyDirection.setStatus("current")


class _ShowQos3ClassmapName_Type(DisplayString):
    """Custom type showQos3ClassmapName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_ShowQos3ClassmapName_Type.__name__ = "DisplayString"
_ShowQos3ClassmapName_Object = MibTableColumn
showQos3ClassmapName = _ShowQos3ClassmapName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1, 3),
    _ShowQos3ClassmapName_Type()
)
showQos3ClassmapName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    showQos3ClassmapName.setStatus("current")
_ShowQos3VlanInCounter_Type = Counter64
_ShowQos3VlanInCounter_Object = MibTableColumn
showQos3VlanInCounter = _ShowQos3VlanInCounter_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1, 4),
    _ShowQos3VlanInCounter_Type()
)
showQos3VlanInCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showQos3VlanInCounter.setStatus("current")
_ShowQos3VlanOutCounter_Type = Counter64
_ShowQos3VlanOutCounter_Object = MibTableColumn
showQos3VlanOutCounter = _ShowQos3VlanOutCounter_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1, 5),
    _ShowQos3VlanOutCounter_Type()
)
showQos3VlanOutCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showQos3VlanOutCounter.setStatus("current")
_ShowQos3VlanGreenCounter_Type = Counter64
_ShowQos3VlanGreenCounter_Object = MibTableColumn
showQos3VlanGreenCounter = _ShowQos3VlanGreenCounter_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1, 6),
    _ShowQos3VlanGreenCounter_Type()
)
showQos3VlanGreenCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showQos3VlanGreenCounter.setStatus("current")
_ShowQos3VlanYellowCounter_Type = Counter64
_ShowQos3VlanYellowCounter_Object = MibTableColumn
showQos3VlanYellowCounter = _ShowQos3VlanYellowCounter_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1, 7),
    _ShowQos3VlanYellowCounter_Type()
)
showQos3VlanYellowCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showQos3VlanYellowCounter.setStatus("current")
_ShowQos3VlanRedCounter_Type = Counter64
_ShowQos3VlanRedCounter_Object = MibTableColumn
showQos3VlanRedCounter = _ShowQos3VlanRedCounter_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 16, 1, 1, 8),
    _ShowQos3VlanRedCounter_Type()
)
showQos3VlanRedCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showQos3VlanRedCounter.setStatus("current")
_ShowQos3QueueStatisticsTable_Object = MibTable
showQos3QueueStatisticsTable = _ShowQos3QueueStatisticsTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 17)
)
if mibBuilder.loadTexts:
    showQos3QueueStatisticsTable.setStatus("current")
_ShowQos3QueueStatisticsEntry_Object = MibTableRow
showQos3QueueStatisticsEntry = _ShowQos3QueueStatisticsEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 17, 1)
)
showQos3QueueStatisticsEntry.setIndexNames(
    (0, "NAG-MIB", "showQos3QueueStatisticsPortIndex"),
)
if mibBuilder.loadTexts:
    showQos3QueueStatisticsEntry.setStatus("current")
_ShowQos3QueueStatisticsPortIndex_Type = Integer32
_ShowQos3QueueStatisticsPortIndex_Object = MibTableColumn
showQos3QueueStatisticsPortIndex = _ShowQos3QueueStatisticsPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 17, 1, 1),
    _ShowQos3QueueStatisticsPortIndex_Type()
)
showQos3QueueStatisticsPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showQos3QueueStatisticsPortIndex.setStatus("current")
_ShowQos3QueueStatisticsQueueID_Type = Integer32
_ShowQos3QueueStatisticsQueueID_Object = MibTableColumn
showQos3QueueStatisticsQueueID = _ShowQos3QueueStatisticsQueueID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 17, 1, 2),
    _ShowQos3QueueStatisticsQueueID_Type()
)
showQos3QueueStatisticsQueueID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showQos3QueueStatisticsQueueID.setStatus("current")
_ShowQos3QueueStatisticsPassedPacket_Type = Integer32
_ShowQos3QueueStatisticsPassedPacket_Object = MibTableColumn
showQos3QueueStatisticsPassedPacket = _ShowQos3QueueStatisticsPassedPacket_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 17, 1, 3),
    _ShowQos3QueueStatisticsPassedPacket_Type()
)
showQos3QueueStatisticsPassedPacket.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showQos3QueueStatisticsPassedPacket.setStatus("current")
_ShowQos3QueueStatisticsDropedPacket_Type = Integer32
_ShowQos3QueueStatisticsDropedPacket_Object = MibTableColumn
showQos3QueueStatisticsDropedPacket = _ShowQos3QueueStatisticsDropedPacket_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 17, 1, 4),
    _ShowQos3QueueStatisticsDropedPacket_Type()
)
showQos3QueueStatisticsDropedPacket.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showQos3QueueStatisticsDropedPacket.setStatus("current")
_ShowQos3MCQueueStatisticsTable_Object = MibTable
showQos3MCQueueStatisticsTable = _ShowQos3MCQueueStatisticsTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 18)
)
if mibBuilder.loadTexts:
    showQos3MCQueueStatisticsTable.setStatus("current")
_ShowQos3MCQueueStatisticsEntry_Object = MibTableRow
showQos3MCQueueStatisticsEntry = _ShowQos3MCQueueStatisticsEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 18, 1)
)
showQos3MCQueueStatisticsEntry.setIndexNames(
    (0, "NAG-MIB", "showQos3MCQueueStatisticsPortIndex"),
)
if mibBuilder.loadTexts:
    showQos3MCQueueStatisticsEntry.setStatus("current")
_ShowQos3MCQueueStatisticsPortIndex_Type = Integer32
_ShowQos3MCQueueStatisticsPortIndex_Object = MibTableColumn
showQos3MCQueueStatisticsPortIndex = _ShowQos3MCQueueStatisticsPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 18, 1, 1),
    _ShowQos3MCQueueStatisticsPortIndex_Type()
)
showQos3MCQueueStatisticsPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showQos3MCQueueStatisticsPortIndex.setStatus("current")
_ShowQos3MCQueueStatisticsQueueID_Type = Integer32
_ShowQos3MCQueueStatisticsQueueID_Object = MibTableColumn
showQos3MCQueueStatisticsQueueID = _ShowQos3MCQueueStatisticsQueueID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 18, 1, 2),
    _ShowQos3MCQueueStatisticsQueueID_Type()
)
showQos3MCQueueStatisticsQueueID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showQos3MCQueueStatisticsQueueID.setStatus("current")
_ShowQos3MCQueueStatisticsPassedPacket_Type = Integer32
_ShowQos3MCQueueStatisticsPassedPacket_Object = MibTableColumn
showQos3MCQueueStatisticsPassedPacket = _ShowQos3MCQueueStatisticsPassedPacket_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 18, 1, 3),
    _ShowQos3MCQueueStatisticsPassedPacket_Type()
)
showQos3MCQueueStatisticsPassedPacket.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showQos3MCQueueStatisticsPassedPacket.setStatus("current")
_ShowQos3MCQueueStatisticsDropedPacket_Type = Integer32
_ShowQos3MCQueueStatisticsDropedPacket_Object = MibTableColumn
showQos3MCQueueStatisticsDropedPacket = _ShowQos3MCQueueStatisticsDropedPacket_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 11, 2, 18, 1, 4),
    _ShowQos3MCQueueStatisticsDropedPacket_Type()
)
showQos3MCQueueStatisticsDropedPacket.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    showQos3MCQueueStatisticsDropedPacket.setStatus("current")
_Primirror_ObjectIdentity = ObjectIdentity
primirror = _Primirror_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12)
)
_MirrorDestTable_Object = MibTable
mirrorDestTable = _MirrorDestTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 1)
)
if mibBuilder.loadTexts:
    mirrorDestTable.setStatus("current")
_MirrorDestEntry_Object = MibTableRow
mirrorDestEntry = _MirrorDestEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 1, 1)
)
mirrorDestEntry.setIndexNames(
    (0, "NAG-MIB", "mirrorDestSession"),
)
if mibBuilder.loadTexts:
    mirrorDestEntry.setStatus("current")


class _MirrorDestSession_Type(Integer32):
    """Custom type mirrorDestSession based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_MirrorDestSession_Type.__name__ = "Integer32"
_MirrorDestSession_Object = MibTableColumn
mirrorDestSession = _MirrorDestSession_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 1, 1, 1),
    _MirrorDestSession_Type()
)
mirrorDestSession.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mirrorDestSession.setStatus("current")


class _MirrorDestPort_Type(DisplayString):
    """Custom type mirrorDestPort based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 20),
    )


_MirrorDestPort_Type.__name__ = "DisplayString"
_MirrorDestPort_Object = MibTableColumn
mirrorDestPort = _MirrorDestPort_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 1, 1, 2),
    _MirrorDestPort_Type()
)
mirrorDestPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mirrorDestPort.setStatus("current")


class _MirrorDestStatus_Type(Integer32):
    """Custom type mirrorDestStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_MirrorDestStatus_Type.__name__ = "Integer32"
_MirrorDestStatus_Object = MibTableColumn
mirrorDestStatus = _MirrorDestStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 1, 1, 3),
    _MirrorDestStatus_Type()
)
mirrorDestStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mirrorDestStatus.setStatus("current")
_MirrorSrcPortTable_Object = MibTable
mirrorSrcPortTable = _MirrorSrcPortTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 2)
)
if mibBuilder.loadTexts:
    mirrorSrcPortTable.setStatus("current")
_MirrorSrcPortEntry_Object = MibTableRow
mirrorSrcPortEntry = _MirrorSrcPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 2, 1)
)
mirrorSrcPortEntry.setIndexNames(
    (0, "NAG-MIB", "mirrorSrcPortSession"),
    (0, "NAG-MIB", "mirrorSrcPortDirect"),
)
if mibBuilder.loadTexts:
    mirrorSrcPortEntry.setStatus("current")


class _MirrorSrcPortSession_Type(Integer32):
    """Custom type mirrorSrcPortSession based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_MirrorSrcPortSession_Type.__name__ = "Integer32"
_MirrorSrcPortSession_Object = MibTableColumn
mirrorSrcPortSession = _MirrorSrcPortSession_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 2, 1, 1),
    _MirrorSrcPortSession_Type()
)
mirrorSrcPortSession.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mirrorSrcPortSession.setStatus("current")


class _MirrorSrcPortDirect_Type(Integer32):
    """Custom type mirrorSrcPortDirect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("rx", 1),
          ("tx", 2))
    )


_MirrorSrcPortDirect_Type.__name__ = "Integer32"
_MirrorSrcPortDirect_Object = MibTableColumn
mirrorSrcPortDirect = _MirrorSrcPortDirect_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 2, 1, 2),
    _MirrorSrcPortDirect_Type()
)
mirrorSrcPortDirect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mirrorSrcPortDirect.setStatus("current")


class _MirrorSrcPort_Type(DisplayString):
    """Custom type mirrorSrcPort based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 512),
    )


_MirrorSrcPort_Type.__name__ = "DisplayString"
_MirrorSrcPort_Object = MibTableColumn
mirrorSrcPort = _MirrorSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 2, 1, 3),
    _MirrorSrcPort_Type()
)
mirrorSrcPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mirrorSrcPort.setStatus("current")


class _MirrorSrcPortStatus_Type(Integer32):
    """Custom type mirrorSrcPortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_MirrorSrcPortStatus_Type.__name__ = "Integer32"
_MirrorSrcPortStatus_Object = MibTableColumn
mirrorSrcPortStatus = _MirrorSrcPortStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 2, 1, 4),
    _MirrorSrcPortStatus_Type()
)
mirrorSrcPortStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mirrorSrcPortStatus.setStatus("current")
_MirrorSrcCpuTable_Object = MibTable
mirrorSrcCpuTable = _MirrorSrcCpuTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 3)
)
if mibBuilder.loadTexts:
    mirrorSrcCpuTable.setStatus("current")
_MirrorSrcCpuEntry_Object = MibTableRow
mirrorSrcCpuEntry = _MirrorSrcCpuEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 3, 1)
)
mirrorSrcCpuEntry.setIndexNames(
    (0, "NAG-MIB", "mirrorSrcCpuSession"),
    (0, "NAG-MIB", "mirrorSrcCpuDirect"),
    (0, "NAG-MIB", "mirrorSrcCpuSlot"),
)
if mibBuilder.loadTexts:
    mirrorSrcCpuEntry.setStatus("current")


class _MirrorSrcCpuSession_Type(Integer32):
    """Custom type mirrorSrcCpuSession based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 4),
    )


_MirrorSrcCpuSession_Type.__name__ = "Integer32"
_MirrorSrcCpuSession_Object = MibTableColumn
mirrorSrcCpuSession = _MirrorSrcCpuSession_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 3, 1, 1),
    _MirrorSrcCpuSession_Type()
)
mirrorSrcCpuSession.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mirrorSrcCpuSession.setStatus("current")


class _MirrorSrcCpuDirect_Type(Integer32):
    """Custom type mirrorSrcCpuDirect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("rx", 1),
          ("tx", 2))
    )


_MirrorSrcCpuDirect_Type.__name__ = "Integer32"
_MirrorSrcCpuDirect_Object = MibTableColumn
mirrorSrcCpuDirect = _MirrorSrcCpuDirect_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 3, 1, 2),
    _MirrorSrcCpuDirect_Type()
)
mirrorSrcCpuDirect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mirrorSrcCpuDirect.setStatus("current")
_MirrorSrcCpuSlot_Type = Integer32
_MirrorSrcCpuSlot_Object = MibTableColumn
mirrorSrcCpuSlot = _MirrorSrcCpuSlot_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 3, 1, 3),
    _MirrorSrcCpuSlot_Type()
)
mirrorSrcCpuSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mirrorSrcCpuSlot.setStatus("current")


class _MirrorSrcCpuStatus_Type(Integer32):
    """Custom type mirrorSrcCpuStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_MirrorSrcCpuStatus_Type.__name__ = "Integer32"
_MirrorSrcCpuStatus_Object = MibTableColumn
mirrorSrcCpuStatus = _MirrorSrcCpuStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 3, 1, 4),
    _MirrorSrcCpuStatus_Type()
)
mirrorSrcCpuStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mirrorSrcCpuStatus.setStatus("current")
_MirrorReflectorPortTable_Object = MibTable
mirrorReflectorPortTable = _MirrorReflectorPortTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 4)
)
if mibBuilder.loadTexts:
    mirrorReflectorPortTable.setStatus("current")
_MirrorReflectorPortEntry_Object = MibTableRow
mirrorReflectorPortEntry = _MirrorReflectorPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 4, 1)
)
mirrorReflectorPortEntry.setIndexNames(
    (0, "NAG-MIB", "mirrorReflectorPortSession"),
    (0, "NAG-MIB", "mirrorReflectorPort"),
)
if mibBuilder.loadTexts:
    mirrorReflectorPortEntry.setStatus("current")


class _MirrorReflectorPortSession_Type(Integer32):
    """Custom type mirrorReflectorPortSession based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_MirrorReflectorPortSession_Type.__name__ = "Integer32"
_MirrorReflectorPortSession_Object = MibTableColumn
mirrorReflectorPortSession = _MirrorReflectorPortSession_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 4, 1, 1),
    _MirrorReflectorPortSession_Type()
)
mirrorReflectorPortSession.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mirrorReflectorPortSession.setStatus("current")
_MirrorReflectorPort_Type = Integer32
_MirrorReflectorPort_Object = MibTableColumn
mirrorReflectorPort = _MirrorReflectorPort_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 4, 1, 2),
    _MirrorReflectorPort_Type()
)
mirrorReflectorPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mirrorReflectorPort.setStatus("current")


class _MirrorReflectorPortStatus_Type(Integer32):
    """Custom type mirrorReflectorPortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_MirrorReflectorPortStatus_Type.__name__ = "Integer32"
_MirrorReflectorPortStatus_Object = MibTableColumn
mirrorReflectorPortStatus = _MirrorReflectorPortStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 4, 1, 3),
    _MirrorReflectorPortStatus_Type()
)
mirrorReflectorPortStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mirrorReflectorPortStatus.setStatus("current")
_MirrorRspanVlanTable_Object = MibTable
mirrorRspanVlanTable = _MirrorRspanVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 5)
)
if mibBuilder.loadTexts:
    mirrorRspanVlanTable.setStatus("current")
_MirrorRspanVlanEntry_Object = MibTableRow
mirrorRspanVlanEntry = _MirrorRspanVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 5, 1)
)
mirrorRspanVlanEntry.setIndexNames(
    (0, "NAG-MIB", "mirrorRspanVlan"),
)
if mibBuilder.loadTexts:
    mirrorRspanVlanEntry.setStatus("current")
_MirrorRspanVlan_Type = Integer32
_MirrorRspanVlan_Object = MibTableColumn
mirrorRspanVlan = _MirrorRspanVlan_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 5, 1, 1),
    _MirrorRspanVlan_Type()
)
mirrorRspanVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mirrorRspanVlan.setStatus("current")


class _MirrorRspanVlanStatus_Type(Integer32):
    """Custom type mirrorRspanVlanStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_MirrorRspanVlanStatus_Type.__name__ = "Integer32"
_MirrorRspanVlanStatus_Object = MibTableColumn
mirrorRspanVlanStatus = _MirrorRspanVlanStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 5, 1, 2),
    _MirrorRspanVlanStatus_Type()
)
mirrorRspanVlanStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mirrorRspanVlanStatus.setStatus("current")
_MirrorRspanSessionTable_Object = MibTable
mirrorRspanSessionTable = _MirrorRspanSessionTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 6)
)
if mibBuilder.loadTexts:
    mirrorRspanSessionTable.setStatus("current")
_MirrorRspanSessionEntry_Object = MibTableRow
mirrorRspanSessionEntry = _MirrorRspanSessionEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 6, 1)
)
mirrorRspanSessionEntry.setIndexNames(
    (0, "NAG-MIB", "mirrorRspanSession"),
    (0, "NAG-MIB", "mirrorRspanSessionVlan"),
)
if mibBuilder.loadTexts:
    mirrorRspanSessionEntry.setStatus("current")


class _MirrorRspanSession_Type(Integer32):
    """Custom type mirrorRspanSession based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_MirrorRspanSession_Type.__name__ = "Integer32"
_MirrorRspanSession_Object = MibTableColumn
mirrorRspanSession = _MirrorRspanSession_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 6, 1, 1),
    _MirrorRspanSession_Type()
)
mirrorRspanSession.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mirrorRspanSession.setStatus("current")
_MirrorRspanSessionVlan_Type = Integer32
_MirrorRspanSessionVlan_Object = MibTableColumn
mirrorRspanSessionVlan = _MirrorRspanSessionVlan_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 6, 1, 2),
    _MirrorRspanSessionVlan_Type()
)
mirrorRspanSessionVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mirrorRspanSessionVlan.setStatus("current")


class _MirrorRspanSessionStatus_Type(Integer32):
    """Custom type mirrorRspanSessionStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_MirrorRspanSessionStatus_Type.__name__ = "Integer32"
_MirrorRspanSessionStatus_Object = MibTableColumn
mirrorRspanSessionStatus = _MirrorRspanSessionStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 6, 1, 3),
    _MirrorRspanSessionStatus_Type()
)
mirrorRspanSessionStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mirrorRspanSessionStatus.setStatus("current")
_MirrorDestGreTable_Object = MibTable
mirrorDestGreTable = _MirrorDestGreTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 7)
)
if mibBuilder.loadTexts:
    mirrorDestGreTable.setStatus("current")
_MirrorDestGreEntry_Object = MibTableRow
mirrorDestGreEntry = _MirrorDestGreEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 7, 1)
)
mirrorDestGreEntry.setIndexNames(
    (0, "NAG-MIB", "mirrorDestGreSession"),
    (0, "NAG-MIB", "mirrorDestGrePort"),
)
if mibBuilder.loadTexts:
    mirrorDestGreEntry.setStatus("current")


class _MirrorDestGreSession_Type(Integer32):
    """Custom type mirrorDestGreSession based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_MirrorDestGreSession_Type.__name__ = "Integer32"
_MirrorDestGreSession_Object = MibTableColumn
mirrorDestGreSession = _MirrorDestGreSession_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 7, 1, 1),
    _MirrorDestGreSession_Type()
)
mirrorDestGreSession.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mirrorDestGreSession.setStatus("current")
_MirrorDestGrePort_Type = Integer32
_MirrorDestGrePort_Object = MibTableColumn
mirrorDestGrePort = _MirrorDestGrePort_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 7, 1, 2),
    _MirrorDestGrePort_Type()
)
mirrorDestGrePort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mirrorDestGrePort.setStatus("current")


class _MirrorDestMacAddr_Type(MacAddress):
    """Custom type mirrorDestMacAddr based on MacAddress"""
    subtypeSpec = MacAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_MirrorDestMacAddr_Type.__name__ = "MacAddress"
_MirrorDestMacAddr_Object = MibTableColumn
mirrorDestMacAddr = _MirrorDestMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 7, 1, 3),
    _MirrorDestMacAddr_Type()
)
mirrorDestMacAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mirrorDestMacAddr.setStatus("current")
_MirrorDestIP_Type = IpAddress
_MirrorDestIP_Object = MibTableColumn
mirrorDestIP = _MirrorDestIP_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 7, 1, 4),
    _MirrorDestIP_Type()
)
mirrorDestIP.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mirrorDestIP.setStatus("current")
_MirrorSrcIP_Type = IpAddress
_MirrorSrcIP_Object = MibTableColumn
mirrorSrcIP = _MirrorSrcIP_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 7, 1, 5),
    _MirrorSrcIP_Type()
)
mirrorSrcIP.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mirrorSrcIP.setStatus("current")


class _MirrorDestGreStatus_Type(Integer32):
    """Custom type mirrorDestGreStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_MirrorDestGreStatus_Type.__name__ = "Integer32"
_MirrorDestGreStatus_Object = MibTableColumn
mirrorDestGreStatus = _MirrorDestGreStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 12, 7, 1, 6),
    _MirrorDestGreStatus_Type()
)
mirrorDestGreStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mirrorDestGreStatus.setStatus("current")
_Pridhcp_ObjectIdentity = ObjectIdentity
pridhcp = _Pridhcp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13)
)
_DhcpRelay_ObjectIdentity = ObjectIdentity
dhcpRelay = _DhcpRelay_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1)
)


class _DhcpRelayForwardUdpBootps_Type(Integer32):
    """Custom type dhcpRelayForwardUdpBootps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("noBootps", 0),
          ("bootps", 1))
    )


_DhcpRelayForwardUdpBootps_Type.__name__ = "Integer32"
_DhcpRelayForwardUdpBootps_Object = MibScalar
dhcpRelayForwardUdpBootps = _DhcpRelayForwardUdpBootps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 1),
    _DhcpRelayForwardUdpBootps_Type()
)
dhcpRelayForwardUdpBootps.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpRelayForwardUdpBootps.setStatus("current")
_DhcpRelayServerAddrTable_Object = MibTable
dhcpRelayServerAddrTable = _DhcpRelayServerAddrTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 2)
)
if mibBuilder.loadTexts:
    dhcpRelayServerAddrTable.setStatus("current")
_DhcpRelayServerAddrEntry_Object = MibTableRow
dhcpRelayServerAddrEntry = _DhcpRelayServerAddrEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 2, 1)
)
dhcpRelayServerAddrEntry.setIndexNames(
    (0, "NAG-MIB", "dhcpRelayServerAddrVlanId"),
    (0, "NAG-MIB", "dhcpRelayServerAddrIndex"),
)
if mibBuilder.loadTexts:
    dhcpRelayServerAddrEntry.setStatus("current")
_DhcpRelayServerAddrVlanId_Type = Integer32
_DhcpRelayServerAddrVlanId_Object = MibTableColumn
dhcpRelayServerAddrVlanId = _DhcpRelayServerAddrVlanId_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 2, 1, 1),
    _DhcpRelayServerAddrVlanId_Type()
)
dhcpRelayServerAddrVlanId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dhcpRelayServerAddrVlanId.setStatus("current")
_DhcpRelayServerAddrIndex_Type = Integer32
_DhcpRelayServerAddrIndex_Object = MibTableColumn
dhcpRelayServerAddrIndex = _DhcpRelayServerAddrIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 2, 1, 2),
    _DhcpRelayServerAddrIndex_Type()
)
dhcpRelayServerAddrIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dhcpRelayServerAddrIndex.setStatus("current")
_DhcpRelayServerAddrServerIp_Type = IpAddress
_DhcpRelayServerAddrServerIp_Object = MibTableColumn
dhcpRelayServerAddrServerIp = _DhcpRelayServerAddrServerIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 2, 1, 3),
    _DhcpRelayServerAddrServerIp_Type()
)
dhcpRelayServerAddrServerIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpRelayServerAddrServerIp.setStatus("current")


class _DhcpRelayServerAddrStatus_Type(Integer32):
    """Custom type dhcpRelayServerAddrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_DhcpRelayServerAddrStatus_Type.__name__ = "Integer32"
_DhcpRelayServerAddrStatus_Object = MibTableColumn
dhcpRelayServerAddrStatus = _DhcpRelayServerAddrStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 2, 1, 4),
    _DhcpRelayServerAddrStatus_Type()
)
dhcpRelayServerAddrStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpRelayServerAddrStatus.setStatus("current")


class _DhcpRelayOption82Enalbe_Type(Integer32):
    """Custom type dhcpRelayOption82Enalbe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("noEnable", 0),
          ("enable", 1))
    )


_DhcpRelayOption82Enalbe_Type.__name__ = "Integer32"
_DhcpRelayOption82Enalbe_Object = MibScalar
dhcpRelayOption82Enalbe = _DhcpRelayOption82Enalbe_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 3),
    _DhcpRelayOption82Enalbe_Type()
)
dhcpRelayOption82Enalbe.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpRelayOption82Enalbe.setStatus("current")


class _DhcpRelayInformationOptionRemoteIDFormat_Type(Integer32):
    """Custom type dhcpRelayInformationOptionRemoteIDFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("vs-hp", 1))
    )


_DhcpRelayInformationOptionRemoteIDFormat_Type.__name__ = "Integer32"
_DhcpRelayInformationOptionRemoteIDFormat_Object = MibScalar
dhcpRelayInformationOptionRemoteIDFormat = _DhcpRelayInformationOptionRemoteIDFormat_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 4),
    _DhcpRelayInformationOptionRemoteIDFormat_Type()
)
dhcpRelayInformationOptionRemoteIDFormat.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpRelayInformationOptionRemoteIDFormat.setStatus("current")


class _DhcpRelayInformationOptionRemoteID_Type(DisplayString):
    """Custom type dhcpRelayInformationOptionRemoteID based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_DhcpRelayInformationOptionRemoteID_Type.__name__ = "DisplayString"
_DhcpRelayInformationOptionRemoteID_Object = MibScalar
dhcpRelayInformationOptionRemoteID = _DhcpRelayInformationOptionRemoteID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 5),
    _DhcpRelayInformationOptionRemoteID_Type()
)
dhcpRelayInformationOptionRemoteID.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpRelayInformationOptionRemoteID.setStatus("current")


class _DhcpRelayInformationOptionSubscriberIDFormat_Type(Integer32):
    """Custom type dhcpRelayInformationOptionSubscriberIDFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("hex", 0),
          ("acsii", 1),
          ("vs-hp", 2))
    )


_DhcpRelayInformationOptionSubscriberIDFormat_Type.__name__ = "Integer32"
_DhcpRelayInformationOptionSubscriberIDFormat_Object = MibScalar
dhcpRelayInformationOptionSubscriberIDFormat = _DhcpRelayInformationOptionSubscriberIDFormat_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 6),
    _DhcpRelayInformationOptionSubscriberIDFormat_Type()
)
dhcpRelayInformationOptionSubscriberIDFormat.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpRelayInformationOptionSubscriberIDFormat.setStatus("current")


class _DhcpServerRelayInformationEnable_Type(Integer32):
    """Custom type dhcpServerRelayInformationEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("noEnable", 0),
          ("enable", 1))
    )


_DhcpServerRelayInformationEnable_Type.__name__ = "Integer32"
_DhcpServerRelayInformationEnable_Object = MibScalar
dhcpServerRelayInformationEnable = _DhcpServerRelayInformationEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 7),
    _DhcpServerRelayInformationEnable_Type()
)
dhcpServerRelayInformationEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpServerRelayInformationEnable.setStatus("current")


class _DhcpRelayInformationOptionDelimiter_Type(Integer32):
    """Custom type dhcpRelayInformationOptionDelimiter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("colon", 0),
          ("dot", 1),
          ("slash", 2),
          ("space", 3))
    )


_DhcpRelayInformationOptionDelimiter_Type.__name__ = "Integer32"
_DhcpRelayInformationOptionDelimiter_Object = MibScalar
dhcpRelayInformationOptionDelimiter = _DhcpRelayInformationOptionDelimiter_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 8),
    _DhcpRelayInformationOptionDelimiter_Type()
)
dhcpRelayInformationOptionDelimiter.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpRelayInformationOptionDelimiter.setStatus("current")


class _DhcpRelayOptionSelfDefinedSubscriberIDFormat_Type(Integer32):
    """Custom type dhcpRelayOptionSelfDefinedSubscriberIDFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("hex", 0),
          ("ascii", 1))
    )


_DhcpRelayOptionSelfDefinedSubscriberIDFormat_Type.__name__ = "Integer32"
_DhcpRelayOptionSelfDefinedSubscriberIDFormat_Object = MibScalar
dhcpRelayOptionSelfDefinedSubscriberIDFormat = _DhcpRelayOptionSelfDefinedSubscriberIDFormat_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 9),
    _DhcpRelayOptionSelfDefinedSubscriberIDFormat_Type()
)
dhcpRelayOptionSelfDefinedSubscriberIDFormat.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpRelayOptionSelfDefinedSubscriberIDFormat.setStatus("current")


class _DhcpRelayOptionSelfDefinedRemoteIDFormat_Type(Integer32):
    """Custom type dhcpRelayOptionSelfDefinedRemoteIDFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("hex", 0),
          ("ascii", 1))
    )


_DhcpRelayOptionSelfDefinedRemoteIDFormat_Type.__name__ = "Integer32"
_DhcpRelayOptionSelfDefinedRemoteIDFormat_Object = MibScalar
dhcpRelayOptionSelfDefinedRemoteIDFormat = _DhcpRelayOptionSelfDefinedRemoteIDFormat_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 10),
    _DhcpRelayOptionSelfDefinedRemoteIDFormat_Type()
)
dhcpRelayOptionSelfDefinedRemoteIDFormat.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpRelayOptionSelfDefinedRemoteIDFormat.setStatus("current")


class _DhcpRelayOptionSelfDefinedSubscriberID_Type(DisplayString):
    """Custom type dhcpRelayOptionSelfDefinedSubscriberID based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_DhcpRelayOptionSelfDefinedSubscriberID_Type.__name__ = "DisplayString"
_DhcpRelayOptionSelfDefinedSubscriberID_Object = MibScalar
dhcpRelayOptionSelfDefinedSubscriberID = _DhcpRelayOptionSelfDefinedSubscriberID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 11),
    _DhcpRelayOptionSelfDefinedSubscriberID_Type()
)
dhcpRelayOptionSelfDefinedSubscriberID.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpRelayOptionSelfDefinedSubscriberID.setStatus("current")


class _DhcpRelayOptionSelfDefinedRemoteID_Type(DisplayString):
    """Custom type dhcpRelayOptionSelfDefinedRemoteID based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_DhcpRelayOptionSelfDefinedRemoteID_Type.__name__ = "DisplayString"
_DhcpRelayOptionSelfDefinedRemoteID_Object = MibScalar
dhcpRelayOptionSelfDefinedRemoteID = _DhcpRelayOptionSelfDefinedRemoteID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 12),
    _DhcpRelayOptionSelfDefinedRemoteID_Type()
)
dhcpRelayOptionSelfDefinedRemoteID.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpRelayOptionSelfDefinedRemoteID.setStatus("current")
_DhcpRelayOption82InterfaceConfigureTable_Object = MibTable
dhcpRelayOption82InterfaceConfigureTable = _DhcpRelayOption82InterfaceConfigureTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 13)
)
if mibBuilder.loadTexts:
    dhcpRelayOption82InterfaceConfigureTable.setStatus("current")
_DhcpRelayOption82InterfaceConfigureEntry_Object = MibTableRow
dhcpRelayOption82InterfaceConfigureEntry = _DhcpRelayOption82InterfaceConfigureEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 13, 1)
)
dhcpRelayOption82InterfaceConfigureEntry.setIndexNames(
    (0, "NAG-MIB", "dhcpRelayOption82Vid"),
)
if mibBuilder.loadTexts:
    dhcpRelayOption82InterfaceConfigureEntry.setStatus("current")
_DhcpRelayOption82Vid_Type = Integer32
_DhcpRelayOption82Vid_Object = MibTableColumn
dhcpRelayOption82Vid = _DhcpRelayOption82Vid_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 13, 1, 1),
    _DhcpRelayOption82Vid_Type()
)
dhcpRelayOption82Vid.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dhcpRelayOption82Vid.setStatus("current")


class _DhcpRelayOption82ForwardPolicy_Type(Integer32):
    """Custom type dhcpRelayOption82ForwardPolicy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("drop", 1),
          ("keep", 2),
          ("replace", 3))
    )


_DhcpRelayOption82ForwardPolicy_Type.__name__ = "Integer32"
_DhcpRelayOption82ForwardPolicy_Object = MibTableColumn
dhcpRelayOption82ForwardPolicy = _DhcpRelayOption82ForwardPolicy_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 13, 1, 2),
    _DhcpRelayOption82ForwardPolicy_Type()
)
dhcpRelayOption82ForwardPolicy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpRelayOption82ForwardPolicy.setStatus("current")


class _DhcpRelayOption82SubscriberID_Type(DisplayString):
    """Custom type dhcpRelayOption82SubscriberID based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_DhcpRelayOption82SubscriberID_Type.__name__ = "DisplayString"
_DhcpRelayOption82SubscriberID_Object = MibTableColumn
dhcpRelayOption82SubscriberID = _DhcpRelayOption82SubscriberID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 13, 1, 3),
    _DhcpRelayOption82SubscriberID_Type()
)
dhcpRelayOption82SubscriberID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpRelayOption82SubscriberID.setStatus("current")
_DhcpRelaySharevlanSubvlanConfigureTable_Object = MibTable
dhcpRelaySharevlanSubvlanConfigureTable = _DhcpRelaySharevlanSubvlanConfigureTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 14)
)
if mibBuilder.loadTexts:
    dhcpRelaySharevlanSubvlanConfigureTable.setStatus("current")
_DhcpRelaySharevlanSubvlanConfigureEntry_Object = MibTableRow
dhcpRelaySharevlanSubvlanConfigureEntry = _DhcpRelaySharevlanSubvlanConfigureEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 14, 1)
)
dhcpRelaySharevlanSubvlanConfigureEntry.setIndexNames(
    (0, "NAG-MIB", "dhcpRelaySharevlanSubvlanList"),
)
if mibBuilder.loadTexts:
    dhcpRelaySharevlanSubvlanConfigureEntry.setStatus("current")


class _DhcpRelaySharevlanSubvlanList_Type(OctetString):
    """Custom type dhcpRelaySharevlanSubvlanList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_DhcpRelaySharevlanSubvlanList_Type.__name__ = "OctetString"
_DhcpRelaySharevlanSubvlanList_Object = MibTableColumn
dhcpRelaySharevlanSubvlanList = _DhcpRelaySharevlanSubvlanList_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 14, 1, 1),
    _DhcpRelaySharevlanSubvlanList_Type()
)
dhcpRelaySharevlanSubvlanList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpRelaySharevlanSubvlanList.setStatus("current")


class _DhcpRelayNoSharevlan_Type(Integer32):
    """Custom type dhcpRelayNoSharevlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            0
        )
    )
    namedValues = NamedValues(
        ("disable", 0)
    )


_DhcpRelayNoSharevlan_Type.__name__ = "Integer32"
_DhcpRelayNoSharevlan_Object = MibTableColumn
dhcpRelayNoSharevlan = _DhcpRelayNoSharevlan_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 1, 14, 1, 2),
    _DhcpRelayNoSharevlan_Type()
)
dhcpRelayNoSharevlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpRelayNoSharevlan.setStatus("current")
_DhcpServer_ObjectIdentity = ObjectIdentity
dhcpServer = _DhcpServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2)
)


class _DhcpServerServiceStatus_Type(Integer32):
    """Custom type dhcpServerServiceStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_DhcpServerServiceStatus_Type.__name__ = "Integer32"
_DhcpServerServiceStatus_Object = MibScalar
dhcpServerServiceStatus = _DhcpServerServiceStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 1),
    _DhcpServerServiceStatus_Type()
)
dhcpServerServiceStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpServerServiceStatus.setStatus("current")


class _DhcploggingStatus_Type(Integer32):
    """Custom type dhcploggingStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_DhcploggingStatus_Type.__name__ = "Integer32"
_DhcploggingStatus_Object = MibScalar
dhcploggingStatus = _DhcploggingStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 2),
    _DhcploggingStatus_Type()
)
dhcploggingStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcploggingStatus.setStatus("current")
_DhcpPool_ObjectIdentity = ObjectIdentity
dhcpPool = _DhcpPool_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3)
)
_DhcpPoolTable_Object = MibTable
dhcpPoolTable = _DhcpPoolTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1)
)
if mibBuilder.loadTexts:
    dhcpPoolTable.setStatus("current")
_DhcpPoolEntry_Object = MibTableRow
dhcpPoolEntry = _DhcpPoolEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1)
)
dhcpPoolEntry.setIndexNames(
    (0, "NAG-MIB", "dhcpPoolPoolName"),
)
if mibBuilder.loadTexts:
    dhcpPoolEntry.setStatus("current")


class _DhcpPoolPoolName_Type(DisplayString):
    """Custom type dhcpPoolPoolName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_DhcpPoolPoolName_Type.__name__ = "DisplayString"
_DhcpPoolPoolName_Object = MibTableColumn
dhcpPoolPoolName = _DhcpPoolPoolName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 1),
    _DhcpPoolPoolName_Type()
)
dhcpPoolPoolName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dhcpPoolPoolName.setStatus("current")


class _DhcpPoolStatus_Type(Integer32):
    """Custom type dhcpPoolStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("destroy", 0),
          ("active", 1))
    )


_DhcpPoolStatus_Type.__name__ = "Integer32"
_DhcpPoolStatus_Object = MibTableColumn
dhcpPoolStatus = _DhcpPoolStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 2),
    _DhcpPoolStatus_Type()
)
dhcpPoolStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolStatus.setStatus("current")


class _DhcpPoolAddressType_Type(Integer32):
    """Custom type dhcpPoolAddressType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("network", 1),
          ("host", 2))
    )


_DhcpPoolAddressType_Type.__name__ = "Integer32"
_DhcpPoolAddressType_Object = MibTableColumn
dhcpPoolAddressType = _DhcpPoolAddressType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 3),
    _DhcpPoolAddressType_Type()
)
dhcpPoolAddressType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolAddressType.setStatus("current")
_DhcpPoolAddress_Type = IpAddress
_DhcpPoolAddress_Object = MibTableColumn
dhcpPoolAddress = _DhcpPoolAddress_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 4),
    _DhcpPoolAddress_Type()
)
dhcpPoolAddress.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolAddress.setStatus("current")
_DhcpPoolAddressPrefix_Type = IpAddress
_DhcpPoolAddressPrefix_Object = MibTableColumn
dhcpPoolAddressPrefix = _DhcpPoolAddressPrefix_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 5),
    _DhcpPoolAddressPrefix_Type()
)
dhcpPoolAddressPrefix.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolAddressPrefix.setStatus("current")


class _DhcpPoolAddressStatus_Type(Integer32):
    """Custom type dhcpPoolAddressStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("destroy", 0),
          ("active", 1))
    )


_DhcpPoolAddressStatus_Type.__name__ = "Integer32"
_DhcpPoolAddressStatus_Object = MibTableColumn
dhcpPoolAddressStatus = _DhcpPoolAddressStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 6),
    _DhcpPoolAddressStatus_Type()
)
dhcpPoolAddressStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolAddressStatus.setStatus("current")
_DhcpPoolMacAddress_Type = DisplayString
_DhcpPoolMacAddress_Object = MibTableColumn
dhcpPoolMacAddress = _DhcpPoolMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 7),
    _DhcpPoolMacAddress_Type()
)
dhcpPoolMacAddress.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolMacAddress.setStatus("current")


class _DhcpPoolProType_Type(Integer32):
    """Custom type dhcpPoolProType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_DhcpPoolProType_Type.__name__ = "Integer32"
_DhcpPoolProType_Object = MibTableColumn
dhcpPoolProType = _DhcpPoolProType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 8),
    _DhcpPoolProType_Type()
)
dhcpPoolProType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolProType.setStatus("current")


class _DhcpPoolMacStatus_Type(Integer32):
    """Custom type dhcpPoolMacStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("destroy", 0),
          ("active", 1))
    )


_DhcpPoolMacStatus_Type.__name__ = "Integer32"
_DhcpPoolMacStatus_Object = MibTableColumn
dhcpPoolMacStatus = _DhcpPoolMacStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 1, 1, 9),
    _DhcpPoolMacStatus_Type()
)
dhcpPoolMacStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolMacStatus.setStatus("current")
_DhcpPoolExpandTable_Object = MibTable
dhcpPoolExpandTable = _DhcpPoolExpandTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 2)
)
if mibBuilder.loadTexts:
    dhcpPoolExpandTable.setStatus("current")
_DhcpPoolExpandEntry_Object = MibTableRow
dhcpPoolExpandEntry = _DhcpPoolExpandEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 2, 1)
)
dhcpPoolExpandEntry.setIndexNames(
    (0, "NAG-MIB", "dhcpPoolExpandName"),
)
if mibBuilder.loadTexts:
    dhcpPoolExpandEntry.setStatus("current")


class _DhcpPoolExpandName_Type(DisplayString):
    """Custom type dhcpPoolExpandName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_DhcpPoolExpandName_Type.__name__ = "DisplayString"
_DhcpPoolExpandName_Object = MibTableColumn
dhcpPoolExpandName = _DhcpPoolExpandName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 2, 1, 1),
    _DhcpPoolExpandName_Type()
)
dhcpPoolExpandName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dhcpPoolExpandName.setStatus("current")


class _DhcpPoolNetbiosNodeType_Type(Integer32):
    """Custom type dhcpPoolNetbiosNodeType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_DhcpPoolNetbiosNodeType_Type.__name__ = "Integer32"
_DhcpPoolNetbiosNodeType_Object = MibTableColumn
dhcpPoolNetbiosNodeType = _DhcpPoolNetbiosNodeType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 2, 1, 2),
    _DhcpPoolNetbiosNodeType_Type()
)
dhcpPoolNetbiosNodeType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolNetbiosNodeType.setStatus("current")


class _DhcpPoolDomainName_Type(DisplayString):
    """Custom type dhcpPoolDomainName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 255),
    )


_DhcpPoolDomainName_Type.__name__ = "DisplayString"
_DhcpPoolDomainName_Object = MibTableColumn
dhcpPoolDomainName = _DhcpPoolDomainName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 2, 1, 3),
    _DhcpPoolDomainName_Type()
)
dhcpPoolDomainName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolDomainName.setStatus("current")


class _DhcpPoolBootFile_Type(DisplayString):
    """Custom type dhcpPoolBootFile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 255),
    )


_DhcpPoolBootFile_Type.__name__ = "DisplayString"
_DhcpPoolBootFile_Object = MibTableColumn
dhcpPoolBootFile = _DhcpPoolBootFile_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 2, 1, 4),
    _DhcpPoolBootFile_Type()
)
dhcpPoolBootFile.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolBootFile.setStatus("current")
_DhcpPoolCLid_Type = DisplayString
_DhcpPoolCLid_Object = MibTableColumn
dhcpPoolCLid = _DhcpPoolCLid_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 2, 1, 5),
    _DhcpPoolCLid_Type()
)
dhcpPoolCLid.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolCLid.setStatus("current")


class _DhcpPoolExpandstatus_Type(Integer32):
    """Custom type dhcpPoolExpandstatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("valid", 0),
          ("destroy", 1))
    )


_DhcpPoolExpandstatus_Type.__name__ = "Integer32"
_DhcpPoolExpandstatus_Object = MibTableColumn
dhcpPoolExpandstatus = _DhcpPoolExpandstatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 3, 2, 1, 7),
    _DhcpPoolExpandstatus_Type()
)
dhcpPoolExpandstatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolExpandstatus.setStatus("current")
_DhcpLeaseTimeTable_Object = MibTable
dhcpLeaseTimeTable = _DhcpLeaseTimeTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 4)
)
if mibBuilder.loadTexts:
    dhcpLeaseTimeTable.setStatus("current")
_DhcpLeaseTimeEntry_Object = MibTableRow
dhcpLeaseTimeEntry = _DhcpLeaseTimeEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 4, 1)
)
dhcpLeaseTimeEntry.setIndexNames(
    (0, "NAG-MIB", "dhcpLeaseTimePoolName"),
)
if mibBuilder.loadTexts:
    dhcpLeaseTimeEntry.setStatus("current")


class _DhcpLeaseTimePoolName_Type(DisplayString):
    """Custom type dhcpLeaseTimePoolName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_DhcpLeaseTimePoolName_Type.__name__ = "DisplayString"
_DhcpLeaseTimePoolName_Object = MibTableColumn
dhcpLeaseTimePoolName = _DhcpLeaseTimePoolName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 4, 1, 1),
    _DhcpLeaseTimePoolName_Type()
)
dhcpLeaseTimePoolName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dhcpLeaseTimePoolName.setStatus("current")


class _DhcpLeaseTimeType_Type(Integer32):
    """Custom type dhcpLeaseTimeType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("temp", 0),
          ("infinite", 1))
    )


_DhcpLeaseTimeType_Type.__name__ = "Integer32"
_DhcpLeaseTimeType_Object = MibTableColumn
dhcpLeaseTimeType = _DhcpLeaseTimeType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 4, 1, 2),
    _DhcpLeaseTimeType_Type()
)
dhcpLeaseTimeType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpLeaseTimeType.setStatus("current")


class _DhcpLeaseTimeDay_Type(Integer32):
    """Custom type dhcpLeaseTimeDay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 365),
    )


_DhcpLeaseTimeDay_Type.__name__ = "Integer32"
_DhcpLeaseTimeDay_Object = MibTableColumn
dhcpLeaseTimeDay = _DhcpLeaseTimeDay_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 4, 1, 3),
    _DhcpLeaseTimeDay_Type()
)
dhcpLeaseTimeDay.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpLeaseTimeDay.setStatus("current")


class _DhcpLeaseTimeHours_Type(Integer32):
    """Custom type dhcpLeaseTimeHours based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 23),
    )


_DhcpLeaseTimeHours_Type.__name__ = "Integer32"
_DhcpLeaseTimeHours_Object = MibTableColumn
dhcpLeaseTimeHours = _DhcpLeaseTimeHours_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 4, 1, 4),
    _DhcpLeaseTimeHours_Type()
)
dhcpLeaseTimeHours.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpLeaseTimeHours.setStatus("current")


class _DhcpLeaseTimeMinutes_Type(Integer32):
    """Custom type dhcpLeaseTimeMinutes based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 59),
    )


_DhcpLeaseTimeMinutes_Type.__name__ = "Integer32"
_DhcpLeaseTimeMinutes_Object = MibTableColumn
dhcpLeaseTimeMinutes = _DhcpLeaseTimeMinutes_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 4, 1, 5),
    _DhcpLeaseTimeMinutes_Type()
)
dhcpLeaseTimeMinutes.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpLeaseTimeMinutes.setStatus("current")


class _DhcpLeaseTimeStatus_Type(Integer32):
    """Custom type dhcpLeaseTimeStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_DhcpLeaseTimeStatus_Type.__name__ = "Integer32"
_DhcpLeaseTimeStatus_Object = MibTableColumn
dhcpLeaseTimeStatus = _DhcpLeaseTimeStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 4, 1, 6),
    _DhcpLeaseTimeStatus_Type()
)
dhcpLeaseTimeStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpLeaseTimeStatus.setStatus("current")
_DhcpPoolOptionTable_Object = MibTable
dhcpPoolOptionTable = _DhcpPoolOptionTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 5)
)
if mibBuilder.loadTexts:
    dhcpPoolOptionTable.setStatus("current")
_DhcpPoolOptionEntry_Object = MibTableRow
dhcpPoolOptionEntry = _DhcpPoolOptionEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 5, 1)
)
dhcpPoolOptionEntry.setIndexNames(
    (0, "NAG-MIB", "dhcpPoolOptionName"),
    (0, "NAG-MIB", "dhcpPoolOptionIndex"),
)
if mibBuilder.loadTexts:
    dhcpPoolOptionEntry.setStatus("current")


class _DhcpPoolOptionName_Type(DisplayString):
    """Custom type dhcpPoolOptionName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_DhcpPoolOptionName_Type.__name__ = "DisplayString"
_DhcpPoolOptionName_Object = MibTableColumn
dhcpPoolOptionName = _DhcpPoolOptionName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 5, 1, 1),
    _DhcpPoolOptionName_Type()
)
dhcpPoolOptionName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dhcpPoolOptionName.setStatus("current")
_DhcpPoolOptionIndex_Type = Integer32
_DhcpPoolOptionIndex_Object = MibTableColumn
dhcpPoolOptionIndex = _DhcpPoolOptionIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 5, 1, 2),
    _DhcpPoolOptionIndex_Type()
)
dhcpPoolOptionIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dhcpPoolOptionIndex.setStatus("current")


class _DhcpPoolOptionId_Type(Integer32):
    """Custom type dhcpPoolOptionId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_DhcpPoolOptionId_Type.__name__ = "Integer32"
_DhcpPoolOptionId_Object = MibTableColumn
dhcpPoolOptionId = _DhcpPoolOptionId_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 5, 1, 3),
    _DhcpPoolOptionId_Type()
)
dhcpPoolOptionId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolOptionId.setStatus("current")


class _DhcpPoolOptionType_Type(Integer32):
    """Custom type dhcpPoolOptionType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ascii", 1),
          ("hex", 2),
          ("ipaddress", 3))
    )


_DhcpPoolOptionType_Type.__name__ = "Integer32"
_DhcpPoolOptionType_Object = MibTableColumn
dhcpPoolOptionType = _DhcpPoolOptionType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 5, 1, 4),
    _DhcpPoolOptionType_Type()
)
dhcpPoolOptionType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolOptionType.setStatus("current")
_DhcpPoolOption_Type = DisplayString
_DhcpPoolOption_Object = MibTableColumn
dhcpPoolOption = _DhcpPoolOption_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 5, 1, 5),
    _DhcpPoolOption_Type()
)
dhcpPoolOption.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolOption.setStatus("current")


class _DhcpPoolOptionStatus_Type(Integer32):
    """Custom type dhcpPoolOptionStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_DhcpPoolOptionStatus_Type.__name__ = "Integer32"
_DhcpPoolOptionStatus_Object = MibTableColumn
dhcpPoolOptionStatus = _DhcpPoolOptionStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 5, 1, 6),
    _DhcpPoolOptionStatus_Type()
)
dhcpPoolOptionStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolOptionStatus.setStatus("current")
_DhcpServerExcludedIpAddrTable_Object = MibTable
dhcpServerExcludedIpAddrTable = _DhcpServerExcludedIpAddrTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 6)
)
if mibBuilder.loadTexts:
    dhcpServerExcludedIpAddrTable.setStatus("current")
_DhcpServerExcludedIpAddrEntry_Object = MibTableRow
dhcpServerExcludedIpAddrEntry = _DhcpServerExcludedIpAddrEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 6, 1)
)
dhcpServerExcludedIpAddrEntry.setIndexNames(
    (0, "NAG-MIB", "dhcpServerExcludedIpAddrLowIp"),
    (0, "NAG-MIB", "dhcpServerExcludedIpAddrHiIp"),
)
if mibBuilder.loadTexts:
    dhcpServerExcludedIpAddrEntry.setStatus("current")
_DhcpServerExcludedIpAddrLowIp_Type = IpAddress
_DhcpServerExcludedIpAddrLowIp_Object = MibTableColumn
dhcpServerExcludedIpAddrLowIp = _DhcpServerExcludedIpAddrLowIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 6, 1, 1),
    _DhcpServerExcludedIpAddrLowIp_Type()
)
dhcpServerExcludedIpAddrLowIp.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dhcpServerExcludedIpAddrLowIp.setStatus("current")
_DhcpServerExcludedIpAddrHiIp_Type = IpAddress
_DhcpServerExcludedIpAddrHiIp_Object = MibTableColumn
dhcpServerExcludedIpAddrHiIp = _DhcpServerExcludedIpAddrHiIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 6, 1, 2),
    _DhcpServerExcludedIpAddrHiIp_Type()
)
dhcpServerExcludedIpAddrHiIp.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dhcpServerExcludedIpAddrHiIp.setStatus("current")


class _DhcpServerExcludedIpAddrStatus_Type(Integer32):
    """Custom type dhcpServerExcludedIpAddrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_DhcpServerExcludedIpAddrStatus_Type.__name__ = "Integer32"
_DhcpServerExcludedIpAddrStatus_Object = MibTableColumn
dhcpServerExcludedIpAddrStatus = _DhcpServerExcludedIpAddrStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 6, 1, 3),
    _DhcpServerExcludedIpAddrStatus_Type()
)
dhcpServerExcludedIpAddrStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpServerExcludedIpAddrStatus.setStatus("current")
_DhcpPoolDnsSerTable_Object = MibTable
dhcpPoolDnsSerTable = _DhcpPoolDnsSerTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8)
)
if mibBuilder.loadTexts:
    dhcpPoolDnsSerTable.setStatus("current")
_DhcpPoolDnsSerEntry_Object = MibTableRow
dhcpPoolDnsSerEntry = _DhcpPoolDnsSerEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1)
)
dhcpPoolDnsSerEntry.setIndexNames(
    (0, "NAG-MIB", "dhcpPoolDnsSerPoolName"),
)
if mibBuilder.loadTexts:
    dhcpPoolDnsSerEntry.setStatus("current")
_DhcpPoolDnsSerPoolName_Type = DisplayString
_DhcpPoolDnsSerPoolName_Object = MibTableColumn
dhcpPoolDnsSerPoolName = _DhcpPoolDnsSerPoolName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 1),
    _DhcpPoolDnsSerPoolName_Type()
)
dhcpPoolDnsSerPoolName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dhcpPoolDnsSerPoolName.setStatus("current")
_DhcpPoolDnsSerIpAddress1_Type = IpAddress
_DhcpPoolDnsSerIpAddress1_Object = MibTableColumn
dhcpPoolDnsSerIpAddress1 = _DhcpPoolDnsSerIpAddress1_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 2),
    _DhcpPoolDnsSerIpAddress1_Type()
)
dhcpPoolDnsSerIpAddress1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolDnsSerIpAddress1.setStatus("current")
_DhcpPoolDnsSerIpAddress2_Type = IpAddress
_DhcpPoolDnsSerIpAddress2_Object = MibTableColumn
dhcpPoolDnsSerIpAddress2 = _DhcpPoolDnsSerIpAddress2_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 3),
    _DhcpPoolDnsSerIpAddress2_Type()
)
dhcpPoolDnsSerIpAddress2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolDnsSerIpAddress2.setStatus("current")
_DhcpPoolDnsSerIpAddress3_Type = IpAddress
_DhcpPoolDnsSerIpAddress3_Object = MibTableColumn
dhcpPoolDnsSerIpAddress3 = _DhcpPoolDnsSerIpAddress3_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 4),
    _DhcpPoolDnsSerIpAddress3_Type()
)
dhcpPoolDnsSerIpAddress3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolDnsSerIpAddress3.setStatus("current")
_DhcpPoolDnsSerIpAddress4_Type = IpAddress
_DhcpPoolDnsSerIpAddress4_Object = MibTableColumn
dhcpPoolDnsSerIpAddress4 = _DhcpPoolDnsSerIpAddress4_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 5),
    _DhcpPoolDnsSerIpAddress4_Type()
)
dhcpPoolDnsSerIpAddress4.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolDnsSerIpAddress4.setStatus("current")
_DhcpPoolDnsSerIpAddress5_Type = IpAddress
_DhcpPoolDnsSerIpAddress5_Object = MibTableColumn
dhcpPoolDnsSerIpAddress5 = _DhcpPoolDnsSerIpAddress5_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 6),
    _DhcpPoolDnsSerIpAddress5_Type()
)
dhcpPoolDnsSerIpAddress5.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolDnsSerIpAddress5.setStatus("current")
_DhcpPoolDnsSerIpAddress6_Type = IpAddress
_DhcpPoolDnsSerIpAddress6_Object = MibTableColumn
dhcpPoolDnsSerIpAddress6 = _DhcpPoolDnsSerIpAddress6_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 7),
    _DhcpPoolDnsSerIpAddress6_Type()
)
dhcpPoolDnsSerIpAddress6.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolDnsSerIpAddress6.setStatus("current")
_DhcpPoolDnsSerIpAddress7_Type = IpAddress
_DhcpPoolDnsSerIpAddress7_Object = MibTableColumn
dhcpPoolDnsSerIpAddress7 = _DhcpPoolDnsSerIpAddress7_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 8),
    _DhcpPoolDnsSerIpAddress7_Type()
)
dhcpPoolDnsSerIpAddress7.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolDnsSerIpAddress7.setStatus("current")
_DhcpPoolDnsSerIpAddress8_Type = IpAddress
_DhcpPoolDnsSerIpAddress8_Object = MibTableColumn
dhcpPoolDnsSerIpAddress8 = _DhcpPoolDnsSerIpAddress8_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 9),
    _DhcpPoolDnsSerIpAddress8_Type()
)
dhcpPoolDnsSerIpAddress8.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolDnsSerIpAddress8.setStatus("current")


class _DhcpPoolDnsSerStatus_Type(Integer32):
    """Custom type dhcpPoolDnsSerStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_DhcpPoolDnsSerStatus_Type.__name__ = "Integer32"
_DhcpPoolDnsSerStatus_Object = MibTableColumn
dhcpPoolDnsSerStatus = _DhcpPoolDnsSerStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 8, 1, 10),
    _DhcpPoolDnsSerStatus_Type()
)
dhcpPoolDnsSerStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolDnsSerStatus.setStatus("current")
_DhcpPoolDefaultRouterTable_Object = MibTable
dhcpPoolDefaultRouterTable = _DhcpPoolDefaultRouterTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9)
)
if mibBuilder.loadTexts:
    dhcpPoolDefaultRouterTable.setStatus("current")
_DhcpPoolDefaultRouterEntry_Object = MibTableRow
dhcpPoolDefaultRouterEntry = _DhcpPoolDefaultRouterEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1)
)
dhcpPoolDefaultRouterEntry.setIndexNames(
    (0, "NAG-MIB", "dhcpPoolDnsSerPoolName"),
)
if mibBuilder.loadTexts:
    dhcpPoolDefaultRouterEntry.setStatus("current")
_DhcpPoolDefaultRouterPoolName_Type = DisplayString
_DhcpPoolDefaultRouterPoolName_Object = MibTableColumn
dhcpPoolDefaultRouterPoolName = _DhcpPoolDefaultRouterPoolName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 1),
    _DhcpPoolDefaultRouterPoolName_Type()
)
dhcpPoolDefaultRouterPoolName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dhcpPoolDefaultRouterPoolName.setStatus("current")
_DhcpPoolDefaultRouterIpAddress1_Type = IpAddress
_DhcpPoolDefaultRouterIpAddress1_Object = MibTableColumn
dhcpPoolDefaultRouterIpAddress1 = _DhcpPoolDefaultRouterIpAddress1_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 2),
    _DhcpPoolDefaultRouterIpAddress1_Type()
)
dhcpPoolDefaultRouterIpAddress1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolDefaultRouterIpAddress1.setStatus("current")
_DhcpPoolDefaultRouterIpAddress2_Type = IpAddress
_DhcpPoolDefaultRouterIpAddress2_Object = MibTableColumn
dhcpPoolDefaultRouterIpAddress2 = _DhcpPoolDefaultRouterIpAddress2_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 3),
    _DhcpPoolDefaultRouterIpAddress2_Type()
)
dhcpPoolDefaultRouterIpAddress2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolDefaultRouterIpAddress2.setStatus("current")
_DhcpPoolDefaultRouterIpAddress3_Type = IpAddress
_DhcpPoolDefaultRouterIpAddress3_Object = MibTableColumn
dhcpPoolDefaultRouterIpAddress3 = _DhcpPoolDefaultRouterIpAddress3_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 4),
    _DhcpPoolDefaultRouterIpAddress3_Type()
)
dhcpPoolDefaultRouterIpAddress3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolDefaultRouterIpAddress3.setStatus("current")
_DhcpPoolDefaultRouterIpAddress4_Type = IpAddress
_DhcpPoolDefaultRouterIpAddress4_Object = MibTableColumn
dhcpPoolDefaultRouterIpAddress4 = _DhcpPoolDefaultRouterIpAddress4_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 5),
    _DhcpPoolDefaultRouterIpAddress4_Type()
)
dhcpPoolDefaultRouterIpAddress4.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolDefaultRouterIpAddress4.setStatus("current")
_DhcpPoolDefaultRouterIpAddress5_Type = IpAddress
_DhcpPoolDefaultRouterIpAddress5_Object = MibTableColumn
dhcpPoolDefaultRouterIpAddress5 = _DhcpPoolDefaultRouterIpAddress5_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 6),
    _DhcpPoolDefaultRouterIpAddress5_Type()
)
dhcpPoolDefaultRouterIpAddress5.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolDefaultRouterIpAddress5.setStatus("current")
_DhcpPoolDefaultRouterIpAddress6_Type = IpAddress
_DhcpPoolDefaultRouterIpAddress6_Object = MibTableColumn
dhcpPoolDefaultRouterIpAddress6 = _DhcpPoolDefaultRouterIpAddress6_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 7),
    _DhcpPoolDefaultRouterIpAddress6_Type()
)
dhcpPoolDefaultRouterIpAddress6.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolDefaultRouterIpAddress6.setStatus("current")
_DhcpPoolDefaultRouterIpAddress7_Type = IpAddress
_DhcpPoolDefaultRouterIpAddress7_Object = MibTableColumn
dhcpPoolDefaultRouterIpAddress7 = _DhcpPoolDefaultRouterIpAddress7_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 8),
    _DhcpPoolDefaultRouterIpAddress7_Type()
)
dhcpPoolDefaultRouterIpAddress7.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolDefaultRouterIpAddress7.setStatus("current")
_DhcpPoolDefaultRouterIpAddress8_Type = IpAddress
_DhcpPoolDefaultRouterIpAddress8_Object = MibTableColumn
dhcpPoolDefaultRouterIpAddress8 = _DhcpPoolDefaultRouterIpAddress8_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 9),
    _DhcpPoolDefaultRouterIpAddress8_Type()
)
dhcpPoolDefaultRouterIpAddress8.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolDefaultRouterIpAddress8.setStatus("current")


class _DhcpPoolDefaultRouterStatus_Type(Integer32):
    """Custom type dhcpPoolDefaultRouterStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_DhcpPoolDefaultRouterStatus_Type.__name__ = "Integer32"
_DhcpPoolDefaultRouterStatus_Object = MibTableColumn
dhcpPoolDefaultRouterStatus = _DhcpPoolDefaultRouterStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 9, 1, 10),
    _DhcpPoolDefaultRouterStatus_Type()
)
dhcpPoolDefaultRouterStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolDefaultRouterStatus.setStatus("current")
_DhcpPoolNextServerTable_Object = MibTable
dhcpPoolNextServerTable = _DhcpPoolNextServerTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10)
)
if mibBuilder.loadTexts:
    dhcpPoolNextServerTable.setStatus("current")
_DhcpPoolNextServerEntry_Object = MibTableRow
dhcpPoolNextServerEntry = _DhcpPoolNextServerEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1)
)
dhcpPoolNextServerEntry.setIndexNames(
    (0, "NAG-MIB", "dhcpPoolNextServerPoolName"),
)
if mibBuilder.loadTexts:
    dhcpPoolNextServerEntry.setStatus("current")
_DhcpPoolNextServerPoolName_Type = DisplayString
_DhcpPoolNextServerPoolName_Object = MibTableColumn
dhcpPoolNextServerPoolName = _DhcpPoolNextServerPoolName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 1),
    _DhcpPoolNextServerPoolName_Type()
)
dhcpPoolNextServerPoolName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dhcpPoolNextServerPoolName.setStatus("current")
_DhcpPoolNextServerIpAddress1_Type = IpAddress
_DhcpPoolNextServerIpAddress1_Object = MibTableColumn
dhcpPoolNextServerIpAddress1 = _DhcpPoolNextServerIpAddress1_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 2),
    _DhcpPoolNextServerIpAddress1_Type()
)
dhcpPoolNextServerIpAddress1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolNextServerIpAddress1.setStatus("current")
_DhcpPoolNextServerIpAddress2_Type = IpAddress
_DhcpPoolNextServerIpAddress2_Object = MibTableColumn
dhcpPoolNextServerIpAddress2 = _DhcpPoolNextServerIpAddress2_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 3),
    _DhcpPoolNextServerIpAddress2_Type()
)
dhcpPoolNextServerIpAddress2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolNextServerIpAddress2.setStatus("current")
_DhcpPoolNextServerIpAddress3_Type = IpAddress
_DhcpPoolNextServerIpAddress3_Object = MibTableColumn
dhcpPoolNextServerIpAddress3 = _DhcpPoolNextServerIpAddress3_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 4),
    _DhcpPoolNextServerIpAddress3_Type()
)
dhcpPoolNextServerIpAddress3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolNextServerIpAddress3.setStatus("current")
_DhcpPoolNextServerIpAddress4_Type = IpAddress
_DhcpPoolNextServerIpAddress4_Object = MibTableColumn
dhcpPoolNextServerIpAddress4 = _DhcpPoolNextServerIpAddress4_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 5),
    _DhcpPoolNextServerIpAddress4_Type()
)
dhcpPoolNextServerIpAddress4.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolNextServerIpAddress4.setStatus("current")
_DhcpPoolNextServerIpAddress5_Type = IpAddress
_DhcpPoolNextServerIpAddress5_Object = MibTableColumn
dhcpPoolNextServerIpAddress5 = _DhcpPoolNextServerIpAddress5_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 6),
    _DhcpPoolNextServerIpAddress5_Type()
)
dhcpPoolNextServerIpAddress5.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolNextServerIpAddress5.setStatus("current")
_DhcpPoolNextServerIpAddress6_Type = IpAddress
_DhcpPoolNextServerIpAddress6_Object = MibTableColumn
dhcpPoolNextServerIpAddress6 = _DhcpPoolNextServerIpAddress6_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 7),
    _DhcpPoolNextServerIpAddress6_Type()
)
dhcpPoolNextServerIpAddress6.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolNextServerIpAddress6.setStatus("current")
_DhcpPoolNextServerIpAddress7_Type = IpAddress
_DhcpPoolNextServerIpAddress7_Object = MibTableColumn
dhcpPoolNextServerIpAddress7 = _DhcpPoolNextServerIpAddress7_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 8),
    _DhcpPoolNextServerIpAddress7_Type()
)
dhcpPoolNextServerIpAddress7.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolNextServerIpAddress7.setStatus("current")
_DhcpPoolNextServerIpAddress8_Type = IpAddress
_DhcpPoolNextServerIpAddress8_Object = MibTableColumn
dhcpPoolNextServerIpAddress8 = _DhcpPoolNextServerIpAddress8_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 9),
    _DhcpPoolNextServerIpAddress8_Type()
)
dhcpPoolNextServerIpAddress8.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolNextServerIpAddress8.setStatus("current")


class _DhcpPoolNextServerStatus_Type(Integer32):
    """Custom type dhcpPoolNextServerStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_DhcpPoolNextServerStatus_Type.__name__ = "Integer32"
_DhcpPoolNextServerStatus_Object = MibTableColumn
dhcpPoolNextServerStatus = _DhcpPoolNextServerStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 10, 1, 10),
    _DhcpPoolNextServerStatus_Type()
)
dhcpPoolNextServerStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolNextServerStatus.setStatus("current")
_DhcpPoolWinsTable_Object = MibTable
dhcpPoolWinsTable = _DhcpPoolWinsTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11)
)
if mibBuilder.loadTexts:
    dhcpPoolWinsTable.setStatus("current")
_DhcpPoolWinsEntry_Object = MibTableRow
dhcpPoolWinsEntry = _DhcpPoolWinsEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1)
)
dhcpPoolWinsEntry.setIndexNames(
    (0, "NAG-MIB", "dhcpPoolDnsSerPoolName"),
)
if mibBuilder.loadTexts:
    dhcpPoolWinsEntry.setStatus("current")
_DhcpPoolWinsPoolName_Type = DisplayString
_DhcpPoolWinsPoolName_Object = MibTableColumn
dhcpPoolWinsPoolName = _DhcpPoolWinsPoolName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 1),
    _DhcpPoolWinsPoolName_Type()
)
dhcpPoolWinsPoolName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dhcpPoolWinsPoolName.setStatus("current")
_DhcpPoolWinsIpAddress1_Type = IpAddress
_DhcpPoolWinsIpAddress1_Object = MibTableColumn
dhcpPoolWinsIpAddress1 = _DhcpPoolWinsIpAddress1_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 2),
    _DhcpPoolWinsIpAddress1_Type()
)
dhcpPoolWinsIpAddress1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolWinsIpAddress1.setStatus("current")
_DhcpPoolWinsIpAddress2_Type = IpAddress
_DhcpPoolWinsIpAddress2_Object = MibTableColumn
dhcpPoolWinsIpAddress2 = _DhcpPoolWinsIpAddress2_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 3),
    _DhcpPoolWinsIpAddress2_Type()
)
dhcpPoolWinsIpAddress2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolWinsIpAddress2.setStatus("current")
_DhcpPoolWinsIpAddress3_Type = IpAddress
_DhcpPoolWinsIpAddress3_Object = MibTableColumn
dhcpPoolWinsIpAddress3 = _DhcpPoolWinsIpAddress3_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 4),
    _DhcpPoolWinsIpAddress3_Type()
)
dhcpPoolWinsIpAddress3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolWinsIpAddress3.setStatus("current")
_DhcpPoolWinsIpAddress4_Type = IpAddress
_DhcpPoolWinsIpAddress4_Object = MibTableColumn
dhcpPoolWinsIpAddress4 = _DhcpPoolWinsIpAddress4_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 5),
    _DhcpPoolWinsIpAddress4_Type()
)
dhcpPoolWinsIpAddress4.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolWinsIpAddress4.setStatus("current")
_DhcpPoolWinsIpAddress5_Type = IpAddress
_DhcpPoolWinsIpAddress5_Object = MibTableColumn
dhcpPoolWinsIpAddress5 = _DhcpPoolWinsIpAddress5_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 6),
    _DhcpPoolWinsIpAddress5_Type()
)
dhcpPoolWinsIpAddress5.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolWinsIpAddress5.setStatus("current")
_DhcpPoolWinsIpAddress6_Type = IpAddress
_DhcpPoolWinsIpAddress6_Object = MibTableColumn
dhcpPoolWinsIpAddress6 = _DhcpPoolWinsIpAddress6_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 7),
    _DhcpPoolWinsIpAddress6_Type()
)
dhcpPoolWinsIpAddress6.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolWinsIpAddress6.setStatus("current")
_DhcpPoolWinsIpAddress7_Type = IpAddress
_DhcpPoolWinsIpAddress7_Object = MibTableColumn
dhcpPoolWinsIpAddress7 = _DhcpPoolWinsIpAddress7_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 8),
    _DhcpPoolWinsIpAddress7_Type()
)
dhcpPoolWinsIpAddress7.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolWinsIpAddress7.setStatus("current")
_DhcpPoolWinsIpAddress8_Type = IpAddress
_DhcpPoolWinsIpAddress8_Object = MibTableColumn
dhcpPoolWinsIpAddress8 = _DhcpPoolWinsIpAddress8_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 9),
    _DhcpPoolWinsIpAddress8_Type()
)
dhcpPoolWinsIpAddress8.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolWinsIpAddress8.setStatus("current")


class _DhcpPoolWinsStatus_Type(Integer32):
    """Custom type dhcpPoolWinsStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_DhcpPoolWinsStatus_Type.__name__ = "Integer32"
_DhcpPoolWinsStatus_Object = MibTableColumn
dhcpPoolWinsStatus = _DhcpPoolWinsStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 11, 1, 10),
    _DhcpPoolWinsStatus_Type()
)
dhcpPoolWinsStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpPoolWinsStatus.setStatus("current")
_DhcpServerLeaseBindingTable_Object = MibTable
dhcpServerLeaseBindingTable = _DhcpServerLeaseBindingTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 12)
)
if mibBuilder.loadTexts:
    dhcpServerLeaseBindingTable.setStatus("current")
_DhcpServerLeaseBindingEntry_Object = MibTableRow
dhcpServerLeaseBindingEntry = _DhcpServerLeaseBindingEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 12, 1)
)
dhcpServerLeaseBindingEntry.setIndexNames(
    (0, "NAG-MIB", "dhcpServerLeaseBindingIp"),
    (0, "NAG-MIB", "dhcpServerLeaseBindingType"),
)
if mibBuilder.loadTexts:
    dhcpServerLeaseBindingEntry.setStatus("current")
_DhcpServerLeaseBindingIp_Type = IpAddress
_DhcpServerLeaseBindingIp_Object = MibTableColumn
dhcpServerLeaseBindingIp = _DhcpServerLeaseBindingIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 12, 1, 1),
    _DhcpServerLeaseBindingIp_Type()
)
dhcpServerLeaseBindingIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpServerLeaseBindingIp.setStatus("current")


class _DhcpServerLeaseBindingType_Type(Integer32):
    """Custom type dhcpServerLeaseBindingType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("manual", 1),
          ("dynamic", 2))
    )


_DhcpServerLeaseBindingType_Type.__name__ = "Integer32"
_DhcpServerLeaseBindingType_Object = MibTableColumn
dhcpServerLeaseBindingType = _DhcpServerLeaseBindingType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 12, 1, 2),
    _DhcpServerLeaseBindingType_Type()
)
dhcpServerLeaseBindingType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpServerLeaseBindingType.setStatus("current")
_DhcpServerLeaseBindingMac_Type = DisplayString
_DhcpServerLeaseBindingMac_Object = MibTableColumn
dhcpServerLeaseBindingMac = _DhcpServerLeaseBindingMac_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 12, 1, 3),
    _DhcpServerLeaseBindingMac_Type()
)
dhcpServerLeaseBindingMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpServerLeaseBindingMac.setStatus("current")
_DhcpServerLeaseBindingLeaseTime_Type = Integer32
_DhcpServerLeaseBindingLeaseTime_Object = MibTableColumn
dhcpServerLeaseBindingLeaseTime = _DhcpServerLeaseBindingLeaseTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 2, 12, 1, 4),
    _DhcpServerLeaseBindingLeaseTime_Type()
)
dhcpServerLeaseBindingLeaseTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpServerLeaseBindingLeaseTime.setStatus("current")
_DhcpSnooping_ObjectIdentity = ObjectIdentity
dhcpSnooping = _DhcpSnooping_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3)
)


class _DhcpSnoopingEnable_Type(Integer32):
    """Custom type dhcpSnoopingEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("noEnable", 0),
          ("enable", 1))
    )


_DhcpSnoopingEnable_Type.__name__ = "Integer32"
_DhcpSnoopingEnable_Object = MibScalar
dhcpSnoopingEnable = _DhcpSnoopingEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 1),
    _DhcpSnoopingEnable_Type()
)
dhcpSnoopingEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingEnable.setStatus("current")


class _DhcpSnoopingBindingEnalbe_Type(Integer32):
    """Custom type dhcpSnoopingBindingEnalbe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("noEnable", 0),
          ("enable", 1))
    )


_DhcpSnoopingBindingEnalbe_Type.__name__ = "Integer32"
_DhcpSnoopingBindingEnalbe_Object = MibScalar
dhcpSnoopingBindingEnalbe = _DhcpSnoopingBindingEnalbe_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 2),
    _DhcpSnoopingBindingEnalbe_Type()
)
dhcpSnoopingBindingEnalbe.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingBindingEnalbe.setStatus("current")
_DhcpSnoopingVlanEnable_Type = OctetString
_DhcpSnoopingVlanEnable_Object = MibScalar
dhcpSnoopingVlanEnable = _DhcpSnoopingVlanEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 3),
    _DhcpSnoopingVlanEnable_Type()
)
dhcpSnoopingVlanEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingVlanEnable.setStatus("current")


class _DhcpSnoopingInformationEnalbe_Type(Integer32):
    """Custom type dhcpSnoopingInformationEnalbe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("noEnable", 0),
          ("enable", 1))
    )


_DhcpSnoopingInformationEnalbe_Type.__name__ = "Integer32"
_DhcpSnoopingInformationEnalbe_Object = MibScalar
dhcpSnoopingInformationEnalbe = _DhcpSnoopingInformationEnalbe_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 4),
    _DhcpSnoopingInformationEnalbe_Type()
)
dhcpSnoopingInformationEnalbe.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingInformationEnalbe.setStatus("current")


class _DhcpSnoopingLimitRate_Type(Integer32):
    """Custom type dhcpSnoopingLimitRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_DhcpSnoopingLimitRate_Type.__name__ = "Integer32"
_DhcpSnoopingLimitRate_Object = MibScalar
dhcpSnoopingLimitRate = _DhcpSnoopingLimitRate_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 5),
    _DhcpSnoopingLimitRate_Type()
)
dhcpSnoopingLimitRate.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingLimitRate.setStatus("current")


class _DhcpSnoopingActionMaxNum_Type(Integer32):
    """Custom type dhcpSnoopingActionMaxNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 200),
    )


_DhcpSnoopingActionMaxNum_Type.__name__ = "Integer32"
_DhcpSnoopingActionMaxNum_Object = MibScalar
dhcpSnoopingActionMaxNum = _DhcpSnoopingActionMaxNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 6),
    _DhcpSnoopingActionMaxNum_Type()
)
dhcpSnoopingActionMaxNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingActionMaxNum.setStatus("current")


class _DhcpSnoopingbindingARP_Type(Integer32):
    """Custom type dhcpSnoopingbindingARP based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("notBindingARP", 0),
          ("bindingARP", 1))
    )


_DhcpSnoopingbindingARP_Type.__name__ = "Integer32"
_DhcpSnoopingbindingARP_Object = MibScalar
dhcpSnoopingbindingARP = _DhcpSnoopingbindingARP_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 7),
    _DhcpSnoopingbindingARP_Type()
)
dhcpSnoopingbindingARP.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingbindingARP.setStatus("current")


class _DhcpSnoopingInformationOptionDelimiter_Type(Integer32):
    """Custom type dhcpSnoopingInformationOptionDelimiter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("colon", 0),
          ("dot", 1),
          ("slash", 2),
          ("space", 3))
    )


_DhcpSnoopingInformationOptionDelimiter_Type.__name__ = "Integer32"
_DhcpSnoopingInformationOptionDelimiter_Object = MibScalar
dhcpSnoopingInformationOptionDelimiter = _DhcpSnoopingInformationOptionDelimiter_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 8),
    _DhcpSnoopingInformationOptionDelimiter_Type()
)
dhcpSnoopingInformationOptionDelimiter.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingInformationOptionDelimiter.setStatus("current")


class _DhcpSnoopingInformationOptionSubscriberIDFormat_Type(Integer32):
    """Custom type dhcpSnoopingInformationOptionSubscriberIDFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("hex", 0),
          ("acsii", 1),
          ("vs-hp", 2))
    )


_DhcpSnoopingInformationOptionSubscriberIDFormat_Type.__name__ = "Integer32"
_DhcpSnoopingInformationOptionSubscriberIDFormat_Object = MibScalar
dhcpSnoopingInformationOptionSubscriberIDFormat = _DhcpSnoopingInformationOptionSubscriberIDFormat_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 9),
    _DhcpSnoopingInformationOptionSubscriberIDFormat_Type()
)
dhcpSnoopingInformationOptionSubscriberIDFormat.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingInformationOptionSubscriberIDFormat.setStatus("current")


class _DhcpSnoopingInformationOptionRemoteID_Type(DisplayString):
    """Custom type dhcpSnoopingInformationOptionRemoteID based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_DhcpSnoopingInformationOptionRemoteID_Type.__name__ = "DisplayString"
_DhcpSnoopingInformationOptionRemoteID_Object = MibScalar
dhcpSnoopingInformationOptionRemoteID = _DhcpSnoopingInformationOptionRemoteID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 10),
    _DhcpSnoopingInformationOptionRemoteID_Type()
)
dhcpSnoopingInformationOptionRemoteID.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingInformationOptionRemoteID.setStatus("current")


class _DhcpSnoopingInformationOptionAllowUntrusted_Type(Integer32):
    """Custom type dhcpSnoopingInformationOptionAllowUntrusted based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("notAllowUntrusted", 0),
          ("allowUntrusted", 1))
    )


_DhcpSnoopingInformationOptionAllowUntrusted_Type.__name__ = "Integer32"
_DhcpSnoopingInformationOptionAllowUntrusted_Object = MibScalar
dhcpSnoopingInformationOptionAllowUntrusted = _DhcpSnoopingInformationOptionAllowUntrusted_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 11),
    _DhcpSnoopingInformationOptionAllowUntrusted_Type()
)
dhcpSnoopingInformationOptionAllowUntrusted.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingInformationOptionAllowUntrusted.setStatus("current")


class _DhcpSnoopingOptionSelfDefinedSubscriberIDFormat_Type(Integer32):
    """Custom type dhcpSnoopingOptionSelfDefinedSubscriberIDFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("hex", 0),
          ("ascii", 1))
    )


_DhcpSnoopingOptionSelfDefinedSubscriberIDFormat_Type.__name__ = "Integer32"
_DhcpSnoopingOptionSelfDefinedSubscriberIDFormat_Object = MibScalar
dhcpSnoopingOptionSelfDefinedSubscriberIDFormat = _DhcpSnoopingOptionSelfDefinedSubscriberIDFormat_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 12),
    _DhcpSnoopingOptionSelfDefinedSubscriberIDFormat_Type()
)
dhcpSnoopingOptionSelfDefinedSubscriberIDFormat.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingOptionSelfDefinedSubscriberIDFormat.setStatus("current")


class _DhcpSnoopingOptionSelfDefinedRemoteIDFormat_Type(Integer32):
    """Custom type dhcpSnoopingOptionSelfDefinedRemoteIDFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("hex", 0),
          ("ascii", 1))
    )


_DhcpSnoopingOptionSelfDefinedRemoteIDFormat_Type.__name__ = "Integer32"
_DhcpSnoopingOptionSelfDefinedRemoteIDFormat_Object = MibScalar
dhcpSnoopingOptionSelfDefinedRemoteIDFormat = _DhcpSnoopingOptionSelfDefinedRemoteIDFormat_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 13),
    _DhcpSnoopingOptionSelfDefinedRemoteIDFormat_Type()
)
dhcpSnoopingOptionSelfDefinedRemoteIDFormat.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingOptionSelfDefinedRemoteIDFormat.setStatus("current")


class _DhcpSnoopingOptionSelfDefinedSubscriberID_Type(DisplayString):
    """Custom type dhcpSnoopingOptionSelfDefinedSubscriberID based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_DhcpSnoopingOptionSelfDefinedSubscriberID_Type.__name__ = "DisplayString"
_DhcpSnoopingOptionSelfDefinedSubscriberID_Object = MibScalar
dhcpSnoopingOptionSelfDefinedSubscriberID = _DhcpSnoopingOptionSelfDefinedSubscriberID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 14),
    _DhcpSnoopingOptionSelfDefinedSubscriberID_Type()
)
dhcpSnoopingOptionSelfDefinedSubscriberID.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingOptionSelfDefinedSubscriberID.setStatus("current")


class _DhcpSnoopingOptionSelfDefinedRemoteID_Type(DisplayString):
    """Custom type dhcpSnoopingOptionSelfDefinedRemoteID based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_DhcpSnoopingOptionSelfDefinedRemoteID_Type.__name__ = "DisplayString"
_DhcpSnoopingOptionSelfDefinedRemoteID_Object = MibScalar
dhcpSnoopingOptionSelfDefinedRemoteID = _DhcpSnoopingOptionSelfDefinedRemoteID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 15),
    _DhcpSnoopingOptionSelfDefinedRemoteID_Type()
)
dhcpSnoopingOptionSelfDefinedRemoteID.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingOptionSelfDefinedRemoteID.setStatus("current")


class _DhcpSnoopingClearBinding_Type(DisplayString):
    """Custom type dhcpSnoopingClearBinding based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_DhcpSnoopingClearBinding_Type.__name__ = "DisplayString"
_DhcpSnoopingClearBinding_Object = MibScalar
dhcpSnoopingClearBinding = _DhcpSnoopingClearBinding_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 16),
    _DhcpSnoopingClearBinding_Type()
)
dhcpSnoopingClearBinding.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingClearBinding.setStatus("current")
_DhcpSnoopingPortConfigTable_Object = MibTable
dhcpSnoopingPortConfigTable = _DhcpSnoopingPortConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17)
)
if mibBuilder.loadTexts:
    dhcpSnoopingPortConfigTable.setStatus("current")
_DhcpSnoopingPortConfigEntry_Object = MibTableRow
dhcpSnoopingPortConfigEntry = _DhcpSnoopingPortConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1)
)
dhcpSnoopingPortConfigEntry.setIndexNames(
    (0, "NAG-MIB", "dhcpSnoopingPortIndex"),
)
if mibBuilder.loadTexts:
    dhcpSnoopingPortConfigEntry.setStatus("current")
_DhcpSnoopingPortIndex_Type = Integer32
_DhcpSnoopingPortIndex_Object = MibTableColumn
dhcpSnoopingPortIndex = _DhcpSnoopingPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1, 1),
    _DhcpSnoopingPortIndex_Type()
)
dhcpSnoopingPortIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dhcpSnoopingPortIndex.setStatus("current")


class _DhcpSnoopingUserControlMaxNum_Type(Integer32):
    """Custom type dhcpSnoopingUserControlMaxNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1024),
    )


_DhcpSnoopingUserControlMaxNum_Type.__name__ = "Integer32"
_DhcpSnoopingUserControlMaxNum_Object = MibTableColumn
dhcpSnoopingUserControlMaxNum = _DhcpSnoopingUserControlMaxNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1, 2),
    _DhcpSnoopingUserControlMaxNum_Type()
)
dhcpSnoopingUserControlMaxNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingUserControlMaxNum.setStatus("current")


class _DhcpSnoopingUserControl_Type(Integer32):
    """Custom type dhcpSnoopingUserControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("notEnable", 0),
          ("enable", 1))
    )


_DhcpSnoopingUserControl_Type.__name__ = "Integer32"
_DhcpSnoopingUserControl_Object = MibTableColumn
dhcpSnoopingUserControl = _DhcpSnoopingUserControl_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1, 3),
    _DhcpSnoopingUserControl_Type()
)
dhcpSnoopingUserControl.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingUserControl.setStatus("current")
_DhcpSnoopingTrust_Type = OctetString
_DhcpSnoopingTrust_Object = MibTableColumn
dhcpSnoopingTrust = _DhcpSnoopingTrust_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1, 4),
    _DhcpSnoopingTrust_Type()
)
dhcpSnoopingTrust.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingTrust.setStatus("current")


class _DhcpSnoopingBindingDot1x_Type(Integer32):
    """Custom type dhcpSnoopingBindingDot1x based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("notEnable", 0),
          ("enable", 1))
    )


_DhcpSnoopingBindingDot1x_Type.__name__ = "Integer32"
_DhcpSnoopingBindingDot1x_Object = MibTableColumn
dhcpSnoopingBindingDot1x = _DhcpSnoopingBindingDot1x_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1, 5),
    _DhcpSnoopingBindingDot1x_Type()
)
dhcpSnoopingBindingDot1x.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingBindingDot1x.setStatus("current")


class _DhcpSnoopingSubScriberID_Type(DisplayString):
    """Custom type dhcpSnoopingSubScriberID based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_DhcpSnoopingSubScriberID_Type.__name__ = "DisplayString"
_DhcpSnoopingSubScriberID_Object = MibTableColumn
dhcpSnoopingSubScriberID = _DhcpSnoopingSubScriberID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1, 6),
    _DhcpSnoopingSubScriberID_Type()
)
dhcpSnoopingSubScriberID.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingSubScriberID.setStatus("current")
_DhcpSnoopingAlarmCount_Type = Integer32
_DhcpSnoopingAlarmCount_Object = MibTableColumn
dhcpSnoopingAlarmCount = _DhcpSnoopingAlarmCount_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1, 7),
    _DhcpSnoopingAlarmCount_Type()
)
dhcpSnoopingAlarmCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingAlarmCount.setStatus("current")
_DhcpSnoopingBindingCount_Type = Integer32
_DhcpSnoopingBindingCount_Object = MibTableColumn
dhcpSnoopingBindingCount = _DhcpSnoopingBindingCount_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 17, 1, 8),
    _DhcpSnoopingBindingCount_Type()
)
dhcpSnoopingBindingCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingBindingCount.setStatus("current")
_DhcpSnoopingPortActionTable_Object = MibTable
dhcpSnoopingPortActionTable = _DhcpSnoopingPortActionTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 18)
)
if mibBuilder.loadTexts:
    dhcpSnoopingPortActionTable.setStatus("current")
_DhcpSnoopingPortActionEntry_Object = MibTableRow
dhcpSnoopingPortActionEntry = _DhcpSnoopingPortActionEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 18, 1)
)
dhcpSnoopingPortActionEntry.setIndexNames(
    (0, "NAG-MIB", "dhcpSnoopingPortIndex"),
)
if mibBuilder.loadTexts:
    dhcpSnoopingPortActionEntry.setStatus("current")
_DhcpSnoopingPort_Type = Integer32
_DhcpSnoopingPort_Object = MibTableColumn
dhcpSnoopingPort = _DhcpSnoopingPort_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 18, 1, 1),
    _DhcpSnoopingPort_Type()
)
dhcpSnoopingPort.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dhcpSnoopingPort.setStatus("current")


class _DhcpSnoopingActionType_Type(Integer32):
    """Custom type dhcpSnoopingActionType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noAction", 0),
          ("shutdown", 1),
          ("blackhole", 2))
    )


_DhcpSnoopingActionType_Type.__name__ = "Integer32"
_DhcpSnoopingActionType_Object = MibTableColumn
dhcpSnoopingActionType = _DhcpSnoopingActionType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 18, 1, 2),
    _DhcpSnoopingActionType_Type()
)
dhcpSnoopingActionType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingActionType.setStatus("current")


class _DhcpSnoopingActionRecoveryTime_Type(Integer32):
    """Custom type dhcpSnoopingActionRecoveryTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 3600),
    )


_DhcpSnoopingActionRecoveryTime_Type.__name__ = "Integer32"
_DhcpSnoopingActionRecoveryTime_Object = MibTableColumn
dhcpSnoopingActionRecoveryTime = _DhcpSnoopingActionRecoveryTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 18, 1, 3),
    _DhcpSnoopingActionRecoveryTime_Type()
)
dhcpSnoopingActionRecoveryTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingActionRecoveryTime.setStatus("current")


class _DhcpSnoopingActionStatus_Type(Integer32):
    """Custom type dhcpSnoopingActionStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("destroy", 0),
          ("active", 1))
    )


_DhcpSnoopingActionStatus_Type.__name__ = "Integer32"
_DhcpSnoopingActionStatus_Object = MibTableColumn
dhcpSnoopingActionStatus = _DhcpSnoopingActionStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 18, 1, 4),
    _DhcpSnoopingActionStatus_Type()
)
dhcpSnoopingActionStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingActionStatus.setStatus("current")
_DhcpSnoopingStaticBindingTable_Object = MibTable
dhcpSnoopingStaticBindingTable = _DhcpSnoopingStaticBindingTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 19)
)
if mibBuilder.loadTexts:
    dhcpSnoopingStaticBindingTable.setStatus("current")
_DhcpSnoopingStaticBindingEntry_Object = MibTableRow
dhcpSnoopingStaticBindingEntry = _DhcpSnoopingStaticBindingEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 19, 1)
)
dhcpSnoopingStaticBindingEntry.setIndexNames(
    (0, "NAG-MIB", "dhcpSnoopingStaticBindingIP"),
)
if mibBuilder.loadTexts:
    dhcpSnoopingStaticBindingEntry.setStatus("current")
_DhcpSnoopingStaticBindingIP_Type = IpAddress
_DhcpSnoopingStaticBindingIP_Object = MibTableColumn
dhcpSnoopingStaticBindingIP = _DhcpSnoopingStaticBindingIP_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 19, 1, 1),
    _DhcpSnoopingStaticBindingIP_Type()
)
dhcpSnoopingStaticBindingIP.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dhcpSnoopingStaticBindingIP.setStatus("current")


class _DhcpSnoopingStaticBindingMAC_Type(OctetString):
    """Custom type dhcpSnoopingStaticBindingMAC based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_DhcpSnoopingStaticBindingMAC_Type.__name__ = "OctetString"
_DhcpSnoopingStaticBindingMAC_Object = MibTableColumn
dhcpSnoopingStaticBindingMAC = _DhcpSnoopingStaticBindingMAC_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 19, 1, 2),
    _DhcpSnoopingStaticBindingMAC_Type()
)
dhcpSnoopingStaticBindingMAC.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingStaticBindingMAC.setStatus("current")
_DhcpSnoopingStaticBindingMask_Type = IpAddress
_DhcpSnoopingStaticBindingMask_Object = MibTableColumn
dhcpSnoopingStaticBindingMask = _DhcpSnoopingStaticBindingMask_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 19, 1, 3),
    _DhcpSnoopingStaticBindingMask_Type()
)
dhcpSnoopingStaticBindingMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingStaticBindingMask.setStatus("current")
_DhcpSnoopingStaticBindingPort_Type = Integer32
_DhcpSnoopingStaticBindingPort_Object = MibTableColumn
dhcpSnoopingStaticBindingPort = _DhcpSnoopingStaticBindingPort_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 19, 1, 4),
    _DhcpSnoopingStaticBindingPort_Type()
)
dhcpSnoopingStaticBindingPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingStaticBindingPort.setStatus("current")
_DhcpSnoopingStaticBindingVid_Type = Integer32
_DhcpSnoopingStaticBindingVid_Object = MibTableColumn
dhcpSnoopingStaticBindingVid = _DhcpSnoopingStaticBindingVid_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 19, 1, 5),
    _DhcpSnoopingStaticBindingVid_Type()
)
dhcpSnoopingStaticBindingVid.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingStaticBindingVid.setStatus("current")


class _DhcpSnoopingStaticBindingStatus_Type(Integer32):
    """Custom type dhcpSnoopingStaticBindingStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("destory", 0),
          ("active", 1))
    )


_DhcpSnoopingStaticBindingStatus_Type.__name__ = "Integer32"
_DhcpSnoopingStaticBindingStatus_Object = MibTableColumn
dhcpSnoopingStaticBindingStatus = _DhcpSnoopingStaticBindingStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 19, 1, 6),
    _DhcpSnoopingStaticBindingStatus_Type()
)
dhcpSnoopingStaticBindingStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingStaticBindingStatus.setStatus("current")
_DhcpSnoopingAckBindingInfoTable_Object = MibTable
dhcpSnoopingAckBindingInfoTable = _DhcpSnoopingAckBindingInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 20)
)
if mibBuilder.loadTexts:
    dhcpSnoopingAckBindingInfoTable.setStatus("current")
_DhcpSnoopingAckBindingInfoEntry_Object = MibTableRow
dhcpSnoopingAckBindingInfoEntry = _DhcpSnoopingAckBindingInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 20, 1)
)
dhcpSnoopingAckBindingInfoEntry.setIndexNames(
    (0, "NAG-MIB", "dhcpSnoopingAckBindingIP"),
)
if mibBuilder.loadTexts:
    dhcpSnoopingAckBindingInfoEntry.setStatus("current")
_DhcpSnoopingAckBindingIP_Type = IpAddress
_DhcpSnoopingAckBindingIP_Object = MibTableColumn
dhcpSnoopingAckBindingIP = _DhcpSnoopingAckBindingIP_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 20, 1, 1),
    _DhcpSnoopingAckBindingIP_Type()
)
dhcpSnoopingAckBindingIP.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dhcpSnoopingAckBindingIP.setStatus("current")


class _DhcpSnoopingAckBindingMAC_Type(OctetString):
    """Custom type dhcpSnoopingAckBindingMAC based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_DhcpSnoopingAckBindingMAC_Type.__name__ = "OctetString"
_DhcpSnoopingAckBindingMAC_Object = MibTableColumn
dhcpSnoopingAckBindingMAC = _DhcpSnoopingAckBindingMAC_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 20, 1, 2),
    _DhcpSnoopingAckBindingMAC_Type()
)
dhcpSnoopingAckBindingMAC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingAckBindingMAC.setStatus("current")
_DhcpSnoopingAckBindingPort_Type = Integer32
_DhcpSnoopingAckBindingPort_Object = MibTableColumn
dhcpSnoopingAckBindingPort = _DhcpSnoopingAckBindingPort_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 20, 1, 3),
    _DhcpSnoopingAckBindingPort_Type()
)
dhcpSnoopingAckBindingPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingAckBindingPort.setStatus("current")
_DhcpSnoopingAckBindingVid_Type = Integer32
_DhcpSnoopingAckBindingVid_Object = MibTableColumn
dhcpSnoopingAckBindingVid = _DhcpSnoopingAckBindingVid_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 20, 1, 4),
    _DhcpSnoopingAckBindingVid_Type()
)
dhcpSnoopingAckBindingVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingAckBindingVid.setStatus("current")
_DhcpSnoopingAckBindingLease_Type = Counter32
_DhcpSnoopingAckBindingLease_Object = MibTableColumn
dhcpSnoopingAckBindingLease = _DhcpSnoopingAckBindingLease_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 20, 1, 5),
    _DhcpSnoopingAckBindingLease_Type()
)
dhcpSnoopingAckBindingLease.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingAckBindingLease.setStatus("current")


class _DhcpSnoopingAckBindingFlag_Type(DisplayString):
    """Custom type dhcpSnoopingAckBindingFlag based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 10),
    )


_DhcpSnoopingAckBindingFlag_Type.__name__ = "DisplayString"
_DhcpSnoopingAckBindingFlag_Object = MibTableColumn
dhcpSnoopingAckBindingFlag = _DhcpSnoopingAckBindingFlag_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 20, 1, 6),
    _DhcpSnoopingAckBindingFlag_Type()
)
dhcpSnoopingAckBindingFlag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingAckBindingFlag.setStatus("current")
_DhcpSnoopingRequestBindingInfoTable_Object = MibTable
dhcpSnoopingRequestBindingInfoTable = _DhcpSnoopingRequestBindingInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 21)
)
if mibBuilder.loadTexts:
    dhcpSnoopingRequestBindingInfoTable.setStatus("current")
_DhcpSnoopingRequestBindingInfoEntry_Object = MibTableRow
dhcpSnoopingRequestBindingInfoEntry = _DhcpSnoopingRequestBindingInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 21, 1)
)
dhcpSnoopingRequestBindingInfoEntry.setIndexNames(
    (0, "NAG-MIB", "dhcpSnoopingRequestBindingIP"),
)
if mibBuilder.loadTexts:
    dhcpSnoopingRequestBindingInfoEntry.setStatus("current")
_DhcpSnoopingRequestBindingIP_Type = IpAddress
_DhcpSnoopingRequestBindingIP_Object = MibTableColumn
dhcpSnoopingRequestBindingIP = _DhcpSnoopingRequestBindingIP_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 21, 1, 1),
    _DhcpSnoopingRequestBindingIP_Type()
)
dhcpSnoopingRequestBindingIP.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dhcpSnoopingRequestBindingIP.setStatus("current")


class _DhcpSnoopingRequestBindingMAC_Type(OctetString):
    """Custom type dhcpSnoopingRequestBindingMAC based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_DhcpSnoopingRequestBindingMAC_Type.__name__ = "OctetString"
_DhcpSnoopingRequestBindingMAC_Object = MibTableColumn
dhcpSnoopingRequestBindingMAC = _DhcpSnoopingRequestBindingMAC_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 21, 1, 2),
    _DhcpSnoopingRequestBindingMAC_Type()
)
dhcpSnoopingRequestBindingMAC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingRequestBindingMAC.setStatus("current")
_DhcpSnoopingRequestBindingPort_Type = Integer32
_DhcpSnoopingRequestBindingPort_Object = MibTableColumn
dhcpSnoopingRequestBindingPort = _DhcpSnoopingRequestBindingPort_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 21, 1, 3),
    _DhcpSnoopingRequestBindingPort_Type()
)
dhcpSnoopingRequestBindingPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingRequestBindingPort.setStatus("current")
_DhcpSnoopingRequestBindingVid_Type = Integer32
_DhcpSnoopingRequestBindingVid_Object = MibTableColumn
dhcpSnoopingRequestBindingVid = _DhcpSnoopingRequestBindingVid_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 21, 1, 4),
    _DhcpSnoopingRequestBindingVid_Type()
)
dhcpSnoopingRequestBindingVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingRequestBindingVid.setStatus("current")
_DhcpSnoopingRequestBindingLease_Type = Counter32
_DhcpSnoopingRequestBindingLease_Object = MibTableColumn
dhcpSnoopingRequestBindingLease = _DhcpSnoopingRequestBindingLease_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 21, 1, 5),
    _DhcpSnoopingRequestBindingLease_Type()
)
dhcpSnoopingRequestBindingLease.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingRequestBindingLease.setStatus("current")
_DhcpSnoopingAlarmInfoTable_Object = MibTable
dhcpSnoopingAlarmInfoTable = _DhcpSnoopingAlarmInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 22)
)
if mibBuilder.loadTexts:
    dhcpSnoopingAlarmInfoTable.setStatus("current")
_DhcpSnoopingAlarmInfoEntry_Object = MibTableRow
dhcpSnoopingAlarmInfoEntry = _DhcpSnoopingAlarmInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 22, 1)
)
dhcpSnoopingAlarmInfoEntry.setIndexNames(
    (0, "NAG-MIB", "dhcpSnoopingAlarmInfoPortIndex"),
    (0, "NAG-MIB", "dhcpSnoopingAlarmInfoNum"),
)
if mibBuilder.loadTexts:
    dhcpSnoopingAlarmInfoEntry.setStatus("current")
_DhcpSnoopingAlarmInfoPortIndex_Type = Integer32
_DhcpSnoopingAlarmInfoPortIndex_Object = MibTableColumn
dhcpSnoopingAlarmInfoPortIndex = _DhcpSnoopingAlarmInfoPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 22, 1, 1),
    _DhcpSnoopingAlarmInfoPortIndex_Type()
)
dhcpSnoopingAlarmInfoPortIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dhcpSnoopingAlarmInfoPortIndex.setStatus("current")
_DhcpSnoopingAlarmInfoNum_Type = Integer32
_DhcpSnoopingAlarmInfoNum_Object = MibTableColumn
dhcpSnoopingAlarmInfoNum = _DhcpSnoopingAlarmInfoNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 22, 1, 2),
    _DhcpSnoopingAlarmInfoNum_Type()
)
dhcpSnoopingAlarmInfoNum.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dhcpSnoopingAlarmInfoNum.setStatus("current")
_DhcpSnoopingAlarmInfoType_Type = Integer32
_DhcpSnoopingAlarmInfoType_Object = MibTableColumn
dhcpSnoopingAlarmInfoType = _DhcpSnoopingAlarmInfoType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 22, 1, 3),
    _DhcpSnoopingAlarmInfoType_Type()
)
dhcpSnoopingAlarmInfoType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingAlarmInfoType.setStatus("current")
_DhcpSnoopingAlarmInfoBlackholeMAC_Type = OctetString
_DhcpSnoopingAlarmInfoBlackholeMAC_Object = MibTableColumn
dhcpSnoopingAlarmInfoBlackholeMAC = _DhcpSnoopingAlarmInfoBlackholeMAC_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 22, 1, 4),
    _DhcpSnoopingAlarmInfoBlackholeMAC_Type()
)
dhcpSnoopingAlarmInfoBlackholeMAC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingAlarmInfoBlackholeMAC.setStatus("current")
_DhcpSnoopingAlarmInfoRecoveryTime_Type = DisplayString
_DhcpSnoopingAlarmInfoRecoveryTime_Object = MibTableColumn
dhcpSnoopingAlarmInfoRecoveryTime = _DhcpSnoopingAlarmInfoRecoveryTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 22, 1, 5),
    _DhcpSnoopingAlarmInfoRecoveryTime_Type()
)
dhcpSnoopingAlarmInfoRecoveryTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingAlarmInfoRecoveryTime.setStatus("current")
_DhcpSnoopingAlarmInfoRecoveryActionStatus_Type = Integer32
_DhcpSnoopingAlarmInfoRecoveryActionStatus_Object = MibTableColumn
dhcpSnoopingAlarmInfoRecoveryActionStatus = _DhcpSnoopingAlarmInfoRecoveryActionStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 22, 1, 6),
    _DhcpSnoopingAlarmInfoRecoveryActionStatus_Type()
)
dhcpSnoopingAlarmInfoRecoveryActionStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingAlarmInfoRecoveryActionStatus.setStatus("current")
_DhcpSnoopingStatisticTable_ObjectIdentity = ObjectIdentity
dhcpSnoopingStatisticTable = _DhcpSnoopingStatisticTable_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 23)
)
_DhcpSnoopingStatisticAlarmNum_Type = Integer32
_DhcpSnoopingStatisticAlarmNum_Object = MibScalar
dhcpSnoopingStatisticAlarmNum = _DhcpSnoopingStatisticAlarmNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 23, 1),
    _DhcpSnoopingStatisticAlarmNum_Type()
)
dhcpSnoopingStatisticAlarmNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingStatisticAlarmNum.setStatus("current")
_DhcpSnoopingStatisticAckBindingNum_Type = Integer32
_DhcpSnoopingStatisticAckBindingNum_Object = MibScalar
dhcpSnoopingStatisticAckBindingNum = _DhcpSnoopingStatisticAckBindingNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 23, 2),
    _DhcpSnoopingStatisticAckBindingNum_Type()
)
dhcpSnoopingStatisticAckBindingNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingStatisticAckBindingNum.setStatus("current")
_DhcpSnoopingStatisticRequestBindingNum_Type = Integer32
_DhcpSnoopingStatisticRequestBindingNum_Object = MibScalar
dhcpSnoopingStatisticRequestBindingNum = _DhcpSnoopingStatisticRequestBindingNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 23, 3),
    _DhcpSnoopingStatisticRequestBindingNum_Type()
)
dhcpSnoopingStatisticRequestBindingNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingStatisticRequestBindingNum.setStatus("current")
_DhcpSnoopingStatisticDropPktsNum_Type = Integer32
_DhcpSnoopingStatisticDropPktsNum_Object = MibScalar
dhcpSnoopingStatisticDropPktsNum = _DhcpSnoopingStatisticDropPktsNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 23, 4),
    _DhcpSnoopingStatisticDropPktsNum_Type()
)
dhcpSnoopingStatisticDropPktsNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingStatisticDropPktsNum.setStatus("current")
_DhcpSnoopingStatisticDiscardPktsNum_Type = Integer32
_DhcpSnoopingStatisticDiscardPktsNum_Object = MibScalar
dhcpSnoopingStatisticDiscardPktsNum = _DhcpSnoopingStatisticDiscardPktsNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 23, 5),
    _DhcpSnoopingStatisticDiscardPktsNum_Type()
)
dhcpSnoopingStatisticDiscardPktsNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingStatisticDiscardPktsNum.setStatus("current")
_DhcpSnoopingBlockedInfoTable_Object = MibTable
dhcpSnoopingBlockedInfoTable = _DhcpSnoopingBlockedInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 24)
)
if mibBuilder.loadTexts:
    dhcpSnoopingBlockedInfoTable.setStatus("current")
_DhcpSnoopingBlockedInfoEntry_Object = MibTableRow
dhcpSnoopingBlockedInfoEntry = _DhcpSnoopingBlockedInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 24, 1)
)
dhcpSnoopingBlockedInfoEntry.setIndexNames(
    (0, "NAG-MIB", "dhcpSnoopingBlockedInfoPortIndex"),
    (0, "NAG-MIB", "dhcpSnoopingBlockedInfoRecordingTime"),
)
if mibBuilder.loadTexts:
    dhcpSnoopingBlockedInfoEntry.setStatus("current")
_DhcpSnoopingBlockedInfoPortIndex_Type = Integer32
_DhcpSnoopingBlockedInfoPortIndex_Object = MibTableColumn
dhcpSnoopingBlockedInfoPortIndex = _DhcpSnoopingBlockedInfoPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 24, 1, 1),
    _DhcpSnoopingBlockedInfoPortIndex_Type()
)
dhcpSnoopingBlockedInfoPortIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dhcpSnoopingBlockedInfoPortIndex.setStatus("current")
_DhcpSnoopingBlockedInfoRecordingTime_Type = Integer32
_DhcpSnoopingBlockedInfoRecordingTime_Object = MibTableColumn
dhcpSnoopingBlockedInfoRecordingTime = _DhcpSnoopingBlockedInfoRecordingTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 24, 1, 2),
    _DhcpSnoopingBlockedInfoRecordingTime_Type()
)
dhcpSnoopingBlockedInfoRecordingTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dhcpSnoopingBlockedInfoRecordingTime.setStatus("current")
_DhcpSnoopingBlockedInfoShow_Type = OctetString
_DhcpSnoopingBlockedInfoShow_Object = MibTableColumn
dhcpSnoopingBlockedInfoShow = _DhcpSnoopingBlockedInfoShow_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 13, 3, 24, 1, 3),
    _DhcpSnoopingBlockedInfoShow_Type()
)
dhcpSnoopingBlockedInfoShow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingBlockedInfoShow.setStatus("current")
_PriportGroup_ObjectIdentity = ObjectIdentity
priportGroup = _PriportGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 14)
)


class _SystemPriority_Type(Integer32):
    """Custom type systemPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_SystemPriority_Type.__name__ = "Integer32"
_SystemPriority_Object = MibScalar
systemPriority = _SystemPriority_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 1),
    _SystemPriority_Type()
)
systemPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    systemPriority.setStatus("current")
_PortGroupTable_Object = MibTable
portGroupTable = _PortGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 2)
)
if mibBuilder.loadTexts:
    portGroupTable.setStatus("current")
_PortGroupEntry_Object = MibTableRow
portGroupEntry = _PortGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 2, 1)
)
portGroupEntry.setIndexNames(
    (0, "NAG-MIB", "portGroupIndex"),
)
if mibBuilder.loadTexts:
    portGroupEntry.setStatus("current")
_PortGroupIndex_Type = Integer32
_PortGroupIndex_Object = MibTableColumn
portGroupIndex = _PortGroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 2, 1, 1),
    _PortGroupIndex_Type()
)
portGroupIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    portGroupIndex.setStatus("current")
_PortGroupMemberCount_Type = Integer32
_PortGroupMemberCount_Object = MibTableColumn
portGroupMemberCount = _PortGroupMemberCount_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 2, 1, 2),
    _PortGroupMemberCount_Type()
)
portGroupMemberCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portGroupMemberCount.setStatus("current")


class _LoadBalance_Type(Integer32):
    """Custom type loadBalance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("dst-src-mac", 1),
          ("dst-src-ip", 2),
          ("src-mac", 3),
          ("dst-mac", 4),
          ("src-ip", 5),
          ("dst-ip", 6),
          ("dst-src-mac-ip", 7),
          ("enhance-profile", 8),
          ("dst-src-mac-vlan", 9),
          ("dst-src-ip-port", 10),
          ("dst-src-mac-ip-port", 13),
          ("dst-src-mac-vlan-normal", 14),
          ("dst-src-ip-port-normal", 15),
          ("dst-src-mac-ip-port-normal", 16))
    )


_LoadBalance_Type.__name__ = "Integer32"
_LoadBalance_Object = MibTableColumn
loadBalance = _LoadBalance_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 2, 1, 3),
    _LoadBalance_Type()
)
loadBalance.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    loadBalance.setStatus("current")
_PortGroupInfo_Type = DisplayString
_PortGroupInfo_Object = MibTableColumn
portGroupInfo = _PortGroupInfo_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 2, 1, 4),
    _PortGroupInfo_Type()
)
portGroupInfo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portGroupInfo.setStatus("current")
_PortGroupPortListTable_Object = MibTable
portGroupPortListTable = _PortGroupPortListTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 3)
)
if mibBuilder.loadTexts:
    portGroupPortListTable.setStatus("current")
_PortGroupPortListEntry_Object = MibTableRow
portGroupPortListEntry = _PortGroupPortListEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 3, 1)
)
portGroupPortListEntry.setIndexNames(
    (0, "NAG-MIB", "portGroupIndex"),
    (0, "NAG-MIB", "portGroupMemberIndex"),
)
if mibBuilder.loadTexts:
    portGroupPortListEntry.setStatus("current")
_PortGroupMemberIndex_Type = Integer32
_PortGroupMemberIndex_Object = MibTableColumn
portGroupMemberIndex = _PortGroupMemberIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 3, 1, 1),
    _PortGroupMemberIndex_Type()
)
portGroupMemberIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    portGroupMemberIndex.setStatus("current")
_PortGroupMemberName_Type = DisplayString
_PortGroupMemberName_Object = MibTableColumn
portGroupMemberName = _PortGroupMemberName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 3, 1, 2),
    _PortGroupMemberName_Type()
)
portGroupMemberName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portGroupMemberName.setStatus("current")


class _PortGroupMemberMode_Type(Integer32):
    """Custom type portGroupMemberMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("active", 2),
          ("passive", 3))
    )


_PortGroupMemberMode_Type.__name__ = "Integer32"
_PortGroupMemberMode_Object = MibTableColumn
portGroupMemberMode = _PortGroupMemberMode_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 3, 1, 3),
    _PortGroupMemberMode_Type()
)
portGroupMemberMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portGroupMemberMode.setStatus("current")


class _PortGroupMemberPriority_Type(Integer32):
    """Custom type portGroupMemberPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_PortGroupMemberPriority_Type.__name__ = "Integer32"
_PortGroupMemberPriority_Object = MibTableColumn
portGroupMemberPriority = _PortGroupMemberPriority_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 3, 1, 4),
    _PortGroupMemberPriority_Type()
)
portGroupMemberPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portGroupMemberPriority.setStatus("current")


class _PortGroupMemberTimeout_Type(Integer32):
    """Custom type portGroupMemberTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("long", 0),
          ("short", 1))
    )


_PortGroupMemberTimeout_Type.__name__ = "Integer32"
_PortGroupMemberTimeout_Object = MibTableColumn
portGroupMemberTimeout = _PortGroupMemberTimeout_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 3, 1, 5),
    _PortGroupMemberTimeout_Type()
)
portGroupMemberTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portGroupMemberTimeout.setStatus("current")


class _PortGroupMemberStatus_Type(Integer32):
    """Custom type portGroupMemberStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unselected", 0),
          ("selected", 1),
          ("standby", 2))
    )


_PortGroupMemberStatus_Type.__name__ = "Integer32"
_PortGroupMemberStatus_Object = MibTableColumn
portGroupMemberStatus = _PortGroupMemberStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 14, 3, 1, 6),
    _PortGroupMemberStatus_Type()
)
portGroupMemberStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portGroupMemberStatus.setStatus("current")
_PrisnmpMgt_ObjectIdentity = ObjectIdentity
prisnmpMgt = _PrisnmpMgt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 15)
)


class _SnmpSecurityIpStatus_Type(Integer32):
    """Custom type snmpSecurityIpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SnmpSecurityIpStatus_Type.__name__ = "Integer32"
_SnmpSecurityIpStatus_Object = MibScalar
snmpSecurityIpStatus = _SnmpSecurityIpStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 1),
    _SnmpSecurityIpStatus_Type()
)
snmpSecurityIpStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    snmpSecurityIpStatus.setStatus("current")


class _SnmpTrapHostStatus_Type(Integer32):
    """Custom type snmpTrapHostStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SnmpTrapHostStatus_Type.__name__ = "Integer32"
_SnmpTrapHostStatus_Object = MibScalar
snmpTrapHostStatus = _SnmpTrapHostStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 2),
    _SnmpTrapHostStatus_Type()
)
snmpTrapHostStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    snmpTrapHostStatus.setStatus("current")


class _SnmpRmonStatus_Type(Integer32):
    """Custom type snmpRmonStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SnmpRmonStatus_Type.__name__ = "Integer32"
_SnmpRmonStatus_Object = MibScalar
snmpRmonStatus = _SnmpRmonStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 3),
    _SnmpRmonStatus_Type()
)
snmpRmonStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    snmpRmonStatus.setStatus("current")
_SecurityIpTable_Object = MibTable
securityIpTable = _SecurityIpTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 4)
)
if mibBuilder.loadTexts:
    securityIpTable.setStatus("current")
_SecurityIpEntry_Object = MibTableRow
securityIpEntry = _SecurityIpEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 4, 1)
)
securityIpEntry.setIndexNames(
    (0, "NAG-MIB", "securityIpIndex"),
)
if mibBuilder.loadTexts:
    securityIpEntry.setStatus("current")
_SecurityIpIndex_Type = Integer32
_SecurityIpIndex_Object = MibTableColumn
securityIpIndex = _SecurityIpIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 4, 1, 1),
    _SecurityIpIndex_Type()
)
securityIpIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    securityIpIndex.setStatus("current")
_SecurityIpAddress_Type = IpAddress
_SecurityIpAddress_Object = MibTableColumn
securityIpAddress = _SecurityIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 4, 1, 2),
    _SecurityIpAddress_Type()
)
securityIpAddress.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    securityIpAddress.setStatus("current")


class _SecurityIpStatus_Type(Integer32):
    """Custom type securityIpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_SecurityIpStatus_Type.__name__ = "Integer32"
_SecurityIpStatus_Object = MibTableColumn
securityIpStatus = _SecurityIpStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 4, 1, 3),
    _SecurityIpStatus_Type()
)
securityIpStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    securityIpStatus.setStatus("current")
_TrapDestTable_Object = MibTable
trapDestTable = _TrapDestTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 5)
)
if mibBuilder.loadTexts:
    trapDestTable.setStatus("current")
_TrapDestEntry_Object = MibTableRow
trapDestEntry = _TrapDestEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 5, 1)
)
trapDestEntry.setIndexNames(
    (0, "NAG-MIB", "trapDestIndex"),
)
if mibBuilder.loadTexts:
    trapDestEntry.setStatus("current")
_TrapDestIndex_Type = Integer32
_TrapDestIndex_Object = MibTableColumn
trapDestIndex = _TrapDestIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 5, 1, 1),
    _TrapDestIndex_Type()
)
trapDestIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    trapDestIndex.setStatus("current")
_TrapDestAddress_Type = IpAddress
_TrapDestAddress_Object = MibTableColumn
trapDestAddress = _TrapDestAddress_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 5, 1, 2),
    _TrapDestAddress_Type()
)
trapDestAddress.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    trapDestAddress.setStatus("current")


class _TrapDestVersion_Type(Integer32):
    """Custom type trapDestVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("version1", 0),
          ("version2", 1))
    )


_TrapDestVersion_Type.__name__ = "Integer32"
_TrapDestVersion_Object = MibTableColumn
trapDestVersion = _TrapDestVersion_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 5, 1, 3),
    _TrapDestVersion_Type()
)
trapDestVersion.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    trapDestVersion.setStatus("current")


class _TrapDestCommunity_Type(DisplayString):
    """Custom type trapDestCommunity based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 255),
    )


_TrapDestCommunity_Type.__name__ = "DisplayString"
_TrapDestCommunity_Object = MibTableColumn
trapDestCommunity = _TrapDestCommunity_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 5, 1, 4),
    _TrapDestCommunity_Type()
)
trapDestCommunity.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    trapDestCommunity.setStatus("current")


class _TrapDestStatus_Type(Integer32):
    """Custom type trapDestStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_TrapDestStatus_Type.__name__ = "Integer32"
_TrapDestStatus_Object = MibTableColumn
trapDestStatus = _TrapDestStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 15, 5, 1, 5),
    _TrapDestStatus_Type()
)
trapDestStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    trapDestStatus.setStatus("current")
_L3_ObjectIdentity = ObjectIdentity
l3 = _L3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16)
)
_ArpMgt_ObjectIdentity = ObjectIdentity
arpMgt = _ArpMgt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1)
)


class _ArpCacheDeleteAll_Type(Integer32):
    """Custom type arpCacheDeleteAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("noDelete", 0),
          ("delete", 1))
    )


_ArpCacheDeleteAll_Type.__name__ = "Integer32"
_ArpCacheDeleteAll_Object = MibScalar
arpCacheDeleteAll = _ArpCacheDeleteAll_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 1),
    _ArpCacheDeleteAll_Type()
)
arpCacheDeleteAll.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    arpCacheDeleteAll.setStatus("current")
_ArpCacheTimeout_Type = Integer32
_ArpCacheTimeout_Object = MibScalar
arpCacheTimeout = _ArpCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 2),
    _ArpCacheTimeout_Type()
)
arpCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpCacheTimeout.setStatus("current")


class _ArpSecurityUpdateProtectALL_Type(Integer32):
    """Custom type arpSecurityUpdateProtectALL based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_ArpSecurityUpdateProtectALL_Type.__name__ = "Integer32"
_ArpSecurityUpdateProtectALL_Object = MibScalar
arpSecurityUpdateProtectALL = _ArpSecurityUpdateProtectALL_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 3),
    _ArpSecurityUpdateProtectALL_Type()
)
arpSecurityUpdateProtectALL.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    arpSecurityUpdateProtectALL.setStatus("current")


class _ArpSecurityLearnProtectALL_Type(Integer32):
    """Custom type arpSecurityLearnProtectALL based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_ArpSecurityLearnProtectALL_Type.__name__ = "Integer32"
_ArpSecurityLearnProtectALL_Object = MibScalar
arpSecurityLearnProtectALL = _ArpSecurityLearnProtectALL_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 4),
    _ArpSecurityLearnProtectALL_Type()
)
arpSecurityLearnProtectALL.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    arpSecurityLearnProtectALL.setStatus("current")


class _ArpSecurityConvertALL_Type(Integer32):
    """Custom type arpSecurityConvertALL based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_ArpSecurityConvertALL_Type.__name__ = "Integer32"
_ArpSecurityConvertALL_Object = MibScalar
arpSecurityConvertALL = _ArpSecurityConvertALL_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 5),
    _ArpSecurityConvertALL_Type()
)
arpSecurityConvertALL.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    arpSecurityConvertALL.setStatus("current")
_ArpSecurityTable_Object = MibTable
arpSecurityTable = _ArpSecurityTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 6)
)
if mibBuilder.loadTexts:
    arpSecurityTable.setStatus("current")
_ArpsecurityEntry_Object = MibTableRow
arpsecurityEntry = _ArpsecurityEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 6, 1)
)
arpsecurityEntry.setIndexNames(
    (0, "NAG-MIB", "arpSecurityIfindex"),
)
if mibBuilder.loadTexts:
    arpsecurityEntry.setStatus("current")
_ArpSecurityIfindex_Type = Integer32
_ArpSecurityIfindex_Object = MibTableColumn
arpSecurityIfindex = _ArpSecurityIfindex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 6, 1, 1),
    _ArpSecurityIfindex_Type()
)
arpSecurityIfindex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    arpSecurityIfindex.setStatus("current")


class _ArpSecurityUpdateProtect_Type(Integer32):
    """Custom type arpSecurityUpdateProtect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_ArpSecurityUpdateProtect_Type.__name__ = "Integer32"
_ArpSecurityUpdateProtect_Object = MibTableColumn
arpSecurityUpdateProtect = _ArpSecurityUpdateProtect_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 6, 1, 2),
    _ArpSecurityUpdateProtect_Type()
)
arpSecurityUpdateProtect.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    arpSecurityUpdateProtect.setStatus("current")


class _ArpSecurityLearnProtect_Type(Integer32):
    """Custom type arpSecurityLearnProtect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_ArpSecurityLearnProtect_Type.__name__ = "Integer32"
_ArpSecurityLearnProtect_Object = MibTableColumn
arpSecurityLearnProtect = _ArpSecurityLearnProtect_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 6, 1, 3),
    _ArpSecurityLearnProtect_Type()
)
arpSecurityLearnProtect.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    arpSecurityLearnProtect.setStatus("current")


class _ArpSecurityConvert_Type(Integer32):
    """Custom type arpSecurityConvert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_ArpSecurityConvert_Type.__name__ = "Integer32"
_ArpSecurityConvert_Object = MibTableColumn
arpSecurityConvert = _ArpSecurityConvert_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 6, 1, 4),
    _ArpSecurityConvert_Type()
)
arpSecurityConvert.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    arpSecurityConvert.setStatus("current")
_ArpProxyArpTable_Object = MibTable
arpProxyArpTable = _ArpProxyArpTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 7)
)
if mibBuilder.loadTexts:
    arpProxyArpTable.setStatus("current")
_ArpProxyArpEntry_Object = MibTableRow
arpProxyArpEntry = _ArpProxyArpEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 7, 1)
)
arpProxyArpEntry.setIndexNames(
    (0, "NAG-MIB", "arpProxyArpIfIndex"),
)
if mibBuilder.loadTexts:
    arpProxyArpEntry.setStatus("current")
_ArpProxyArpIfIndex_Type = Integer32
_ArpProxyArpIfIndex_Object = MibTableColumn
arpProxyArpIfIndex = _ArpProxyArpIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 7, 1, 1),
    _ArpProxyArpIfIndex_Type()
)
arpProxyArpIfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    arpProxyArpIfIndex.setStatus("current")


class _ArpProxyArpStatus_Type(Integer32):
    """Custom type arpProxyArpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_ArpProxyArpStatus_Type.__name__ = "Integer32"
_ArpProxyArpStatus_Object = MibTableColumn
arpProxyArpStatus = _ArpProxyArpStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 7, 1, 2),
    _ArpProxyArpStatus_Type()
)
arpProxyArpStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    arpProxyArpStatus.setStatus("current")
_ArpStacticTable_Object = MibTable
arpStacticTable = _ArpStacticTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 8)
)
if mibBuilder.loadTexts:
    arpStacticTable.setStatus("current")
_ArpStaticEntry_Object = MibTableRow
arpStaticEntry = _ArpStaticEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 8, 1)
)
arpStaticEntry.setIndexNames(
    (0, "NAG-MIB", "arpProxyArpIfIndex"),
    (0, "NAG-MIB", "arpStaticIpaddress"),
)
if mibBuilder.loadTexts:
    arpStaticEntry.setStatus("current")
_ArpStaticIfindex_Type = Integer32
_ArpStaticIfindex_Object = MibTableColumn
arpStaticIfindex = _ArpStaticIfindex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 8, 1, 1),
    _ArpStaticIfindex_Type()
)
arpStaticIfindex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    arpStaticIfindex.setStatus("current")
_ArpStaticIpaddress_Type = IpAddress
_ArpStaticIpaddress_Object = MibTableColumn
arpStaticIpaddress = _ArpStaticIpaddress_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 8, 1, 2),
    _ArpStaticIpaddress_Type()
)
arpStaticIpaddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    arpStaticIpaddress.setStatus("current")


class _ArpStaticMac_Type(MacAddress):
    """Custom type arpStaticMac based on MacAddress"""
    subtypeSpec = MacAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_ArpStaticMac_Type.__name__ = "MacAddress"
_ArpStaticMac_Object = MibTableColumn
arpStaticMac = _ArpStaticMac_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 8, 1, 3),
    _ArpStaticMac_Type()
)
arpStaticMac.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    arpStaticMac.setStatus("current")
_ArpStaticPortIndex_Type = Integer32
_ArpStaticPortIndex_Object = MibTableColumn
arpStaticPortIndex = _ArpStaticPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 8, 1, 4),
    _ArpStaticPortIndex_Type()
)
arpStaticPortIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    arpStaticPortIndex.setStatus("current")


class _ArpStaticStatus_Type(Integer32):
    """Custom type arpStaticStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("valid", 1),
          ("invalid", 2),
          ("waitingforset", 3))
    )


_ArpStaticStatus_Type.__name__ = "Integer32"
_ArpStaticStatus_Object = MibTableColumn
arpStaticStatus = _ArpStaticStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 1, 8, 1, 5),
    _ArpStaticStatus_Type()
)
arpStaticStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    arpStaticStatus.setStatus("current")
_RouteMgt_ObjectIdentity = ObjectIdentity
routeMgt = _RouteMgt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 2)
)
_IpStaticRouteExtTable_Object = MibTable
ipStaticRouteExtTable = _IpStaticRouteExtTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 2, 1)
)
if mibBuilder.loadTexts:
    ipStaticRouteExtTable.setStatus("current")
_IpStaticRouteExtEntry_Object = MibTableRow
ipStaticRouteExtEntry = _IpStaticRouteExtEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 2, 1, 1)
)
ipStaticRouteExtEntry.setIndexNames(
    (0, "NAG-MIB", "ipStaticRouteExtDest"),
    (0, "NAG-MIB", "ipStaticRouteExtMask"),
)
if mibBuilder.loadTexts:
    ipStaticRouteExtEntry.setStatus("current")
_IpStaticRouteExtDest_Type = IpAddress
_IpStaticRouteExtDest_Object = MibTableColumn
ipStaticRouteExtDest = _IpStaticRouteExtDest_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 2, 1, 1, 1),
    _IpStaticRouteExtDest_Type()
)
ipStaticRouteExtDest.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ipStaticRouteExtDest.setStatus("current")
_IpStaticRouteExtMask_Type = IpAddress
_IpStaticRouteExtMask_Object = MibTableColumn
ipStaticRouteExtMask = _IpStaticRouteExtMask_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 2, 1, 1, 2),
    _IpStaticRouteExtMask_Type()
)
ipStaticRouteExtMask.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ipStaticRouteExtMask.setStatus("current")
_IpStaticRouteExtNextHop_Type = IpAddress
_IpStaticRouteExtNextHop_Object = MibTableColumn
ipStaticRouteExtNextHop = _IpStaticRouteExtNextHop_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 2, 1, 1, 3),
    _IpStaticRouteExtNextHop_Type()
)
ipStaticRouteExtNextHop.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipStaticRouteExtNextHop.setStatus("current")


class _IpStaticRouteExtMetric_Type(Integer32):
    """Custom type ipStaticRouteExtMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_IpStaticRouteExtMetric_Type.__name__ = "Integer32"
_IpStaticRouteExtMetric_Object = MibTableColumn
ipStaticRouteExtMetric = _IpStaticRouteExtMetric_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 2, 1, 1, 4),
    _IpStaticRouteExtMetric_Type()
)
ipStaticRouteExtMetric.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipStaticRouteExtMetric.setStatus("current")


class _IpStaticRouteExtStatus_Type(Integer32):
    """Custom type ipStaticRouteExtStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("valid", 1),
          ("invalid", 2),
          ("waitingforset", 3))
    )


_IpStaticRouteExtStatus_Type.__name__ = "Integer32"
_IpStaticRouteExtStatus_Object = MibTableColumn
ipStaticRouteExtStatus = _IpStaticRouteExtStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 2, 1, 1, 5),
    _IpStaticRouteExtStatus_Type()
)
ipStaticRouteExtStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipStaticRouteExtStatus.setStatus("current")
_RipMgt_ObjectIdentity = ObjectIdentity
ripMgt = _RipMgt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3)
)
_RipTimers_ObjectIdentity = ObjectIdentity
ripTimers = _RipTimers_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 1)
)


class _RipUpdateTime_Type(Integer32):
    """Custom type ripUpdateTime based on Integer32"""
    defaultValue = 30

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 2147483647),
    )


_RipUpdateTime_Type.__name__ = "Integer32"
_RipUpdateTime_Object = MibScalar
ripUpdateTime = _RipUpdateTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 1, 1),
    _RipUpdateTime_Type()
)
ripUpdateTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripUpdateTime.setStatus("current")


class _RipTimeoutTime_Type(Integer32):
    """Custom type ripTimeoutTime based on Integer32"""
    defaultValue = 180

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 2147483647),
    )


_RipTimeoutTime_Type.__name__ = "Integer32"
_RipTimeoutTime_Object = MibScalar
ripTimeoutTime = _RipTimeoutTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 1, 2),
    _RipTimeoutTime_Type()
)
ripTimeoutTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripTimeoutTime.setStatus("current")


class _RipGarbageCollectionTime_Type(Integer32):
    """Custom type ripGarbageCollectionTime based on Integer32"""
    defaultValue = 120

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 2147483647),
    )


_RipGarbageCollectionTime_Type.__name__ = "Integer32"
_RipGarbageCollectionTime_Object = MibScalar
ripGarbageCollectionTime = _RipGarbageCollectionTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 1, 3),
    _RipGarbageCollectionTime_Type()
)
ripGarbageCollectionTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripGarbageCollectionTime.setStatus("current")


class _RipRoutingProcessStatus_Type(EnabledStatusPrivate):
    """Custom type ripRoutingProcessStatus based on EnabledStatusPrivate"""
    defaultValue = 0


_RipRoutingProcessStatus_Type.__name__ = "EnabledStatusPrivate"
_RipRoutingProcessStatus_Object = MibScalar
ripRoutingProcessStatus = _RipRoutingProcessStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 2),
    _RipRoutingProcessStatus_Type()
)
ripRoutingProcessStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripRoutingProcessStatus.setStatus("current")


class _RipRouterVersion_Type(Integer32):
    """Custom type ripRouterVersion based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("rip1", 1),
          ("rip2", 2))
    )


_RipRouterVersion_Type.__name__ = "Integer32"
_RipRouterVersion_Object = MibScalar
ripRouterVersion = _RipRouterVersion_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 3),
    _RipRouterVersion_Type()
)
ripRouterVersion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripRouterVersion.setStatus("current")
_RipInstabilityPreventingTable_Object = MibTable
ripInstabilityPreventingTable = _RipInstabilityPreventingTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 4)
)
if mibBuilder.loadTexts:
    ripInstabilityPreventingTable.setStatus("current")
_RipInstabilityPreventingEntry_Object = MibTableRow
ripInstabilityPreventingEntry = _RipInstabilityPreventingEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 4, 1)
)
ripInstabilityPreventingEntry.setIndexNames(
    (0, "NAG-MIB", "ripVlanIndex"),
)
if mibBuilder.loadTexts:
    ripInstabilityPreventingEntry.setStatus("current")
_RipVlanIndex_Type = Integer32
_RipVlanIndex_Object = MibTableColumn
ripVlanIndex = _RipVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 4, 1, 1),
    _RipVlanIndex_Type()
)
ripVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripVlanIndex.setStatus("current")


class _RipSplitHorizonStatus_Type(Integer32):
    """Custom type ripSplitHorizonStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("poisonReverse", 0),
          ("none", 1),
          ("splitHorizon", 2))
    )


_RipSplitHorizonStatus_Type.__name__ = "Integer32"
_RipSplitHorizonStatus_Object = MibTableColumn
ripSplitHorizonStatus = _RipSplitHorizonStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 4, 1, 2),
    _RipSplitHorizonStatus_Type()
)
ripSplitHorizonStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripSplitHorizonStatus.setStatus("current")


class _RipStatisticsReset_Type(Integer32):
    """Custom type ripStatisticsReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("reset", 1),
          ("noReset", 2))
    )


_RipStatisticsReset_Type.__name__ = "Integer32"
_RipStatisticsReset_Object = MibScalar
ripStatisticsReset = _RipStatisticsReset_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 5),
    _RipStatisticsReset_Type()
)
ripStatisticsReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripStatisticsReset.setStatus("current")
_RipNetworkInterfaceTable_Object = MibTable
ripNetworkInterfaceTable = _RipNetworkInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 6)
)
if mibBuilder.loadTexts:
    ripNetworkInterfaceTable.setStatus("current")
_RipNetworkInterfaceEntry_Object = MibTableRow
ripNetworkInterfaceEntry = _RipNetworkInterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 6, 1)
)
ripNetworkInterfaceEntry.setIndexNames(
    (0, "NAG-MIB", "ripNetworkInterfaceAddress"),
)
if mibBuilder.loadTexts:
    ripNetworkInterfaceEntry.setStatus("current")
_RipNetworkInterfaceAddress_Type = IpAddress
_RipNetworkInterfaceAddress_Object = MibTableColumn
ripNetworkInterfaceAddress = _RipNetworkInterfaceAddress_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 6, 1, 1),
    _RipNetworkInterfaceAddress_Type()
)
ripNetworkInterfaceAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripNetworkInterfaceAddress.setStatus("current")
_RipNetworkInterfaceStatus_Type = ValidStatus
_RipNetworkInterfaceStatus_Object = MibTableColumn
ripNetworkInterfaceStatus = _RipNetworkInterfaceStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 6, 1, 2),
    _RipNetworkInterfaceStatus_Type()
)
ripNetworkInterfaceStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ripNetworkInterfaceStatus.setStatus("current")
_RipNetworkAddrTable_Object = MibTable
ripNetworkAddrTable = _RipNetworkAddrTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 7)
)
if mibBuilder.loadTexts:
    ripNetworkAddrTable.setStatus("current")
_RipNetworkAddrEntry_Object = MibTableRow
ripNetworkAddrEntry = _RipNetworkAddrEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 7, 1)
)
ripNetworkAddrEntry.setIndexNames(
    (0, "NAG-MIB", "ripNetworkAddrAddress"),
    (0, "NAG-MIB", "ripNetworkAddrPrefixLen"),
)
if mibBuilder.loadTexts:
    ripNetworkAddrEntry.setStatus("current")
_RipNetworkAddrAddress_Type = IpAddress
_RipNetworkAddrAddress_Object = MibTableColumn
ripNetworkAddrAddress = _RipNetworkAddrAddress_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 7, 1, 1),
    _RipNetworkAddrAddress_Type()
)
ripNetworkAddrAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripNetworkAddrAddress.setStatus("current")


class _RipNetworkAddrPrefixLen_Type(Integer32):
    """Custom type ripNetworkAddrPrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32),
    )


_RipNetworkAddrPrefixLen_Type.__name__ = "Integer32"
_RipNetworkAddrPrefixLen_Object = MibTableColumn
ripNetworkAddrPrefixLen = _RipNetworkAddrPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 7, 1, 2),
    _RipNetworkAddrPrefixLen_Type()
)
ripNetworkAddrPrefixLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripNetworkAddrPrefixLen.setStatus("current")


class _RipNetworkAddrStatus_Type(Integer32):
    """Custom type ripNetworkAddrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 0),
          ("valid", 1))
    )


_RipNetworkAddrStatus_Type.__name__ = "Integer32"
_RipNetworkAddrStatus_Object = MibTableColumn
ripNetworkAddrStatus = _RipNetworkAddrStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 3, 7, 1, 3),
    _RipNetworkAddrStatus_Type()
)
ripNetworkAddrStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ripNetworkAddrStatus.setStatus("current")
_OspfMgt_ObjectIdentity = ObjectIdentity
ospfMgt = _OspfMgt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4)
)
_OspfSystemGroup_ObjectIdentity = ObjectIdentity
ospfSystemGroup = _OspfSystemGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1)
)


class _OspfRouterIdType_Type(Integer32):
    """Custom type ospfRouterIdType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("manual", 2))
    )


_OspfRouterIdType_Type.__name__ = "Integer32"
_OspfRouterIdType_Object = MibScalar
ospfRouterIdType = _OspfRouterIdType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 1),
    _OspfRouterIdType_Type()
)
ospfRouterIdType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfRouterIdType.setStatus("current")


class _OspfRfc1583CompatibleState_Type(EnabledStatusPrivate):
    """Custom type ospfRfc1583CompatibleState based on EnabledStatusPrivate"""
    defaultValue = 0


_OspfRfc1583CompatibleState_Type.__name__ = "EnabledStatusPrivate"
_OspfRfc1583CompatibleState_Object = MibScalar
ospfRfc1583CompatibleState = _OspfRfc1583CompatibleState_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 2),
    _OspfRfc1583CompatibleState_Type()
)
ospfRfc1583CompatibleState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfRfc1583CompatibleState.setStatus("current")


class _OspfAutoCost_Type(Integer32):
    """Custom type ospfAutoCost based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4294967),
    )


_OspfAutoCost_Type.__name__ = "Integer32"
_OspfAutoCost_Object = MibScalar
ospfAutoCost = _OspfAutoCost_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 3),
    _OspfAutoCost_Type()
)
ospfAutoCost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfAutoCost.setStatus("current")


class _OspfAdvertiseDefaultRoute_Type(Integer32):
    """Custom type ospfAdvertiseDefaultRoute based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("always", 1),
          ("notAlways", 2))
    )


_OspfAdvertiseDefaultRoute_Type.__name__ = "Integer32"
_OspfAdvertiseDefaultRoute_Object = MibScalar
ospfAdvertiseDefaultRoute = _OspfAdvertiseDefaultRoute_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 4),
    _OspfAdvertiseDefaultRoute_Type()
)
ospfAdvertiseDefaultRoute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfAdvertiseDefaultRoute.setStatus("current")
_OspfDefaultExternalMetric_Type = OspfBigMetric
_OspfDefaultExternalMetric_Object = MibScalar
ospfDefaultExternalMetric = _OspfDefaultExternalMetric_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 5),
    _OspfDefaultExternalMetric_Type()
)
ospfDefaultExternalMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfDefaultExternalMetric.setStatus("current")


class _OspfSpfHoldTime_Type(Unsigned32):
    """Custom type ospfSpfHoldTime based on Unsigned32"""
    defaultValue = 10

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_OspfSpfHoldTime_Type.__name__ = "Unsigned32"
_OspfSpfHoldTime_Object = MibScalar
ospfSpfHoldTime = _OspfSpfHoldTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 6),
    _OspfSpfHoldTime_Type()
)
ospfSpfHoldTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfSpfHoldTime.setStatus("current")


class _OspfSpfDelayTime_Type(Unsigned32):
    """Custom type ospfSpfDelayTime based on Unsigned32"""
    defaultValue = 5

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_OspfSpfDelayTime_Type.__name__ = "Unsigned32"
_OspfSpfDelayTime_Object = MibScalar
ospfSpfDelayTime = _OspfSpfDelayTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 7),
    _OspfSpfDelayTime_Type()
)
ospfSpfDelayTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfSpfDelayTime.setStatus("current")


class _OspfAreaNumber_Type(Integer32):
    """Custom type ospfAreaNumber based on Integer32"""
    defaultValue = 0


_OspfAreaNumber_Type.__name__ = "Integer32"
_OspfAreaNumber_Object = MibScalar
ospfAreaNumber = _OspfAreaNumber_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 8),
    _OspfAreaNumber_Type()
)
ospfAreaNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNumber.setStatus("current")


class _ClearOspfProcess_Type(Integer32):
    """Custom type clearOspfProcess based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_ClearOspfProcess_Type.__name__ = "Integer32"
_ClearOspfProcess_Object = MibScalar
clearOspfProcess = _ClearOspfProcess_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 1, 9),
    _ClearOspfProcess_Type()
)
clearOspfProcess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clearOspfProcess.setStatus("current")
_OspfNssaTable_Object = MibTable
ospfNssaTable = _OspfNssaTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 2)
)
if mibBuilder.loadTexts:
    ospfNssaTable.setStatus("current")
_OspfNssaEntry_Object = MibTableRow
ospfNssaEntry = _OspfNssaEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 2, 1)
)
ospfNssaEntry.setIndexNames(
    (0, "NAG-MIB", "ospfNssaAreaId"),
)
if mibBuilder.loadTexts:
    ospfNssaEntry.setStatus("current")
_OspfNssaAreaId_Type = OspfAreaID
_OspfNssaAreaId_Object = MibTableColumn
ospfNssaAreaId = _OspfNssaAreaId_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 2, 1, 1),
    _OspfNssaAreaId_Type()
)
ospfNssaAreaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNssaAreaId.setStatus("current")
_OspfNssaStatus_Type = EnabledStatusPrivate
_OspfNssaStatus_Object = MibTableColumn
ospfNssaStatus = _OspfNssaStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 2, 1, 2),
    _OspfNssaStatus_Type()
)
ospfNssaStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNssaStatus.setStatus("current")


class _OspfNssaRedistributeStatus_Type(EnabledStatusPrivate):
    """Custom type ospfNssaRedistributeStatus based on EnabledStatusPrivate"""
    defaultValue = 1


_OspfNssaRedistributeStatus_Type.__name__ = "EnabledStatusPrivate"
_OspfNssaRedistributeStatus_Object = MibTableColumn
ospfNssaRedistributeStatus = _OspfNssaRedistributeStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 2, 1, 3),
    _OspfNssaRedistributeStatus_Type()
)
ospfNssaRedistributeStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNssaRedistributeStatus.setStatus("current")


class _OspfNssaOriginateDefaultInfoStatus_Type(EnabledStatusPrivate):
    """Custom type ospfNssaOriginateDefaultInfoStatus based on EnabledStatusPrivate"""
    defaultValue = 0


_OspfNssaOriginateDefaultInfoStatus_Type.__name__ = "EnabledStatusPrivate"
_OspfNssaOriginateDefaultInfoStatus_Object = MibTableColumn
ospfNssaOriginateDefaultInfoStatus = _OspfNssaOriginateDefaultInfoStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 2, 1, 4),
    _OspfNssaOriginateDefaultInfoStatus_Type()
)
ospfNssaOriginateDefaultInfoStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNssaOriginateDefaultInfoStatus.setStatus("current")
_OspfRedistributeTable_Object = MibTable
ospfRedistributeTable = _OspfRedistributeTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 3)
)
if mibBuilder.loadTexts:
    ospfRedistributeTable.setStatus("current")
_OspfRedistributeEntry_Object = MibTableRow
ospfRedistributeEntry = _OspfRedistributeEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 3, 1)
)
ospfRedistributeEntry.setIndexNames(
    (0, "NAG-MIB", "ospfRedistributeProtocol"),
)
if mibBuilder.loadTexts:
    ospfRedistributeEntry.setStatus("current")


class _OspfRedistributeProtocol_Type(Integer32):
    """Custom type ospfRedistributeProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              6,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("kernel", 1),
          ("connect", 2),
          ("static", 3),
          ("rip", 4),
          ("ospf", 6),
          ("bgp", 8),
          ("isis", 9))
    )


_OspfRedistributeProtocol_Type.__name__ = "Integer32"
_OspfRedistributeProtocol_Object = MibTableColumn
ospfRedistributeProtocol = _OspfRedistributeProtocol_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 3, 1, 1),
    _OspfRedistributeProtocol_Type()
)
ospfRedistributeProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfRedistributeProtocol.setStatus("current")
_OspfRedistributeStatus_Type = EnabledStatusPrivate
_OspfRedistributeStatus_Object = MibTableColumn
ospfRedistributeStatus = _OspfRedistributeStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 3, 1, 2),
    _OspfRedistributeStatus_Type()
)
ospfRedistributeStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfRedistributeStatus.setStatus("current")


class _OspfRedistributeMetricType_Type(Integer32):
    """Custom type ospfRedistributeMetricType based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("type1", 1),
          ("type2", 2))
    )


_OspfRedistributeMetricType_Type.__name__ = "Integer32"
_OspfRedistributeMetricType_Object = MibTableColumn
ospfRedistributeMetricType = _OspfRedistributeMetricType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 3, 1, 3),
    _OspfRedistributeMetricType_Type()
)
ospfRedistributeMetricType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfRedistributeMetricType.setStatus("current")
_OspfRedistributeMetric_Type = OspfBigMetric
_OspfRedistributeMetric_Object = MibTableColumn
ospfRedistributeMetric = _OspfRedistributeMetric_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 3, 1, 4),
    _OspfRedistributeMetric_Type()
)
ospfRedistributeMetric.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfRedistributeMetric.setStatus("current")
_OspfSummaryAddressTable_Object = MibTable
ospfSummaryAddressTable = _OspfSummaryAddressTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 4)
)
if mibBuilder.loadTexts:
    ospfSummaryAddressTable.setStatus("current")
_OspfSummaryAddressEntry_Object = MibTableRow
ospfSummaryAddressEntry = _OspfSummaryAddressEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 4, 1)
)
ospfSummaryAddressEntry.setIndexNames(
    (0, "NAG-MIB", "ospfSummaryAddress"),
    (0, "NAG-MIB", "ospfSummaryMask"),
)
if mibBuilder.loadTexts:
    ospfSummaryAddressEntry.setStatus("current")
_OspfSummaryAddress_Type = IpAddress
_OspfSummaryAddress_Object = MibTableColumn
ospfSummaryAddress = _OspfSummaryAddress_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 4, 1, 1),
    _OspfSummaryAddress_Type()
)
ospfSummaryAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfSummaryAddress.setStatus("current")
_OspfSummaryMask_Type = IpAddress
_OspfSummaryMask_Object = MibTableColumn
ospfSummaryMask = _OspfSummaryMask_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 4, 1, 2),
    _OspfSummaryMask_Type()
)
ospfSummaryMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfSummaryMask.setStatus("current")
_OspfSummaryStatus_Type = EnabledStatusPrivate
_OspfSummaryStatus_Object = MibTableColumn
ospfSummaryStatus = _OspfSummaryStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 4, 1, 3),
    _OspfSummaryStatus_Type()
)
ospfSummaryStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfSummaryStatus.setStatus("current")
_OspfNetworkAreaAddressTable_Object = MibTable
ospfNetworkAreaAddressTable = _OspfNetworkAreaAddressTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 5)
)
if mibBuilder.loadTexts:
    ospfNetworkAreaAddressTable.setStatus("current")
_OspfNetworkAreaAddressEntry_Object = MibTableRow
ospfNetworkAreaAddressEntry = _OspfNetworkAreaAddressEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 5, 1)
)
ospfNetworkAreaAddressEntry.setIndexNames(
    (0, "NAG-MIB", "ospfNetworkAareaAddress"),
    (0, "NAG-MIB", "ospfNetworkAreaMask"),
    (0, "NAG-MIB", "ospfNetworkAreaAreaId"),
)
if mibBuilder.loadTexts:
    ospfNetworkAreaAddressEntry.setStatus("current")
_OspfNetworkAareaAddress_Type = IpAddress
_OspfNetworkAareaAddress_Object = MibTableColumn
ospfNetworkAareaAddress = _OspfNetworkAareaAddress_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 5, 1, 1),
    _OspfNetworkAareaAddress_Type()
)
ospfNetworkAareaAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNetworkAareaAddress.setStatus("current")
_OspfNetworkAreaMask_Type = IpAddress
_OspfNetworkAreaMask_Object = MibTableColumn
ospfNetworkAreaMask = _OspfNetworkAreaMask_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 5, 1, 2),
    _OspfNetworkAreaMask_Type()
)
ospfNetworkAreaMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNetworkAreaMask.setStatus("current")
_OspfNetworkAreaAreaId_Type = IpAddress
_OspfNetworkAreaAreaId_Object = MibTableColumn
ospfNetworkAreaAreaId = _OspfNetworkAreaAreaId_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 5, 1, 3),
    _OspfNetworkAreaAreaId_Type()
)
ospfNetworkAreaAreaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNetworkAreaAreaId.setStatus("current")
_OspfNetworkAreaStatus_Type = EnabledStatusPrivate
_OspfNetworkAreaStatus_Object = MibTableColumn
ospfNetworkAreaStatus = _OspfNetworkAreaStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 4, 5, 1, 4),
    _OspfNetworkAreaStatus_Type()
)
ospfNetworkAreaStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNetworkAreaStatus.setStatus("current")
_DvmrpMgt_ObjectIdentity = ObjectIdentity
dvmrpMgt = _DvmrpMgt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5)
)
_DvmrpScalar_ObjectIdentity = ObjectIdentity
dvmrpScalar = _DvmrpScalar_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 1)
)
_DvmrpVersionString_Type = DisplayString
_DvmrpVersionString_Object = MibScalar
dvmrpVersionString = _DvmrpVersionString_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 1, 1),
    _DvmrpVersionString_Type()
)
dvmrpVersionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpVersionString.setStatus("current")
_DvmrpNumRoutes_Type = Gauge32
_DvmrpNumRoutes_Object = MibScalar
dvmrpNumRoutes = _DvmrpNumRoutes_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 1, 3),
    _DvmrpNumRoutes_Type()
)
dvmrpNumRoutes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpNumRoutes.setStatus("current")
_DvmrpReachableRoutes_Type = Gauge32
_DvmrpReachableRoutes_Object = MibScalar
dvmrpReachableRoutes = _DvmrpReachableRoutes_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 1, 4),
    _DvmrpReachableRoutes_Type()
)
dvmrpReachableRoutes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpReachableRoutes.setStatus("current")
_DvmrpInterfaceTable_Object = MibTable
dvmrpInterfaceTable = _DvmrpInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2)
)
if mibBuilder.loadTexts:
    dvmrpInterfaceTable.setStatus("current")
_DvmrpInterfaceEntry_Object = MibTableRow
dvmrpInterfaceEntry = _DvmrpInterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1)
)
dvmrpInterfaceEntry.setIndexNames(
    (0, "NAG-MIB", "dvmrpInterfaceIndex"),
)
if mibBuilder.loadTexts:
    dvmrpInterfaceEntry.setStatus("current")
_DvmrpInterfaceIndex_Type = InterfaceIndex
_DvmrpInterfaceIndex_Object = MibTableColumn
dvmrpInterfaceIndex = _DvmrpInterfaceIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 1),
    _DvmrpInterfaceIndex_Type()
)
dvmrpInterfaceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpInterfaceIndex.setStatus("current")
_DvmrpInterfaceLocalAddress_Type = IpAddress
_DvmrpInterfaceLocalAddress_Object = MibTableColumn
dvmrpInterfaceLocalAddress = _DvmrpInterfaceLocalAddress_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 2),
    _DvmrpInterfaceLocalAddress_Type()
)
dvmrpInterfaceLocalAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpInterfaceLocalAddress.setStatus("current")


class _DvmrpInterfaceMetric_Type(Integer32):
    """Custom type dvmrpInterfaceMetric based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 31),
    )


_DvmrpInterfaceMetric_Type.__name__ = "Integer32"
_DvmrpInterfaceMetric_Object = MibTableColumn
dvmrpInterfaceMetric = _DvmrpInterfaceMetric_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 3),
    _DvmrpInterfaceMetric_Type()
)
dvmrpInterfaceMetric.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dvmrpInterfaceMetric.setStatus("current")
_DvmrpInterfaceStatus_Type = RowStatus
_DvmrpInterfaceStatus_Object = MibTableColumn
dvmrpInterfaceStatus = _DvmrpInterfaceStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 4),
    _DvmrpInterfaceStatus_Type()
)
dvmrpInterfaceStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dvmrpInterfaceStatus.setStatus("current")
_DvmrpInterfaceRcvBadPkts_Type = Counter32
_DvmrpInterfaceRcvBadPkts_Object = MibTableColumn
dvmrpInterfaceRcvBadPkts = _DvmrpInterfaceRcvBadPkts_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 5),
    _DvmrpInterfaceRcvBadPkts_Type()
)
dvmrpInterfaceRcvBadPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpInterfaceRcvBadPkts.setStatus("current")
_DvmrpInterfaceRcvBadRoutes_Type = Counter32
_DvmrpInterfaceRcvBadRoutes_Object = MibTableColumn
dvmrpInterfaceRcvBadRoutes = _DvmrpInterfaceRcvBadRoutes_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 6),
    _DvmrpInterfaceRcvBadRoutes_Type()
)
dvmrpInterfaceRcvBadRoutes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpInterfaceRcvBadRoutes.setStatus("current")
_DvmrpInterfaceSentRoutes_Type = Counter32
_DvmrpInterfaceSentRoutes_Object = MibTableColumn
dvmrpInterfaceSentRoutes = _DvmrpInterfaceSentRoutes_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 7),
    _DvmrpInterfaceSentRoutes_Type()
)
dvmrpInterfaceSentRoutes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpInterfaceSentRoutes.setStatus("current")
_DvmrpInterfaceKey_Type = SnmpAdminString
_DvmrpInterfaceKey_Object = MibTableColumn
dvmrpInterfaceKey = _DvmrpInterfaceKey_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 8),
    _DvmrpInterfaceKey_Type()
)
dvmrpInterfaceKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpInterfaceKey.setStatus("current")
_DvmrpInterfaceKeyVersion_Type = Integer32
_DvmrpInterfaceKeyVersion_Object = MibTableColumn
dvmrpInterfaceKeyVersion = _DvmrpInterfaceKeyVersion_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 9),
    _DvmrpInterfaceKeyVersion_Type()
)
dvmrpInterfaceKeyVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpInterfaceKeyVersion.setStatus("current")
_DvmrpInterfaceGenerationId_Type = Integer32
_DvmrpInterfaceGenerationId_Object = MibTableColumn
dvmrpInterfaceGenerationId = _DvmrpInterfaceGenerationId_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 2, 1, 10),
    _DvmrpInterfaceGenerationId_Type()
)
dvmrpInterfaceGenerationId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpInterfaceGenerationId.setStatus("current")
_DvmrpNeighborTable_Object = MibTable
dvmrpNeighborTable = _DvmrpNeighborTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3)
)
if mibBuilder.loadTexts:
    dvmrpNeighborTable.setStatus("current")
_DvmrpNeighborEntry_Object = MibTableRow
dvmrpNeighborEntry = _DvmrpNeighborEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1)
)
dvmrpNeighborEntry.setIndexNames(
    (0, "NAG-MIB", "dvmrpNeighborIfIndex"),
    (0, "NAG-MIB", "dvmrpNeighborAddress"),
)
if mibBuilder.loadTexts:
    dvmrpNeighborEntry.setStatus("current")
_DvmrpNeighborIfIndex_Type = InterfaceIndex
_DvmrpNeighborIfIndex_Object = MibTableColumn
dvmrpNeighborIfIndex = _DvmrpNeighborIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 1),
    _DvmrpNeighborIfIndex_Type()
)
dvmrpNeighborIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpNeighborIfIndex.setStatus("current")
_DvmrpNeighborAddress_Type = IpAddress
_DvmrpNeighborAddress_Object = MibTableColumn
dvmrpNeighborAddress = _DvmrpNeighborAddress_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 2),
    _DvmrpNeighborAddress_Type()
)
dvmrpNeighborAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpNeighborAddress.setStatus("current")
_DvmrpNeighborUpTime_Type = TimeTicks
_DvmrpNeighborUpTime_Object = MibTableColumn
dvmrpNeighborUpTime = _DvmrpNeighborUpTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 3),
    _DvmrpNeighborUpTime_Type()
)
dvmrpNeighborUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpNeighborUpTime.setStatus("current")
_DvmrpNeighborExpiryTime_Type = TimeTicks
_DvmrpNeighborExpiryTime_Object = MibTableColumn
dvmrpNeighborExpiryTime = _DvmrpNeighborExpiryTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 4),
    _DvmrpNeighborExpiryTime_Type()
)
dvmrpNeighborExpiryTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpNeighborExpiryTime.setStatus("current")
_DvmrpNeighborGenerationId_Type = Integer32
_DvmrpNeighborGenerationId_Object = MibTableColumn
dvmrpNeighborGenerationId = _DvmrpNeighborGenerationId_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 5),
    _DvmrpNeighborGenerationId_Type()
)
dvmrpNeighborGenerationId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpNeighborGenerationId.setStatus("current")


class _DvmrpNeighborMajorVersion_Type(Integer32):
    """Custom type dvmrpNeighborMajorVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_DvmrpNeighborMajorVersion_Type.__name__ = "Integer32"
_DvmrpNeighborMajorVersion_Object = MibTableColumn
dvmrpNeighborMajorVersion = _DvmrpNeighborMajorVersion_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 6),
    _DvmrpNeighborMajorVersion_Type()
)
dvmrpNeighborMajorVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpNeighborMajorVersion.setStatus("current")


class _DvmrpNeighborMinorVersion_Type(Integer32):
    """Custom type dvmrpNeighborMinorVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_DvmrpNeighborMinorVersion_Type.__name__ = "Integer32"
_DvmrpNeighborMinorVersion_Object = MibTableColumn
dvmrpNeighborMinorVersion = _DvmrpNeighborMinorVersion_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 7),
    _DvmrpNeighborMinorVersion_Type()
)
dvmrpNeighborMinorVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpNeighborMinorVersion.setStatus("current")


class _DvmrpNeighborCapabilities_Type(Bits):
    """Custom type dvmrpNeighborCapabilities based on Bits"""
    namedValues = NamedValues(
        *(("leaf", 0),
          ("prune", 1),
          ("generationID", 2),
          ("mtrace", 3),
          ("snmp", 4),
          ("netmask", 5))
    )

_DvmrpNeighborCapabilities_Type.__name__ = "Bits"
_DvmrpNeighborCapabilities_Object = MibTableColumn
dvmrpNeighborCapabilities = _DvmrpNeighborCapabilities_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 8),
    _DvmrpNeighborCapabilities_Type()
)
dvmrpNeighborCapabilities.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpNeighborCapabilities.setStatus("current")
_DvmrpNeighborRcvRoutes_Type = Counter32
_DvmrpNeighborRcvRoutes_Object = MibTableColumn
dvmrpNeighborRcvRoutes = _DvmrpNeighborRcvRoutes_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 9),
    _DvmrpNeighborRcvRoutes_Type()
)
dvmrpNeighborRcvRoutes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpNeighborRcvRoutes.setStatus("current")
_DvmrpNeighborRcvBadPkts_Type = Counter32
_DvmrpNeighborRcvBadPkts_Object = MibTableColumn
dvmrpNeighborRcvBadPkts = _DvmrpNeighborRcvBadPkts_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 10),
    _DvmrpNeighborRcvBadPkts_Type()
)
dvmrpNeighborRcvBadPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpNeighborRcvBadPkts.setStatus("current")
_DvmrpNeighborRcvBadRoutes_Type = Counter32
_DvmrpNeighborRcvBadRoutes_Object = MibTableColumn
dvmrpNeighborRcvBadRoutes = _DvmrpNeighborRcvBadRoutes_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 11),
    _DvmrpNeighborRcvBadRoutes_Type()
)
dvmrpNeighborRcvBadRoutes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpNeighborRcvBadRoutes.setStatus("current")


class _DvmrpNeighborState_Type(Integer32):
    """Custom type dvmrpNeighborState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("oneway", 1),
          ("active", 2),
          ("ignoring", 3),
          ("down", 4))
    )


_DvmrpNeighborState_Type.__name__ = "Integer32"
_DvmrpNeighborState_Object = MibTableColumn
dvmrpNeighborState = _DvmrpNeighborState_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 3, 1, 12),
    _DvmrpNeighborState_Type()
)
dvmrpNeighborState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpNeighborState.setStatus("current")
_DvmrpRouteTable_Object = MibTable
dvmrpRouteTable = _DvmrpRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4)
)
if mibBuilder.loadTexts:
    dvmrpRouteTable.setStatus("current")
_DvmrpRouteEntry_Object = MibTableRow
dvmrpRouteEntry = _DvmrpRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4, 1)
)
dvmrpRouteEntry.setIndexNames(
    (0, "NAG-MIB", "dvmrpRouteSource"),
    (0, "NAG-MIB", "dvmrpRouteSourceMask"),
)
if mibBuilder.loadTexts:
    dvmrpRouteEntry.setStatus("current")
_DvmrpRouteSource_Type = IpAddress
_DvmrpRouteSource_Object = MibTableColumn
dvmrpRouteSource = _DvmrpRouteSource_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4, 1, 1),
    _DvmrpRouteSource_Type()
)
dvmrpRouteSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpRouteSource.setStatus("current")
_DvmrpRouteSourceMask_Type = IpAddress
_DvmrpRouteSourceMask_Object = MibTableColumn
dvmrpRouteSourceMask = _DvmrpRouteSourceMask_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4, 1, 2),
    _DvmrpRouteSourceMask_Type()
)
dvmrpRouteSourceMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpRouteSourceMask.setStatus("current")
_DvmrpRouteUpstreamNeighbor_Type = IpAddress
_DvmrpRouteUpstreamNeighbor_Object = MibTableColumn
dvmrpRouteUpstreamNeighbor = _DvmrpRouteUpstreamNeighbor_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4, 1, 3),
    _DvmrpRouteUpstreamNeighbor_Type()
)
dvmrpRouteUpstreamNeighbor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpRouteUpstreamNeighbor.setStatus("current")
_DvmrpRouteIfIndex_Type = InterfaceIndexOrZero
_DvmrpRouteIfIndex_Object = MibTableColumn
dvmrpRouteIfIndex = _DvmrpRouteIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4, 1, 4),
    _DvmrpRouteIfIndex_Type()
)
dvmrpRouteIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpRouteIfIndex.setStatus("current")


class _DvmrpRouteMetric_Type(Integer32):
    """Custom type dvmrpRouteMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_DvmrpRouteMetric_Type.__name__ = "Integer32"
_DvmrpRouteMetric_Object = MibTableColumn
dvmrpRouteMetric = _DvmrpRouteMetric_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4, 1, 5),
    _DvmrpRouteMetric_Type()
)
dvmrpRouteMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpRouteMetric.setStatus("current")
_DvmrpRouteExpiryTime_Type = TimeTicks
_DvmrpRouteExpiryTime_Object = MibTableColumn
dvmrpRouteExpiryTime = _DvmrpRouteExpiryTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4, 1, 6),
    _DvmrpRouteExpiryTime_Type()
)
dvmrpRouteExpiryTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpRouteExpiryTime.setStatus("current")
_DvmrpRouteUpTime_Type = TimeTicks
_DvmrpRouteUpTime_Object = MibTableColumn
dvmrpRouteUpTime = _DvmrpRouteUpTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 4, 1, 7),
    _DvmrpRouteUpTime_Type()
)
dvmrpRouteUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpRouteUpTime.setStatus("current")
_DvmrpRouteNextHopTable_Object = MibTable
dvmrpRouteNextHopTable = _DvmrpRouteNextHopTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 5)
)
if mibBuilder.loadTexts:
    dvmrpRouteNextHopTable.setStatus("current")
_DvmrpRouteNextHopEntry_Object = MibTableRow
dvmrpRouteNextHopEntry = _DvmrpRouteNextHopEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 5, 1)
)
dvmrpRouteNextHopEntry.setIndexNames(
    (0, "NAG-MIB", "dvmrpRouteNextHopSource"),
    (0, "NAG-MIB", "dvmrpRouteNextHopSourceMask"),
    (0, "NAG-MIB", "dvmrpRouteNextHopIfIndex"),
)
if mibBuilder.loadTexts:
    dvmrpRouteNextHopEntry.setStatus("current")
_DvmrpRouteNextHopSource_Type = IpAddress
_DvmrpRouteNextHopSource_Object = MibTableColumn
dvmrpRouteNextHopSource = _DvmrpRouteNextHopSource_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 5, 1, 1),
    _DvmrpRouteNextHopSource_Type()
)
dvmrpRouteNextHopSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpRouteNextHopSource.setStatus("current")
_DvmrpRouteNextHopSourceMask_Type = IpAddress
_DvmrpRouteNextHopSourceMask_Object = MibTableColumn
dvmrpRouteNextHopSourceMask = _DvmrpRouteNextHopSourceMask_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 5, 1, 2),
    _DvmrpRouteNextHopSourceMask_Type()
)
dvmrpRouteNextHopSourceMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpRouteNextHopSourceMask.setStatus("current")
_DvmrpRouteNextHopIfIndex_Type = InterfaceIndex
_DvmrpRouteNextHopIfIndex_Object = MibTableColumn
dvmrpRouteNextHopIfIndex = _DvmrpRouteNextHopIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 5, 1, 3),
    _DvmrpRouteNextHopIfIndex_Type()
)
dvmrpRouteNextHopIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpRouteNextHopIfIndex.setStatus("current")


class _DvmrpRouteNextHopType_Type(Integer32):
    """Custom type dvmrpRouteNextHopType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("leaf", 1),
          ("branch", 2))
    )


_DvmrpRouteNextHopType_Type.__name__ = "Integer32"
_DvmrpRouteNextHopType_Object = MibTableColumn
dvmrpRouteNextHopType = _DvmrpRouteNextHopType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 5, 1, 4),
    _DvmrpRouteNextHopType_Type()
)
dvmrpRouteNextHopType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpRouteNextHopType.setStatus("current")
_DvmrpPruneTable_Object = MibTable
dvmrpPruneTable = _DvmrpPruneTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 6)
)
if mibBuilder.loadTexts:
    dvmrpPruneTable.setStatus("current")
_DvmrpPruneEntry_Object = MibTableRow
dvmrpPruneEntry = _DvmrpPruneEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 6, 1)
)
dvmrpPruneEntry.setIndexNames(
    (0, "NAG-MIB", "dvmrpPruneGroup"),
    (0, "NAG-MIB", "dvmrpPruneSource"),
    (0, "NAG-MIB", "dvmrpPruneSourceMask"),
)
if mibBuilder.loadTexts:
    dvmrpPruneEntry.setStatus("current")
_DvmrpPruneGroup_Type = IpAddress
_DvmrpPruneGroup_Object = MibTableColumn
dvmrpPruneGroup = _DvmrpPruneGroup_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 6, 1, 1),
    _DvmrpPruneGroup_Type()
)
dvmrpPruneGroup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpPruneGroup.setStatus("current")
_DvmrpPruneSource_Type = IpAddress
_DvmrpPruneSource_Object = MibTableColumn
dvmrpPruneSource = _DvmrpPruneSource_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 6, 1, 2),
    _DvmrpPruneSource_Type()
)
dvmrpPruneSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpPruneSource.setStatus("current")
_DvmrpPruneSourceMask_Type = IpAddress
_DvmrpPruneSourceMask_Object = MibTableColumn
dvmrpPruneSourceMask = _DvmrpPruneSourceMask_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 6, 1, 3),
    _DvmrpPruneSourceMask_Type()
)
dvmrpPruneSourceMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpPruneSourceMask.setStatus("current")
_DvmrpPruneExpiryTime_Type = TimeTicks
_DvmrpPruneExpiryTime_Object = MibTableColumn
dvmrpPruneExpiryTime = _DvmrpPruneExpiryTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 16, 5, 6, 1, 4),
    _DvmrpPruneExpiryTime_Type()
)
dvmrpPruneExpiryTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvmrpPruneExpiryTime.setStatus("current")
_SntpMgt_ObjectIdentity = ObjectIdentity
sntpMgt = _SntpMgt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 17)
)


class _SntpPollTime_Type(Integer32):
    """Custom type sntpPollTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 16284),
    )


_SntpPollTime_Type.__name__ = "Integer32"
_SntpPollTime_Object = MibScalar
sntpPollTime = _SntpPollTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 1),
    _SntpPollTime_Type()
)
sntpPollTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sntpPollTime.setStatus("current")
_SntpServerTable_Object = MibTable
sntpServerTable = _SntpServerTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 2)
)
if mibBuilder.loadTexts:
    sntpServerTable.setStatus("current")
_SntpServerEntry_Object = MibTableRow
sntpServerEntry = _SntpServerEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 2, 1)
)
sntpServerEntry.setIndexNames(
    (0, "NAG-MIB", "sntpServerVersion"),
    (0, "NAG-MIB", "sntpServerAddress"),
)
if mibBuilder.loadTexts:
    sntpServerEntry.setStatus("current")


class _SntpServerVersion_Type(Integer32):
    """Custom type sntpServerVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_SntpServerVersion_Type.__name__ = "Integer32"
_SntpServerVersion_Object = MibTableColumn
sntpServerVersion = _SntpServerVersion_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 2, 1, 1),
    _SntpServerVersion_Type()
)
sntpServerVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sntpServerVersion.setStatus("current")
_SntpServerAddress_Type = IpAddress
_SntpServerAddress_Object = MibTableColumn
sntpServerAddress = _SntpServerAddress_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 2, 1, 2),
    _SntpServerAddress_Type()
)
sntpServerAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sntpServerAddress.setStatus("current")


class _SntpServerStatus_Type(Integer32):
    """Custom type sntpServerStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_SntpServerStatus_Type.__name__ = "Integer32"
_SntpServerStatus_Object = MibTableColumn
sntpServerStatus = _SntpServerStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 2, 1, 3),
    _SntpServerStatus_Type()
)
sntpServerStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sntpServerStatus.setStatus("current")
_SntpServer6Table_Object = MibTable
sntpServer6Table = _SntpServer6Table_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 3)
)
if mibBuilder.loadTexts:
    sntpServer6Table.setStatus("current")
_SntpServer6Entry_Object = MibTableRow
sntpServer6Entry = _SntpServer6Entry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 3, 1)
)
sntpServer6Entry.setIndexNames(
    (0, "NAG-MIB", "sntpServer6Version"),
    (0, "NAG-MIB", "sntpServer6Address"),
)
if mibBuilder.loadTexts:
    sntpServer6Entry.setStatus("current")


class _SntpServer6Version_Type(Integer32):
    """Custom type sntpServer6Version based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_SntpServer6Version_Type.__name__ = "Integer32"
_SntpServer6Version_Object = MibTableColumn
sntpServer6Version = _SntpServer6Version_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 3, 1, 1),
    _SntpServer6Version_Type()
)
sntpServer6Version.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sntpServer6Version.setStatus("current")
_SntpServer6Address_Type = Ipv6Address
_SntpServer6Address_Object = MibTableColumn
sntpServer6Address = _SntpServer6Address_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 3, 1, 2),
    _SntpServer6Address_Type()
)
sntpServer6Address.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sntpServer6Address.setStatus("current")


class _SntpServer6Status_Type(Integer32):
    """Custom type sntpServer6Status based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_SntpServer6Status_Type.__name__ = "Integer32"
_SntpServer6Status_Object = MibTableColumn
sntpServer6Status = _SntpServer6Status_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 3, 1, 3),
    _SntpServer6Status_Type()
)
sntpServer6Status.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sntpServer6Status.setStatus("current")
_SntpTimeZone_ObjectIdentity = ObjectIdentity
sntpTimeZone = _SntpTimeZone_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 4)
)
_SntpTimeZoneName_Type = DisplayString
_SntpTimeZoneName_Object = MibScalar
sntpTimeZoneName = _SntpTimeZoneName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 4, 1),
    _SntpTimeZoneName_Type()
)
sntpTimeZoneName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sntpTimeZoneName.setStatus("current")


class _SntpTimeZoneType_Type(Integer32):
    """Custom type sntpTimeZoneType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("subtract", 0),
          ("add", 1))
    )


_SntpTimeZoneType_Type.__name__ = "Integer32"
_SntpTimeZoneType_Object = MibScalar
sntpTimeZoneType = _SntpTimeZoneType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 4, 2),
    _SntpTimeZoneType_Type()
)
sntpTimeZoneType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sntpTimeZoneType.setStatus("current")


class _SntpTimeZoneTime_Type(Integer32):
    """Custom type sntpTimeZoneTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_SntpTimeZoneTime_Type.__name__ = "Integer32"
_SntpTimeZoneTime_Object = MibScalar
sntpTimeZoneTime = _SntpTimeZoneTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 4, 3),
    _SntpTimeZoneTime_Type()
)
sntpTimeZoneTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sntpTimeZoneTime.setStatus("current")


class _SntpTimeZoneStatus_Type(Integer32):
    """Custom type sntpTimeZoneStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_SntpTimeZoneStatus_Type.__name__ = "Integer32"
_SntpTimeZoneStatus_Object = MibScalar
sntpTimeZoneStatus = _SntpTimeZoneStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 17, 4, 4),
    _SntpTimeZoneStatus_Type()
)
sntpTimeZoneStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sntpTimeZoneStatus.setStatus("current")
_Urpf_ObjectIdentity = ObjectIdentity
urpf = _Urpf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 18)
)


class _UrpfEnable_Type(Integer32):
    """Custom type urpfEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_UrpfEnable_Type.__name__ = "Integer32"
_UrpfEnable_Object = MibScalar
urpfEnable = _UrpfEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 18, 1),
    _UrpfEnable_Type()
)
urpfEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    urpfEnable.setStatus("current")
_UrpfPortTable_Object = MibTable
urpfPortTable = _UrpfPortTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 18, 2)
)
if mibBuilder.loadTexts:
    urpfPortTable.setStatus("current")
_UrpfPortEntry_Object = MibTableRow
urpfPortEntry = _UrpfPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 18, 2, 1)
)
urpfPortEntry.setIndexNames(
    (0, "NAG-MIB", "urpfPortIndex"),
)
if mibBuilder.loadTexts:
    urpfPortEntry.setStatus("current")
_UrpfPortIndex_Type = Integer32
_UrpfPortIndex_Object = MibTableColumn
urpfPortIndex = _UrpfPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 18, 2, 1, 1),
    _UrpfPortIndex_Type()
)
urpfPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    urpfPortIndex.setStatus("current")


class _UrpfPortMode_Type(Integer32):
    """Custom type urpfPortMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("strict", 0),
          ("loose", 1))
    )


_UrpfPortMode_Type.__name__ = "Integer32"
_UrpfPortMode_Object = MibTableColumn
urpfPortMode = _UrpfPortMode_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 18, 2, 1, 2),
    _UrpfPortMode_Type()
)
urpfPortMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    urpfPortMode.setStatus("current")


class _UrpfPortAllowDefault_Type(Integer32):
    """Custom type urpfPortAllowDefault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("noallowdefaultroute", 0),
          ("allowdefaultroute", 1))
    )


_UrpfPortAllowDefault_Type.__name__ = "Integer32"
_UrpfPortAllowDefault_Object = MibTableColumn
urpfPortAllowDefault = _UrpfPortAllowDefault_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 18, 2, 1, 3),
    _UrpfPortAllowDefault_Type()
)
urpfPortAllowDefault.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    urpfPortAllowDefault.setStatus("current")


class _UrpfPortStatus_Type(Integer32):
    """Custom type urpfPortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_UrpfPortStatus_Type.__name__ = "Integer32"
_UrpfPortStatus_Object = MibTableColumn
urpfPortStatus = _UrpfPortStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 18, 2, 1, 4),
    _UrpfPortStatus_Type()
)
urpfPortStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    urpfPortStatus.setStatus("current")
_Dcscm_ObjectIdentity = ObjectIdentity
dcscm = _Dcscm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20)
)


class _DcscmdcEnable_Type(Integer32):
    """Custom type dcscmdcEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_DcscmdcEnable_Type.__name__ = "Integer32"
_DcscmdcEnable_Object = MibScalar
dcscmdcEnable = _DcscmdcEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 1),
    _DcscmdcEnable_Type()
)
dcscmdcEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscmdcEnable.setStatus("current")
_DcscmdcAclTable_Object = MibTable
dcscmdcAclTable = _DcscmdcAclTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2)
)
if mibBuilder.loadTexts:
    dcscmdcAclTable.setStatus("current")
_DcscmdcAclEntry_Object = MibTableRow
dcscmdcAclEntry = _DcscmdcAclEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2, 1)
)
dcscmdcAclEntry.setIndexNames(
    (0, "NAG-MIB", "dcscmdcAclNumber"),
    (0, "NAG-MIB", "dcscmdcAclSubNumber"),
)
if mibBuilder.loadTexts:
    dcscmdcAclEntry.setStatus("current")


class _DcscmdcAclNumber_Type(Integer32):
    """Custom type dcscmdcAclNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(6000, 7999),
    )


_DcscmdcAclNumber_Type.__name__ = "Integer32"
_DcscmdcAclNumber_Object = MibTableColumn
dcscmdcAclNumber = _DcscmdcAclNumber_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2, 1, 1),
    _DcscmdcAclNumber_Type()
)
dcscmdcAclNumber.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dcscmdcAclNumber.setStatus("current")


class _DcscmdcAclSubNumber_Type(Integer32):
    """Custom type dcscmdcAclSubNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1024),
    )


_DcscmdcAclSubNumber_Type.__name__ = "Integer32"
_DcscmdcAclSubNumber_Object = MibTableColumn
dcscmdcAclSubNumber = _DcscmdcAclSubNumber_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2, 1, 2),
    _DcscmdcAclSubNumber_Type()
)
dcscmdcAclSubNumber.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dcscmdcAclSubNumber.setStatus("current")
_DcscmdcAclSourceIp_Type = IpAddress
_DcscmdcAclSourceIp_Object = MibTableColumn
dcscmdcAclSourceIp = _DcscmdcAclSourceIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2, 1, 3),
    _DcscmdcAclSourceIp_Type()
)
dcscmdcAclSourceIp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dcscmdcAclSourceIp.setStatus("current")
_DcscmdcAclSourceMask_Type = IpAddress
_DcscmdcAclSourceMask_Object = MibTableColumn
dcscmdcAclSourceMask = _DcscmdcAclSourceMask_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2, 1, 4),
    _DcscmdcAclSourceMask_Type()
)
dcscmdcAclSourceMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dcscmdcAclSourceMask.setStatus("current")
_DcscmdcAclDestinationIp_Type = IpAddress
_DcscmdcAclDestinationIp_Object = MibTableColumn
dcscmdcAclDestinationIp = _DcscmdcAclDestinationIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2, 1, 5),
    _DcscmdcAclDestinationIp_Type()
)
dcscmdcAclDestinationIp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dcscmdcAclDestinationIp.setStatus("current")
_DcscmdcAclDestinationMask_Type = IpAddress
_DcscmdcAclDestinationMask_Object = MibTableColumn
dcscmdcAclDestinationMask = _DcscmdcAclDestinationMask_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2, 1, 6),
    _DcscmdcAclDestinationMask_Type()
)
dcscmdcAclDestinationMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dcscmdcAclDestinationMask.setStatus("current")


class _DcscmdcAclPermitOrDeny_Type(Integer32):
    """Custom type dcscmdcAclPermitOrDeny based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("deny", 0),
          ("permit", 1),
          ("deltheAcl", 2))
    )


_DcscmdcAclPermitOrDeny_Type.__name__ = "Integer32"
_DcscmdcAclPermitOrDeny_Object = MibTableColumn
dcscmdcAclPermitOrDeny = _DcscmdcAclPermitOrDeny_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 2, 1, 7),
    _DcscmdcAclPermitOrDeny_Type()
)
dcscmdcAclPermitOrDeny.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscmdcAclPermitOrDeny.setStatus("current")
_DcscmVMacbindingTable_Object = MibTable
dcscmVMacbindingTable = _DcscmVMacbindingTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 3)
)
if mibBuilder.loadTexts:
    dcscmVMacbindingTable.setStatus("current")
_DcscmVMacbindingEntry_Object = MibTableRow
dcscmVMacbindingEntry = _DcscmVMacbindingEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 3, 1)
)
dcscmVMacbindingEntry.setIndexNames(
    (0, "NAG-MIB", "dcscmVMacbindingVlanid"),
    (0, "NAG-MIB", "dcscmVMacbindingMacAddr"),
)
if mibBuilder.loadTexts:
    dcscmVMacbindingEntry.setStatus("current")


class _DcscmVMacbindingVlanid_Type(Integer32):
    """Custom type dcscmVMacbindingVlanid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_DcscmVMacbindingVlanid_Type.__name__ = "Integer32"
_DcscmVMacbindingVlanid_Object = MibTableColumn
dcscmVMacbindingVlanid = _DcscmVMacbindingVlanid_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 3, 1, 1),
    _DcscmVMacbindingVlanid_Type()
)
dcscmVMacbindingVlanid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcscmVMacbindingVlanid.setStatus("current")


class _DcscmVMacbindingMacAddr_Type(MacAddress):
    """Custom type dcscmVMacbindingMacAddr based on MacAddress"""
    subtypeSpec = MacAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_DcscmVMacbindingMacAddr_Type.__name__ = "MacAddress"
_DcscmVMacbindingMacAddr_Object = MibTableColumn
dcscmVMacbindingMacAddr = _DcscmVMacbindingMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 3, 1, 2),
    _DcscmVMacbindingMacAddr_Type()
)
dcscmVMacbindingMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcscmVMacbindingMacAddr.setStatus("current")


class _DcscmVMacbindingAclNumber_Type(Integer32):
    """Custom type dcscmVMacbindingAclNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(6000, 7999),
    )


_DcscmVMacbindingAclNumber_Type.__name__ = "Integer32"
_DcscmVMacbindingAclNumber_Object = MibTableColumn
dcscmVMacbindingAclNumber = _DcscmVMacbindingAclNumber_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 3, 1, 3),
    _DcscmVMacbindingAclNumber_Type()
)
dcscmVMacbindingAclNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscmVMacbindingAclNumber.setStatus("current")
_DcscmSipbindingTable_Object = MibTable
dcscmSipbindingTable = _DcscmSipbindingTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 4)
)
if mibBuilder.loadTexts:
    dcscmSipbindingTable.setStatus("current")
_DcscmSipbindingEntry_Object = MibTableRow
dcscmSipbindingEntry = _DcscmSipbindingEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 4, 1)
)
dcscmSipbindingEntry.setIndexNames(
    (0, "NAG-MIB", "dcscmSipbindingSipAddress"),
    (0, "NAG-MIB", "dcscmSipbindingSipMask"),
)
if mibBuilder.loadTexts:
    dcscmSipbindingEntry.setStatus("current")
_DcscmSipbindingSipAddress_Type = IpAddress
_DcscmSipbindingSipAddress_Object = MibTableColumn
dcscmSipbindingSipAddress = _DcscmSipbindingSipAddress_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 4, 1, 1),
    _DcscmSipbindingSipAddress_Type()
)
dcscmSipbindingSipAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcscmSipbindingSipAddress.setStatus("current")
_DcscmSipbindingSipMask_Type = Integer32
_DcscmSipbindingSipMask_Object = MibTableColumn
dcscmSipbindingSipMask = _DcscmSipbindingSipMask_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 4, 1, 2),
    _DcscmSipbindingSipMask_Type()
)
dcscmSipbindingSipMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcscmSipbindingSipMask.setStatus("current")


class _DcscmSipbindingAclNumber_Type(Integer32):
    """Custom type dcscmSipbindingAclNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(6000, 7999),
    )


_DcscmSipbindingAclNumber_Type.__name__ = "Integer32"
_DcscmSipbindingAclNumber_Object = MibTableColumn
dcscmSipbindingAclNumber = _DcscmSipbindingAclNumber_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 4, 1, 3),
    _DcscmSipbindingAclNumber_Type()
)
dcscmSipbindingAclNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscmSipbindingAclNumber.setStatus("current")
_DcscmdcPortbindingTable_Object = MibTable
dcscmdcPortbindingTable = _DcscmdcPortbindingTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 5)
)
if mibBuilder.loadTexts:
    dcscmdcPortbindingTable.setStatus("current")
_DcscmdcPortbindingEntry_Object = MibTableRow
dcscmdcPortbindingEntry = _DcscmdcPortbindingEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 5, 1)
)
dcscmdcPortbindingEntry.setIndexNames(
    (0, "NAG-MIB", "dcscmdcPortbindingPortName"),
)
if mibBuilder.loadTexts:
    dcscmdcPortbindingEntry.setStatus("current")
_DcscmdcPortbindingPortName_Type = Integer32
_DcscmdcPortbindingPortName_Object = MibTableColumn
dcscmdcPortbindingPortName = _DcscmdcPortbindingPortName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 5, 1, 1),
    _DcscmdcPortbindingPortName_Type()
)
dcscmdcPortbindingPortName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcscmdcPortbindingPortName.setStatus("current")


class _DcscmdcPortbindingAclNumber_Type(Integer32):
    """Custom type dcscmdcPortbindingAclNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(6000, 7999),
    )


_DcscmdcPortbindingAclNumber_Type.__name__ = "Integer32"
_DcscmdcPortbindingAclNumber_Object = MibTableColumn
dcscmdcPortbindingAclNumber = _DcscmdcPortbindingAclNumber_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 5, 1, 2),
    _DcscmdcPortbindingAclNumber_Type()
)
dcscmdcPortbindingAclNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscmdcPortbindingAclNumber.setStatus("current")


class _DcscmscEnable_Type(Integer32):
    """Custom type dcscmscEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_DcscmscEnable_Type.__name__ = "Integer32"
_DcscmscEnable_Object = MibScalar
dcscmscEnable = _DcscmscEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 6),
    _DcscmscEnable_Type()
)
dcscmscEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscmscEnable.setStatus("current")
_DcscmscAclTable_Object = MibTable
dcscmscAclTable = _DcscmscAclTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7)
)
if mibBuilder.loadTexts:
    dcscmscAclTable.setStatus("current")
_DcscmscAclEntry_Object = MibTableRow
dcscmscAclEntry = _DcscmscAclEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7, 1)
)
dcscmscAclEntry.setIndexNames(
    (0, "NAG-MIB", "dcscmscAclNumber"),
    (0, "NAG-MIB", "dcscmscAclSubNumber"),
)
if mibBuilder.loadTexts:
    dcscmscAclEntry.setStatus("current")


class _DcscmscAclNumber_Type(Integer32):
    """Custom type dcscmscAclNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5000, 5099),
    )


_DcscmscAclNumber_Type.__name__ = "Integer32"
_DcscmscAclNumber_Object = MibTableColumn
dcscmscAclNumber = _DcscmscAclNumber_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7, 1, 1),
    _DcscmscAclNumber_Type()
)
dcscmscAclNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscmscAclNumber.setStatus("current")


class _DcscmscAclSubNumber_Type(Integer32):
    """Custom type dcscmscAclSubNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1024),
    )


_DcscmscAclSubNumber_Type.__name__ = "Integer32"
_DcscmscAclSubNumber_Object = MibTableColumn
dcscmscAclSubNumber = _DcscmscAclSubNumber_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7, 1, 2),
    _DcscmscAclSubNumber_Type()
)
dcscmscAclSubNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscmscAclSubNumber.setStatus("current")
_DcscmscAclSourceIp_Type = IpAddress
_DcscmscAclSourceIp_Object = MibTableColumn
dcscmscAclSourceIp = _DcscmscAclSourceIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7, 1, 3),
    _DcscmscAclSourceIp_Type()
)
dcscmscAclSourceIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscmscAclSourceIp.setStatus("current")
_DcscmscAclSourceMask_Type = IpAddress
_DcscmscAclSourceMask_Object = MibTableColumn
dcscmscAclSourceMask = _DcscmscAclSourceMask_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7, 1, 4),
    _DcscmscAclSourceMask_Type()
)
dcscmscAclSourceMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscmscAclSourceMask.setStatus("current")
_DcscmscAclDestinationIp_Type = IpAddress
_DcscmscAclDestinationIp_Object = MibTableColumn
dcscmscAclDestinationIp = _DcscmscAclDestinationIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7, 1, 5),
    _DcscmscAclDestinationIp_Type()
)
dcscmscAclDestinationIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscmscAclDestinationIp.setStatus("current")
_DcscmscAclDestinationMask_Type = IpAddress
_DcscmscAclDestinationMask_Object = MibTableColumn
dcscmscAclDestinationMask = _DcscmscAclDestinationMask_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7, 1, 6),
    _DcscmscAclDestinationMask_Type()
)
dcscmscAclDestinationMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscmscAclDestinationMask.setStatus("current")


class _DcscmscAclPermitOrDeny_Type(Integer32):
    """Custom type dcscmscAclPermitOrDeny based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("deny", 0),
          ("permit", 1),
          ("deltheAcl", 2))
    )


_DcscmscAclPermitOrDeny_Type.__name__ = "Integer32"
_DcscmscAclPermitOrDeny_Object = MibTableColumn
dcscmscAclPermitOrDeny = _DcscmscAclPermitOrDeny_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 7, 1, 7),
    _DcscmscAclPermitOrDeny_Type()
)
dcscmscAclPermitOrDeny.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscmscAclPermitOrDeny.setStatus("current")
_DcscmscPortbindingTable_Object = MibTable
dcscmscPortbindingTable = _DcscmscPortbindingTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 8)
)
if mibBuilder.loadTexts:
    dcscmscPortbindingTable.setStatus("current")
_DcscmscPortbindingEntry_Object = MibTableRow
dcscmscPortbindingEntry = _DcscmscPortbindingEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 8, 1)
)
dcscmscPortbindingEntry.setIndexNames(
    (0, "NAG-MIB", "dcscmscPortbindingPortName"),
)
if mibBuilder.loadTexts:
    dcscmscPortbindingEntry.setStatus("current")
_DcscmscPortbindingPortName_Type = Integer32
_DcscmscPortbindingPortName_Object = MibTableColumn
dcscmscPortbindingPortName = _DcscmscPortbindingPortName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 8, 1, 1),
    _DcscmscPortbindingPortName_Type()
)
dcscmscPortbindingPortName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcscmscPortbindingPortName.setStatus("current")


class _DcscmscPortbindingAclNumber_Type(Integer32):
    """Custom type dcscmscPortbindingAclNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(5000, 5099),
    )


_DcscmscPortbindingAclNumber_Type.__name__ = "Integer32"
_DcscmscPortbindingAclNumber_Object = MibTableColumn
dcscmscPortbindingAclNumber = _DcscmscPortbindingAclNumber_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 8, 1, 2),
    _DcscmscPortbindingAclNumber_Type()
)
dcscmscPortbindingAclNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscmscPortbindingAclNumber.setStatus("current")
_DcscmpcTable_Object = MibTable
dcscmpcTable = _DcscmpcTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 9)
)
if mibBuilder.loadTexts:
    dcscmpcTable.setStatus("current")
_DcscmpcEntry_Object = MibTableRow
dcscmpcEntry = _DcscmpcEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 9, 1)
)
dcscmpcEntry.setIndexNames(
    (0, "NAG-MIB", "dcscmpcSourceIp"),
    (0, "NAG-MIB", "dcscmpcSourceMasklen"),
    (0, "NAG-MIB", "dcscmpcDestinationIp"),
    (0, "NAG-MIB", "dcscmpcDestinationMasklen"),
)
if mibBuilder.loadTexts:
    dcscmpcEntry.setStatus("current")
_DcscmpcSourceIp_Type = IpAddress
_DcscmpcSourceIp_Object = MibTableColumn
dcscmpcSourceIp = _DcscmpcSourceIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 9, 1, 1),
    _DcscmpcSourceIp_Type()
)
dcscmpcSourceIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcscmpcSourceIp.setStatus("current")
_DcscmpcSourceMasklen_Type = Integer32
_DcscmpcSourceMasklen_Object = MibTableColumn
dcscmpcSourceMasklen = _DcscmpcSourceMasklen_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 9, 1, 2),
    _DcscmpcSourceMasklen_Type()
)
dcscmpcSourceMasklen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcscmpcSourceMasklen.setStatus("current")
_DcscmpcDestinationIp_Type = IpAddress
_DcscmpcDestinationIp_Object = MibTableColumn
dcscmpcDestinationIp = _DcscmpcDestinationIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 9, 1, 3),
    _DcscmpcDestinationIp_Type()
)
dcscmpcDestinationIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcscmpcDestinationIp.setStatus("current")
_DcscmpcDestinationMasklen_Type = Integer32
_DcscmpcDestinationMasklen_Object = MibTableColumn
dcscmpcDestinationMasklen = _DcscmpcDestinationMasklen_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 9, 1, 4),
    _DcscmpcDestinationMasklen_Type()
)
dcscmpcDestinationMasklen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcscmpcDestinationMasklen.setStatus("current")


class _Dcscmpccos_Type(Integer32):
    """Custom type dcscmpccos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8),
    )


_Dcscmpccos_Type.__name__ = "Integer32"
_Dcscmpccos_Object = MibTableColumn
dcscmpccos = _Dcscmpccos_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 20, 9, 1, 5),
    _Dcscmpccos_Type()
)
dcscmpccos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscmpccos.setStatus("current")
_Dcscm6_ObjectIdentity = ObjectIdentity
dcscm6 = _Dcscm6_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21)
)


class _Dcscm6dcEnable_Type(Integer32):
    """Custom type dcscm6dcEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Dcscm6dcEnable_Type.__name__ = "Integer32"
_Dcscm6dcEnable_Object = MibScalar
dcscm6dcEnable = _Dcscm6dcEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 1),
    _Dcscm6dcEnable_Type()
)
dcscm6dcEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscm6dcEnable.setStatus("current")
_Dcscm6dcAcl_ObjectIdentity = ObjectIdentity
dcscm6dcAcl = _Dcscm6dcAcl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 2)
)


class _Dcscm6dcAclNumber_Type(Integer32):
    """Custom type dcscm6dcAclNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(9000, 10999),
    )


_Dcscm6dcAclNumber_Type.__name__ = "Integer32"
_Dcscm6dcAclNumber_Object = MibScalar
dcscm6dcAclNumber = _Dcscm6dcAclNumber_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 2, 1),
    _Dcscm6dcAclNumber_Type()
)
dcscm6dcAclNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscm6dcAclNumber.setStatus("current")
_Dcscm6dcAclSourceIp_Type = Ipv6Address
_Dcscm6dcAclSourceIp_Object = MibScalar
dcscm6dcAclSourceIp = _Dcscm6dcAclSourceIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 2, 2),
    _Dcscm6dcAclSourceIp_Type()
)
dcscm6dcAclSourceIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscm6dcAclSourceIp.setStatus("current")


class _Dcscm6dcAclSourceMask_Type(Integer32):
    """Custom type dcscm6dcAclSourceMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_Dcscm6dcAclSourceMask_Type.__name__ = "Integer32"
_Dcscm6dcAclSourceMask_Object = MibScalar
dcscm6dcAclSourceMask = _Dcscm6dcAclSourceMask_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 2, 3),
    _Dcscm6dcAclSourceMask_Type()
)
dcscm6dcAclSourceMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscm6dcAclSourceMask.setStatus("current")
_Dcscm6dcAclDestinationIp_Type = Ipv6Address
_Dcscm6dcAclDestinationIp_Object = MibScalar
dcscm6dcAclDestinationIp = _Dcscm6dcAclDestinationIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 2, 4),
    _Dcscm6dcAclDestinationIp_Type()
)
dcscm6dcAclDestinationIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscm6dcAclDestinationIp.setStatus("current")


class _Dcscm6dcAclDestinationMask_Type(Integer32):
    """Custom type dcscm6dcAclDestinationMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(8, 128),
    )


_Dcscm6dcAclDestinationMask_Type.__name__ = "Integer32"
_Dcscm6dcAclDestinationMask_Object = MibScalar
dcscm6dcAclDestinationMask = _Dcscm6dcAclDestinationMask_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 2, 5),
    _Dcscm6dcAclDestinationMask_Type()
)
dcscm6dcAclDestinationMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscm6dcAclDestinationMask.setStatus("current")


class _Dcscm6dcAclPermitOrDeny_Type(Integer32):
    """Custom type dcscm6dcAclPermitOrDeny based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("deny", 0),
          ("permit", 1),
          ("deltheAcl", 2))
    )


_Dcscm6dcAclPermitOrDeny_Type.__name__ = "Integer32"
_Dcscm6dcAclPermitOrDeny_Object = MibScalar
dcscm6dcAclPermitOrDeny = _Dcscm6dcAclPermitOrDeny_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 2, 6),
    _Dcscm6dcAclPermitOrDeny_Type()
)
dcscm6dcAclPermitOrDeny.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscm6dcAclPermitOrDeny.setStatus("current")
_Dcscm6VMacbindingTable_Object = MibTable
dcscm6VMacbindingTable = _Dcscm6VMacbindingTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 3)
)
if mibBuilder.loadTexts:
    dcscm6VMacbindingTable.setStatus("current")
_Dcscm6VMacbindingEntry_Object = MibTableRow
dcscm6VMacbindingEntry = _Dcscm6VMacbindingEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 3, 1)
)
dcscm6VMacbindingEntry.setIndexNames(
    (0, "NAG-MIB", "dcscm6VMacbindingVlanid"),
    (0, "NAG-MIB", "dcscm6VMacbindingMacAddr"),
)
if mibBuilder.loadTexts:
    dcscm6VMacbindingEntry.setStatus("current")


class _Dcscm6VMacbindingVlanid_Type(Integer32):
    """Custom type dcscm6VMacbindingVlanid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_Dcscm6VMacbindingVlanid_Type.__name__ = "Integer32"
_Dcscm6VMacbindingVlanid_Object = MibTableColumn
dcscm6VMacbindingVlanid = _Dcscm6VMacbindingVlanid_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 3, 1, 1),
    _Dcscm6VMacbindingVlanid_Type()
)
dcscm6VMacbindingVlanid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcscm6VMacbindingVlanid.setStatus("current")


class _Dcscm6VMacbindingMacAddr_Type(MacAddress):
    """Custom type dcscm6VMacbindingMacAddr based on MacAddress"""
    subtypeSpec = MacAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_Dcscm6VMacbindingMacAddr_Type.__name__ = "MacAddress"
_Dcscm6VMacbindingMacAddr_Object = MibTableColumn
dcscm6VMacbindingMacAddr = _Dcscm6VMacbindingMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 3, 1, 2),
    _Dcscm6VMacbindingMacAddr_Type()
)
dcscm6VMacbindingMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcscm6VMacbindingMacAddr.setStatus("current")


class _Dcscm6VMacbindingAclNumber_Type(Integer32):
    """Custom type dcscm6VMacbindingAclNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(9000, 10999),
    )


_Dcscm6VMacbindingAclNumber_Type.__name__ = "Integer32"
_Dcscm6VMacbindingAclNumber_Object = MibTableColumn
dcscm6VMacbindingAclNumber = _Dcscm6VMacbindingAclNumber_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 3, 1, 3),
    _Dcscm6VMacbindingAclNumber_Type()
)
dcscm6VMacbindingAclNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscm6VMacbindingAclNumber.setStatus("current")
_Dcscm6SipbindingTable_Object = MibTable
dcscm6SipbindingTable = _Dcscm6SipbindingTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 4)
)
if mibBuilder.loadTexts:
    dcscm6SipbindingTable.setStatus("current")
_Dcscm6SipbindingEntry_Object = MibTableRow
dcscm6SipbindingEntry = _Dcscm6SipbindingEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 4, 1)
)
dcscm6SipbindingEntry.setIndexNames(
    (0, "NAG-MIB", "dcscm6SipbindingSipAddress"),
    (0, "NAG-MIB", "dcscm6SipbindingSipMaskLen"),
)
if mibBuilder.loadTexts:
    dcscm6SipbindingEntry.setStatus("current")
_Dcscm6SipbindingSipAddress_Type = Ipv6Address
_Dcscm6SipbindingSipAddress_Object = MibTableColumn
dcscm6SipbindingSipAddress = _Dcscm6SipbindingSipAddress_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 4, 1, 1),
    _Dcscm6SipbindingSipAddress_Type()
)
dcscm6SipbindingSipAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcscm6SipbindingSipAddress.setStatus("current")


class _Dcscm6SipbindingSipMaskLen_Type(Integer32):
    """Custom type dcscm6SipbindingSipMaskLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_Dcscm6SipbindingSipMaskLen_Type.__name__ = "Integer32"
_Dcscm6SipbindingSipMaskLen_Object = MibTableColumn
dcscm6SipbindingSipMaskLen = _Dcscm6SipbindingSipMaskLen_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 4, 1, 2),
    _Dcscm6SipbindingSipMaskLen_Type()
)
dcscm6SipbindingSipMaskLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcscm6SipbindingSipMaskLen.setStatus("current")


class _Dcscm6SipbindingAclNumber_Type(Integer32):
    """Custom type dcscm6SipbindingAclNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(9000, 10999),
    )


_Dcscm6SipbindingAclNumber_Type.__name__ = "Integer32"
_Dcscm6SipbindingAclNumber_Object = MibTableColumn
dcscm6SipbindingAclNumber = _Dcscm6SipbindingAclNumber_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 4, 1, 3),
    _Dcscm6SipbindingAclNumber_Type()
)
dcscm6SipbindingAclNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscm6SipbindingAclNumber.setStatus("current")
_Dcscm6dcPortbindingTable_Object = MibTable
dcscm6dcPortbindingTable = _Dcscm6dcPortbindingTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 5)
)
if mibBuilder.loadTexts:
    dcscm6dcPortbindingTable.setStatus("current")
_Dcscm6dcPortbindingEntry_Object = MibTableRow
dcscm6dcPortbindingEntry = _Dcscm6dcPortbindingEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 5, 1)
)
dcscm6dcPortbindingEntry.setIndexNames(
    (0, "NAG-MIB", "dcscm6dcPortbindingPortName"),
)
if mibBuilder.loadTexts:
    dcscm6dcPortbindingEntry.setStatus("current")
_Dcscm6dcPortbindingPortName_Type = Integer32
_Dcscm6dcPortbindingPortName_Object = MibTableColumn
dcscm6dcPortbindingPortName = _Dcscm6dcPortbindingPortName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 5, 1, 1),
    _Dcscm6dcPortbindingPortName_Type()
)
dcscm6dcPortbindingPortName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcscm6dcPortbindingPortName.setStatus("current")


class _Dcscm6dcPortbindingAclNumber_Type(Integer32):
    """Custom type dcscm6dcPortbindingAclNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(9000, 10999),
    )


_Dcscm6dcPortbindingAclNumber_Type.__name__ = "Integer32"
_Dcscm6dcPortbindingAclNumber_Object = MibTableColumn
dcscm6dcPortbindingAclNumber = _Dcscm6dcPortbindingAclNumber_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 5, 1, 2),
    _Dcscm6dcPortbindingAclNumber_Type()
)
dcscm6dcPortbindingAclNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscm6dcPortbindingAclNumber.setStatus("current")


class _Dcscm6scEnable_Type(Integer32):
    """Custom type dcscm6scEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Dcscm6scEnable_Type.__name__ = "Integer32"
_Dcscm6scEnable_Object = MibScalar
dcscm6scEnable = _Dcscm6scEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 6),
    _Dcscm6scEnable_Type()
)
dcscm6scEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscm6scEnable.setStatus("current")
_Dcscm6scAcl_ObjectIdentity = ObjectIdentity
dcscm6scAcl = _Dcscm6scAcl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 7)
)


class _Dcscm6scAclNumber_Type(Integer32):
    """Custom type dcscm6scAclNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(8000, 8099),
    )


_Dcscm6scAclNumber_Type.__name__ = "Integer32"
_Dcscm6scAclNumber_Object = MibScalar
dcscm6scAclNumber = _Dcscm6scAclNumber_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 7, 1),
    _Dcscm6scAclNumber_Type()
)
dcscm6scAclNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscm6scAclNumber.setStatus("current")
_Dcscm6scAclSourceIp_Type = Ipv6Address
_Dcscm6scAclSourceIp_Object = MibScalar
dcscm6scAclSourceIp = _Dcscm6scAclSourceIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 7, 2),
    _Dcscm6scAclSourceIp_Type()
)
dcscm6scAclSourceIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscm6scAclSourceIp.setStatus("current")


class _Dcscm6scAclSourceMask_Type(Integer32):
    """Custom type dcscm6scAclSourceMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_Dcscm6scAclSourceMask_Type.__name__ = "Integer32"
_Dcscm6scAclSourceMask_Object = MibScalar
dcscm6scAclSourceMask = _Dcscm6scAclSourceMask_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 7, 3),
    _Dcscm6scAclSourceMask_Type()
)
dcscm6scAclSourceMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscm6scAclSourceMask.setStatus("current")
_Dcscm6scAclDestinationIp_Type = Ipv6Address
_Dcscm6scAclDestinationIp_Object = MibScalar
dcscm6scAclDestinationIp = _Dcscm6scAclDestinationIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 7, 4),
    _Dcscm6scAclDestinationIp_Type()
)
dcscm6scAclDestinationIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscm6scAclDestinationIp.setStatus("current")


class _Dcscm6scAclDestinationMask_Type(Integer32):
    """Custom type dcscm6scAclDestinationMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(8, 128),
    )


_Dcscm6scAclDestinationMask_Type.__name__ = "Integer32"
_Dcscm6scAclDestinationMask_Object = MibScalar
dcscm6scAclDestinationMask = _Dcscm6scAclDestinationMask_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 7, 5),
    _Dcscm6scAclDestinationMask_Type()
)
dcscm6scAclDestinationMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscm6scAclDestinationMask.setStatus("current")


class _Dcscm6scAclPermitOrDeny_Type(Integer32):
    """Custom type dcscm6scAclPermitOrDeny based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("deny", 0),
          ("permit", 1),
          ("deltheAcl", 2))
    )


_Dcscm6scAclPermitOrDeny_Type.__name__ = "Integer32"
_Dcscm6scAclPermitOrDeny_Object = MibScalar
dcscm6scAclPermitOrDeny = _Dcscm6scAclPermitOrDeny_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 7, 6),
    _Dcscm6scAclPermitOrDeny_Type()
)
dcscm6scAclPermitOrDeny.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscm6scAclPermitOrDeny.setStatus("current")
_Dcscm6scPortbindingTable_Object = MibTable
dcscm6scPortbindingTable = _Dcscm6scPortbindingTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 8)
)
if mibBuilder.loadTexts:
    dcscm6scPortbindingTable.setStatus("current")
_Dcscm6scPortbindingEntry_Object = MibTableRow
dcscm6scPortbindingEntry = _Dcscm6scPortbindingEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 8, 1)
)
dcscm6scPortbindingEntry.setIndexNames(
    (0, "NAG-MIB", "dcscm6scPortbindingPortName"),
)
if mibBuilder.loadTexts:
    dcscm6scPortbindingEntry.setStatus("current")
_Dcscm6scPortbindingPortName_Type = Integer32
_Dcscm6scPortbindingPortName_Object = MibTableColumn
dcscm6scPortbindingPortName = _Dcscm6scPortbindingPortName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 8, 1, 1),
    _Dcscm6scPortbindingPortName_Type()
)
dcscm6scPortbindingPortName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcscm6scPortbindingPortName.setStatus("current")


class _Dcscm6scPortbindingAclNumber_Type(Integer32):
    """Custom type dcscm6scPortbindingAclNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(8000, 8099),
    )


_Dcscm6scPortbindingAclNumber_Type.__name__ = "Integer32"
_Dcscm6scPortbindingAclNumber_Object = MibTableColumn
dcscm6scPortbindingAclNumber = _Dcscm6scPortbindingAclNumber_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 8, 1, 2),
    _Dcscm6scPortbindingAclNumber_Type()
)
dcscm6scPortbindingAclNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscm6scPortbindingAclNumber.setStatus("current")
_Dcscm6pcTable_Object = MibTable
dcscm6pcTable = _Dcscm6pcTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 9)
)
if mibBuilder.loadTexts:
    dcscm6pcTable.setStatus("current")
_Dcscm6pcEntry_Object = MibTableRow
dcscm6pcEntry = _Dcscm6pcEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 9, 1)
)
dcscm6pcEntry.setIndexNames(
    (0, "NAG-MIB", "dcscm6pcSourceIp"),
    (0, "NAG-MIB", "dcscm6pcSourceMask"),
    (0, "NAG-MIB", "dcscm6pcDestinationIp"),
    (0, "NAG-MIB", "dcscm6pcDestinationMask"),
)
if mibBuilder.loadTexts:
    dcscm6pcEntry.setStatus("current")
_Dcscm6pcSourceIp_Type = Ipv6Address
_Dcscm6pcSourceIp_Object = MibTableColumn
dcscm6pcSourceIp = _Dcscm6pcSourceIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 9, 1, 1),
    _Dcscm6pcSourceIp_Type()
)
dcscm6pcSourceIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcscm6pcSourceIp.setStatus("current")


class _Dcscm6pcSourceMask_Type(Integer32):
    """Custom type dcscm6pcSourceMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_Dcscm6pcSourceMask_Type.__name__ = "Integer32"
_Dcscm6pcSourceMask_Object = MibTableColumn
dcscm6pcSourceMask = _Dcscm6pcSourceMask_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 9, 1, 2),
    _Dcscm6pcSourceMask_Type()
)
dcscm6pcSourceMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcscm6pcSourceMask.setStatus("current")
_Dcscm6pcDestinationIp_Type = Ipv6Address
_Dcscm6pcDestinationIp_Object = MibTableColumn
dcscm6pcDestinationIp = _Dcscm6pcDestinationIp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 9, 1, 3),
    _Dcscm6pcDestinationIp_Type()
)
dcscm6pcDestinationIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcscm6pcDestinationIp.setStatus("current")


class _Dcscm6pcDestinationMask_Type(Integer32):
    """Custom type dcscm6pcDestinationMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(8, 128),
    )


_Dcscm6pcDestinationMask_Type.__name__ = "Integer32"
_Dcscm6pcDestinationMask_Object = MibTableColumn
dcscm6pcDestinationMask = _Dcscm6pcDestinationMask_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 9, 1, 4),
    _Dcscm6pcDestinationMask_Type()
)
dcscm6pcDestinationMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcscm6pcDestinationMask.setStatus("current")


class _Dcscm6pccos_Type(Integer32):
    """Custom type dcscm6pccos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8),
    )


_Dcscm6pccos_Type.__name__ = "Integer32"
_Dcscm6pccos_Object = MibTableColumn
dcscm6pccos = _Dcscm6pccos_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 21, 9, 1, 5),
    _Dcscm6pccos_Type()
)
dcscm6pccos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcscm6pccos.setStatus("current")
_PrClusterv2_ObjectIdentity = ObjectIdentity
prClusterv2 = _PrClusterv2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22)
)
_Clusterv2Base_ObjectIdentity = ObjectIdentity
clusterv2Base = _Clusterv2Base_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 1)
)


class _Clusterv2BaseKey_Type(OctetString):
    """Custom type clusterv2BaseKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_Clusterv2BaseKey_Type.__name__ = "OctetString"
_Clusterv2BaseKey_Object = MibScalar
clusterv2BaseKey = _Clusterv2BaseKey_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 1, 1),
    _Clusterv2BaseKey_Type()
)
clusterv2BaseKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clusterv2BaseKey.setStatus("current")


class _Clusterv2BaseVlan_Type(Integer32):
    """Custom type clusterv2BaseVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_Clusterv2BaseVlan_Type.__name__ = "Integer32"
_Clusterv2BaseVlan_Object = MibScalar
clusterv2BaseVlan = _Clusterv2BaseVlan_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 1, 2),
    _Clusterv2BaseVlan_Type()
)
clusterv2BaseVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clusterv2BaseVlan.setStatus("current")


class _Clusterv2BaseRun_Type(Integer32):
    """Custom type clusterv2BaseRun based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Clusterv2BaseRun_Type.__name__ = "Integer32"
_Clusterv2BaseRun_Object = MibScalar
clusterv2BaseRun = _Clusterv2BaseRun_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 1, 3),
    _Clusterv2BaseRun_Type()
)
clusterv2BaseRun.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clusterv2BaseRun.setStatus("current")


class _Clusterv2BaseRole_Type(Integer32):
    """Custom type clusterv2BaseRole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("candidateDevice", 1),
          ("memberDevice", 2),
          ("commanderDevice", 3),
          ("none", 255))
    )


_Clusterv2BaseRole_Type.__name__ = "Integer32"
_Clusterv2BaseRole_Object = MibScalar
clusterv2BaseRole = _Clusterv2BaseRole_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 1, 4),
    _Clusterv2BaseRole_Type()
)
clusterv2BaseRole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterv2BaseRole.setStatus("current")


class _Clusterv2BaseVersion_Type(OctetString):
    """Custom type clusterv2BaseVersion based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 10),
    )


_Clusterv2BaseVersion_Type.__name__ = "OctetString"
_Clusterv2BaseVersion_Object = MibScalar
clusterv2BaseVersion = _Clusterv2BaseVersion_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 1, 5),
    _Clusterv2BaseVersion_Type()
)
clusterv2BaseVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterv2BaseVersion.setStatus("current")
_Clusterv2BaseMaxNumberOfMembers_Type = Integer32
_Clusterv2BaseMaxNumberOfMembers_Object = MibScalar
clusterv2BaseMaxNumberOfMembers = _Clusterv2BaseMaxNumberOfMembers_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 1, 6),
    _Clusterv2BaseMaxNumberOfMembers_Type()
)
clusterv2BaseMaxNumberOfMembers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterv2BaseMaxNumberOfMembers.setStatus("current")
_Clusterv2BaseMaxNumberOfSwitches_Type = Integer32
_Clusterv2BaseMaxNumberOfSwitches_Object = MibScalar
clusterv2BaseMaxNumberOfSwitches = _Clusterv2BaseMaxNumberOfSwitches_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 1, 7),
    _Clusterv2BaseMaxNumberOfSwitches_Type()
)
clusterv2BaseMaxNumberOfSwitches.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterv2BaseMaxNumberOfSwitches.setStatus("current")
_Clusterv2Create_ObjectIdentity = ObjectIdentity
clusterv2Create = _Clusterv2Create_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 2)
)
_Clusterv2CreateIPPool_Type = IpAddress
_Clusterv2CreateIPPool_Object = MibScalar
clusterv2CreateIPPool = _Clusterv2CreateIPPool_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 2, 1),
    _Clusterv2CreateIPPool_Type()
)
clusterv2CreateIPPool.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clusterv2CreateIPPool.setStatus("current")


class _Clusterv2CreateName_Type(OctetString):
    """Custom type clusterv2CreateName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_Clusterv2CreateName_Type.__name__ = "OctetString"
_Clusterv2CreateName_Object = MibScalar
clusterv2CreateName = _Clusterv2CreateName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 2, 2),
    _Clusterv2CreateName_Type()
)
clusterv2CreateName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clusterv2CreateName.setStatus("current")


class _Clusterv2CreateCmdrOperate_Type(Integer32):
    """Custom type clusterv2CreateCmdrOperate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("destroy", 0),
          ("create", 1))
    )


_Clusterv2CreateCmdrOperate_Type.__name__ = "Integer32"
_Clusterv2CreateCmdrOperate_Object = MibScalar
clusterv2CreateCmdrOperate = _Clusterv2CreateCmdrOperate_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 2, 3),
    _Clusterv2CreateCmdrOperate_Type()
)
clusterv2CreateCmdrOperate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clusterv2CreateCmdrOperate.setStatus("current")
_Clusterv2Status_ObjectIdentity = ObjectIdentity
clusterv2Status = _Clusterv2Status_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 3)
)


class _Clusterv2StatusClusterName_Type(OctetString):
    """Custom type clusterv2StatusClusterName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_Clusterv2StatusClusterName_Type.__name__ = "OctetString"
_Clusterv2StatusClusterName_Object = MibScalar
clusterv2StatusClusterName = _Clusterv2StatusClusterName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 3, 1),
    _Clusterv2StatusClusterName_Type()
)
clusterv2StatusClusterName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clusterv2StatusClusterName.setStatus("current")


class _Clusterv2StatusKeepalive_Type(Integer32):
    """Custom type clusterv2StatusKeepalive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 30),
    )


_Clusterv2StatusKeepalive_Type.__name__ = "Integer32"
_Clusterv2StatusKeepalive_Object = MibScalar
clusterv2StatusKeepalive = _Clusterv2StatusKeepalive_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 3, 2),
    _Clusterv2StatusKeepalive_Type()
)
clusterv2StatusKeepalive.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clusterv2StatusKeepalive.setStatus("current")


class _Clusterv2StatusLoss_count_Type(Integer32):
    """Custom type clusterv2StatusLoss_count based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_Clusterv2StatusLoss_count_Type.__name__ = "Integer32"
_Clusterv2StatusLoss_count_Object = MibScalar
clusterv2StatusLoss_count = _Clusterv2StatusLoss_count_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 3, 3),
    _Clusterv2StatusLoss_count_Type()
)
clusterv2StatusLoss_count.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clusterv2StatusLoss_count.setStatus("current")
_Clusterv2Commander_ObjectIdentity = ObjectIdentity
clusterv2Commander = _Clusterv2Commander_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4)
)


class _Clusterv2CommanderAutoAddMem_Type(Integer32):
    """Custom type clusterv2CommanderAutoAddMem based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Clusterv2CommanderAutoAddMem_Type.__name__ = "Integer32"
_Clusterv2CommanderAutoAddMem_Object = MibScalar
clusterv2CommanderAutoAddMem = _Clusterv2CommanderAutoAddMem_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 1),
    _Clusterv2CommanderAutoAddMem_Type()
)
clusterv2CommanderAutoAddMem.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clusterv2CommanderAutoAddMem.setStatus("current")
_Clusterv2MemberCounter_Type = Counter32
_Clusterv2MemberCounter_Object = MibScalar
clusterv2MemberCounter = _Clusterv2MemberCounter_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 2),
    _Clusterv2MemberCounter_Type()
)
clusterv2MemberCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterv2MemberCounter.setStatus("current")
_Clusterv2MemberTable_Object = MibTable
clusterv2MemberTable = _Clusterv2MemberTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 3)
)
if mibBuilder.loadTexts:
    clusterv2MemberTable.setStatus("current")
_Clusterv2MemberEntry_Object = MibTableRow
clusterv2MemberEntry = _Clusterv2MemberEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 3, 1)
)
clusterv2MemberEntry.setIndexNames(
    (0, "NAG-MIB", "clusterv2MemberNumber"),
)
if mibBuilder.loadTexts:
    clusterv2MemberEntry.setStatus("current")
_Clusterv2MemberNumber_Type = Integer32
_Clusterv2MemberNumber_Object = MibTableColumn
clusterv2MemberNumber = _Clusterv2MemberNumber_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 3, 1, 1),
    _Clusterv2MemberNumber_Type()
)
clusterv2MemberNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterv2MemberNumber.setStatus("current")
_Clusterv2MemberIpAddress_Type = IpAddress
_Clusterv2MemberIpAddress_Object = MibTableColumn
clusterv2MemberIpAddress = _Clusterv2MemberIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 3, 1, 2),
    _Clusterv2MemberIpAddress_Type()
)
clusterv2MemberIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterv2MemberIpAddress.setStatus("current")


class _Clusterv2MemberOperStatus_Type(Integer32):
    """Custom type clusterv2MemberOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notMember", 1),
          ("inactiveMember", 2),
          ("memberTobe", 3),
          ("activeMember", 4))
    )


_Clusterv2MemberOperStatus_Type.__name__ = "Integer32"
_Clusterv2MemberOperStatus_Object = MibTableColumn
clusterv2MemberOperStatus = _Clusterv2MemberOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 3, 1, 3),
    _Clusterv2MemberOperStatus_Type()
)
clusterv2MemberOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterv2MemberOperStatus.setStatus("current")


class _Clusterv2MemberMacAddress_Type(MacAddress):
    """Custom type clusterv2MemberMacAddress based on MacAddress"""
    subtypeSpec = MacAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_Clusterv2MemberMacAddress_Type.__name__ = "MacAddress"
_Clusterv2MemberMacAddress_Object = MibTableColumn
clusterv2MemberMacAddress = _Clusterv2MemberMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 3, 1, 4),
    _Clusterv2MemberMacAddress_Type()
)
clusterv2MemberMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterv2MemberMacAddress.setStatus("current")


class _Clusterv2MemberHostName_Type(OctetString):
    """Custom type clusterv2MemberHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_Clusterv2MemberHostName_Type.__name__ = "OctetString"
_Clusterv2MemberHostName_Object = MibTableColumn
clusterv2MemberHostName = _Clusterv2MemberHostName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 3, 1, 5),
    _Clusterv2MemberHostName_Type()
)
clusterv2MemberHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterv2MemberHostName.setStatus("current")


class _Clusterv2MemberDeviceType_Type(OctetString):
    """Custom type clusterv2MemberDeviceType based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_Clusterv2MemberDeviceType_Type.__name__ = "OctetString"
_Clusterv2MemberDeviceType_Object = MibTableColumn
clusterv2MemberDeviceType = _Clusterv2MemberDeviceType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 3, 1, 6),
    _Clusterv2MemberDeviceType_Type()
)
clusterv2MemberDeviceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterv2MemberDeviceType.setStatus("current")
_Clusterv2CandidateCounter_Type = Counter32
_Clusterv2CandidateCounter_Object = MibScalar
clusterv2CandidateCounter = _Clusterv2CandidateCounter_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 4),
    _Clusterv2CandidateCounter_Type()
)
clusterv2CandidateCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterv2CandidateCounter.setStatus("current")
_Clusterv2CandidateTable_Object = MibTable
clusterv2CandidateTable = _Clusterv2CandidateTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 5)
)
if mibBuilder.loadTexts:
    clusterv2CandidateTable.setStatus("current")
_Clusterv2CandidateEntry_Object = MibTableRow
clusterv2CandidateEntry = _Clusterv2CandidateEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 5, 1)
)
clusterv2CandidateEntry.setIndexNames(
    (0, "NAG-MIB", "clusterv2CandidateId"),
)
if mibBuilder.loadTexts:
    clusterv2CandidateEntry.setStatus("current")
_Clusterv2CandidateId_Type = Integer32
_Clusterv2CandidateId_Object = MibTableColumn
clusterv2CandidateId = _Clusterv2CandidateId_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 5, 1, 1),
    _Clusterv2CandidateId_Type()
)
clusterv2CandidateId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterv2CandidateId.setStatus("current")


class _Clusterv2CandidateMacAddress_Type(MacAddress):
    """Custom type clusterv2CandidateMacAddress based on MacAddress"""
    subtypeSpec = MacAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_Clusterv2CandidateMacAddress_Type.__name__ = "MacAddress"
_Clusterv2CandidateMacAddress_Object = MibTableColumn
clusterv2CandidateMacAddress = _Clusterv2CandidateMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 5, 1, 2),
    _Clusterv2CandidateMacAddress_Type()
)
clusterv2CandidateMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterv2CandidateMacAddress.setStatus("current")


class _Clusterv2CandidateHostName_Type(OctetString):
    """Custom type clusterv2CandidateHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_Clusterv2CandidateHostName_Type.__name__ = "OctetString"
_Clusterv2CandidateHostName_Object = MibTableColumn
clusterv2CandidateHostName = _Clusterv2CandidateHostName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 5, 1, 3),
    _Clusterv2CandidateHostName_Type()
)
clusterv2CandidateHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterv2CandidateHostName.setStatus("current")


class _Clusterv2CandidateDeviceType_Type(OctetString):
    """Custom type clusterv2CandidateDeviceType based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_Clusterv2CandidateDeviceType_Type.__name__ = "OctetString"
_Clusterv2CandidateDeviceType_Object = MibTableColumn
clusterv2CandidateDeviceType = _Clusterv2CandidateDeviceType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 5, 1, 4),
    _Clusterv2CandidateDeviceType_Type()
)
clusterv2CandidateDeviceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clusterv2CandidateDeviceType.setStatus("current")


class _Clusterv2RebootMem_Type(OctetString):
    """Custom type clusterv2RebootMem based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 30),
    )


_Clusterv2RebootMem_Type.__name__ = "OctetString"
_Clusterv2RebootMem_Object = MibScalar
clusterv2RebootMem = _Clusterv2RebootMem_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 22, 4, 6),
    _Clusterv2RebootMem_Type()
)
clusterv2RebootMem.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clusterv2RebootMem.setStatus("current")
_Dns_ObjectIdentity = ObjectIdentity
dns = _Dns_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 23)
)


class _DnsEnable_Type(Integer32):
    """Custom type dnsEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_DnsEnable_Type.__name__ = "Integer32"
_DnsEnable_Object = MibScalar
dnsEnable = _DnsEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 1),
    _DnsEnable_Type()
)
dnsEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsEnable.setStatus("current")
_DnsServerTable_Object = MibTable
dnsServerTable = _DnsServerTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 2)
)
if mibBuilder.loadTexts:
    dnsServerTable.setStatus("current")
_DnsServerEntry_Object = MibTableRow
dnsServerEntry = _DnsServerEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 2, 1)
)
dnsServerEntry.setIndexNames(
    (0, "NAG-MIB", "dnsServerInetAddrType"),
    (0, "NAG-MIB", "dnsServerIpAddr"),
)
if mibBuilder.loadTexts:
    dnsServerEntry.setStatus("current")
_DnsServerInetAddrType_Type = InetAddressType
_DnsServerInetAddrType_Object = MibTableColumn
dnsServerInetAddrType = _DnsServerInetAddrType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 2, 1, 1),
    _DnsServerInetAddrType_Type()
)
dnsServerInetAddrType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dnsServerInetAddrType.setStatus("current")
_DnsServerIpAddr_Type = InetAddress
_DnsServerIpAddr_Object = MibTableColumn
dnsServerIpAddr = _DnsServerIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 2, 1, 2),
    _DnsServerIpAddr_Type()
)
dnsServerIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dnsServerIpAddr.setStatus("current")


class _DnsServerPriority_Type(Integer32):
    """Custom type dnsServerPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_DnsServerPriority_Type.__name__ = "Integer32"
_DnsServerPriority_Object = MibTableColumn
dnsServerPriority = _DnsServerPriority_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 2, 1, 3),
    _DnsServerPriority_Type()
)
dnsServerPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dnsServerPriority.setStatus("current")


class _DnsServerStatus_Type(Integer32):
    """Custom type dnsServerStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_DnsServerStatus_Type.__name__ = "Integer32"
_DnsServerStatus_Object = MibTableColumn
dnsServerStatus = _DnsServerStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 2, 1, 4),
    _DnsServerStatus_Type()
)
dnsServerStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dnsServerStatus.setStatus("current")
_DnsDomainSuffixTable_Object = MibTable
dnsDomainSuffixTable = _DnsDomainSuffixTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 3)
)
if mibBuilder.loadTexts:
    dnsDomainSuffixTable.setStatus("current")
_DnsDomainSuffixEntry_Object = MibTableRow
dnsDomainSuffixEntry = _DnsDomainSuffixEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 3, 1)
)
dnsDomainSuffixEntry.setIndexNames(
    (0, "NAG-MIB", "dnsDomainSuffix"),
)
if mibBuilder.loadTexts:
    dnsDomainSuffixEntry.setStatus("current")
_DnsDomainSuffix_Type = DisplayString
_DnsDomainSuffix_Object = MibTableColumn
dnsDomainSuffix = _DnsDomainSuffix_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 3, 1, 1),
    _DnsDomainSuffix_Type()
)
dnsDomainSuffix.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dnsDomainSuffix.setStatus("current")


class _DnsDomainSuffixStatus_Type(Integer32):
    """Custom type dnsDomainSuffixStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_DnsDomainSuffixStatus_Type.__name__ = "Integer32"
_DnsDomainSuffixStatus_Object = MibTableColumn
dnsDomainSuffixStatus = _DnsDomainSuffixStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 3, 1, 2),
    _DnsDomainSuffixStatus_Type()
)
dnsDomainSuffixStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dnsDomainSuffixStatus.setStatus("current")
_DnsDynHostTable_Object = MibTable
dnsDynHostTable = _DnsDynHostTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 4)
)
if mibBuilder.loadTexts:
    dnsDynHostTable.setStatus("current")
_DnsDynHostEntry_Object = MibTableRow
dnsDynHostEntry = _DnsDynHostEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 4, 1)
)
dnsDynHostEntry.setIndexNames(
    (0, "NAG-MIB", "dnsDynHostIndex"),
)
if mibBuilder.loadTexts:
    dnsDynHostEntry.setStatus("current")
_DnsDynHostIndex_Type = Integer32
_DnsDynHostIndex_Object = MibTableColumn
dnsDynHostIndex = _DnsDynHostIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 4, 1, 1),
    _DnsDynHostIndex_Type()
)
dnsDynHostIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dnsDynHostIndex.setStatus("current")
_DnsDynHostName_Type = DisplayString
_DnsDynHostName_Object = MibTableColumn
dnsDynHostName = _DnsDynHostName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 4, 1, 2),
    _DnsDynHostName_Type()
)
dnsDynHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dnsDynHostName.setStatus("current")
_DnsDynHostIpAddr_Type = InetAddress
_DnsDynHostIpAddr_Object = MibTableColumn
dnsDynHostIpAddr = _DnsDynHostIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 4, 1, 3),
    _DnsDynHostIpAddr_Type()
)
dnsDynHostIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dnsDynHostIpAddr.setStatus("current")
_DnsDynHostTtl_Type = Integer32
_DnsDynHostTtl_Object = MibTableColumn
dnsDynHostTtl = _DnsDynHostTtl_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 23, 4, 1, 4),
    _DnsDynHostTtl_Type()
)
dnsDynHostTtl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dnsDynHostTtl.setStatus("current")
_NtpSnmpMIB_ObjectIdentity = ObjectIdentity
ntpSnmpMIB = _NtpSnmpMIB_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25)
)
_NtpSnmpMIBObjects_ObjectIdentity = ObjectIdentity
ntpSnmpMIBObjects = _NtpSnmpMIBObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1)
)
_NtpEntInfo_ObjectIdentity = ObjectIdentity
ntpEntInfo = _NtpEntInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 1)
)
_NtpEntSoftwareName_Type = DisplayString
_NtpEntSoftwareName_Object = MibScalar
ntpEntSoftwareName = _NtpEntSoftwareName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 1, 1),
    _NtpEntSoftwareName_Type()
)
ntpEntSoftwareName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpEntSoftwareName.setStatus("current")
_NtpEntSoftwareVersion_Type = DisplayString
_NtpEntSoftwareVersion_Object = MibScalar
ntpEntSoftwareVersion = _NtpEntSoftwareVersion_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 1, 2),
    _NtpEntSoftwareVersion_Type()
)
ntpEntSoftwareVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpEntSoftwareVersion.setStatus("current")
_NtpEntSoftwareVendor_Type = DisplayString
_NtpEntSoftwareVendor_Object = MibScalar
ntpEntSoftwareVendor = _NtpEntSoftwareVendor_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 1, 4),
    _NtpEntSoftwareVendor_Type()
)
ntpEntSoftwareVendor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpEntSoftwareVendor.setStatus("current")
_NtpEntSystemType_Type = DisplayString
_NtpEntSystemType_Object = MibScalar
ntpEntSystemType = _NtpEntSystemType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 1, 5),
    _NtpEntSystemType_Type()
)
ntpEntSystemType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpEntSystemType.setStatus("current")
_NtpEntTimeResolution_Type = DisplayString
_NtpEntTimeResolution_Object = MibScalar
ntpEntTimeResolution = _NtpEntTimeResolution_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 1, 6),
    _NtpEntTimeResolution_Type()
)
ntpEntTimeResolution.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpEntTimeResolution.setStatus("current")
_NtpEntTimePrecision_Type = Integer32
_NtpEntTimePrecision_Object = MibScalar
ntpEntTimePrecision = _NtpEntTimePrecision_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 1, 9),
    _NtpEntTimePrecision_Type()
)
ntpEntTimePrecision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpEntTimePrecision.setStatus("current")
_NtpEntStatus_ObjectIdentity = ObjectIdentity
ntpEntStatus = _NtpEntStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2)
)
_NtpEntStatusCurrentMode_Type = DisplayString
_NtpEntStatusCurrentMode_Object = MibScalar
ntpEntStatusCurrentMode = _NtpEntStatusCurrentMode_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 1),
    _NtpEntStatusCurrentMode_Type()
)
ntpEntStatusCurrentMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpEntStatusCurrentMode.setStatus("current")


class _NtpEntStatusCurrentModeVal_Type(Integer32):
    """Custom type ntpEntStatusCurrentModeVal based on Integer32"""
    defaultValue = 99

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              99)
        )
    )
    namedValues = NamedValues(
        *(("notRunning", 1),
          ("notSynchronized", 2),
          ("noneConfigured", 3),
          ("syncToLocal", 4),
          ("syncToRefclock", 5),
          ("syncToRemoteServer", 6),
          ("unknown", 99))
    )


_NtpEntStatusCurrentModeVal_Type.__name__ = "Integer32"
_NtpEntStatusCurrentModeVal_Object = MibScalar
ntpEntStatusCurrentModeVal = _NtpEntStatusCurrentModeVal_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 2),
    _NtpEntStatusCurrentModeVal_Type()
)
ntpEntStatusCurrentModeVal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpEntStatusCurrentModeVal.setStatus("current")


class _NtpEntStatusStratum_Type(NtpStratum):
    """Custom type ntpEntStatusStratum based on NtpStratum"""
    defaultValue = 16


_NtpEntStatusStratum_Type.__name__ = "NtpStratum"
_NtpEntStatusStratum_Object = MibScalar
ntpEntStatusStratum = _NtpEntStatusStratum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 3),
    _NtpEntStatusStratum_Type()
)
ntpEntStatusStratum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpEntStatusStratum.setStatus("current")


class _NtpEntStatusActiveRefSourceId_Type(Unsigned32):
    """Custom type ntpEntStatusActiveRefSourceId based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_NtpEntStatusActiveRefSourceId_Type.__name__ = "Unsigned32"
_NtpEntStatusActiveRefSourceId_Object = MibScalar
ntpEntStatusActiveRefSourceId = _NtpEntStatusActiveRefSourceId_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 4),
    _NtpEntStatusActiveRefSourceId_Type()
)
ntpEntStatusActiveRefSourceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpEntStatusActiveRefSourceId.setStatus("current")
_NtpEntStatusActiveRefSourceName_Type = DisplayString
_NtpEntStatusActiveRefSourceName_Object = MibScalar
ntpEntStatusActiveRefSourceName = _NtpEntStatusActiveRefSourceName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 5),
    _NtpEntStatusActiveRefSourceName_Type()
)
ntpEntStatusActiveRefSourceName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpEntStatusActiveRefSourceName.setStatus("current")


class _NtpEntStatusNumberOfRefSources_Type(Unsigned32):
    """Custom type ntpEntStatusNumberOfRefSources based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_NtpEntStatusNumberOfRefSources_Type.__name__ = "Unsigned32"
_NtpEntStatusNumberOfRefSources_Object = MibScalar
ntpEntStatusNumberOfRefSources = _NtpEntStatusNumberOfRefSources_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 7),
    _NtpEntStatusNumberOfRefSources_Type()
)
ntpEntStatusNumberOfRefSources.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpEntStatusNumberOfRefSources.setStatus("current")
_NtpEntStatusDateTime_Type = NtpDateTime
_NtpEntStatusDateTime_Object = MibScalar
ntpEntStatusDateTime = _NtpEntStatusDateTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 10),
    _NtpEntStatusDateTime_Type()
)
ntpEntStatusDateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpEntStatusDateTime.setStatus("current")
_NtpEntStatusInPkts_Type = Counter32
_NtpEntStatusInPkts_Object = MibScalar
ntpEntStatusInPkts = _NtpEntStatusInPkts_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 13),
    _NtpEntStatusInPkts_Type()
)
ntpEntStatusInPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpEntStatusInPkts.setStatus("current")
_NtpEntStatusOutPkts_Type = Counter32
_NtpEntStatusOutPkts_Object = MibScalar
ntpEntStatusOutPkts = _NtpEntStatusOutPkts_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 14),
    _NtpEntStatusOutPkts_Type()
)
ntpEntStatusOutPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpEntStatusOutPkts.setStatus("current")
_NtpEntStatusBadVersion_Type = Counter32
_NtpEntStatusBadVersion_Object = MibScalar
ntpEntStatusBadVersion = _NtpEntStatusBadVersion_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 15),
    _NtpEntStatusBadVersion_Type()
)
ntpEntStatusBadVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpEntStatusBadVersion.setStatus("current")
_NtpEntStatusProtocolError_Type = Counter32
_NtpEntStatusProtocolError_Object = MibScalar
ntpEntStatusProtocolError = _NtpEntStatusProtocolError_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 1, 2, 16),
    _NtpEntStatusProtocolError_Type()
)
ntpEntStatusProtocolError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpEntStatusProtocolError.setStatus("current")
_NtpEntConformance_ObjectIdentity = ObjectIdentity
ntpEntConformance = _NtpEntConformance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 6)
)
_NtpEntCompliances_ObjectIdentity = ObjectIdentity
ntpEntCompliances = _NtpEntCompliances_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 6, 1)
)
_NtpEntGroups_ObjectIdentity = ObjectIdentity
ntpEntGroups = _NtpEntGroups_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 6, 2)
)
_PriPoeConfig_ObjectIdentity = ObjectIdentity
priPoeConfig = _PriPoeConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 26)
)


class _PoeSystemEnable_Type(Integer32):
    """Custom type poeSystemEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_PoeSystemEnable_Type.__name__ = "Integer32"
_PoeSystemEnable_Object = MibScalar
poeSystemEnable = _PoeSystemEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 1),
    _PoeSystemEnable_Type()
)
poeSystemEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    poeSystemEnable.setStatus("current")


class _PoeMaxPower_Type(Integer32):
    """Custom type poeMaxPower based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(37, 776),
    )


_PoeMaxPower_Type.__name__ = "Integer32"
_PoeMaxPower_Object = MibScalar
poeMaxPower = _PoeMaxPower_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 2),
    _PoeMaxPower_Type()
)
poeMaxPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    poeMaxPower.setStatus("current")


class _PoePoliceEnable_Type(Integer32):
    """Custom type poePoliceEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_PoePoliceEnable_Type.__name__ = "Integer32"
_PoePoliceEnable_Object = MibScalar
poePoliceEnable = _PoePoliceEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 3),
    _PoePoliceEnable_Type()
)
poePoliceEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    poePoliceEnable.setStatus("current")


class _PoeLegacyEnable_Type(Integer32):
    """Custom type poeLegacyEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_PoeLegacyEnable_Type.__name__ = "Integer32"
_PoeLegacyEnable_Object = MibScalar
poeLegacyEnable = _PoeLegacyEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 4),
    _PoeLegacyEnable_Type()
)
poeLegacyEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    poeLegacyEnable.setStatus("current")


class _PoeDisconnect_Type(Integer32):
    """Custom type poeDisconnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ac", 0),
          ("dc", 1))
    )


_PoeDisconnect_Type.__name__ = "Integer32"
_PoeDisconnect_Object = MibScalar
poeDisconnect = _PoeDisconnect_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 5),
    _PoeDisconnect_Type()
)
poeDisconnect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    poeDisconnect.setStatus("current")
_PoeCurrentPower_Type = Integer32
_PoeCurrentPower_Object = MibScalar
poeCurrentPower = _PoeCurrentPower_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 6),
    _PoeCurrentPower_Type()
)
poeCurrentPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    poeCurrentPower.setStatus("current")


class _PoePortMode_Type(Integer32):
    """Custom type poePortMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("signal", 0),
          ("spare", 1))
    )


_PoePortMode_Type.__name__ = "Integer32"
_PoePortMode_Object = MibScalar
poePortMode = _PoePortMode_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 7),
    _PoePortMode_Type()
)
poePortMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    poePortMode.setStatus("current")


class _PoeSoftwareVersion_Type(DisplayString):
    """Custom type poeSoftwareVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_PoeSoftwareVersion_Type.__name__ = "DisplayString"
_PoeSoftwareVersion_Object = MibScalar
poeSoftwareVersion = _PoeSoftwareVersion_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 8),
    _PoeSoftwareVersion_Type()
)
poeSoftwareVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    poeSoftwareVersion.setStatus("current")


class _PoeHardwareVersion_Type(DisplayString):
    """Custom type poeHardwareVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_PoeHardwareVersion_Type.__name__ = "DisplayString"
_PoeHardwareVersion_Object = MibScalar
poeHardwareVersion = _PoeHardwareVersion_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 9),
    _PoeHardwareVersion_Type()
)
poeHardwareVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    poeHardwareVersion.setStatus("current")
_PoePortConfigTable_Object = MibTable
poePortConfigTable = _PoePortConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10)
)
if mibBuilder.loadTexts:
    poePortConfigTable.setStatus("current")
_PoePortConfigEntry_Object = MibTableRow
poePortConfigEntry = _PoePortConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1)
)
poePortConfigEntry.setIndexNames(
    (0, "NAG-MIB", "portIndex"),
)
if mibBuilder.loadTexts:
    poePortConfigEntry.setStatus("current")
_PoePortIndex_Type = Integer32
_PoePortIndex_Object = MibTableColumn
poePortIndex = _PoePortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 1),
    _PoePortIndex_Type()
)
poePortIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    poePortIndex.setStatus("current")


class _PoePortStatus_Type(Integer32):
    """Custom type poePortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enableAuto", 1),
          ("enableStatic", 2))
    )


_PoePortStatus_Type.__name__ = "Integer32"
_PoePortStatus_Object = MibTableColumn
poePortStatus = _PoePortStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 2),
    _PoePortStatus_Type()
)
poePortStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    poePortStatus.setStatus("current")


class _PoePortPriority_Type(Integer32):
    """Custom type poePortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("critical", 0),
          ("high", 1),
          ("low", 2))
    )


_PoePortPriority_Type.__name__ = "Integer32"
_PoePortPriority_Object = MibTableColumn
poePortPriority = _PoePortPriority_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 3),
    _PoePortPriority_Type()
)
poePortPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    poePortPriority.setStatus("current")


class _PoePortMaxPower_Type(Integer32):
    """Custom type poePortMaxPower based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 31000),
    )


_PoePortMaxPower_Type.__name__ = "Integer32"
_PoePortMaxPower_Object = MibTableColumn
poePortMaxPower = _PoePortMaxPower_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 4),
    _PoePortMaxPower_Type()
)
poePortMaxPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    poePortMaxPower.setStatus("current")
_PoePortCurrentPower_Type = Integer32
_PoePortCurrentPower_Object = MibTableColumn
poePortCurrentPower = _PoePortCurrentPower_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 5),
    _PoePortCurrentPower_Type()
)
poePortCurrentPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    poePortCurrentPower.setStatus("current")
_PoePortCurrentCurrent_Type = Integer32
_PoePortCurrentCurrent_Object = MibTableColumn
poePortCurrentCurrent = _PoePortCurrentCurrent_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 6),
    _PoePortCurrentCurrent_Type()
)
poePortCurrentCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    poePortCurrentCurrent.setStatus("current")
_PoePortCurrentVoltage_Type = Integer32
_PoePortCurrentVoltage_Object = MibTableColumn
poePortCurrentVoltage = _PoePortCurrentVoltage_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 7),
    _PoePortCurrentVoltage_Type()
)
poePortCurrentVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    poePortCurrentVoltage.setStatus("current")


class _PoePortPdStatus_Type(Integer32):
    """Custom type poePortPdStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2),
          ("faulty", 3),
          ("deny", 4),
          ("force", 5))
    )


_PoePortPdStatus_Type.__name__ = "Integer32"
_PoePortPdStatus_Object = MibTableColumn
poePortPdStatus = _PoePortPdStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 8),
    _PoePortPdStatus_Type()
)
poePortPdStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    poePortPdStatus.setStatus("current")
_PoePortPdClass_Type = Integer32
_PoePortPdClass_Object = MibTableColumn
poePortPdClass = _PoePortPdClass_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 10, 1, 9),
    _PoePortPdClass_Type()
)
poePortPdClass.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    poePortPdClass.setStatus("current")


class _PoeHighInrushEnable_Type(Integer32):
    """Custom type poeHighInrushEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enable", 0),
          ("disable", 1))
    )


_PoeHighInrushEnable_Type.__name__ = "Integer32"
_PoeHighInrushEnable_Object = MibScalar
poeHighInrushEnable = _PoeHighInrushEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 26, 11),
    _PoeHighInrushEnable_Type()
)
poeHighInrushEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    poeHighInrushEnable.setStatus("current")
_PriQos2_ObjectIdentity = ObjectIdentity
priQos2 = _PriQos2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27)
)
_Qos2_ObjectIdentity = ObjectIdentity
qos2 = _Qos2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1)
)
_Qos2MapCostoIntp_ObjectIdentity = ObjectIdentity
qos2MapCostoIntp = _Qos2MapCostoIntp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1)
)
_Qos2MapCostoIntp1_Type = Integer32
_Qos2MapCostoIntp1_Object = MibScalar
qos2MapCostoIntp1 = _Qos2MapCostoIntp1_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 1),
    _Qos2MapCostoIntp1_Type()
)
qos2MapCostoIntp1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapCostoIntp1.setStatus("current")
_Qos2MapCostoIntp2_Type = Integer32
_Qos2MapCostoIntp2_Object = MibScalar
qos2MapCostoIntp2 = _Qos2MapCostoIntp2_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 2),
    _Qos2MapCostoIntp2_Type()
)
qos2MapCostoIntp2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapCostoIntp2.setStatus("current")
_Qos2MapCostoIntp3_Type = Integer32
_Qos2MapCostoIntp3_Object = MibScalar
qos2MapCostoIntp3 = _Qos2MapCostoIntp3_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 3),
    _Qos2MapCostoIntp3_Type()
)
qos2MapCostoIntp3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapCostoIntp3.setStatus("current")
_Qos2MapCostoIntp4_Type = Integer32
_Qos2MapCostoIntp4_Object = MibScalar
qos2MapCostoIntp4 = _Qos2MapCostoIntp4_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 4),
    _Qos2MapCostoIntp4_Type()
)
qos2MapCostoIntp4.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapCostoIntp4.setStatus("current")
_Qos2MapCostoIntp5_Type = Integer32
_Qos2MapCostoIntp5_Object = MibScalar
qos2MapCostoIntp5 = _Qos2MapCostoIntp5_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 5),
    _Qos2MapCostoIntp5_Type()
)
qos2MapCostoIntp5.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapCostoIntp5.setStatus("current")
_Qos2MapCostoIntp6_Type = Integer32
_Qos2MapCostoIntp6_Object = MibScalar
qos2MapCostoIntp6 = _Qos2MapCostoIntp6_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 6),
    _Qos2MapCostoIntp6_Type()
)
qos2MapCostoIntp6.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapCostoIntp6.setStatus("current")
_Qos2MapCostoIntp7_Type = Integer32
_Qos2MapCostoIntp7_Object = MibScalar
qos2MapCostoIntp7 = _Qos2MapCostoIntp7_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 7),
    _Qos2MapCostoIntp7_Type()
)
qos2MapCostoIntp7.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapCostoIntp7.setStatus("current")
_Qos2MapCostoIntp8_Type = Integer32
_Qos2MapCostoIntp8_Object = MibScalar
qos2MapCostoIntp8 = _Qos2MapCostoIntp8_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 8),
    _Qos2MapCostoIntp8_Type()
)
qos2MapCostoIntp8.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapCostoIntp8.setStatus("current")


class _Qos2MapCostoIntpStatus_Type(Integer32):
    """Custom type qos2MapCostoIntpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_Qos2MapCostoIntpStatus_Type.__name__ = "Integer32"
_Qos2MapCostoIntpStatus_Object = MibScalar
qos2MapCostoIntpStatus = _Qos2MapCostoIntpStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 1, 9),
    _Qos2MapCostoIntpStatus_Type()
)
qos2MapCostoIntpStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapCostoIntpStatus.setStatus("current")
_Qos2MapCostoDP_ObjectIdentity = ObjectIdentity
qos2MapCostoDP = _Qos2MapCostoDP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2)
)
_Qos2MapCostoDP1_Type = Integer32
_Qos2MapCostoDP1_Object = MibScalar
qos2MapCostoDP1 = _Qos2MapCostoDP1_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 1),
    _Qos2MapCostoDP1_Type()
)
qos2MapCostoDP1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapCostoDP1.setStatus("current")
_Qos2MapCostoDP2_Type = Integer32
_Qos2MapCostoDP2_Object = MibScalar
qos2MapCostoDP2 = _Qos2MapCostoDP2_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 2),
    _Qos2MapCostoDP2_Type()
)
qos2MapCostoDP2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapCostoDP2.setStatus("current")
_Qos2MapCostoDP3_Type = Integer32
_Qos2MapCostoDP3_Object = MibScalar
qos2MapCostoDP3 = _Qos2MapCostoDP3_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 3),
    _Qos2MapCostoDP3_Type()
)
qos2MapCostoDP3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapCostoDP3.setStatus("current")
_Qos2MapCostoDP4_Type = Integer32
_Qos2MapCostoDP4_Object = MibScalar
qos2MapCostoDP4 = _Qos2MapCostoDP4_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 4),
    _Qos2MapCostoDP4_Type()
)
qos2MapCostoDP4.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapCostoDP4.setStatus("current")
_Qos2MapCostoDP5_Type = Integer32
_Qos2MapCostoDP5_Object = MibScalar
qos2MapCostoDP5 = _Qos2MapCostoDP5_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 5),
    _Qos2MapCostoDP5_Type()
)
qos2MapCostoDP5.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapCostoDP5.setStatus("current")
_Qos2MapCostoDP6_Type = Integer32
_Qos2MapCostoDP6_Object = MibScalar
qos2MapCostoDP6 = _Qos2MapCostoDP6_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 6),
    _Qos2MapCostoDP6_Type()
)
qos2MapCostoDP6.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapCostoDP6.setStatus("current")
_Qos2MapCostoDP7_Type = Integer32
_Qos2MapCostoDP7_Object = MibScalar
qos2MapCostoDP7 = _Qos2MapCostoDP7_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 7),
    _Qos2MapCostoDP7_Type()
)
qos2MapCostoDP7.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapCostoDP7.setStatus("current")
_Qos2MapCostoDP8_Type = Integer32
_Qos2MapCostoDP8_Object = MibScalar
qos2MapCostoDP8 = _Qos2MapCostoDP8_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 8),
    _Qos2MapCostoDP8_Type()
)
qos2MapCostoDP8.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapCostoDP8.setStatus("current")


class _Qos2MapCostoDPStatus_Type(Integer32):
    """Custom type qos2MapCostoDPStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_Qos2MapCostoDPStatus_Type.__name__ = "Integer32"
_Qos2MapCostoDPStatus_Object = MibScalar
qos2MapCostoDPStatus = _Qos2MapCostoDPStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 2, 9),
    _Qos2MapCostoDPStatus_Type()
)
qos2MapCostoDPStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapCostoDPStatus.setStatus("current")
_Qos2MapDSCPtoDSCP_ObjectIdentity = ObjectIdentity
qos2MapDSCPtoDSCP = _Qos2MapDSCPtoDSCP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3)
)
_Qos2MapDSCPtoDSCP1_Type = Integer32
_Qos2MapDSCPtoDSCP1_Object = MibScalar
qos2MapDSCPtoDSCP1 = _Qos2MapDSCPtoDSCP1_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 1),
    _Qos2MapDSCPtoDSCP1_Type()
)
qos2MapDSCPtoDSCP1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoDSCP1.setStatus("current")
_Qos2MapDSCPtoDSCP2_Type = Integer32
_Qos2MapDSCPtoDSCP2_Object = MibScalar
qos2MapDSCPtoDSCP2 = _Qos2MapDSCPtoDSCP2_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 2),
    _Qos2MapDSCPtoDSCP2_Type()
)
qos2MapDSCPtoDSCP2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoDSCP2.setStatus("current")
_Qos2MapDSCPtoDSCP3_Type = Integer32
_Qos2MapDSCPtoDSCP3_Object = MibScalar
qos2MapDSCPtoDSCP3 = _Qos2MapDSCPtoDSCP3_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 3),
    _Qos2MapDSCPtoDSCP3_Type()
)
qos2MapDSCPtoDSCP3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoDSCP3.setStatus("current")
_Qos2MapDSCPtoDSCP4_Type = Integer32
_Qos2MapDSCPtoDSCP4_Object = MibScalar
qos2MapDSCPtoDSCP4 = _Qos2MapDSCPtoDSCP4_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 4),
    _Qos2MapDSCPtoDSCP4_Type()
)
qos2MapDSCPtoDSCP4.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoDSCP4.setStatus("current")
_Qos2MapDSCPtoDSCP5_Type = Integer32
_Qos2MapDSCPtoDSCP5_Object = MibScalar
qos2MapDSCPtoDSCP5 = _Qos2MapDSCPtoDSCP5_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 5),
    _Qos2MapDSCPtoDSCP5_Type()
)
qos2MapDSCPtoDSCP5.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoDSCP5.setStatus("current")
_Qos2MapDSCPtoDSCP6_Type = Integer32
_Qos2MapDSCPtoDSCP6_Object = MibScalar
qos2MapDSCPtoDSCP6 = _Qos2MapDSCPtoDSCP6_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 6),
    _Qos2MapDSCPtoDSCP6_Type()
)
qos2MapDSCPtoDSCP6.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoDSCP6.setStatus("current")
_Qos2MapDSCPtoDSCP7_Type = Integer32
_Qos2MapDSCPtoDSCP7_Object = MibScalar
qos2MapDSCPtoDSCP7 = _Qos2MapDSCPtoDSCP7_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 7),
    _Qos2MapDSCPtoDSCP7_Type()
)
qos2MapDSCPtoDSCP7.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoDSCP7.setStatus("current")
_Qos2MapDSCPtoDSCP8_Type = Integer32
_Qos2MapDSCPtoDSCP8_Object = MibScalar
qos2MapDSCPtoDSCP8 = _Qos2MapDSCPtoDSCP8_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 8),
    _Qos2MapDSCPtoDSCP8_Type()
)
qos2MapDSCPtoDSCP8.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoDSCP8.setStatus("current")
_Qos2MapDSCPtoDSCPoutDSCP_Type = Integer32
_Qos2MapDSCPtoDSCPoutDSCP_Object = MibScalar
qos2MapDSCPtoDSCPoutDSCP = _Qos2MapDSCPtoDSCPoutDSCP_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 9),
    _Qos2MapDSCPtoDSCPoutDSCP_Type()
)
qos2MapDSCPtoDSCPoutDSCP.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoDSCPoutDSCP.setStatus("current")


class _Qos2MapDSCPtoDSCPStatus_Type(Integer32):
    """Custom type qos2MapDSCPtoDSCPStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_Qos2MapDSCPtoDSCPStatus_Type.__name__ = "Integer32"
_Qos2MapDSCPtoDSCPStatus_Object = MibScalar
qos2MapDSCPtoDSCPStatus = _Qos2MapDSCPtoDSCPStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 3, 10),
    _Qos2MapDSCPtoDSCPStatus_Type()
)
qos2MapDSCPtoDSCPStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoDSCPStatus.setStatus("current")
_Qos2MapDSCPtoIntp_ObjectIdentity = ObjectIdentity
qos2MapDSCPtoIntp = _Qos2MapDSCPtoIntp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4)
)
_Qos2MapDSCPtoIntp1_Type = Integer32
_Qos2MapDSCPtoIntp1_Object = MibScalar
qos2MapDSCPtoIntp1 = _Qos2MapDSCPtoIntp1_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 1),
    _Qos2MapDSCPtoIntp1_Type()
)
qos2MapDSCPtoIntp1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoIntp1.setStatus("current")
_Qos2MapDSCPtoIntp2_Type = Integer32
_Qos2MapDSCPtoIntp2_Object = MibScalar
qos2MapDSCPtoIntp2 = _Qos2MapDSCPtoIntp2_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 2),
    _Qos2MapDSCPtoIntp2_Type()
)
qos2MapDSCPtoIntp2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoIntp2.setStatus("current")
_Qos2MapDSCPtoIntp3_Type = Integer32
_Qos2MapDSCPtoIntp3_Object = MibScalar
qos2MapDSCPtoIntp3 = _Qos2MapDSCPtoIntp3_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 3),
    _Qos2MapDSCPtoIntp3_Type()
)
qos2MapDSCPtoIntp3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoIntp3.setStatus("current")
_Qos2MapDSCPtoIntp4_Type = Integer32
_Qos2MapDSCPtoIntp4_Object = MibScalar
qos2MapDSCPtoIntp4 = _Qos2MapDSCPtoIntp4_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 4),
    _Qos2MapDSCPtoIntp4_Type()
)
qos2MapDSCPtoIntp4.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoIntp4.setStatus("current")
_Qos2MapDSCPtoIntp5_Type = Integer32
_Qos2MapDSCPtoIntp5_Object = MibScalar
qos2MapDSCPtoIntp5 = _Qos2MapDSCPtoIntp5_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 5),
    _Qos2MapDSCPtoIntp5_Type()
)
qos2MapDSCPtoIntp5.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoIntp5.setStatus("current")
_Qos2MapDSCPtoIntp6_Type = Integer32
_Qos2MapDSCPtoIntp6_Object = MibScalar
qos2MapDSCPtoIntp6 = _Qos2MapDSCPtoIntp6_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 6),
    _Qos2MapDSCPtoIntp6_Type()
)
qos2MapDSCPtoIntp6.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoIntp6.setStatus("current")
_Qos2MapDSCPtoIntp7_Type = Integer32
_Qos2MapDSCPtoIntp7_Object = MibScalar
qos2MapDSCPtoIntp7 = _Qos2MapDSCPtoIntp7_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 7),
    _Qos2MapDSCPtoIntp7_Type()
)
qos2MapDSCPtoIntp7.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoIntp7.setStatus("current")
_Qos2MapDSCPtoIntp8_Type = Integer32
_Qos2MapDSCPtoIntp8_Object = MibScalar
qos2MapDSCPtoIntp8 = _Qos2MapDSCPtoIntp8_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 8),
    _Qos2MapDSCPtoIntp8_Type()
)
qos2MapDSCPtoIntp8.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoIntp8.setStatus("current")
_Qos2MapDSCPtoIntpIntPriovalue_Type = Integer32
_Qos2MapDSCPtoIntpIntPriovalue_Object = MibScalar
qos2MapDSCPtoIntpIntPriovalue = _Qos2MapDSCPtoIntpIntPriovalue_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 9),
    _Qos2MapDSCPtoIntpIntPriovalue_Type()
)
qos2MapDSCPtoIntpIntPriovalue.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoIntpIntPriovalue.setStatus("current")


class _Qos2MapDSCPtoIntpStatus_Type(Integer32):
    """Custom type qos2MapDSCPtoIntpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_Qos2MapDSCPtoIntpStatus_Type.__name__ = "Integer32"
_Qos2MapDSCPtoIntpStatus_Object = MibScalar
qos2MapDSCPtoIntpStatus = _Qos2MapDSCPtoIntpStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 4, 10),
    _Qos2MapDSCPtoIntpStatus_Type()
)
qos2MapDSCPtoIntpStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoIntpStatus.setStatus("current")
_Qos2MapDSCPtoDP_ObjectIdentity = ObjectIdentity
qos2MapDSCPtoDP = _Qos2MapDSCPtoDP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5)
)
_Qos2MapDSCPtoDP1_Type = Integer32
_Qos2MapDSCPtoDP1_Object = MibScalar
qos2MapDSCPtoDP1 = _Qos2MapDSCPtoDP1_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 1),
    _Qos2MapDSCPtoDP1_Type()
)
qos2MapDSCPtoDP1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoDP1.setStatus("current")
_Qos2MapDSCPtoDP2_Type = Integer32
_Qos2MapDSCPtoDP2_Object = MibScalar
qos2MapDSCPtoDP2 = _Qos2MapDSCPtoDP2_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 2),
    _Qos2MapDSCPtoDP2_Type()
)
qos2MapDSCPtoDP2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoDP2.setStatus("current")
_Qos2MapDSCPtoDP3_Type = Integer32
_Qos2MapDSCPtoDP3_Object = MibScalar
qos2MapDSCPtoDP3 = _Qos2MapDSCPtoDP3_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 3),
    _Qos2MapDSCPtoDP3_Type()
)
qos2MapDSCPtoDP3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoDP3.setStatus("current")
_Qos2MapDSCPtoDP4_Type = Integer32
_Qos2MapDSCPtoDP4_Object = MibScalar
qos2MapDSCPtoDP4 = _Qos2MapDSCPtoDP4_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 4),
    _Qos2MapDSCPtoDP4_Type()
)
qos2MapDSCPtoDP4.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoDP4.setStatus("current")
_Qos2MapDSCPtoDP5_Type = Integer32
_Qos2MapDSCPtoDP5_Object = MibScalar
qos2MapDSCPtoDP5 = _Qos2MapDSCPtoDP5_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 5),
    _Qos2MapDSCPtoDP5_Type()
)
qos2MapDSCPtoDP5.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoDP5.setStatus("current")
_Qos2MapDSCPtoDP6_Type = Integer32
_Qos2MapDSCPtoDP6_Object = MibScalar
qos2MapDSCPtoDP6 = _Qos2MapDSCPtoDP6_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 6),
    _Qos2MapDSCPtoDP6_Type()
)
qos2MapDSCPtoDP6.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoDP6.setStatus("current")
_Qos2MapDSCPtoDP7_Type = Integer32
_Qos2MapDSCPtoDP7_Object = MibScalar
qos2MapDSCPtoDP7 = _Qos2MapDSCPtoDP7_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 7),
    _Qos2MapDSCPtoDP7_Type()
)
qos2MapDSCPtoDP7.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoDP7.setStatus("current")
_Qos2MapDSCPtoDP8_Type = Integer32
_Qos2MapDSCPtoDP8_Object = MibScalar
qos2MapDSCPtoDP8 = _Qos2MapDSCPtoDP8_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 8),
    _Qos2MapDSCPtoDP8_Type()
)
qos2MapDSCPtoDP8.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoDP8.setStatus("current")
_Qos2MapDSCPtoDPvalue_Type = Integer32
_Qos2MapDSCPtoDPvalue_Object = MibScalar
qos2MapDSCPtoDPvalue = _Qos2MapDSCPtoDPvalue_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 9),
    _Qos2MapDSCPtoDPvalue_Type()
)
qos2MapDSCPtoDPvalue.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoDPvalue.setStatus("current")


class _Qos2MapDSCPtoDPStatus_Type(Integer32):
    """Custom type qos2MapDSCPtoDPStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_Qos2MapDSCPtoDPStatus_Type.__name__ = "Integer32"
_Qos2MapDSCPtoDPStatus_Object = MibScalar
qos2MapDSCPtoDPStatus = _Qos2MapDSCPtoDPStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 5, 10),
    _Qos2MapDSCPtoDPStatus_Type()
)
qos2MapDSCPtoDPStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapDSCPtoDPStatus.setStatus("current")
_Qos2MapExptoIntp_ObjectIdentity = ObjectIdentity
qos2MapExptoIntp = _Qos2MapExptoIntp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6)
)
_Qos2MapExptoIntp1_Type = Integer32
_Qos2MapExptoIntp1_Object = MibScalar
qos2MapExptoIntp1 = _Qos2MapExptoIntp1_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 1),
    _Qos2MapExptoIntp1_Type()
)
qos2MapExptoIntp1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapExptoIntp1.setStatus("current")
_Qos2MapExptoIntp2_Type = Integer32
_Qos2MapExptoIntp2_Object = MibScalar
qos2MapExptoIntp2 = _Qos2MapExptoIntp2_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 2),
    _Qos2MapExptoIntp2_Type()
)
qos2MapExptoIntp2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapExptoIntp2.setStatus("current")
_Qos2MapExptoIntp3_Type = Integer32
_Qos2MapExptoIntp3_Object = MibScalar
qos2MapExptoIntp3 = _Qos2MapExptoIntp3_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 3),
    _Qos2MapExptoIntp3_Type()
)
qos2MapExptoIntp3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapExptoIntp3.setStatus("current")
_Qos2MapExptoIntp4_Type = Integer32
_Qos2MapExptoIntp4_Object = MibScalar
qos2MapExptoIntp4 = _Qos2MapExptoIntp4_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 4),
    _Qos2MapExptoIntp4_Type()
)
qos2MapExptoIntp4.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapExptoIntp4.setStatus("current")
_Qos2MapExptoIntp5_Type = Integer32
_Qos2MapExptoIntp5_Object = MibScalar
qos2MapExptoIntp5 = _Qos2MapExptoIntp5_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 5),
    _Qos2MapExptoIntp5_Type()
)
qos2MapExptoIntp5.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapExptoIntp5.setStatus("current")
_Qos2MapExptoIntp6_Type = Integer32
_Qos2MapExptoIntp6_Object = MibScalar
qos2MapExptoIntp6 = _Qos2MapExptoIntp6_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 6),
    _Qos2MapExptoIntp6_Type()
)
qos2MapExptoIntp6.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapExptoIntp6.setStatus("current")
_Qos2MapExptoIntp7_Type = Integer32
_Qos2MapExptoIntp7_Object = MibScalar
qos2MapExptoIntp7 = _Qos2MapExptoIntp7_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 7),
    _Qos2MapExptoIntp7_Type()
)
qos2MapExptoIntp7.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapExptoIntp7.setStatus("current")
_Qos2MapExptoIntp8_Type = Integer32
_Qos2MapExptoIntp8_Object = MibScalar
qos2MapExptoIntp8 = _Qos2MapExptoIntp8_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 8),
    _Qos2MapExptoIntp8_Type()
)
qos2MapExptoIntp8.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapExptoIntp8.setStatus("current")


class _Qos2MapExptoIntpStatus_Type(Integer32):
    """Custom type qos2MapExptoIntpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_Qos2MapExptoIntpStatus_Type.__name__ = "Integer32"
_Qos2MapExptoIntpStatus_Object = MibScalar
qos2MapExptoIntpStatus = _Qos2MapExptoIntpStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 6, 9),
    _Qos2MapExptoIntpStatus_Type()
)
qos2MapExptoIntpStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapExptoIntpStatus.setStatus("current")
_Qos2MapExptoDP_ObjectIdentity = ObjectIdentity
qos2MapExptoDP = _Qos2MapExptoDP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7)
)
_Qos2MapExptoDP1_Type = Integer32
_Qos2MapExptoDP1_Object = MibScalar
qos2MapExptoDP1 = _Qos2MapExptoDP1_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 1),
    _Qos2MapExptoDP1_Type()
)
qos2MapExptoDP1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapExptoDP1.setStatus("current")
_Qos2MapExptoDP2_Type = Integer32
_Qos2MapExptoDP2_Object = MibScalar
qos2MapExptoDP2 = _Qos2MapExptoDP2_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 2),
    _Qos2MapExptoDP2_Type()
)
qos2MapExptoDP2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapExptoDP2.setStatus("current")
_Qos2MapExptoDP3_Type = Integer32
_Qos2MapExptoDP3_Object = MibScalar
qos2MapExptoDP3 = _Qos2MapExptoDP3_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 3),
    _Qos2MapExptoDP3_Type()
)
qos2MapExptoDP3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapExptoDP3.setStatus("current")
_Qos2MapExptoDP4_Type = Integer32
_Qos2MapExptoDP4_Object = MibScalar
qos2MapExptoDP4 = _Qos2MapExptoDP4_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 4),
    _Qos2MapExptoDP4_Type()
)
qos2MapExptoDP4.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapExptoDP4.setStatus("current")
_Qos2MapExptoDP5_Type = Integer32
_Qos2MapExptoDP5_Object = MibScalar
qos2MapExptoDP5 = _Qos2MapExptoDP5_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 5),
    _Qos2MapExptoDP5_Type()
)
qos2MapExptoDP5.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapExptoDP5.setStatus("current")
_Qos2MapExptoDP6_Type = Integer32
_Qos2MapExptoDP6_Object = MibScalar
qos2MapExptoDP6 = _Qos2MapExptoDP6_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 6),
    _Qos2MapExptoDP6_Type()
)
qos2MapExptoDP6.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapExptoDP6.setStatus("current")
_Qos2MapExptoDP7_Type = Integer32
_Qos2MapExptoDP7_Object = MibScalar
qos2MapExptoDP7 = _Qos2MapExptoDP7_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 7),
    _Qos2MapExptoDP7_Type()
)
qos2MapExptoDP7.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapExptoDP7.setStatus("current")
_Qos2MapExptoDP8_Type = Integer32
_Qos2MapExptoDP8_Object = MibScalar
qos2MapExptoDP8 = _Qos2MapExptoDP8_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 8),
    _Qos2MapExptoDP8_Type()
)
qos2MapExptoDP8.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapExptoDP8.setStatus("current")


class _Qos2MapExptoDPStatus_Type(Integer32):
    """Custom type qos2MapExptoDPStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_Qos2MapExptoDPStatus_Type.__name__ = "Integer32"
_Qos2MapExptoDPStatus_Object = MibScalar
qos2MapExptoDPStatus = _Qos2MapExptoDPStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 7, 9),
    _Qos2MapExptoDPStatus_Type()
)
qos2MapExptoDPStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapExptoDPStatus.setStatus("current")
_Qos2MapIntptoDSCP_ObjectIdentity = ObjectIdentity
qos2MapIntptoDSCP = _Qos2MapIntptoDSCP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8)
)
_Qos2MapIntptoDSCP1_Type = Integer32
_Qos2MapIntptoDSCP1_Object = MibScalar
qos2MapIntptoDSCP1 = _Qos2MapIntptoDSCP1_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 1),
    _Qos2MapIntptoDSCP1_Type()
)
qos2MapIntptoDSCP1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapIntptoDSCP1.setStatus("current")
_Qos2MapIntptoDSCP2_Type = Integer32
_Qos2MapIntptoDSCP2_Object = MibScalar
qos2MapIntptoDSCP2 = _Qos2MapIntptoDSCP2_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 2),
    _Qos2MapIntptoDSCP2_Type()
)
qos2MapIntptoDSCP2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapIntptoDSCP2.setStatus("current")
_Qos2MapIntptoDSCP3_Type = Integer32
_Qos2MapIntptoDSCP3_Object = MibScalar
qos2MapIntptoDSCP3 = _Qos2MapIntptoDSCP3_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 3),
    _Qos2MapIntptoDSCP3_Type()
)
qos2MapIntptoDSCP3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapIntptoDSCP3.setStatus("current")
_Qos2MapIntptoDSCP4_Type = Integer32
_Qos2MapIntptoDSCP4_Object = MibScalar
qos2MapIntptoDSCP4 = _Qos2MapIntptoDSCP4_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 4),
    _Qos2MapIntptoDSCP4_Type()
)
qos2MapIntptoDSCP4.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapIntptoDSCP4.setStatus("current")
_Qos2MapIntptoDSCP5_Type = Integer32
_Qos2MapIntptoDSCP5_Object = MibScalar
qos2MapIntptoDSCP5 = _Qos2MapIntptoDSCP5_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 5),
    _Qos2MapIntptoDSCP5_Type()
)
qos2MapIntptoDSCP5.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapIntptoDSCP5.setStatus("current")
_Qos2MapIntptoDSCP6_Type = Integer32
_Qos2MapIntptoDSCP6_Object = MibScalar
qos2MapIntptoDSCP6 = _Qos2MapIntptoDSCP6_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 6),
    _Qos2MapIntptoDSCP6_Type()
)
qos2MapIntptoDSCP6.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapIntptoDSCP6.setStatus("current")
_Qos2MapIntptoDSCP7_Type = Integer32
_Qos2MapIntptoDSCP7_Object = MibScalar
qos2MapIntptoDSCP7 = _Qos2MapIntptoDSCP7_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 7),
    _Qos2MapIntptoDSCP7_Type()
)
qos2MapIntptoDSCP7.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapIntptoDSCP7.setStatus("current")
_Qos2MapIntptoDSCP8_Type = Integer32
_Qos2MapIntptoDSCP8_Object = MibScalar
qos2MapIntptoDSCP8 = _Qos2MapIntptoDSCP8_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 8),
    _Qos2MapIntptoDSCP8_Type()
)
qos2MapIntptoDSCP8.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapIntptoDSCP8.setStatus("current")


class _Qos2MapIntptoDSCPStatus_Type(Integer32):
    """Custom type qos2MapIntptoDSCPStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_Qos2MapIntptoDSCPStatus_Type.__name__ = "Integer32"
_Qos2MapIntptoDSCPStatus_Object = MibScalar
qos2MapIntptoDSCPStatus = _Qos2MapIntptoDSCPStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 8, 9),
    _Qos2MapIntptoDSCPStatus_Type()
)
qos2MapIntptoDSCPStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapIntptoDSCPStatus.setStatus("current")
_Qos2MapIntptoEXP_ObjectIdentity = ObjectIdentity
qos2MapIntptoEXP = _Qos2MapIntptoEXP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10)
)
_Qos2MapIntptoEXP1_Type = Integer32
_Qos2MapIntptoEXP1_Object = MibScalar
qos2MapIntptoEXP1 = _Qos2MapIntptoEXP1_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 1),
    _Qos2MapIntptoEXP1_Type()
)
qos2MapIntptoEXP1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapIntptoEXP1.setStatus("current")
_Qos2MapIntptoEXP2_Type = Integer32
_Qos2MapIntptoEXP2_Object = MibScalar
qos2MapIntptoEXP2 = _Qos2MapIntptoEXP2_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 2),
    _Qos2MapIntptoEXP2_Type()
)
qos2MapIntptoEXP2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapIntptoEXP2.setStatus("current")
_Qos2MapIntptoEXP3_Type = Integer32
_Qos2MapIntptoEXP3_Object = MibScalar
qos2MapIntptoEXP3 = _Qos2MapIntptoEXP3_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 3),
    _Qos2MapIntptoEXP3_Type()
)
qos2MapIntptoEXP3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapIntptoEXP3.setStatus("current")
_Qos2MapIntptoEXP4_Type = Integer32
_Qos2MapIntptoEXP4_Object = MibScalar
qos2MapIntptoEXP4 = _Qos2MapIntptoEXP4_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 4),
    _Qos2MapIntptoEXP4_Type()
)
qos2MapIntptoEXP4.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapIntptoEXP4.setStatus("current")
_Qos2MapIntptoEXP5_Type = Integer32
_Qos2MapIntptoEXP5_Object = MibScalar
qos2MapIntptoEXP5 = _Qos2MapIntptoEXP5_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 5),
    _Qos2MapIntptoEXP5_Type()
)
qos2MapIntptoEXP5.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapIntptoEXP5.setStatus("current")
_Qos2MapIntptoEXP6_Type = Integer32
_Qos2MapIntptoEXP6_Object = MibScalar
qos2MapIntptoEXP6 = _Qos2MapIntptoEXP6_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 6),
    _Qos2MapIntptoEXP6_Type()
)
qos2MapIntptoEXP6.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapIntptoEXP6.setStatus("current")
_Qos2MapIntptoEXP7_Type = Integer32
_Qos2MapIntptoEXP7_Object = MibScalar
qos2MapIntptoEXP7 = _Qos2MapIntptoEXP7_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 7),
    _Qos2MapIntptoEXP7_Type()
)
qos2MapIntptoEXP7.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapIntptoEXP7.setStatus("current")
_Qos2MapIntptoEXP8_Type = Integer32
_Qos2MapIntptoEXP8_Object = MibScalar
qos2MapIntptoEXP8 = _Qos2MapIntptoEXP8_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 8),
    _Qos2MapIntptoEXP8_Type()
)
qos2MapIntptoEXP8.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapIntptoEXP8.setStatus("current")


class _Qos2MapIntptoEXPStatus_Type(Integer32):
    """Custom type qos2MapIntptoEXPStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_Qos2MapIntptoEXPStatus_Type.__name__ = "Integer32"
_Qos2MapIntptoEXPStatus_Object = MibScalar
qos2MapIntptoEXPStatus = _Qos2MapIntptoEXPStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 10, 9),
    _Qos2MapIntptoEXPStatus_Type()
)
qos2MapIntptoEXPStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2MapIntptoEXPStatus.setStatus("current")
_Qos2AggregatePolicy_ObjectIdentity = ObjectIdentity
qos2AggregatePolicy = _Qos2AggregatePolicy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11)
)


class _Qos2AggPolicyName_Type(DisplayString):
    """Custom type qos2AggPolicyName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_Qos2AggPolicyName_Type.__name__ = "DisplayString"
_Qos2AggPolicyName_Object = MibScalar
qos2AggPolicyName = _Qos2AggPolicyName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 1),
    _Qos2AggPolicyName_Type()
)
qos2AggPolicyName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2AggPolicyName.setStatus("current")
_Qos2AggPolicyCIRKbps_Type = Integer32
_Qos2AggPolicyCIRKbps_Object = MibScalar
qos2AggPolicyCIRKbps = _Qos2AggPolicyCIRKbps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 2),
    _Qos2AggPolicyCIRKbps_Type()
)
qos2AggPolicyCIRKbps.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2AggPolicyCIRKbps.setStatus("current")
_Qos2AggPolicyCBSKbps_Type = Integer32
_Qos2AggPolicyCBSKbps_Object = MibScalar
qos2AggPolicyCBSKbps = _Qos2AggPolicyCBSKbps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 3),
    _Qos2AggPolicyCBSKbps_Type()
)
qos2AggPolicyCBSKbps.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2AggPolicyCBSKbps.setStatus("current")
_Qos2AggPolicyPBSKbps_Type = Integer32
_Qos2AggPolicyPBSKbps_Object = MibScalar
qos2AggPolicyPBSKbps = _Qos2AggPolicyPBSKbps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 4),
    _Qos2AggPolicyPBSKbps_Type()
)
qos2AggPolicyPBSKbps.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2AggPolicyPBSKbps.setStatus("current")
_Qos2AggPolicyPIRKbps_Type = Integer32
_Qos2AggPolicyPIRKbps_Object = MibScalar
qos2AggPolicyPIRKbps = _Qos2AggPolicyPIRKbps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 5),
    _Qos2AggPolicyPIRKbps_Type()
)
qos2AggPolicyPIRKbps.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2AggPolicyPIRKbps.setStatus("current")


class _Qos2AggPolicyConformAction_Type(Integer32):
    """Custom type qos2AggPolicyConformAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("transmit", 0),
          ("drop", 1),
          ("set-dscp-transmit", 2),
          ("set-prec-transmit", 3),
          ("set-cos-transmit", 4),
          ("set-drop-precedence", 5),
          ("set-internal-priority", 6))
    )


_Qos2AggPolicyConformAction_Type.__name__ = "Integer32"
_Qos2AggPolicyConformAction_Object = MibScalar
qos2AggPolicyConformAction = _Qos2AggPolicyConformAction_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 6),
    _Qos2AggPolicyConformAction_Type()
)
qos2AggPolicyConformAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2AggPolicyConformAction.setStatus("current")
_Qos2AggPolicyConformActionChangeValue_Type = Integer32
_Qos2AggPolicyConformActionChangeValue_Object = MibScalar
qos2AggPolicyConformActionChangeValue = _Qos2AggPolicyConformActionChangeValue_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 7),
    _Qos2AggPolicyConformActionChangeValue_Type()
)
qos2AggPolicyConformActionChangeValue.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2AggPolicyConformActionChangeValue.setStatus("current")


class _Qos2AggPolicyExceedAction_Type(Integer32):
    """Custom type qos2AggPolicyExceedAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("transmit", 0),
          ("drop", 1),
          ("set-dscp-transmit", 2),
          ("set-prec-transmit", 3),
          ("set-cos-transmit", 4),
          ("set-drop-precedence", 5),
          ("set-internal-priority", 6))
    )


_Qos2AggPolicyExceedAction_Type.__name__ = "Integer32"
_Qos2AggPolicyExceedAction_Object = MibScalar
qos2AggPolicyExceedAction = _Qos2AggPolicyExceedAction_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 8),
    _Qos2AggPolicyExceedAction_Type()
)
qos2AggPolicyExceedAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2AggPolicyExceedAction.setStatus("current")
_Qos2AggPolicyExceedActionChangeValue_Type = Integer32
_Qos2AggPolicyExceedActionChangeValue_Object = MibScalar
qos2AggPolicyExceedActionChangeValue = _Qos2AggPolicyExceedActionChangeValue_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 9),
    _Qos2AggPolicyExceedActionChangeValue_Type()
)
qos2AggPolicyExceedActionChangeValue.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2AggPolicyExceedActionChangeValue.setStatus("current")


class _Qos2AggPolicyViolateAction_Type(Integer32):
    """Custom type qos2AggPolicyViolateAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("transmit", 0),
          ("drop", 1),
          ("set-dscp-transmit", 2),
          ("set-prec-transmit", 3),
          ("set-cos-transmit", 4),
          ("set-drop-precedence", 5),
          ("set-internal-priority", 6))
    )


_Qos2AggPolicyViolateAction_Type.__name__ = "Integer32"
_Qos2AggPolicyViolateAction_Object = MibScalar
qos2AggPolicyViolateAction = _Qos2AggPolicyViolateAction_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 10),
    _Qos2AggPolicyViolateAction_Type()
)
qos2AggPolicyViolateAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2AggPolicyViolateAction.setStatus("current")
_Qos2AggPolicyViolateActionChangeValue_Type = Integer32
_Qos2AggPolicyViolateActionChangeValue_Object = MibScalar
qos2AggPolicyViolateActionChangeValue = _Qos2AggPolicyViolateActionChangeValue_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 11),
    _Qos2AggPolicyViolateActionChangeValue_Type()
)
qos2AggPolicyViolateActionChangeValue.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2AggPolicyViolateActionChangeValue.setStatus("current")


class _Qos2AggPolicyStatus_Type(Integer32):
    """Custom type qos2AggPolicyStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_Qos2AggPolicyStatus_Type.__name__ = "Integer32"
_Qos2AggPolicyStatus_Object = MibScalar
qos2AggPolicyStatus = _Qos2AggPolicyStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 11, 12),
    _Qos2AggPolicyStatus_Type()
)
qos2AggPolicyStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2AggPolicyStatus.setStatus("current")
_Qos2ServicePolicyTable_Object = MibTable
qos2ServicePolicyTable = _Qos2ServicePolicyTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 12)
)
if mibBuilder.loadTexts:
    qos2ServicePolicyTable.setStatus("current")
_Qos2ServicePolicyEntry_Object = MibTableRow
qos2ServicePolicyEntry = _Qos2ServicePolicyEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 12, 1)
)
qos2ServicePolicyEntry.setIndexNames(
    (0, "NAG-MIB", "qos2PolicyMapName"),
)
if mibBuilder.loadTexts:
    qos2ServicePolicyEntry.setStatus("current")


class _Qos2PolicyMapName_Type(DisplayString):
    """Custom type qos2PolicyMapName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_Qos2PolicyMapName_Type.__name__ = "DisplayString"
_Qos2PolicyMapName_Object = MibTableColumn
qos2PolicyMapName = _Qos2PolicyMapName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 12, 1, 1),
    _Qos2PolicyMapName_Type()
)
qos2PolicyMapName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos2PolicyMapName.setStatus("current")
_Qos2ServicePolicyVlanList_Type = DisplayString
_Qos2ServicePolicyVlanList_Object = MibTableColumn
qos2ServicePolicyVlanList = _Qos2ServicePolicyVlanList_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 12, 1, 2),
    _Qos2ServicePolicyVlanList_Type()
)
qos2ServicePolicyVlanList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qos2ServicePolicyVlanList.setStatus("current")


class _Qos2ServicePolicyStatus_Type(Integer32):
    """Custom type qos2ServicePolicyStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_Qos2ServicePolicyStatus_Type.__name__ = "Integer32"
_Qos2ServicePolicyStatus_Object = MibTableColumn
qos2ServicePolicyStatus = _Qos2ServicePolicyStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 12, 1, 3),
    _Qos2ServicePolicyStatus_Type()
)
qos2ServicePolicyStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2ServicePolicyStatus.setStatus("current")
_Qos2PortTable_ObjectIdentity = ObjectIdentity
qos2PortTable = _Qos2PortTable_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13)
)


class _Qos2PortIndex_Type(Integer32):
    """Custom type qos2PortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10000),
    )


_Qos2PortIndex_Type.__name__ = "Integer32"
_Qos2PortIndex_Object = MibScalar
qos2PortIndex = _Qos2PortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 1),
    _Qos2PortIndex_Type()
)
qos2PortIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PortIndex.setStatus("current")


class _Qos2PortType_Type(Integer32):
    """Custom type qos2PortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("trust", 0),
          ("cos", 1),
          ("policy", 2),
          ("queueAndBandwidth", 3),
          ("queueAndAlgorithm", 4),
          ("queueAndWdrr", 5),
          ("queueAndWrr", 6))
    )


_Qos2PortType_Type.__name__ = "Integer32"
_Qos2PortType_Object = MibScalar
qos2PortType = _Qos2PortType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 2),
    _Qos2PortType_Type()
)
qos2PortType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PortType.setStatus("current")


class _Qos2PortCos_Type(Integer32):
    """Custom type qos2PortCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos2PortCos_Type.__name__ = "Integer32"
_Qos2PortCos_Object = MibScalar
qos2PortCos = _Qos2PortCos_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 3),
    _Qos2PortCos_Type()
)
qos2PortCos.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PortCos.setStatus("current")


class _Qos2PortTrust_Type(Integer32):
    """Custom type qos2PortTrust based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("cos", 0),
          ("dscp", 1))
    )


_Qos2PortTrust_Type.__name__ = "Integer32"
_Qos2PortTrust_Object = MibScalar
qos2PortTrust = _Qos2PortTrust_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 4),
    _Qos2PortTrust_Type()
)
qos2PortTrust.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PortTrust.setStatus("current")
_Qos2PortPolicy_Type = DisplayString
_Qos2PortPolicy_Object = MibScalar
qos2PortPolicy = _Qos2PortPolicy_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 5),
    _Qos2PortPolicy_Type()
)
qos2PortPolicy.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PortPolicy.setStatus("current")
_Qos2PortQueueBandwidth_Type = DisplayString
_Qos2PortQueueBandwidth_Object = MibScalar
qos2PortQueueBandwidth = _Qos2PortQueueBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 6),
    _Qos2PortQueueBandwidth_Type()
)
qos2PortQueueBandwidth.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PortQueueBandwidth.setStatus("current")


class _Qos2PortQueueAlgorithm_Type(Integer32):
    """Custom type qos2PortQueueAlgorithm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("sp", 0),
          ("wdrr", 1),
          ("wrr", 2))
    )


_Qos2PortQueueAlgorithm_Type.__name__ = "Integer32"
_Qos2PortQueueAlgorithm_Object = MibScalar
qos2PortQueueAlgorithm = _Qos2PortQueueAlgorithm_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 7),
    _Qos2PortQueueAlgorithm_Type()
)
qos2PortQueueAlgorithm.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PortQueueAlgorithm.setStatus("current")
_Qos2PortQueueWdrr_Type = DisplayString
_Qos2PortQueueWdrr_Object = MibScalar
qos2PortQueueWdrr = _Qos2PortQueueWdrr_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 8),
    _Qos2PortQueueWdrr_Type()
)
qos2PortQueueWdrr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PortQueueWdrr.setStatus("current")
_Qos2PortQueueWrr_Type = DisplayString
_Qos2PortQueueWrr_Object = MibScalar
qos2PortQueueWrr = _Qos2PortQueueWrr_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 9),
    _Qos2PortQueueWrr_Type()
)
qos2PortQueueWrr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PortQueueWrr.setStatus("current")


class _Qos2PortStatus_Type(Integer32):
    """Custom type qos2PortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_Qos2PortStatus_Type.__name__ = "Integer32"
_Qos2PortStatus_Object = MibScalar
qos2PortStatus = _Qos2PortStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 13, 10),
    _Qos2PortStatus_Type()
)
qos2PortStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PortStatus.setStatus("current")
_Qos2ClassMapTable_ObjectIdentity = ObjectIdentity
qos2ClassMapTable = _Qos2ClassMapTable_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14)
)


class _Qos2ClassMapName_Type(DisplayString):
    """Custom type qos2ClassMapName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_Qos2ClassMapName_Type.__name__ = "DisplayString"
_Qos2ClassMapName_Object = MibScalar
qos2ClassMapName = _Qos2ClassMapName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 1),
    _Qos2ClassMapName_Type()
)
qos2ClassMapName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2ClassMapName.setStatus("current")


class _Qos2ClassMapType_Type(Integer32):
    """Custom type qos2ClassMapType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("configurClassMap", 0),
          ("accessGroup", 1),
          ("dscp", 2),
          ("ippre", 3),
          ("vlan", 4),
          ("v6dscp", 5),
          ("v6Flow", 7),
          ("v6AccessGroup", 8),
          ("cos", 9),
          ("exp", 10))
    )


_Qos2ClassMapType_Type.__name__ = "Integer32"
_Qos2ClassMapType_Object = MibScalar
qos2ClassMapType = _Qos2ClassMapType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 2),
    _Qos2ClassMapType_Type()
)
qos2ClassMapType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2ClassMapType.setStatus("current")
_Qos2ClassMapAccessGroup_Type = DisplayString
_Qos2ClassMapAccessGroup_Object = MibScalar
qos2ClassMapAccessGroup = _Qos2ClassMapAccessGroup_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 3),
    _Qos2ClassMapAccessGroup_Type()
)
qos2ClassMapAccessGroup.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2ClassMapAccessGroup.setStatus("current")
_Qos2ClassMapDscp_Type = DisplayString
_Qos2ClassMapDscp_Object = MibScalar
qos2ClassMapDscp = _Qos2ClassMapDscp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 4),
    _Qos2ClassMapDscp_Type()
)
qos2ClassMapDscp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2ClassMapDscp.setStatus("current")
_Qos2ClassMapV6Dscp_Type = DisplayString
_Qos2ClassMapV6Dscp_Object = MibScalar
qos2ClassMapV6Dscp = _Qos2ClassMapV6Dscp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 5),
    _Qos2ClassMapV6Dscp_Type()
)
qos2ClassMapV6Dscp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2ClassMapV6Dscp.setStatus("current")
_Qos2ClassMapIpPre_Type = DisplayString
_Qos2ClassMapIpPre_Object = MibScalar
qos2ClassMapIpPre = _Qos2ClassMapIpPre_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 6),
    _Qos2ClassMapIpPre_Type()
)
qos2ClassMapIpPre.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2ClassMapIpPre.setStatus("current")
_Qos2ClassMapV6AccGroup_Type = DisplayString
_Qos2ClassMapV6AccGroup_Object = MibScalar
qos2ClassMapV6AccGroup = _Qos2ClassMapV6AccGroup_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 7),
    _Qos2ClassMapV6AccGroup_Type()
)
qos2ClassMapV6AccGroup.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2ClassMapV6AccGroup.setStatus("current")
_Qos2ClassMapV6Flow_Type = DisplayString
_Qos2ClassMapV6Flow_Object = MibScalar
qos2ClassMapV6Flow = _Qos2ClassMapV6Flow_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 8),
    _Qos2ClassMapV6Flow_Type()
)
qos2ClassMapV6Flow.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2ClassMapV6Flow.setStatus("current")
_Qos2ClassMapVlan_Type = DisplayString
_Qos2ClassMapVlan_Object = MibScalar
qos2ClassMapVlan = _Qos2ClassMapVlan_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 9),
    _Qos2ClassMapVlan_Type()
)
qos2ClassMapVlan.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2ClassMapVlan.setStatus("current")
_Qos2ClassMapCos_Type = DisplayString
_Qos2ClassMapCos_Object = MibScalar
qos2ClassMapCos = _Qos2ClassMapCos_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 10),
    _Qos2ClassMapCos_Type()
)
qos2ClassMapCos.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2ClassMapCos.setStatus("current")
_Qos2ClassMapExp_Type = DisplayString
_Qos2ClassMapExp_Object = MibScalar
qos2ClassMapExp = _Qos2ClassMapExp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 11),
    _Qos2ClassMapExp_Type()
)
qos2ClassMapExp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2ClassMapExp.setStatus("current")


class _Qos2ClassMapStatus_Type(Integer32):
    """Custom type qos2ClassMapStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_Qos2ClassMapStatus_Type.__name__ = "Integer32"
_Qos2ClassMapStatus_Object = MibScalar
qos2ClassMapStatus = _Qos2ClassMapStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 14, 12),
    _Qos2ClassMapStatus_Type()
)
qos2ClassMapStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2ClassMapStatus.setStatus("current")
_Qos2PolicyTable_ObjectIdentity = ObjectIdentity
qos2PolicyTable = _Qos2PolicyTable_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15)
)


class _Qos2PolicyName_Type(DisplayString):
    """Custom type qos2PolicyName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_Qos2PolicyName_Type.__name__ = "DisplayString"
_Qos2PolicyName_Object = MibScalar
qos2PolicyName = _Qos2PolicyName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 1),
    _Qos2PolicyName_Type()
)
qos2PolicyName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PolicyName.setStatus("current")


class _Qos2PolicyClassMap_Type(DisplayString):
    """Custom type qos2PolicyClassMap based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_Qos2PolicyClassMap_Type.__name__ = "DisplayString"
_Qos2PolicyClassMap_Object = MibScalar
qos2PolicyClassMap = _Qos2PolicyClassMap_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 2),
    _Qos2PolicyClassMap_Type()
)
qos2PolicyClassMap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PolicyClassMap.setStatus("current")


class _Qos2PolicyInsertClassMap_Type(DisplayString):
    """Custom type qos2PolicyInsertClassMap based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_Qos2PolicyInsertClassMap_Type.__name__ = "DisplayString"
_Qos2PolicyInsertClassMap_Object = MibScalar
qos2PolicyInsertClassMap = _Qos2PolicyInsertClassMap_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 3),
    _Qos2PolicyInsertClassMap_Type()
)
qos2PolicyInsertClassMap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PolicyInsertClassMap.setStatus("current")


class _Qos2PolicyType_Type(Integer32):
    """Custom type qos2PolicyType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("policymap", 0),
          ("matchclassmap", 1),
          ("threeColor", 2),
          ("aggregatePolicer", 3),
          ("accounting", 4))
    )


_Qos2PolicyType_Type.__name__ = "Integer32"
_Qos2PolicyType_Object = MibScalar
qos2PolicyType = _Qos2PolicyType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 4),
    _Qos2PolicyType_Type()
)
qos2PolicyType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PolicyType.setStatus("current")


class _Qos2PolicyCIRKbps_Type(Integer32):
    """Custom type qos2PolicyCIRKbps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10000000),
    )


_Qos2PolicyCIRKbps_Type.__name__ = "Integer32"
_Qos2PolicyCIRKbps_Object = MibScalar
qos2PolicyCIRKbps = _Qos2PolicyCIRKbps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 5),
    _Qos2PolicyCIRKbps_Type()
)
qos2PolicyCIRKbps.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PolicyCIRKbps.setStatus("current")


class _Qos2PolicyCBSKbps_Type(Integer32):
    """Custom type qos2PolicyCBSKbps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000000),
    )


_Qos2PolicyCBSKbps_Type.__name__ = "Integer32"
_Qos2PolicyCBSKbps_Object = MibScalar
qos2PolicyCBSKbps = _Qos2PolicyCBSKbps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 6),
    _Qos2PolicyCBSKbps_Type()
)
qos2PolicyCBSKbps.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PolicyCBSKbps.setStatus("current")


class _Qos2PolicyPBSKbps_Type(Integer32):
    """Custom type qos2PolicyPBSKbps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000000),
    )


_Qos2PolicyPBSKbps_Type.__name__ = "Integer32"
_Qos2PolicyPBSKbps_Object = MibScalar
qos2PolicyPBSKbps = _Qos2PolicyPBSKbps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 7),
    _Qos2PolicyPBSKbps_Type()
)
qos2PolicyPBSKbps.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PolicyPBSKbps.setStatus("current")


class _Qos2PolicyPIRKbps_Type(Integer32):
    """Custom type qos2PolicyPIRKbps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10000000),
    )


_Qos2PolicyPIRKbps_Type.__name__ = "Integer32"
_Qos2PolicyPIRKbps_Object = MibScalar
qos2PolicyPIRKbps = _Qos2PolicyPIRKbps_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 8),
    _Qos2PolicyPIRKbps_Type()
)
qos2PolicyPIRKbps.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PolicyPIRKbps.setStatus("current")


class _Qos2PolicyConformActionChange_Type(Integer32):
    """Custom type qos2PolicyConformActionChange based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("transmit", 0),
          ("drop", 1),
          ("set-dscp-transmit", 2),
          ("set-prec-transmit", 3),
          ("set-cos-transmit", 4),
          ("set-internal-priority", 5),
          ("set-drop-Precedence", 6))
    )


_Qos2PolicyConformActionChange_Type.__name__ = "Integer32"
_Qos2PolicyConformActionChange_Object = MibScalar
qos2PolicyConformActionChange = _Qos2PolicyConformActionChange_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 9),
    _Qos2PolicyConformActionChange_Type()
)
qos2PolicyConformActionChange.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PolicyConformActionChange.setStatus("current")


class _Qos2PolicyConformActionChangeValue_Type(Integer32):
    """Custom type qos2PolicyConformActionChangeValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_Qos2PolicyConformActionChangeValue_Type.__name__ = "Integer32"
_Qos2PolicyConformActionChangeValue_Object = MibScalar
qos2PolicyConformActionChangeValue = _Qos2PolicyConformActionChangeValue_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 10),
    _Qos2PolicyConformActionChangeValue_Type()
)
qos2PolicyConformActionChangeValue.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PolicyConformActionChangeValue.setStatus("current")


class _Qos2PolicyExceedActionChange_Type(Integer32):
    """Custom type qos2PolicyExceedActionChange based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("transmit", 0),
          ("drop", 1),
          ("set-dscp-transmit", 2),
          ("set-prec-transmit", 3),
          ("set-cos-transmit", 4),
          ("set-internal-priority", 5),
          ("set-drop-Precedence", 6))
    )


_Qos2PolicyExceedActionChange_Type.__name__ = "Integer32"
_Qos2PolicyExceedActionChange_Object = MibScalar
qos2PolicyExceedActionChange = _Qos2PolicyExceedActionChange_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 11),
    _Qos2PolicyExceedActionChange_Type()
)
qos2PolicyExceedActionChange.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PolicyExceedActionChange.setStatus("current")


class _Qos2PolicyExceedActionChangeValue_Type(Integer32):
    """Custom type qos2PolicyExceedActionChangeValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_Qos2PolicyExceedActionChangeValue_Type.__name__ = "Integer32"
_Qos2PolicyExceedActionChangeValue_Object = MibScalar
qos2PolicyExceedActionChangeValue = _Qos2PolicyExceedActionChangeValue_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 12),
    _Qos2PolicyExceedActionChangeValue_Type()
)
qos2PolicyExceedActionChangeValue.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PolicyExceedActionChangeValue.setStatus("current")


class _Qos2PolicyViolateActionChange_Type(Integer32):
    """Custom type qos2PolicyViolateActionChange based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("transmit", 0),
          ("drop", 1),
          ("set-dscp-transmit", 2),
          ("set-prec-transmit", 3),
          ("set-cos-transmit", 4),
          ("set-internal-priority", 5),
          ("set-drop-Precedence", 6))
    )


_Qos2PolicyViolateActionChange_Type.__name__ = "Integer32"
_Qos2PolicyViolateActionChange_Object = MibScalar
qos2PolicyViolateActionChange = _Qos2PolicyViolateActionChange_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 13),
    _Qos2PolicyViolateActionChange_Type()
)
qos2PolicyViolateActionChange.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PolicyViolateActionChange.setStatus("current")


class _Qos2PolicyViolateActionChangeValue_Type(Integer32):
    """Custom type qos2PolicyViolateActionChangeValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_Qos2PolicyViolateActionChangeValue_Type.__name__ = "Integer32"
_Qos2PolicyViolateActionChangeValue_Object = MibScalar
qos2PolicyViolateActionChangeValue = _Qos2PolicyViolateActionChangeValue_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 14),
    _Qos2PolicyViolateActionChangeValue_Type()
)
qos2PolicyViolateActionChangeValue.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PolicyViolateActionChangeValue.setStatus("current")
_Qos2PolicyAggregatePolicer_Type = DisplayString
_Qos2PolicyAggregatePolicer_Object = MibScalar
qos2PolicyAggregatePolicer = _Qos2PolicyAggregatePolicer_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 15),
    _Qos2PolicyAggregatePolicer_Type()
)
qos2PolicyAggregatePolicer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PolicyAggregatePolicer.setStatus("current")


class _Qos2PolicyStatus_Type(Integer32):
    """Custom type qos2PolicyStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_Qos2PolicyStatus_Type.__name__ = "Integer32"
_Qos2PolicyStatus_Object = MibScalar
qos2PolicyStatus = _Qos2PolicyStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 15, 16),
    _Qos2PolicyStatus_Type()
)
qos2PolicyStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2PolicyStatus.setStatus("current")
_Qos2SetTable_ObjectIdentity = ObjectIdentity
qos2SetTable = _Qos2SetTable_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16)
)


class _Qos2SetPolicyMapName_Type(DisplayString):
    """Custom type qos2SetPolicyMapName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_Qos2SetPolicyMapName_Type.__name__ = "DisplayString"
_Qos2SetPolicyMapName_Object = MibScalar
qos2SetPolicyMapName = _Qos2SetPolicyMapName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 1),
    _Qos2SetPolicyMapName_Type()
)
qos2SetPolicyMapName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2SetPolicyMapName.setStatus("current")


class _Qos2SetClassMapName_Type(DisplayString):
    """Custom type qos2SetClassMapName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_Qos2SetClassMapName_Type.__name__ = "DisplayString"
_Qos2SetClassMapName_Object = MibScalar
qos2SetClassMapName = _Qos2SetClassMapName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 2),
    _Qos2SetClassMapName_Type()
)
qos2SetClassMapName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2SetClassMapName.setStatus("current")


class _Qos2SetType_Type(Integer32):
    """Custom type qos2SetType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("dscp", 1),
          ("precedence", 2),
          ("internal-priority", 3),
          ("drop-precedence", 4),
          ("nextHop", 5),
          ("v6nextHop", 6),
          ("cos", 7))
    )


_Qos2SetType_Type.__name__ = "Integer32"
_Qos2SetType_Object = MibScalar
qos2SetType = _Qos2SetType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 3),
    _Qos2SetType_Type()
)
qos2SetType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2SetType.setStatus("current")


class _Qos2SetDscp_Type(Integer32):
    """Custom type qos2SetDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_Qos2SetDscp_Type.__name__ = "Integer32"
_Qos2SetDscp_Object = MibScalar
qos2SetDscp = _Qos2SetDscp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 4),
    _Qos2SetDscp_Type()
)
qos2SetDscp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2SetDscp.setStatus("current")


class _Qos2SetPrecedence_Type(Integer32):
    """Custom type qos2SetPrecedence based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos2SetPrecedence_Type.__name__ = "Integer32"
_Qos2SetPrecedence_Object = MibScalar
qos2SetPrecedence = _Qos2SetPrecedence_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 5),
    _Qos2SetPrecedence_Type()
)
qos2SetPrecedence.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2SetPrecedence.setStatus("current")


class _Qos2SetInternalPriority_Type(Integer32):
    """Custom type qos2SetInternalPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos2SetInternalPriority_Type.__name__ = "Integer32"
_Qos2SetInternalPriority_Object = MibScalar
qos2SetInternalPriority = _Qos2SetInternalPriority_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 6),
    _Qos2SetInternalPriority_Type()
)
qos2SetInternalPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2SetInternalPriority.setStatus("current")


class _Qos2SetDropPrecedence_Type(Integer32):
    """Custom type qos2SetDropPrecedence based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_Qos2SetDropPrecedence_Type.__name__ = "Integer32"
_Qos2SetDropPrecedence_Object = MibScalar
qos2SetDropPrecedence = _Qos2SetDropPrecedence_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 7),
    _Qos2SetDropPrecedence_Type()
)
qos2SetDropPrecedence.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2SetDropPrecedence.setStatus("current")


class _Qos2SetDefaultPBR_Type(Integer32):
    """Custom type qos2SetDefaultPBR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_Qos2SetDefaultPBR_Type.__name__ = "Integer32"
_Qos2SetDefaultPBR_Object = MibScalar
qos2SetDefaultPBR = _Qos2SetDefaultPBR_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 8),
    _Qos2SetDefaultPBR_Type()
)
qos2SetDefaultPBR.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2SetDefaultPBR.setStatus("current")


class _Qos2SetVrf_Type(Integer32):
    """Custom type qos2SetVrf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 252),
    )


_Qos2SetVrf_Type.__name__ = "Integer32"
_Qos2SetVrf_Object = MibScalar
qos2SetVrf = _Qos2SetVrf_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 9),
    _Qos2SetVrf_Type()
)
qos2SetVrf.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2SetVrf.setStatus("current")
_Qos2SetnextHop_Type = IpAddress
_Qos2SetnextHop_Object = MibScalar
qos2SetnextHop = _Qos2SetnextHop_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 10),
    _Qos2SetnextHop_Type()
)
qos2SetnextHop.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2SetnextHop.setStatus("current")
_Qos2Setv6nextHop_Type = DisplayString
_Qos2Setv6nextHop_Object = MibScalar
qos2Setv6nextHop = _Qos2Setv6nextHop_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 11),
    _Qos2Setv6nextHop_Type()
)
qos2Setv6nextHop.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2Setv6nextHop.setStatus("current")


class _Qos2SetCos_Type(Integer32):
    """Custom type qos2SetCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Qos2SetCos_Type.__name__ = "Integer32"
_Qos2SetCos_Object = MibScalar
qos2SetCos = _Qos2SetCos_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 12),
    _Qos2SetCos_Type()
)
qos2SetCos.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2SetCos.setStatus("current")


class _Qos2SetStatus_Type(Integer32):
    """Custom type qos2SetStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("destroy", 2))
    )


_Qos2SetStatus_Type.__name__ = "Integer32"
_Qos2SetStatus_Object = MibScalar
qos2SetStatus = _Qos2SetStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 27, 1, 16, 13),
    _Qos2SetStatus_Type()
)
qos2SetStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qos2SetStatus.setStatus("current")
_Dot1xMgt_ObjectIdentity = ObjectIdentity
dot1xMgt = _Dot1xMgt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 28)
)
_MabOnlineUserTable_Object = MibTable
mabOnlineUserTable = _MabOnlineUserTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 1)
)
if mibBuilder.loadTexts:
    mabOnlineUserTable.setStatus("current")
_MabOnlineUserEntry_Object = MibTableRow
mabOnlineUserEntry = _MabOnlineUserEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 1, 1)
)
mabOnlineUserEntry.setIndexNames(
    (0, "NAG-MIB", "mabOnlineUserIndex"),
)
if mibBuilder.loadTexts:
    mabOnlineUserEntry.setStatus("current")
_MabOnlineUserIndex_Type = Integer32
_MabOnlineUserIndex_Object = MibTableColumn
mabOnlineUserIndex = _MabOnlineUserIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 1, 1, 1),
    _MabOnlineUserIndex_Type()
)
mabOnlineUserIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mabOnlineUserIndex.setStatus("current")


class _MabOnlineUserMac_Type(DisplayString):
    """Custom type mabOnlineUserMac based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_MabOnlineUserMac_Type.__name__ = "DisplayString"
_MabOnlineUserMac_Object = MibTableColumn
mabOnlineUserMac = _MabOnlineUserMac_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 1, 1, 2),
    _MabOnlineUserMac_Type()
)
mabOnlineUserMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mabOnlineUserMac.setStatus("current")


class _MabOnlineUserName_Type(DisplayString):
    """Custom type mabOnlineUserName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_MabOnlineUserName_Type.__name__ = "DisplayString"
_MabOnlineUserName_Object = MibTableColumn
mabOnlineUserName = _MabOnlineUserName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 1, 1, 3),
    _MabOnlineUserName_Type()
)
mabOnlineUserName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mabOnlineUserName.setStatus("current")


class _MabOnlineUserPort_Type(DisplayString):
    """Custom type mabOnlineUserPort based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 14),
    )


_MabOnlineUserPort_Type.__name__ = "DisplayString"
_MabOnlineUserPort_Object = MibTableColumn
mabOnlineUserPort = _MabOnlineUserPort_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 1, 1, 4),
    _MabOnlineUserPort_Type()
)
mabOnlineUserPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mabOnlineUserPort.setStatus("current")


class _MabOnlineUserState_Type(DisplayString):
    """Custom type mabOnlineUserState based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 18),
    )


_MabOnlineUserState_Type.__name__ = "DisplayString"
_MabOnlineUserState_Object = MibTableColumn
mabOnlineUserState = _MabOnlineUserState_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 1, 1, 5),
    _MabOnlineUserState_Type()
)
mabOnlineUserState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mabOnlineUserState.setStatus("current")


class _MabSetUserOffline_Type(DisplayString):
    """Custom type mabSetUserOffline based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_MabSetUserOffline_Type.__name__ = "DisplayString"
_MabSetUserOffline_Object = MibScalar
mabSetUserOffline = _MabSetUserOffline_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 2),
    _MabSetUserOffline_Type()
)
mabSetUserOffline.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mabSetUserOffline.setStatus("current")
_Dot1xOnlineUserTable_Object = MibTable
dot1xOnlineUserTable = _Dot1xOnlineUserTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3)
)
if mibBuilder.loadTexts:
    dot1xOnlineUserTable.setStatus("current")
_Dot1xOnlineUserEntry_Object = MibTableRow
dot1xOnlineUserEntry = _Dot1xOnlineUserEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1)
)
dot1xOnlineUserEntry.setIndexNames(
    (0, "NAG-MIB", "dot1xOnlineUserIndex"),
)
if mibBuilder.loadTexts:
    dot1xOnlineUserEntry.setStatus("current")
_Dot1xOnlineUserIndex_Type = Integer32
_Dot1xOnlineUserIndex_Object = MibTableColumn
dot1xOnlineUserIndex = _Dot1xOnlineUserIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1, 1),
    _Dot1xOnlineUserIndex_Type()
)
dot1xOnlineUserIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dot1xOnlineUserIndex.setStatus("current")


class _Dot1xOnlineUserMac_Type(DisplayString):
    """Custom type dot1xOnlineUserMac based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_Dot1xOnlineUserMac_Type.__name__ = "DisplayString"
_Dot1xOnlineUserMac_Object = MibTableColumn
dot1xOnlineUserMac = _Dot1xOnlineUserMac_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1, 2),
    _Dot1xOnlineUserMac_Type()
)
dot1xOnlineUserMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xOnlineUserMac.setStatus("current")


class _Dot1xOnlineUserName_Type(DisplayString):
    """Custom type dot1xOnlineUserName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_Dot1xOnlineUserName_Type.__name__ = "DisplayString"
_Dot1xOnlineUserName_Object = MibTableColumn
dot1xOnlineUserName = _Dot1xOnlineUserName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1, 3),
    _Dot1xOnlineUserName_Type()
)
dot1xOnlineUserName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xOnlineUserName.setStatus("current")


class _Dot1xOnlineUserPort_Type(DisplayString):
    """Custom type dot1xOnlineUserPort based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_Dot1xOnlineUserPort_Type.__name__ = "DisplayString"
_Dot1xOnlineUserPort_Object = MibTableColumn
dot1xOnlineUserPort = _Dot1xOnlineUserPort_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1, 4),
    _Dot1xOnlineUserPort_Type()
)
dot1xOnlineUserPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xOnlineUserPort.setStatus("current")
_Dot1xOnlineUserPortVlanid_Type = Integer32
_Dot1xOnlineUserPortVlanid_Object = MibTableColumn
dot1xOnlineUserPortVlanid = _Dot1xOnlineUserPortVlanid_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1, 5),
    _Dot1xOnlineUserPortVlanid_Type()
)
dot1xOnlineUserPortVlanid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xOnlineUserPortVlanid.setStatus("current")


class _Dot1xOnlineUserPortMethod_Type(DisplayString):
    """Custom type dot1xOnlineUserPortMethod based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 20),
    )


_Dot1xOnlineUserPortMethod_Type.__name__ = "DisplayString"
_Dot1xOnlineUserPortMethod_Object = MibTableColumn
dot1xOnlineUserPortMethod = _Dot1xOnlineUserPortMethod_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1, 6),
    _Dot1xOnlineUserPortMethod_Type()
)
dot1xOnlineUserPortMethod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xOnlineUserPortMethod.setStatus("current")


class _Dot1xOnlineUserPortControl_Type(DisplayString):
    """Custom type dot1xOnlineUserPortControl based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 20),
    )


_Dot1xOnlineUserPortControl_Type.__name__ = "DisplayString"
_Dot1xOnlineUserPortControl_Object = MibTableColumn
dot1xOnlineUserPortControl = _Dot1xOnlineUserPortControl_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1, 7),
    _Dot1xOnlineUserPortControl_Type()
)
dot1xOnlineUserPortControl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xOnlineUserPortControl.setStatus("current")


class _Dot1xOnlineUserState_Type(DisplayString):
    """Custom type dot1xOnlineUserState based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_Dot1xOnlineUserState_Type.__name__ = "DisplayString"
_Dot1xOnlineUserState_Object = MibTableColumn
dot1xOnlineUserState = _Dot1xOnlineUserState_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 3, 1, 8),
    _Dot1xOnlineUserState_Type()
)
dot1xOnlineUserState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xOnlineUserState.setStatus("current")


class _Dot1xSetUserOffline_Type(DisplayString):
    """Custom type dot1xSetUserOffline based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_Dot1xSetUserOffline_Type.__name__ = "DisplayString"
_Dot1xSetUserOffline_Object = MibScalar
dot1xSetUserOffline = _Dot1xSetUserOffline_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 28, 4),
    _Dot1xSetUserOffline_Type()
)
dot1xSetUserOffline.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dot1xSetUserOffline.setStatus("current")
_PortMacCountLimit_ObjectIdentity = ObjectIdentity
portMacCountLimit = _PortMacCountLimit_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 29)
)
_PortMacCountLimitTable_Object = MibTable
portMacCountLimitTable = _PortMacCountLimitTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 29, 1)
)
if mibBuilder.loadTexts:
    portMacCountLimitTable.setStatus("current")
_PortMacCountLimitEntry_Object = MibTableRow
portMacCountLimitEntry = _PortMacCountLimitEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 29, 1, 1)
)
portMacCountLimitEntry.setIndexNames(
    (0, "NAG-MIB", "portMacCountLimitPortIndex"),
)
if mibBuilder.loadTexts:
    portMacCountLimitEntry.setStatus("current")
_PortMacCountLimitPortIndex_Type = Integer32
_PortMacCountLimitPortIndex_Object = MibTableColumn
portMacCountLimitPortIndex = _PortMacCountLimitPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 29, 1, 1, 1),
    _PortMacCountLimitPortIndex_Type()
)
portMacCountLimitPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portMacCountLimitPortIndex.setStatus("current")


class _PortMacCountLimitConfigNum_Type(Integer32):
    """Custom type portMacCountLimitConfigNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_PortMacCountLimitConfigNum_Type.__name__ = "Integer32"
_PortMacCountLimitConfigNum_Object = MibTableColumn
portMacCountLimitConfigNum = _PortMacCountLimitConfigNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 29, 1, 1, 2),
    _PortMacCountLimitConfigNum_Type()
)
portMacCountLimitConfigNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    portMacCountLimitConfigNum.setStatus("current")
_PortMacCountLimitCurNum_Type = Integer32
_PortMacCountLimitCurNum_Object = MibTableColumn
portMacCountLimitCurNum = _PortMacCountLimitCurNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 29, 1, 1, 3),
    _PortMacCountLimitCurNum_Type()
)
portMacCountLimitCurNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portMacCountLimitCurNum.setStatus("current")


class _PortMacCountLimitDisable_Type(Integer32):
    """Custom type portMacCountLimitDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("not-disable", 0),
          ("disable", 1))
    )


_PortMacCountLimitDisable_Type.__name__ = "Integer32"
_PortMacCountLimitDisable_Object = MibTableColumn
portMacCountLimitDisable = _PortMacCountLimitDisable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 29, 1, 1, 4),
    _PortMacCountLimitDisable_Type()
)
portMacCountLimitDisable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    portMacCountLimitDisable.setStatus("current")


class _PortMacCountLimitViolationMode_Type(Integer32):
    """Custom type portMacCountLimitViolationMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("protect", 1),
          ("shutdown", 2),
          ("replace", 4))
    )


_PortMacCountLimitViolationMode_Type.__name__ = "Integer32"
_PortMacCountLimitViolationMode_Object = MibTableColumn
portMacCountLimitViolationMode = _PortMacCountLimitViolationMode_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 29, 1, 1, 5),
    _PortMacCountLimitViolationMode_Type()
)
portMacCountLimitViolationMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    portMacCountLimitViolationMode.setStatus("current")


class _PortMacCountLimitShutRecoveryTime_Type(Integer32):
    """Custom type portMacCountLimitShutRecoveryTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
    )


_PortMacCountLimitShutRecoveryTime_Type.__name__ = "Integer32"
_PortMacCountLimitShutRecoveryTime_Object = MibTableColumn
portMacCountLimitShutRecoveryTime = _PortMacCountLimitShutRecoveryTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 29, 1, 1, 6),
    _PortMacCountLimitShutRecoveryTime_Type()
)
portMacCountLimitShutRecoveryTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    portMacCountLimitShutRecoveryTime.setStatus("current")
_Ddm_ObjectIdentity = ObjectIdentity
ddm = _Ddm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30)
)
_DdmTranscDiagnosisTable_Object = MibTable
ddmTranscDiagnosisTable = _DdmTranscDiagnosisTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1)
)
if mibBuilder.loadTexts:
    ddmTranscDiagnosisTable.setStatus("current")
_DdmTranscDiagnosisEntry_Object = MibTableRow
ddmTranscDiagnosisEntry = _DdmTranscDiagnosisEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1)
)
ddmTranscDiagnosisEntry.setIndexNames(
    (0, "NAG-MIB", "ddmDiagnosisIfIndex"),
)
if mibBuilder.loadTexts:
    ddmTranscDiagnosisEntry.setStatus("current")
_DdmDiagnosisIfIndex_Type = Integer32
_DdmDiagnosisIfIndex_Object = MibTableColumn
ddmDiagnosisIfIndex = _DdmDiagnosisIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 1),
    _DdmDiagnosisIfIndex_Type()
)
ddmDiagnosisIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagnosisIfIndex.setStatus("current")


class _DdmDiagnosisTemperature_Type(DisplayString):
    """Custom type ddmDiagnosisTemperature based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_DdmDiagnosisTemperature_Type.__name__ = "DisplayString"
_DdmDiagnosisTemperature_Object = MibTableColumn
ddmDiagnosisTemperature = _DdmDiagnosisTemperature_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 2),
    _DdmDiagnosisTemperature_Type()
)
ddmDiagnosisTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagnosisTemperature.setStatus("current")


class _DdmDiagTempHighAlarmThreshold_Type(DisplayString):
    """Custom type ddmDiagTempHighAlarmThreshold based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_DdmDiagTempHighAlarmThreshold_Type.__name__ = "DisplayString"
_DdmDiagTempHighAlarmThreshold_Object = MibTableColumn
ddmDiagTempHighAlarmThreshold = _DdmDiagTempHighAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 3),
    _DdmDiagTempHighAlarmThreshold_Type()
)
ddmDiagTempHighAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagTempHighAlarmThreshold.setStatus("current")


class _DdmDiagTempLowAlarmThreshold_Type(DisplayString):
    """Custom type ddmDiagTempLowAlarmThreshold based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_DdmDiagTempLowAlarmThreshold_Type.__name__ = "DisplayString"
_DdmDiagTempLowAlarmThreshold_Object = MibTableColumn
ddmDiagTempLowAlarmThreshold = _DdmDiagTempLowAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 4),
    _DdmDiagTempLowAlarmThreshold_Type()
)
ddmDiagTempLowAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagTempLowAlarmThreshold.setStatus("current")


class _DdmDiagTempHighWarnThreshold_Type(DisplayString):
    """Custom type ddmDiagTempHighWarnThreshold based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_DdmDiagTempHighWarnThreshold_Type.__name__ = "DisplayString"
_DdmDiagTempHighWarnThreshold_Object = MibTableColumn
ddmDiagTempHighWarnThreshold = _DdmDiagTempHighWarnThreshold_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 5),
    _DdmDiagTempHighWarnThreshold_Type()
)
ddmDiagTempHighWarnThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagTempHighWarnThreshold.setStatus("current")


class _DdmDiagTempLowWarnThreshold_Type(DisplayString):
    """Custom type ddmDiagTempLowWarnThreshold based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_DdmDiagTempLowWarnThreshold_Type.__name__ = "DisplayString"
_DdmDiagTempLowWarnThreshold_Object = MibTableColumn
ddmDiagTempLowWarnThreshold = _DdmDiagTempLowWarnThreshold_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 6),
    _DdmDiagTempLowWarnThreshold_Type()
)
ddmDiagTempLowWarnThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagTempLowWarnThreshold.setStatus("current")


class _DdmDiagnosisVoltage_Type(DisplayString):
    """Custom type ddmDiagnosisVoltage based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_DdmDiagnosisVoltage_Type.__name__ = "DisplayString"
_DdmDiagnosisVoltage_Object = MibTableColumn
ddmDiagnosisVoltage = _DdmDiagnosisVoltage_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 7),
    _DdmDiagnosisVoltage_Type()
)
ddmDiagnosisVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagnosisVoltage.setStatus("current")


class _DdmDiagVoltHighAlarmThreshold_Type(DisplayString):
    """Custom type ddmDiagVoltHighAlarmThreshold based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_DdmDiagVoltHighAlarmThreshold_Type.__name__ = "DisplayString"
_DdmDiagVoltHighAlarmThreshold_Object = MibTableColumn
ddmDiagVoltHighAlarmThreshold = _DdmDiagVoltHighAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 8),
    _DdmDiagVoltHighAlarmThreshold_Type()
)
ddmDiagVoltHighAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagVoltHighAlarmThreshold.setStatus("current")


class _DdmDiagVoltLowAlarmThreshold_Type(DisplayString):
    """Custom type ddmDiagVoltLowAlarmThreshold based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_DdmDiagVoltLowAlarmThreshold_Type.__name__ = "DisplayString"
_DdmDiagVoltLowAlarmThreshold_Object = MibTableColumn
ddmDiagVoltLowAlarmThreshold = _DdmDiagVoltLowAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 9),
    _DdmDiagVoltLowAlarmThreshold_Type()
)
ddmDiagVoltLowAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagVoltLowAlarmThreshold.setStatus("current")


class _DdmDiagVoltHighWarnThreshold_Type(DisplayString):
    """Custom type ddmDiagVoltHighWarnThreshold based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_DdmDiagVoltHighWarnThreshold_Type.__name__ = "DisplayString"
_DdmDiagVoltHighWarnThreshold_Object = MibTableColumn
ddmDiagVoltHighWarnThreshold = _DdmDiagVoltHighWarnThreshold_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 10),
    _DdmDiagVoltHighWarnThreshold_Type()
)
ddmDiagVoltHighWarnThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagVoltHighWarnThreshold.setStatus("current")


class _DdmDiagVoltLowWarnThreshold_Type(DisplayString):
    """Custom type ddmDiagVoltLowWarnThreshold based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_DdmDiagVoltLowWarnThreshold_Type.__name__ = "DisplayString"
_DdmDiagVoltLowWarnThreshold_Object = MibTableColumn
ddmDiagVoltLowWarnThreshold = _DdmDiagVoltLowWarnThreshold_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 11),
    _DdmDiagVoltLowWarnThreshold_Type()
)
ddmDiagVoltLowWarnThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagVoltLowWarnThreshold.setStatus("current")


class _DdmDiagnosisBias_Type(DisplayString):
    """Custom type ddmDiagnosisBias based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_DdmDiagnosisBias_Type.__name__ = "DisplayString"
_DdmDiagnosisBias_Object = MibTableColumn
ddmDiagnosisBias = _DdmDiagnosisBias_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 12),
    _DdmDiagnosisBias_Type()
)
ddmDiagnosisBias.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagnosisBias.setStatus("current")


class _DdmDiagBiasHighAlarmThreshold_Type(DisplayString):
    """Custom type ddmDiagBiasHighAlarmThreshold based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_DdmDiagBiasHighAlarmThreshold_Type.__name__ = "DisplayString"
_DdmDiagBiasHighAlarmThreshold_Object = MibTableColumn
ddmDiagBiasHighAlarmThreshold = _DdmDiagBiasHighAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 13),
    _DdmDiagBiasHighAlarmThreshold_Type()
)
ddmDiagBiasHighAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagBiasHighAlarmThreshold.setStatus("current")


class _DdmDiagBiasLowAlarmThreshold_Type(DisplayString):
    """Custom type ddmDiagBiasLowAlarmThreshold based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_DdmDiagBiasLowAlarmThreshold_Type.__name__ = "DisplayString"
_DdmDiagBiasLowAlarmThreshold_Object = MibTableColumn
ddmDiagBiasLowAlarmThreshold = _DdmDiagBiasLowAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 14),
    _DdmDiagBiasLowAlarmThreshold_Type()
)
ddmDiagBiasLowAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagBiasLowAlarmThreshold.setStatus("current")


class _DdmDiagBiasHighWarnThreshold_Type(DisplayString):
    """Custom type ddmDiagBiasHighWarnThreshold based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_DdmDiagBiasHighWarnThreshold_Type.__name__ = "DisplayString"
_DdmDiagBiasHighWarnThreshold_Object = MibTableColumn
ddmDiagBiasHighWarnThreshold = _DdmDiagBiasHighWarnThreshold_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 15),
    _DdmDiagBiasHighWarnThreshold_Type()
)
ddmDiagBiasHighWarnThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagBiasHighWarnThreshold.setStatus("current")


class _DdmDiagBiasLowWarnThreshold_Type(DisplayString):
    """Custom type ddmDiagBiasLowWarnThreshold based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_DdmDiagBiasLowWarnThreshold_Type.__name__ = "DisplayString"
_DdmDiagBiasLowWarnThreshold_Object = MibTableColumn
ddmDiagBiasLowWarnThreshold = _DdmDiagBiasLowWarnThreshold_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 16),
    _DdmDiagBiasLowWarnThreshold_Type()
)
ddmDiagBiasLowWarnThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagBiasLowWarnThreshold.setStatus("current")


class _DdmDiagnosisRXPower_Type(DisplayString):
    """Custom type ddmDiagnosisRXPower based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_DdmDiagnosisRXPower_Type.__name__ = "DisplayString"
_DdmDiagnosisRXPower_Object = MibTableColumn
ddmDiagnosisRXPower = _DdmDiagnosisRXPower_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 17),
    _DdmDiagnosisRXPower_Type()
)
ddmDiagnosisRXPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagnosisRXPower.setStatus("current")


class _DdmDiagRXPowerHighAlarmThreshold_Type(DisplayString):
    """Custom type ddmDiagRXPowerHighAlarmThreshold based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_DdmDiagRXPowerHighAlarmThreshold_Type.__name__ = "DisplayString"
_DdmDiagRXPowerHighAlarmThreshold_Object = MibTableColumn
ddmDiagRXPowerHighAlarmThreshold = _DdmDiagRXPowerHighAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 18),
    _DdmDiagRXPowerHighAlarmThreshold_Type()
)
ddmDiagRXPowerHighAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagRXPowerHighAlarmThreshold.setStatus("current")


class _DdmDiagRXPowerLowAlarmThreshold_Type(DisplayString):
    """Custom type ddmDiagRXPowerLowAlarmThreshold based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_DdmDiagRXPowerLowAlarmThreshold_Type.__name__ = "DisplayString"
_DdmDiagRXPowerLowAlarmThreshold_Object = MibTableColumn
ddmDiagRXPowerLowAlarmThreshold = _DdmDiagRXPowerLowAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 19),
    _DdmDiagRXPowerLowAlarmThreshold_Type()
)
ddmDiagRXPowerLowAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagRXPowerLowAlarmThreshold.setStatus("current")


class _DdmDiagRXPowerHighWarnThreshold_Type(DisplayString):
    """Custom type ddmDiagRXPowerHighWarnThreshold based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_DdmDiagRXPowerHighWarnThreshold_Type.__name__ = "DisplayString"
_DdmDiagRXPowerHighWarnThreshold_Object = MibTableColumn
ddmDiagRXPowerHighWarnThreshold = _DdmDiagRXPowerHighWarnThreshold_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 20),
    _DdmDiagRXPowerHighWarnThreshold_Type()
)
ddmDiagRXPowerHighWarnThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagRXPowerHighWarnThreshold.setStatus("current")


class _DdmDiagRXPowerLowWarnThreshold_Type(DisplayString):
    """Custom type ddmDiagRXPowerLowWarnThreshold based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_DdmDiagRXPowerLowWarnThreshold_Type.__name__ = "DisplayString"
_DdmDiagRXPowerLowWarnThreshold_Object = MibTableColumn
ddmDiagRXPowerLowWarnThreshold = _DdmDiagRXPowerLowWarnThreshold_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 21),
    _DdmDiagRXPowerLowWarnThreshold_Type()
)
ddmDiagRXPowerLowWarnThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagRXPowerLowWarnThreshold.setStatus("current")


class _DdmDiagnosisTXPower_Type(DisplayString):
    """Custom type ddmDiagnosisTXPower based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_DdmDiagnosisTXPower_Type.__name__ = "DisplayString"
_DdmDiagnosisTXPower_Object = MibTableColumn
ddmDiagnosisTXPower = _DdmDiagnosisTXPower_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 22),
    _DdmDiagnosisTXPower_Type()
)
ddmDiagnosisTXPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagnosisTXPower.setStatus("current")


class _DdmDiagTXPowerHighAlarmThreshold_Type(DisplayString):
    """Custom type ddmDiagTXPowerHighAlarmThreshold based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_DdmDiagTXPowerHighAlarmThreshold_Type.__name__ = "DisplayString"
_DdmDiagTXPowerHighAlarmThreshold_Object = MibTableColumn
ddmDiagTXPowerHighAlarmThreshold = _DdmDiagTXPowerHighAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 23),
    _DdmDiagTXPowerHighAlarmThreshold_Type()
)
ddmDiagTXPowerHighAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagTXPowerHighAlarmThreshold.setStatus("current")


class _DdmDiagTXPowerLowAlarmThreshold_Type(DisplayString):
    """Custom type ddmDiagTXPowerLowAlarmThreshold based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_DdmDiagTXPowerLowAlarmThreshold_Type.__name__ = "DisplayString"
_DdmDiagTXPowerLowAlarmThreshold_Object = MibTableColumn
ddmDiagTXPowerLowAlarmThreshold = _DdmDiagTXPowerLowAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 24),
    _DdmDiagTXPowerLowAlarmThreshold_Type()
)
ddmDiagTXPowerLowAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagTXPowerLowAlarmThreshold.setStatus("current")


class _DdmDiagTXPowerHighWarnThreshold_Type(DisplayString):
    """Custom type ddmDiagTXPowerHighWarnThreshold based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_DdmDiagTXPowerHighWarnThreshold_Type.__name__ = "DisplayString"
_DdmDiagTXPowerHighWarnThreshold_Object = MibTableColumn
ddmDiagTXPowerHighWarnThreshold = _DdmDiagTXPowerHighWarnThreshold_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 25),
    _DdmDiagTXPowerHighWarnThreshold_Type()
)
ddmDiagTXPowerHighWarnThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagTXPowerHighWarnThreshold.setStatus("current")


class _DdmDiagTXPowerLowWarnThreshold_Type(DisplayString):
    """Custom type ddmDiagTXPowerLowWarnThreshold based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_DdmDiagTXPowerLowWarnThreshold_Type.__name__ = "DisplayString"
_DdmDiagTXPowerLowWarnThreshold_Object = MibTableColumn
ddmDiagTXPowerLowWarnThreshold = _DdmDiagTXPowerLowWarnThreshold_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 1, 1, 26),
    _DdmDiagTXPowerLowWarnThreshold_Type()
)
ddmDiagTXPowerLowWarnThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmDiagTXPowerLowWarnThreshold.setStatus("current")
_DdmTranscAlarmTable_Object = MibTable
ddmTranscAlarmTable = _DdmTranscAlarmTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 2)
)
if mibBuilder.loadTexts:
    ddmTranscAlarmTable.setStatus("current")
_DdmTranscAlarmEntry_Object = MibTableRow
ddmTranscAlarmEntry = _DdmTranscAlarmEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 2, 1)
)
ddmTranscAlarmEntry.setIndexNames(
    (0, "NAG-MIB", "ddmAlarmIfIndex"),
)
if mibBuilder.loadTexts:
    ddmTranscAlarmEntry.setStatus("current")
_DdmAlarmIfIndex_Type = Integer32
_DdmAlarmIfIndex_Object = MibTableColumn
ddmAlarmIfIndex = _DdmAlarmIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 2, 1, 1),
    _DdmAlarmIfIndex_Type()
)
ddmAlarmIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmAlarmIfIndex.setStatus("current")


class _DdmAlarmInfo_Type(DisplayString):
    """Custom type ddmAlarmInfo based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_DdmAlarmInfo_Type.__name__ = "DisplayString"
_DdmAlarmInfo_Object = MibTableColumn
ddmAlarmInfo = _DdmAlarmInfo_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 2, 1, 2),
    _DdmAlarmInfo_Type()
)
ddmAlarmInfo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmAlarmInfo.setStatus("current")
_DdmTranscBasicInfoTable_Object = MibTable
ddmTranscBasicInfoTable = _DdmTranscBasicInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3)
)
if mibBuilder.loadTexts:
    ddmTranscBasicInfoTable.setStatus("current")
_DdmTranscBasicInfoEntry_Object = MibTableRow
ddmTranscBasicInfoEntry = _DdmTranscBasicInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1)
)
ddmTranscBasicInfoEntry.setIndexNames(
    (0, "NAG-MIB", "ddmAlarmIfIndex"),
)
if mibBuilder.loadTexts:
    ddmTranscBasicInfoEntry.setStatus("current")
_DdmTransSerialIndex_Type = Integer32
_DdmTransSerialIndex_Object = MibTableColumn
ddmTransSerialIndex = _DdmTransSerialIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1, 1),
    _DdmTransSerialIndex_Type()
)
ddmTransSerialIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmTransSerialIndex.setStatus("current")


class _DdmTransSerialName_Type(DisplayString):
    """Custom type ddmTransSerialName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_DdmTransSerialName_Type.__name__ = "DisplayString"
_DdmTransSerialName_Object = MibTableColumn
ddmTransSerialName = _DdmTransSerialName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1, 2),
    _DdmTransSerialName_Type()
)
ddmTransSerialName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmTransSerialName.setStatus("current")


class _DdmTransSerialNo_Type(DisplayString):
    """Custom type ddmTransSerialNo based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_DdmTransSerialNo_Type.__name__ = "DisplayString"
_DdmTransSerialNo_Object = MibTableColumn
ddmTransSerialNo = _DdmTransSerialNo_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1, 3),
    _DdmTransSerialNo_Type()
)
ddmTransSerialNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmTransSerialNo.setStatus("current")


class _DdmTransSerialVendorName_Type(DisplayString):
    """Custom type ddmTransSerialVendorName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_DdmTransSerialVendorName_Type.__name__ = "DisplayString"
_DdmTransSerialVendorName_Object = MibTableColumn
ddmTransSerialVendorName = _DdmTransSerialVendorName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1, 4),
    _DdmTransSerialVendorName_Type()
)
ddmTransSerialVendorName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmTransSerialVendorName.setStatus("current")


class _DdmTransSerialModelName_Type(DisplayString):
    """Custom type ddmTransSerialModelName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_DdmTransSerialModelName_Type.__name__ = "DisplayString"
_DdmTransSerialModelName_Object = MibTableColumn
ddmTransSerialModelName = _DdmTransSerialModelName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1, 5),
    _DdmTransSerialModelName_Type()
)
ddmTransSerialModelName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmTransSerialModelName.setStatus("current")


class _DdmTransSerialTypeName_Type(DisplayString):
    """Custom type ddmTransSerialTypeName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_DdmTransSerialTypeName_Type.__name__ = "DisplayString"
_DdmTransSerialTypeName_Object = MibTableColumn
ddmTransSerialTypeName = _DdmTransSerialTypeName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1, 6),
    _DdmTransSerialTypeName_Type()
)
ddmTransSerialTypeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmTransSerialTypeName.setStatus("current")


class _DdmTransSerialBitRate_Type(DisplayString):
    """Custom type ddmTransSerialBitRate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_DdmTransSerialBitRate_Type.__name__ = "DisplayString"
_DdmTransSerialBitRate_Object = MibTableColumn
ddmTransSerialBitRate = _DdmTransSerialBitRate_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1, 7),
    _DdmTransSerialBitRate_Type()
)
ddmTransSerialBitRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmTransSerialBitRate.setStatus("current")


class _DdmTransSerialWaveLength_Type(DisplayString):
    """Custom type ddmTransSerialWaveLength based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_DdmTransSerialWaveLength_Type.__name__ = "DisplayString"
_DdmTransSerialWaveLength_Object = MibTableColumn
ddmTransSerialWaveLength = _DdmTransSerialWaveLength_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 30, 3, 1, 8),
    _DdmTransSerialWaveLength_Type()
)
ddmTransSerialWaveLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ddmTransSerialWaveLength.setStatus("current")
_PriPppoeIaMib_ObjectIdentity = ObjectIdentity
priPppoeIaMib = _PriPppoeIaMib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 31)
)


class _PriPppoeIaGlobalEnable_Type(Integer32):
    """Custom type priPppoeIaGlobalEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_PriPppoeIaGlobalEnable_Type.__name__ = "Integer32"
_PriPppoeIaGlobalEnable_Object = MibScalar
priPppoeIaGlobalEnable = _PriPppoeIaGlobalEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 1),
    _PriPppoeIaGlobalEnable_Type()
)
priPppoeIaGlobalEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priPppoeIaGlobalEnable.setStatus("current")


class _PriPppoeIaSelfDefinedCircuitID_Type(DisplayString):
    """Custom type priPppoeIaSelfDefinedCircuitID based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_PriPppoeIaSelfDefinedCircuitID_Type.__name__ = "DisplayString"
_PriPppoeIaSelfDefinedCircuitID_Object = MibScalar
priPppoeIaSelfDefinedCircuitID = _PriPppoeIaSelfDefinedCircuitID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 2),
    _PriPppoeIaSelfDefinedCircuitID_Type()
)
priPppoeIaSelfDefinedCircuitID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priPppoeIaSelfDefinedCircuitID.setStatus("current")


class _PriPppoeIaTr101CircuitID_Type(DisplayString):
    """Custom type priPppoeIaTr101CircuitID based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_PriPppoeIaTr101CircuitID_Type.__name__ = "DisplayString"
_PriPppoeIaTr101CircuitID_Object = MibScalar
priPppoeIaTr101CircuitID = _PriPppoeIaTr101CircuitID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 3),
    _PriPppoeIaTr101CircuitID_Type()
)
priPppoeIaTr101CircuitID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priPppoeIaTr101CircuitID.setStatus("current")


class _PriPppoeIaSelfDefinedRemoteID_Type(DisplayString):
    """Custom type priPppoeIaSelfDefinedRemoteID based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_PriPppoeIaSelfDefinedRemoteID_Type.__name__ = "DisplayString"
_PriPppoeIaSelfDefinedRemoteID_Object = MibScalar
priPppoeIaSelfDefinedRemoteID = _PriPppoeIaSelfDefinedRemoteID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 4),
    _PriPppoeIaSelfDefinedRemoteID_Type()
)
priPppoeIaSelfDefinedRemoteID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priPppoeIaSelfDefinedRemoteID.setStatus("current")


class _PriPppoeIaDelimiter_Type(Integer32):
    """Custom type priPppoeIaDelimiter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("pound", 1),
          ("dot", 2),
          ("comma", 3),
          ("semicolon", 4),
          ("colon", 5),
          ("slash", 6),
          ("space", 7))
    )


_PriPppoeIaDelimiter_Type.__name__ = "Integer32"
_PriPppoeIaDelimiter_Object = MibScalar
priPppoeIaDelimiter = _PriPppoeIaDelimiter_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 5),
    _PriPppoeIaDelimiter_Type()
)
priPppoeIaDelimiter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priPppoeIaDelimiter.setStatus("current")


class _PriPppoeIaCircuitIdFormat_Type(Integer32):
    """Custom type priPppoeIaCircuitIdFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("hex", 1),
          ("ascii", 2))
    )


_PriPppoeIaCircuitIdFormat_Type.__name__ = "Integer32"
_PriPppoeIaCircuitIdFormat_Object = MibScalar
priPppoeIaCircuitIdFormat = _PriPppoeIaCircuitIdFormat_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 6),
    _PriPppoeIaCircuitIdFormat_Type()
)
priPppoeIaCircuitIdFormat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priPppoeIaCircuitIdFormat.setStatus("current")


class _PriPppoeIaRemoteIdFormat_Type(Integer32):
    """Custom type priPppoeIaRemoteIdFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("hex", 1),
          ("ascii", 2))
    )


_PriPppoeIaRemoteIdFormat_Type.__name__ = "Integer32"
_PriPppoeIaRemoteIdFormat_Object = MibScalar
priPppoeIaRemoteIdFormat = _PriPppoeIaRemoteIdFormat_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 7),
    _PriPppoeIaRemoteIdFormat_Type()
)
priPppoeIaRemoteIdFormat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priPppoeIaRemoteIdFormat.setStatus("current")
_PriPppoeIaPortTable_Object = MibTable
priPppoeIaPortTable = _PriPppoeIaPortTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 8)
)
if mibBuilder.loadTexts:
    priPppoeIaPortTable.setStatus("current")
_PriPppoeIaEntry_Object = MibTableRow
priPppoeIaEntry = _PriPppoeIaEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 8, 1)
)
priPppoeIaEntry.setIndexNames(
    (0, "NAG-MIB", "priPppoeIaPortID"),
)
if mibBuilder.loadTexts:
    priPppoeIaEntry.setStatus("current")
_PriPppoeIaPortID_Type = Integer32
_PriPppoeIaPortID_Object = MibTableColumn
priPppoeIaPortID = _PriPppoeIaPortID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 8, 1, 1),
    _PriPppoeIaPortID_Type()
)
priPppoeIaPortID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    priPppoeIaPortID.setStatus("current")


class _PriPppoeIaPortEnable_Type(Integer32):
    """Custom type priPppoeIaPortEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_PriPppoeIaPortEnable_Type.__name__ = "Integer32"
_PriPppoeIaPortEnable_Object = MibTableColumn
priPppoeIaPortEnable = _PriPppoeIaPortEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 8, 1, 2),
    _PriPppoeIaPortEnable_Type()
)
priPppoeIaPortEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priPppoeIaPortEnable.setStatus("current")


class _PriPppoeIaPortCircuitID_Type(DisplayString):
    """Custom type priPppoeIaPortCircuitID based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_PriPppoeIaPortCircuitID_Type.__name__ = "DisplayString"
_PriPppoeIaPortCircuitID_Object = MibTableColumn
priPppoeIaPortCircuitID = _PriPppoeIaPortCircuitID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 8, 1, 3),
    _PriPppoeIaPortCircuitID_Type()
)
priPppoeIaPortCircuitID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priPppoeIaPortCircuitID.setStatus("current")


class _PriPppoeIaPortRemoteID_Type(DisplayString):
    """Custom type priPppoeIaPortRemoteID based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_PriPppoeIaPortRemoteID_Type.__name__ = "DisplayString"
_PriPppoeIaPortRemoteID_Object = MibTableColumn
priPppoeIaPortRemoteID = _PriPppoeIaPortRemoteID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 8, 1, 4),
    _PriPppoeIaPortRemoteID_Type()
)
priPppoeIaPortRemoteID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priPppoeIaPortRemoteID.setStatus("current")


class _PriPppoeIaPortTrust_Type(Integer32):
    """Custom type priPppoeIaPortTrust based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_PriPppoeIaPortTrust_Type.__name__ = "Integer32"
_PriPppoeIaPortTrust_Object = MibTableColumn
priPppoeIaPortTrust = _PriPppoeIaPortTrust_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 8, 1, 5),
    _PriPppoeIaPortTrust_Type()
)
priPppoeIaPortTrust.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priPppoeIaPortTrust.setStatus("current")


class _PriPppoeIaPortVendorTagStrip_Type(Integer32):
    """Custom type priPppoeIaPortVendorTagStrip based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_PriPppoeIaPortVendorTagStrip_Type.__name__ = "Integer32"
_PriPppoeIaPortVendorTagStrip_Object = MibTableColumn
priPppoeIaPortVendorTagStrip = _PriPppoeIaPortVendorTagStrip_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 31, 8, 1, 6),
    _PriPppoeIaPortVendorTagStrip_Type()
)
priPppoeIaPortVendorTagStrip.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    priPppoeIaPortVendorTagStrip.setStatus("current")
_PortSecurity_ObjectIdentity = ObjectIdentity
portSecurity = _PortSecurity_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32)
)
_NewPortSecurityTable_Object = MibTable
newPortSecurityTable = _NewPortSecurityTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1)
)
if mibBuilder.loadTexts:
    newPortSecurityTable.setStatus("current")
_NewPortSecurityEntry_Object = MibTableRow
newPortSecurityEntry = _NewPortSecurityEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1)
)
newPortSecurityEntry.setIndexNames(
    (0, "NAG-MIB", "portSecurityPortIndex"),
)
if mibBuilder.loadTexts:
    newPortSecurityEntry.setStatus("current")
_PortSecurityPortIndex_Type = Integer32
_PortSecurityPortIndex_Object = MibTableColumn
portSecurityPortIndex = _PortSecurityPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 1),
    _PortSecurityPortIndex_Type()
)
portSecurityPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portSecurityPortIndex.setStatus("current")


class _PortSecurityState_Type(Integer32):
    """Custom type portSecurityState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_PortSecurityState_Type.__name__ = "Integer32"
_PortSecurityState_Object = MibTableColumn
portSecurityState = _PortSecurityState_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 2),
    _PortSecurityState_Type()
)
portSecurityState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    portSecurityState.setStatus("current")


class _PortSecuritySticky_Type(Integer32):
    """Custom type portSecuritySticky based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_PortSecuritySticky_Type.__name__ = "Integer32"
_PortSecuritySticky_Object = MibTableColumn
portSecuritySticky = _PortSecuritySticky_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 3),
    _PortSecuritySticky_Type()
)
portSecuritySticky.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    portSecuritySticky.setStatus("current")


class _PortSecurityMaxMacNum_Type(Integer32):
    """Custom type portSecurityMaxMacNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4096),
    )


_PortSecurityMaxMacNum_Type.__name__ = "Integer32"
_PortSecurityMaxMacNum_Object = MibTableColumn
portSecurityMaxMacNum = _PortSecurityMaxMacNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 4),
    _PortSecurityMaxMacNum_Type()
)
portSecurityMaxMacNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    portSecurityMaxMacNum.setStatus("current")


class _PortSecurityCurMacNum_Type(Integer32):
    """Custom type portSecurityCurMacNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_PortSecurityCurMacNum_Type.__name__ = "Integer32"
_PortSecurityCurMacNum_Object = MibTableColumn
portSecurityCurMacNum = _PortSecurityCurMacNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 5),
    _PortSecurityCurMacNum_Type()
)
portSecurityCurMacNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portSecurityCurMacNum.setStatus("current")


class _PortSecurityCfgMacNum_Type(Integer32):
    """Custom type portSecurityCfgMacNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_PortSecurityCfgMacNum_Type.__name__ = "Integer32"
_PortSecurityCfgMacNum_Object = MibTableColumn
portSecurityCfgMacNum = _PortSecurityCfgMacNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 6),
    _PortSecurityCfgMacNum_Type()
)
portSecurityCfgMacNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portSecurityCfgMacNum.setStatus("current")


class _PortSecurityVioMacNum_Type(Integer32):
    """Custom type portSecurityVioMacNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_PortSecurityVioMacNum_Type.__name__ = "Integer32"
_PortSecurityVioMacNum_Object = MibTableColumn
portSecurityVioMacNum = _PortSecurityVioMacNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 7),
    _PortSecurityVioMacNum_Type()
)
portSecurityVioMacNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portSecurityVioMacNum.setStatus("current")


class _PortSecurityAgingTime_Type(Integer32):
    """Custom type portSecurityAgingTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1440),
    )


_PortSecurityAgingTime_Type.__name__ = "Integer32"
_PortSecurityAgingTime_Object = MibTableColumn
portSecurityAgingTime = _PortSecurityAgingTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 8),
    _PortSecurityAgingTime_Type()
)
portSecurityAgingTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    portSecurityAgingTime.setStatus("current")


class _PortSecurityAgingType_Type(Integer32):
    """Custom type portSecurityAgingType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("absolute", 1),
          ("inactivity", 2),
          ("static", 4),
          ("absolute-static", 5),
          ("inactivity-static", 6))
    )


_PortSecurityAgingType_Type.__name__ = "Integer32"
_PortSecurityAgingType_Object = MibTableColumn
portSecurityAgingType = _PortSecurityAgingType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 9),
    _PortSecurityAgingType_Type()
)
portSecurityAgingType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    portSecurityAgingType.setStatus("current")


class _PortSecurityVioMode_Type(Integer32):
    """Custom type portSecurityVioMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("protect", 1),
          ("restrict", 2),
          ("shutdown", 3))
    )


_PortSecurityVioMode_Type.__name__ = "Integer32"
_PortSecurityVioMode_Object = MibTableColumn
portSecurityVioMode = _PortSecurityVioMode_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 10),
    _PortSecurityVioMode_Type()
)
portSecurityVioMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    portSecurityVioMode.setStatus("current")


class _PortSecurityVioShutRecoveryTime_Type(Integer32):
    """Custom type portSecurityVioShutRecoveryTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
    )


_PortSecurityVioShutRecoveryTime_Type.__name__ = "Integer32"
_PortSecurityVioShutRecoveryTime_Object = MibTableColumn
portSecurityVioShutRecoveryTime = _PortSecurityVioShutRecoveryTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 11),
    _PortSecurityVioShutRecoveryTime_Type()
)
portSecurityVioShutRecoveryTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    portSecurityVioShutRecoveryTime.setStatus("current")


class _PortSecurityVioRestrictRecoveryTime_Type(Integer32):
    """Custom type portSecurityVioRestrictRecoveryTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
    )


_PortSecurityVioRestrictRecoveryTime_Type.__name__ = "Integer32"
_PortSecurityVioRestrictRecoveryTime_Object = MibTableColumn
portSecurityVioRestrictRecoveryTime = _PortSecurityVioRestrictRecoveryTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 1, 1, 12),
    _PortSecurityVioRestrictRecoveryTime_Type()
)
portSecurityVioRestrictRecoveryTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    portSecurityVioRestrictRecoveryTime.setStatus("current")
_PortSecurityVlanMaxNumTable_Object = MibTable
portSecurityVlanMaxNumTable = _PortSecurityVlanMaxNumTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 2)
)
if mibBuilder.loadTexts:
    portSecurityVlanMaxNumTable.setStatus("current")
_PortSecurityVlanMaxNumEntry_Object = MibTableRow
portSecurityVlanMaxNumEntry = _PortSecurityVlanMaxNumEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 2, 1)
)
portSecurityVlanMaxNumEntry.setIndexNames(
    (0, "NAG-MIB", "portSecurityPortIndex"),
    (0, "NAG-MIB", "portSecurityVlanIndex"),
)
if mibBuilder.loadTexts:
    portSecurityVlanMaxNumEntry.setStatus("current")
_PortSecurityVlanPortIndex_Type = Integer32
_PortSecurityVlanPortIndex_Object = MibTableColumn
portSecurityVlanPortIndex = _PortSecurityVlanPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 2, 1, 1),
    _PortSecurityVlanPortIndex_Type()
)
portSecurityVlanPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portSecurityVlanPortIndex.setStatus("current")


class _PortSecurityVlanIndex_Type(Integer32):
    """Custom type portSecurityVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_PortSecurityVlanIndex_Type.__name__ = "Integer32"
_PortSecurityVlanIndex_Object = MibTableColumn
portSecurityVlanIndex = _PortSecurityVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 2, 1, 2),
    _PortSecurityVlanIndex_Type()
)
portSecurityVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portSecurityVlanIndex.setStatus("current")


class _PortSecurityVlanMaxMacNum_Type(Integer32):
    """Custom type portSecurityVlanMaxMacNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4096),
    )


_PortSecurityVlanMaxMacNum_Type.__name__ = "Integer32"
_PortSecurityVlanMaxMacNum_Object = MibTableColumn
portSecurityVlanMaxMacNum = _PortSecurityVlanMaxMacNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 2, 1, 3),
    _PortSecurityVlanMaxMacNum_Type()
)
portSecurityVlanMaxMacNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    portSecurityVlanMaxMacNum.setStatus("current")


class _PortSecurityVlanCurMacNum_Type(Integer32):
    """Custom type portSecurityVlanCurMacNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_PortSecurityVlanCurMacNum_Type.__name__ = "Integer32"
_PortSecurityVlanCurMacNum_Object = MibTableColumn
portSecurityVlanCurMacNum = _PortSecurityVlanCurMacNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 2, 1, 4),
    _PortSecurityVlanCurMacNum_Type()
)
portSecurityVlanCurMacNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portSecurityVlanCurMacNum.setStatus("current")
_PortSecurityMacAddressTable_Object = MibTable
portSecurityMacAddressTable = _PortSecurityMacAddressTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 3)
)
if mibBuilder.loadTexts:
    portSecurityMacAddressTable.setStatus("current")
_PortSecurityMacAddressEntry_Object = MibTableRow
portSecurityMacAddressEntry = _PortSecurityMacAddressEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 3, 1)
)
portSecurityMacAddressEntry.setIndexNames(
    (0, "NAG-MIB", "portSecurityPortIndex"),
    (0, "NAG-MIB", "portSecurityVlanIndex"),
    (0, "NAG-MIB", "portSecurityMacAddress"),
)
if mibBuilder.loadTexts:
    portSecurityMacAddressEntry.setStatus("current")
_PortSecurityMacAddressPortIndex_Type = Integer32
_PortSecurityMacAddressPortIndex_Object = MibTableColumn
portSecurityMacAddressPortIndex = _PortSecurityMacAddressPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 3, 1, 1),
    _PortSecurityMacAddressPortIndex_Type()
)
portSecurityMacAddressPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portSecurityMacAddressPortIndex.setStatus("current")


class _PortSecurityMacAddressVlanIndex_Type(Integer32):
    """Custom type portSecurityMacAddressVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_PortSecurityMacAddressVlanIndex_Type.__name__ = "Integer32"
_PortSecurityMacAddressVlanIndex_Object = MibTableColumn
portSecurityMacAddressVlanIndex = _PortSecurityMacAddressVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 3, 1, 2),
    _PortSecurityMacAddressVlanIndex_Type()
)
portSecurityMacAddressVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portSecurityMacAddressVlanIndex.setStatus("current")


class _PortSecurityMacAddress_Type(OctetString):
    """Custom type portSecurityMacAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )
    fixed_length = 6


_PortSecurityMacAddress_Type.__name__ = "OctetString"
_PortSecurityMacAddress_Object = MibTableColumn
portSecurityMacAddress = _PortSecurityMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 3, 1, 3),
    _PortSecurityMacAddress_Type()
)
portSecurityMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portSecurityMacAddress.setStatus("current")


class _PortSecurityMacType_Type(Integer32):
    """Custom type portSecurityMacType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(16,
              32,
              64)
        )
    )
    namedValues = NamedValues(
        *(("secured", 16),
          ("secures", 32),
          ("securec", 64))
    )


_PortSecurityMacType_Type.__name__ = "Integer32"
_PortSecurityMacType_Object = MibTableColumn
portSecurityMacType = _PortSecurityMacType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 3, 1, 4),
    _PortSecurityMacType_Type()
)
portSecurityMacType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    portSecurityMacType.setStatus("current")


class _PortSecurityMacStatus_Type(Integer32):
    """Custom type portSecurityMacStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createAndGo", 0),
          ("active", 1),
          ("destroy", 2))
    )


_PortSecurityMacStatus_Type.__name__ = "Integer32"
_PortSecurityMacStatus_Object = MibTableColumn
portSecurityMacStatus = _PortSecurityMacStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 32, 3, 1, 5),
    _PortSecurityMacStatus_Type()
)
portSecurityMacStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    portSecurityMacStatus.setStatus("current")
_MacNotificationMib_ObjectIdentity = ObjectIdentity
macNotificationMib = _MacNotificationMib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 33)
)
_MacNotificationMibObjects_ObjectIdentity = ObjectIdentity
macNotificationMibObjects = _MacNotificationMibObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1)
)
_MacNotificationGlobalObjects_ObjectIdentity = ObjectIdentity
macNotificationGlobalObjects = _MacNotificationGlobalObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1)
)
_MacNotificationGlobalFeatureEnabled_Type = TruthValue
_MacNotificationGlobalFeatureEnabled_Object = MibScalar
macNotificationGlobalFeatureEnabled = _MacNotificationGlobalFeatureEnabled_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 1),
    _MacNotificationGlobalFeatureEnabled_Type()
)
macNotificationGlobalFeatureEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macNotificationGlobalFeatureEnabled.setStatus("current")
_MacNotificationNotificationInterval_Type = Counter32
_MacNotificationNotificationInterval_Object = MibScalar
macNotificationNotificationInterval = _MacNotificationNotificationInterval_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 2),
    _MacNotificationNotificationInterval_Type()
)
macNotificationNotificationInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macNotificationNotificationInterval.setStatus("current")
if mibBuilder.loadTexts:
    macNotificationNotificationInterval.setUnits("seconds")
_MacNotificationMacAddressesLearnt_Type = Counter32
_MacNotificationMacAddressesLearnt_Object = MibScalar
macNotificationMacAddressesLearnt = _MacNotificationMacAddressesLearnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 3),
    _MacNotificationMacAddressesLearnt_Type()
)
macNotificationMacAddressesLearnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macNotificationMacAddressesLearnt.setStatus("current")
_MacNotificationMacAddressesRemoved_Type = Counter32
_MacNotificationMacAddressesRemoved_Object = MibScalar
macNotificationMacAddressesRemoved = _MacNotificationMacAddressesRemoved_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 4),
    _MacNotificationMacAddressesRemoved_Type()
)
macNotificationMacAddressesRemoved.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macNotificationMacAddressesRemoved.setStatus("current")


class _MacNotificationNotificationsEnabled_Type(TruthValue):
    """Custom type macNotificationNotificationsEnabled based on TruthValue"""
    defaultValue = 2


_MacNotificationNotificationsEnabled_Type.__name__ = "TruthValue"
_MacNotificationNotificationsEnabled_Object = MibScalar
macNotificationNotificationsEnabled = _MacNotificationNotificationsEnabled_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 5),
    _MacNotificationNotificationsEnabled_Type()
)
macNotificationNotificationsEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macNotificationNotificationsEnabled.setStatus("current")
_MacNotificationNotificationsSent_Type = Counter32
_MacNotificationNotificationsSent_Object = MibScalar
macNotificationNotificationsSent = _MacNotificationNotificationsSent_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 6),
    _MacNotificationNotificationsSent_Type()
)
macNotificationNotificationsSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macNotificationNotificationsSent.setStatus("current")
_MacNotificationHistTableMaxLength_Type = Counter32
_MacNotificationHistTableMaxLength_Object = MibScalar
macNotificationHistTableMaxLength = _MacNotificationHistTableMaxLength_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 7),
    _MacNotificationHistTableMaxLength_Type()
)
macNotificationHistTableMaxLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macNotificationHistTableMaxLength.setStatus("current")
if mibBuilder.loadTexts:
    macNotificationHistTableMaxLength.setUnits("entries")
_MacNotificationHistoryTable_Object = MibTable
macNotificationHistoryTable = _MacNotificationHistoryTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 8)
)
if mibBuilder.loadTexts:
    macNotificationHistoryTable.setStatus("current")
_MacNotificationHistoryEntry_Object = MibTableRow
macNotificationHistoryEntry = _MacNotificationHistoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 8, 1)
)
macNotificationHistoryEntry.setIndexNames(
    (0, "NAG-MIB", "macNotificationHistIndex"),
)
if mibBuilder.loadTexts:
    macNotificationHistoryEntry.setStatus("current")
_MacNotificationHistIndex_Type = Counter32
_MacNotificationHistIndex_Object = MibTableColumn
macNotificationHistIndex = _MacNotificationHistIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 8, 1, 1),
    _MacNotificationHistIndex_Type()
)
macNotificationHistIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macNotificationHistIndex.setStatus("current")


class _MacNotificationHistMacChangedMsg_Type(OctetString):
    """Custom type macNotificationHistMacChangedMsg based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 254),
    )


_MacNotificationHistMacChangedMsg_Type.__name__ = "OctetString"
_MacNotificationHistMacChangedMsg_Object = MibTableColumn
macNotificationHistMacChangedMsg = _MacNotificationHistMacChangedMsg_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 8, 1, 2),
    _MacNotificationHistMacChangedMsg_Type()
)
macNotificationHistMacChangedMsg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macNotificationHistMacChangedMsg.setStatus("current")
_MacNotificationHistTimestamp_Type = TimeStamp
_MacNotificationHistTimestamp_Object = MibTableColumn
macNotificationHistTimestamp = _MacNotificationHistTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 1, 8, 1, 3),
    _MacNotificationHistTimestamp_Type()
)
macNotificationHistTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macNotificationHistTimestamp.setStatus("current")
_MacNotificationInterfaceObjects_ObjectIdentity = ObjectIdentity
macNotificationInterfaceObjects = _MacNotificationInterfaceObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 2)
)
_MacNotificationIfConfigTable_Object = MibTable
macNotificationIfConfigTable = _MacNotificationIfConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 2, 1)
)
if mibBuilder.loadTexts:
    macNotificationIfConfigTable.setStatus("current")
_MacNotificationIfConfigEntry_Object = MibTableRow
macNotificationIfConfigEntry = _MacNotificationIfConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 2, 1, 1)
)
if mibBuilder.loadTexts:
    macNotificationIfConfigEntry.setStatus("current")


class _MacNotificationMacAddrLearntEnable_Type(TruthValue):
    """Custom type macNotificationMacAddrLearntEnable based on TruthValue"""
    defaultValue = 2


_MacNotificationMacAddrLearntEnable_Type.__name__ = "TruthValue"
_MacNotificationMacAddrLearntEnable_Object = MibTableColumn
macNotificationMacAddrLearntEnable = _MacNotificationMacAddrLearntEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 2, 1, 1, 1),
    _MacNotificationMacAddrLearntEnable_Type()
)
macNotificationMacAddrLearntEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macNotificationMacAddrLearntEnable.setStatus("current")


class _MacNotificationMacAddrRemovedEnable_Type(TruthValue):
    """Custom type macNotificationMacAddrRemovedEnable based on TruthValue"""
    defaultValue = 2


_MacNotificationMacAddrRemovedEnable_Type.__name__ = "TruthValue"
_MacNotificationMacAddrRemovedEnable_Object = MibTableColumn
macNotificationMacAddrRemovedEnable = _MacNotificationMacAddrRemovedEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 33, 1, 2, 1, 1, 2),
    _MacNotificationMacAddrRemovedEnable_Type()
)
macNotificationMacAddrRemovedEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    macNotificationMacAddrRemovedEnable.setStatus("current")
_PrieeePortConfig_ObjectIdentity = ObjectIdentity
prieeePortConfig = _PrieeePortConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 34)
)
_PrieeePortTable_Object = MibTable
prieeePortTable = _PrieeePortTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 34, 1)
)
if mibBuilder.loadTexts:
    prieeePortTable.setStatus("current")
_PrieeePortEntry_Object = MibTableRow
prieeePortEntry = _PrieeePortEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 34, 1, 1)
)
prieeePortEntry.setIndexNames(
    (0, "NAG-MIB", "portIndex"),
)
if mibBuilder.loadTexts:
    prieeePortEntry.setStatus("current")
_EeePortIndex_Type = Integer32
_EeePortIndex_Object = MibTableColumn
eeePortIndex = _EeePortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 34, 1, 1, 1),
    _EeePortIndex_Type()
)
eeePortIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    eeePortIndex.setStatus("current")


class _EeePortStatus_Type(Integer32):
    """Custom type eeePortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_EeePortStatus_Type.__name__ = "Integer32"
_EeePortStatus_Object = MibTableColumn
eeePortStatus = _EeePortStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 34, 1, 1, 2),
    _EeePortStatus_Type()
)
eeePortStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    eeePortStatus.setStatus("current")
_PortRateLimit_ObjectIdentity = ObjectIdentity
portRateLimit = _PortRateLimit_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 35)
)
_PortRateLimitTable_Object = MibTable
portRateLimitTable = _PortRateLimitTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1)
)
if mibBuilder.loadTexts:
    portRateLimitTable.setStatus("current")
_PortRateLimitEntry_Object = MibTableRow
portRateLimitEntry = _PortRateLimitEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1)
)
portRateLimitEntry.setIndexNames(
    (0, "NAG-MIB", "portRateLimitPortIndex"),
)
if mibBuilder.loadTexts:
    portRateLimitEntry.setStatus("current")
_PortRateLimitPortIndex_Type = Integer32
_PortRateLimitPortIndex_Object = MibTableColumn
portRateLimitPortIndex = _PortRateLimitPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 1),
    _PortRateLimitPortIndex_Type()
)
portRateLimitPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portRateLimitPortIndex.setStatus("current")


class _PortRateLimitConfigBroadcastNum_Type(Integer32):
    """Custom type portRateLimitConfigBroadcastNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2000000),
    )


_PortRateLimitConfigBroadcastNum_Type.__name__ = "Integer32"
_PortRateLimitConfigBroadcastNum_Object = MibTableColumn
portRateLimitConfigBroadcastNum = _PortRateLimitConfigBroadcastNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 2),
    _PortRateLimitConfigBroadcastNum_Type()
)
portRateLimitConfigBroadcastNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    portRateLimitConfigBroadcastNum.setStatus("current")
_PortRateLimitCurBroadcastNum_Type = Integer32
_PortRateLimitCurBroadcastNum_Object = MibTableColumn
portRateLimitCurBroadcastNum = _PortRateLimitCurBroadcastNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 3),
    _PortRateLimitCurBroadcastNum_Type()
)
portRateLimitCurBroadcastNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portRateLimitCurBroadcastNum.setStatus("current")


class _PortRateLimitConfigMulticastNum_Type(Integer32):
    """Custom type portRateLimitConfigMulticastNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2000000),
    )


_PortRateLimitConfigMulticastNum_Type.__name__ = "Integer32"
_PortRateLimitConfigMulticastNum_Object = MibTableColumn
portRateLimitConfigMulticastNum = _PortRateLimitConfigMulticastNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 4),
    _PortRateLimitConfigMulticastNum_Type()
)
portRateLimitConfigMulticastNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    portRateLimitConfigMulticastNum.setStatus("current")
_PortRateLimitCurMulticastNum_Type = Integer32
_PortRateLimitCurMulticastNum_Object = MibTableColumn
portRateLimitCurMulticastNum = _PortRateLimitCurMulticastNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 5),
    _PortRateLimitCurMulticastNum_Type()
)
portRateLimitCurMulticastNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portRateLimitCurMulticastNum.setStatus("current")


class _PortRateLimitConfigUnicastNum_Type(Integer32):
    """Custom type portRateLimitConfigUnicastNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2000000),
    )


_PortRateLimitConfigUnicastNum_Type.__name__ = "Integer32"
_PortRateLimitConfigUnicastNum_Object = MibTableColumn
portRateLimitConfigUnicastNum = _PortRateLimitConfigUnicastNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 6),
    _PortRateLimitConfigUnicastNum_Type()
)
portRateLimitConfigUnicastNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    portRateLimitConfigUnicastNum.setStatus("current")
_PortRateLimitCurUnicastNum_Type = Integer32
_PortRateLimitCurUnicastNum_Object = MibTableColumn
portRateLimitCurUnicastNum = _PortRateLimitCurUnicastNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 7),
    _PortRateLimitCurUnicastNum_Type()
)
portRateLimitCurUnicastNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portRateLimitCurUnicastNum.setStatus("current")


class _PortRateLimitConfigAllNum_Type(Integer32):
    """Custom type portRateLimitConfigAllNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2000000),
    )


_PortRateLimitConfigAllNum_Type.__name__ = "Integer32"
_PortRateLimitConfigAllNum_Object = MibTableColumn
portRateLimitConfigAllNum = _PortRateLimitConfigAllNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 8),
    _PortRateLimitConfigAllNum_Type()
)
portRateLimitConfigAllNum.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    portRateLimitConfigAllNum.setStatus("current")
_PortRateLimitCurAllNum_Type = Integer32
_PortRateLimitCurAllNum_Object = MibTableColumn
portRateLimitCurAllNum = _PortRateLimitCurAllNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 9),
    _PortRateLimitCurAllNum_Type()
)
portRateLimitCurAllNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portRateLimitCurAllNum.setStatus("current")
_PortRateLimitPacketsType_Type = Integer32
_PortRateLimitPacketsType_Object = MibTableColumn
portRateLimitPacketsType = _PortRateLimitPacketsType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 10),
    _PortRateLimitPacketsType_Type()
)
portRateLimitPacketsType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portRateLimitPacketsType.setStatus("current")


class _PortRateLimitViolationMode_Type(Integer32):
    """Custom type portRateLimitViolationMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("nocontrol", 0),
          ("shutdown", 1),
          ("block", 2))
    )


_PortRateLimitViolationMode_Type.__name__ = "Integer32"
_PortRateLimitViolationMode_Object = MibTableColumn
portRateLimitViolationMode = _PortRateLimitViolationMode_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 11),
    _PortRateLimitViolationMode_Type()
)
portRateLimitViolationMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    portRateLimitViolationMode.setStatus("current")


class _PortRateLimitShutRecoveryTime_Type(Integer32):
    """Custom type portRateLimitShutRecoveryTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 86400),
    )


_PortRateLimitShutRecoveryTime_Type.__name__ = "Integer32"
_PortRateLimitShutRecoveryTime_Object = MibTableColumn
portRateLimitShutRecoveryTime = _PortRateLimitShutRecoveryTime_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 35, 1, 1, 12),
    _PortRateLimitShutRecoveryTime_Type()
)
portRateLimitShutRecoveryTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    portRateLimitShutRecoveryTime.setStatus("current")
_MacBlackholeConfig_ObjectIdentity = ObjectIdentity
macBlackholeConfig = _MacBlackholeConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 36)
)
_MacBlackholeTable_Object = MibTable
macBlackholeTable = _MacBlackholeTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 36, 1)
)
if mibBuilder.loadTexts:
    macBlackholeTable.setStatus("current")
_MacBlackholeEntry_Object = MibTableRow
macBlackholeEntry = _MacBlackholeEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 36, 1, 1)
)
macBlackholeEntry.setIndexNames(
    (0, "NAG-MIB", "macAddressInVlanID"),
    (0, "NAG-MIB", "macAddress"),
)
if mibBuilder.loadTexts:
    macBlackholeEntry.setStatus("current")


class _MacAddressInVlanID_Type(Integer32):
    """Custom type macAddressInVlanID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_MacAddressInVlanID_Type.__name__ = "Integer32"
_MacAddressInVlanID_Object = MibTableColumn
macAddressInVlanID = _MacAddressInVlanID_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 36, 1, 1, 1),
    _MacAddressInVlanID_Type()
)
macAddressInVlanID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    macAddressInVlanID.setStatus("current")


class _MacAddress_Type(OctetString):
    """Custom type macAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )
    fixed_length = 6


_MacAddress_Type.__name__ = "OctetString"
_MacAddress_Object = MibTableColumn
macAddress = _MacAddress_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 36, 1, 1, 2),
    _MacAddress_Type()
)
macAddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    macAddress.setStatus("current")


class _MacType_Type(Integer32):
    """Custom type macType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("both", 0),
          ("source", 1),
          ("destination", 2))
    )


_MacType_Type.__name__ = "Integer32"
_MacType_Object = MibTableColumn
macType = _MacType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 36, 1, 1, 3),
    _MacType_Type()
)
macType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    macType.setStatus("current")


class _MacStatus_Type(Integer32):
    """Custom type macStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("creat", 0),
          ("active", 1),
          ("destroy", 2))
    )


_MacStatus_Type.__name__ = "Integer32"
_MacStatus_Object = MibTableColumn
macStatus = _MacStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 36, 1, 1, 4),
    _MacStatus_Type()
)
macStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    macStatus.setStatus("current")
_PriCable_ObjectIdentity = ObjectIdentity
priCable = _PriCable_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 37)
)
_CableTable_Object = MibTable
cableTable = _CableTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 37, 1)
)
if mibBuilder.loadTexts:
    cableTable.setStatus("current")
_PriCableEntry_Object = MibTableRow
priCableEntry = _PriCableEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 37, 1, 1)
)
priCableEntry.setIndexNames(
    (0, "NAG-MIB", "cableLengthInfo"),
)
if mibBuilder.loadTexts:
    priCableEntry.setStatus("current")


class _CableLengthInfo_Type(DisplayString):
    """Custom type cableLengthInfo based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_CableLengthInfo_Type.__name__ = "DisplayString"
_CableLengthInfo_Object = MibTableColumn
cableLengthInfo = _CableLengthInfo_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 37, 1, 1, 1),
    _CableLengthInfo_Type()
)
cableLengthInfo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cableLengthInfo.setStatus("current")
_PriMrppRing_ObjectIdentity = ObjectIdentity
priMrppRing = _PriMrppRing_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 38)
)
_PriMrppRingTable_Object = MibTable
priMrppRingTable = _PriMrppRingTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1)
)
if mibBuilder.loadTexts:
    priMrppRingTable.setStatus("current")
_PriMrppRingEntry_Object = MibTableRow
priMrppRingEntry = _PriMrppRingEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1)
)
priMrppRingEntry.setIndexNames(
    (0, "NAG-MIB", "mrppRingIndex"),
)
if mibBuilder.loadTexts:
    priMrppRingEntry.setStatus("current")
_MrppRingIndex_Type = Integer32
_MrppRingIndex_Object = MibTableColumn
mrppRingIndex = _MrppRingIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1, 1),
    _MrppRingIndex_Type()
)
mrppRingIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mrppRingIndex.setStatus("current")
_MrppRingNodeMode_Type = Integer32
_MrppRingNodeMode_Object = MibTableColumn
mrppRingNodeMode = _MrppRingNodeMode_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1, 2),
    _MrppRingNodeMode_Type()
)
mrppRingNodeMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mrppRingNodeMode.setStatus("current")
_MrppRingNodeState_Type = Integer32
_MrppRingNodeState_Object = MibTableColumn
mrppRingNodeState = _MrppRingNodeState_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1, 3),
    _MrppRingNodeState_Type()
)
mrppRingNodeState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mrppRingNodeState.setStatus("current")
_MrppRingStatus_Type = Integer32
_MrppRingStatus_Object = MibTableColumn
mrppRingStatus = _MrppRingStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1, 4),
    _MrppRingStatus_Type()
)
mrppRingStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mrppRingStatus.setStatus("current")
_MrppRingPriPortName_Type = DisplayString
_MrppRingPriPortName_Object = MibTableColumn
mrppRingPriPortName = _MrppRingPriPortName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1, 5),
    _MrppRingPriPortName_Type()
)
mrppRingPriPortName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mrppRingPriPortName.setStatus("current")
_MrppRingPriPortBlockState_Type = Integer32
_MrppRingPriPortBlockState_Object = MibTableColumn
mrppRingPriPortBlockState = _MrppRingPriPortBlockState_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1, 6),
    _MrppRingPriPortBlockState_Type()
)
mrppRingPriPortBlockState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mrppRingPriPortBlockState.setStatus("current")
_MrppRingSecPortName_Type = DisplayString
_MrppRingSecPortName_Object = MibTableColumn
mrppRingSecPortName = _MrppRingSecPortName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1, 7),
    _MrppRingSecPortName_Type()
)
mrppRingSecPortName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mrppRingSecPortName.setStatus("current")
_MrppRingSecPortBlockState_Type = Integer32
_MrppRingSecPortBlockState_Object = MibTableColumn
mrppRingSecPortBlockState = _MrppRingSecPortBlockState_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 38, 1, 1, 8),
    _MrppRingSecPortBlockState_Type()
)
mrppRingSecPortBlockState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mrppRingSecPortBlockState.setStatus("current")
_ErpsMgt_ObjectIdentity = ObjectIdentity
erpsMgt = _ErpsMgt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39)
)


class _ErpsTcnPropagationConfig_Type(Integer32):
    """Custom type erpsTcnPropagationConfig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("erps", 1),
          ("stp", 2))
    )


_ErpsTcnPropagationConfig_Type.__name__ = "Integer32"
_ErpsTcnPropagationConfig_Object = MibScalar
erpsTcnPropagationConfig = _ErpsTcnPropagationConfig_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 1),
    _ErpsTcnPropagationConfig_Type()
)
erpsTcnPropagationConfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsTcnPropagationConfig.setStatus("current")
_ErpsRingConfigTable_Object = MibTable
erpsRingConfigTable = _ErpsRingConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2)
)
if mibBuilder.loadTexts:
    erpsRingConfigTable.setStatus("current")
_ErpsRingConfigEntry_Object = MibTableRow
erpsRingConfigEntry = _ErpsRingConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1)
)
erpsRingConfigEntry.setIndexNames(
    (0, "NAG-MIB", "erpsRingNameIndex"),
)
if mibBuilder.loadTexts:
    erpsRingConfigEntry.setStatus("current")
_ErpsRingNameIndex_Type = Integer32
_ErpsRingNameIndex_Object = MibTableColumn
erpsRingNameIndex = _ErpsRingNameIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 1),
    _ErpsRingNameIndex_Type()
)
erpsRingNameIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsRingNameIndex.setStatus("current")


class _ErpsRingName_Type(DisplayString):
    """Custom type erpsRingName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_ErpsRingName_Type.__name__ = "DisplayString"
_ErpsRingName_Object = MibTableColumn
erpsRingName = _ErpsRingName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 2),
    _ErpsRingName_Type()
)
erpsRingName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsRingName.setStatus("current")


class _ErpsVersion_Type(Integer32):
    """Custom type erpsVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("v1", 1),
          ("v2", 2))
    )


_ErpsVersion_Type.__name__ = "Integer32"
_ErpsVersion_Object = MibTableColumn
erpsVersion = _ErpsVersion_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 3),
    _ErpsVersion_Type()
)
erpsVersion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsVersion.setStatus("current")


class _ErpsOpenRing_Type(Integer32):
    """Custom type erpsOpenRing based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("none-open", 0),
          ("open", 1))
    )


_ErpsOpenRing_Type.__name__ = "Integer32"
_ErpsOpenRing_Object = MibTableColumn
erpsOpenRing = _ErpsOpenRing_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 4),
    _ErpsOpenRing_Type()
)
erpsOpenRing.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsOpenRing.setStatus("current")


class _ErpsRapsVirtualChannel_Type(Integer32):
    """Custom type erpsRapsVirtualChannel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("without", 0),
          ("with", 1))
    )


_ErpsRapsVirtualChannel_Type.__name__ = "Integer32"
_ErpsRapsVirtualChannel_Object = MibTableColumn
erpsRapsVirtualChannel = _ErpsRapsVirtualChannel_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 5),
    _ErpsRapsVirtualChannel_Type()
)
erpsRapsVirtualChannel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsRapsVirtualChannel.setStatus("current")


class _ErpsRingPort0_Type(DisplayString):
    """Custom type erpsRingPort0 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_ErpsRingPort0_Type.__name__ = "DisplayString"
_ErpsRingPort0_Object = MibTableColumn
erpsRingPort0 = _ErpsRingPort0_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 6),
    _ErpsRingPort0_Type()
)
erpsRingPort0.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsRingPort0.setStatus("current")
_ErpsRingPort0Index_Type = Integer32
_ErpsRingPort0Index_Object = MibTableColumn
erpsRingPort0Index = _ErpsRingPort0Index_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 7),
    _ErpsRingPort0Index_Type()
)
erpsRingPort0Index.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsRingPort0Index.setStatus("current")


class _ErpsRingPort1ExistFlag_Type(Integer32):
    """Custom type erpsRingPort1ExistFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("not-none", 1))
    )


_ErpsRingPort1ExistFlag_Type.__name__ = "Integer32"
_ErpsRingPort1ExistFlag_Object = MibTableColumn
erpsRingPort1ExistFlag = _ErpsRingPort1ExistFlag_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 8),
    _ErpsRingPort1ExistFlag_Type()
)
erpsRingPort1ExistFlag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsRingPort1ExistFlag.setStatus("current")


class _ErpsRingPort1_Type(DisplayString):
    """Custom type erpsRingPort1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_ErpsRingPort1_Type.__name__ = "DisplayString"
_ErpsRingPort1_Object = MibTableColumn
erpsRingPort1 = _ErpsRingPort1_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 9),
    _ErpsRingPort1_Type()
)
erpsRingPort1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsRingPort1.setStatus("current")
_ErpsRingPort1Index_Type = Integer32
_ErpsRingPort1Index_Object = MibTableColumn
erpsRingPort1Index = _ErpsRingPort1Index_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 10),
    _ErpsRingPort1Index_Type()
)
erpsRingPort1Index.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsRingPort1Index.setStatus("current")


class _ErpsRingRowStatus_Type(Integer32):
    """Custom type erpsRingRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("unset", 0),
          ("set", 1))
    )


_ErpsRingRowStatus_Type.__name__ = "Integer32"
_ErpsRingRowStatus_Object = MibTableColumn
erpsRingRowStatus = _ErpsRingRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 11),
    _ErpsRingRowStatus_Type()
)
erpsRingRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsRingRowStatus.setStatus("current")


class _ErpsTrapEnabled_Type(Integer32):
    """Custom type erpsTrapEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("unset", 0),
          ("set", 1))
    )


_ErpsTrapEnabled_Type.__name__ = "Integer32"
_ErpsTrapEnabled_Object = MibTableColumn
erpsTrapEnabled = _ErpsTrapEnabled_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 12),
    _ErpsTrapEnabled_Type()
)
erpsTrapEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsTrapEnabled.setStatus("current")


class _ErpsLogEnabled_Type(Integer32):
    """Custom type erpsLogEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("unset", 0),
          ("set", 1))
    )


_ErpsLogEnabled_Type.__name__ = "Integer32"
_ErpsLogEnabled_Object = MibTableColumn
erpsLogEnabled = _ErpsLogEnabled_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 2, 1, 13),
    _ErpsLogEnabled_Type()
)
erpsLogEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsLogEnabled.setStatus("current")
_ErpsInstanceConfigTable_Object = MibTable
erpsInstanceConfigTable = _ErpsInstanceConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3)
)
if mibBuilder.loadTexts:
    erpsInstanceConfigTable.setStatus("current")
_ErpsInstanceConfigEntry_Object = MibTableRow
erpsInstanceConfigEntry = _ErpsInstanceConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1)
)
erpsInstanceConfigEntry.setIndexNames(
    (0, "NAG-MIB", "erpsRingNameIndex"),
    (0, "NAG-MIB", "erpsInstanceId"),
)
if mibBuilder.loadTexts:
    erpsInstanceConfigEntry.setStatus("current")
_ErpsInstanceId_Type = Integer32
_ErpsInstanceId_Object = MibTableColumn
erpsInstanceId = _ErpsInstanceId_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 1),
    _ErpsInstanceId_Type()
)
erpsInstanceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsInstanceId.setStatus("current")


class _ErpsDescription_Type(DisplayString):
    """Custom type erpsDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_ErpsDescription_Type.__name__ = "DisplayString"
_ErpsDescription_Object = MibTableColumn
erpsDescription = _ErpsDescription_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 2),
    _ErpsDescription_Type()
)
erpsDescription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsDescription.setStatus("current")
_ErpsRingId_Type = Integer32
_ErpsRingId_Object = MibTableColumn
erpsRingId = _ErpsRingId_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 3),
    _ErpsRingId_Type()
)
erpsRingId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsRingId.setStatus("current")


class _ErpsRplPort0Role_Type(Integer32):
    """Custom type erpsRplPort0Role based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("owner", 1),
          ("neighbour", 2))
    )


_ErpsRplPort0Role_Type.__name__ = "Integer32"
_ErpsRplPort0Role_Object = MibTableColumn
erpsRplPort0Role = _ErpsRplPort0Role_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 4),
    _ErpsRplPort0Role_Type()
)
erpsRplPort0Role.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsRplPort0Role.setStatus("current")


class _ErpsRplPort1Role_Type(Integer32):
    """Custom type erpsRplPort1Role based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("owner", 1),
          ("neighbour", 2))
    )


_ErpsRplPort1Role_Type.__name__ = "Integer32"
_ErpsRplPort1Role_Object = MibTableColumn
erpsRplPort1Role = _ErpsRplPort1Role_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 5),
    _ErpsRplPort1Role_Type()
)
erpsRplPort1Role.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsRplPort1Role.setStatus("current")


class _ErpsRevertiveMode_Type(Integer32):
    """Custom type erpsRevertiveMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("non-revertive", 1))
    )


_ErpsRevertiveMode_Type.__name__ = "Integer32"
_ErpsRevertiveMode_Object = MibTableColumn
erpsRevertiveMode = _ErpsRevertiveMode_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 6),
    _ErpsRevertiveMode_Type()
)
erpsRevertiveMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsRevertiveMode.setStatus("current")
_ErpsGuardTimer_Type = Integer32
_ErpsGuardTimer_Object = MibTableColumn
erpsGuardTimer = _ErpsGuardTimer_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 7),
    _ErpsGuardTimer_Type()
)
erpsGuardTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsGuardTimer.setStatus("current")
_ErpsHoldoffTimer_Type = Integer32
_ErpsHoldoffTimer_Object = MibTableColumn
erpsHoldoffTimer = _ErpsHoldoffTimer_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 8),
    _ErpsHoldoffTimer_Type()
)
erpsHoldoffTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsHoldoffTimer.setStatus("current")
_ErpsWtrTimer_Type = Integer32
_ErpsWtrTimer_Object = MibTableColumn
erpsWtrTimer = _ErpsWtrTimer_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 9),
    _ErpsWtrTimer_Type()
)
erpsWtrTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsWtrTimer.setStatus("current")


class _ErpsProtectedInstance_Type(DisplayString):
    """Custom type erpsProtectedInstance based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_ErpsProtectedInstance_Type.__name__ = "DisplayString"
_ErpsProtectedInstance_Object = MibTableColumn
erpsProtectedInstance = _ErpsProtectedInstance_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 10),
    _ErpsProtectedInstance_Type()
)
erpsProtectedInstance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsProtectedInstance.setStatus("current")
_ErpsRapsMel_Type = Integer32
_ErpsRapsMel_Object = MibTableColumn
erpsRapsMel = _ErpsRapsMel_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 11),
    _ErpsRapsMel_Type()
)
erpsRapsMel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsRapsMel.setStatus("current")
_ErpsControlVlan_Type = Integer32
_ErpsControlVlan_Object = MibTableColumn
erpsControlVlan = _ErpsControlVlan_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 12),
    _ErpsControlVlan_Type()
)
erpsControlVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsControlVlan.setStatus("current")


class _ErpsForcedSwitch_Type(Integer32):
    """Custom type erpsForcedSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("port0-forced-switch", 1),
          ("port1-forced-switch", 2))
    )


_ErpsForcedSwitch_Type.__name__ = "Integer32"
_ErpsForcedSwitch_Object = MibTableColumn
erpsForcedSwitch = _ErpsForcedSwitch_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 13),
    _ErpsForcedSwitch_Type()
)
erpsForcedSwitch.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsForcedSwitch.setStatus("current")


class _ErpsManualSwitch_Type(Integer32):
    """Custom type erpsManualSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("port0-manual-switch", 1),
          ("port1-manual-switch", 2))
    )


_ErpsManualSwitch_Type.__name__ = "Integer32"
_ErpsManualSwitch_Object = MibTableColumn
erpsManualSwitch = _ErpsManualSwitch_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 14),
    _ErpsManualSwitch_Type()
)
erpsManualSwitch.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsManualSwitch.setStatus("current")


class _ErpsClearCommand_Type(Integer32):
    """Custom type erpsClearCommand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("clear", 1)
    )


_ErpsClearCommand_Type.__name__ = "Integer32"
_ErpsClearCommand_Object = MibTableColumn
erpsClearCommand = _ErpsClearCommand_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 15),
    _ErpsClearCommand_Type()
)
erpsClearCommand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsClearCommand.setStatus("current")


class _ErpsClearPortStatistics_Type(Integer32):
    """Custom type erpsClearPortStatistics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("clear", 1)
    )


_ErpsClearPortStatistics_Type.__name__ = "Integer32"
_ErpsClearPortStatistics_Object = MibTableColumn
erpsClearPortStatistics = _ErpsClearPortStatistics_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 16),
    _ErpsClearPortStatistics_Type()
)
erpsClearPortStatistics.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsClearPortStatistics.setStatus("current")


class _ErpsInstanceRowStatus_Type(Integer32):
    """Custom type erpsInstanceRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("unset", 0),
          ("set", 1))
    )


_ErpsInstanceRowStatus_Type.__name__ = "Integer32"
_ErpsInstanceRowStatus_Object = MibTableColumn
erpsInstanceRowStatus = _ErpsInstanceRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 3, 1, 17),
    _ErpsInstanceRowStatus_Type()
)
erpsInstanceRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsInstanceRowStatus.setStatus("current")
_ErpsStatus_ObjectIdentity = ObjectIdentity
erpsStatus = _ErpsStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4)
)
_ErpsInstanceStatusTable_Object = MibTable
erpsInstanceStatusTable = _ErpsInstanceStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 1)
)
if mibBuilder.loadTexts:
    erpsInstanceStatusTable.setStatus("current")
_ErpsInstanceStatusEntry_Object = MibTableRow
erpsInstanceStatusEntry = _ErpsInstanceStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 1, 1)
)
erpsInstanceStatusEntry.setIndexNames(
    (0, "NAG-MIB", "erpsRingNameIndex"),
    (0, "NAG-MIB", "erpsInstanceId"),
)
if mibBuilder.loadTexts:
    erpsInstanceStatusEntry.setStatus("current")
_ErpsActiveStatus_Type = Integer32
_ErpsActiveStatus_Object = MibTableColumn
erpsActiveStatus = _ErpsActiveStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 1, 1, 1),
    _ErpsActiveStatus_Type()
)
erpsActiveStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsActiveStatus.setStatus("current")
_ErpsNodeState_Type = Integer32
_ErpsNodeState_Object = MibTableColumn
erpsNodeState = _ErpsNodeState_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 1, 1, 2),
    _ErpsNodeState_Type()
)
erpsNodeState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsNodeState.setStatus("current")
_ErpsPort0StatusTable_Object = MibTable
erpsPort0StatusTable = _ErpsPort0StatusTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 2)
)
if mibBuilder.loadTexts:
    erpsPort0StatusTable.setStatus("current")
_ErpsPort0StatusEntry_Object = MibTableRow
erpsPort0StatusEntry = _ErpsPort0StatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 2, 1)
)
erpsPort0StatusEntry.setIndexNames(
    (0, "NAG-MIB", "erpsRingNameIndex"),
    (0, "NAG-MIB", "erpsInstanceId"),
)
if mibBuilder.loadTexts:
    erpsPort0StatusEntry.setStatus("current")


class _ErpsPort0Name_Type(DisplayString):
    """Custom type erpsPort0Name based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_ErpsPort0Name_Type.__name__ = "DisplayString"
_ErpsPort0Name_Object = MibTableColumn
erpsPort0Name = _ErpsPort0Name_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 2, 1, 1),
    _ErpsPort0Name_Type()
)
erpsPort0Name.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort0Name.setStatus("current")
_ErpsPort0Status_Type = Integer32
_ErpsPort0Status_Object = MibTableColumn
erpsPort0Status = _ErpsPort0Status_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 2, 1, 2),
    _ErpsPort0Status_Type()
)
erpsPort0Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort0Status.setStatus("current")
_ErpsPort0SignalStatus_Type = Integer32
_ErpsPort0SignalStatus_Object = MibTableColumn
erpsPort0SignalStatus = _ErpsPort0SignalStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 2, 1, 3),
    _ErpsPort0SignalStatus_Type()
)
erpsPort0SignalStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort0SignalStatus.setStatus("current")


class _ErpsPort0RRapsNodeId_Type(DisplayString):
    """Custom type erpsPort0RRapsNodeId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_ErpsPort0RRapsNodeId_Type.__name__ = "DisplayString"
_ErpsPort0RRapsNodeId_Object = MibTableColumn
erpsPort0RRapsNodeId = _ErpsPort0RRapsNodeId_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 2, 1, 4),
    _ErpsPort0RRapsNodeId_Type()
)
erpsPort0RRapsNodeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort0RRapsNodeId.setStatus("current")
_ErpsPort0BPR_Type = Integer32
_ErpsPort0BPR_Object = MibTableColumn
erpsPort0BPR = _ErpsPort0BPR_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 2, 1, 5),
    _ErpsPort0BPR_Type()
)
erpsPort0BPR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort0BPR.setStatus("current")
_ErpsPort1StatusTable_Object = MibTable
erpsPort1StatusTable = _ErpsPort1StatusTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 3)
)
if mibBuilder.loadTexts:
    erpsPort1StatusTable.setStatus("current")
_ErpsPort1StatusEntry_Object = MibTableRow
erpsPort1StatusEntry = _ErpsPort1StatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 3, 1)
)
erpsPort1StatusEntry.setIndexNames(
    (0, "NAG-MIB", "erpsRingNameIndex"),
    (0, "NAG-MIB", "erpsInstanceId"),
)
if mibBuilder.loadTexts:
    erpsPort1StatusEntry.setStatus("current")


class _ErpsPort1Name_Type(DisplayString):
    """Custom type erpsPort1Name based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_ErpsPort1Name_Type.__name__ = "DisplayString"
_ErpsPort1Name_Object = MibTableColumn
erpsPort1Name = _ErpsPort1Name_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 3, 1, 1),
    _ErpsPort1Name_Type()
)
erpsPort1Name.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort1Name.setStatus("current")
_ErpsPort1Status_Type = Integer32
_ErpsPort1Status_Object = MibTableColumn
erpsPort1Status = _ErpsPort1Status_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 3, 1, 2),
    _ErpsPort1Status_Type()
)
erpsPort1Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort1Status.setStatus("current")
_ErpsPort1SignalStatus_Type = Integer32
_ErpsPort1SignalStatus_Object = MibTableColumn
erpsPort1SignalStatus = _ErpsPort1SignalStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 3, 1, 3),
    _ErpsPort1SignalStatus_Type()
)
erpsPort1SignalStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort1SignalStatus.setStatus("current")


class _ErpsPort1RRapsNodeId_Type(DisplayString):
    """Custom type erpsPort1RRapsNodeId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_ErpsPort1RRapsNodeId_Type.__name__ = "DisplayString"
_ErpsPort1RRapsNodeId_Object = MibTableColumn
erpsPort1RRapsNodeId = _ErpsPort1RRapsNodeId_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 3, 1, 4),
    _ErpsPort1RRapsNodeId_Type()
)
erpsPort1RRapsNodeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort1RRapsNodeId.setStatus("current")
_ErpsPort1BPR_Type = Integer32
_ErpsPort1BPR_Object = MibTableColumn
erpsPort1BPR = _ErpsPort1BPR_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 4, 3, 1, 5),
    _ErpsPort1BPR_Type()
)
erpsPort1BPR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort1BPR.setStatus("current")
_ErpsPortTrackConfig_ObjectIdentity = ObjectIdentity
erpsPortTrackConfig = _ErpsPortTrackConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5)
)
_ErpsPortTrackConfigTable_Object = MibTable
erpsPortTrackConfigTable = _ErpsPortTrackConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1)
)
if mibBuilder.loadTexts:
    erpsPortTrackConfigTable.setStatus("current")
_ErpsPortTrackConfigEntry_Object = MibTableRow
erpsPortTrackConfigEntry = _ErpsPortTrackConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1)
)
erpsPortTrackConfigEntry.setIndexNames(
    (0, "NAG-MIB", "erpsRingNameIndex"),
    (0, "NAG-MIB", "erpsRingPortIndex"),
)
if mibBuilder.loadTexts:
    erpsPortTrackConfigEntry.setStatus("current")


class _ErpsRingPortIndex_Type(Integer32):
    """Custom type erpsRingPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("port0", 0),
          ("port1", 1))
    )


_ErpsRingPortIndex_Type.__name__ = "Integer32"
_ErpsRingPortIndex_Object = MibTableColumn
erpsRingPortIndex = _ErpsRingPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 1),
    _ErpsRingPortIndex_Type()
)
erpsRingPortIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsRingPortIndex.setStatus("current")


class _ErpsPortTrackProtocolType_Type(Integer32):
    """Custom type erpsPortTrackProtocolType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("cc", 1),
          ("physical-link-or-cc", 2))
    )


_ErpsPortTrackProtocolType_Type.__name__ = "Integer32"
_ErpsPortTrackProtocolType_Object = MibTableColumn
erpsPortTrackProtocolType = _ErpsPortTrackProtocolType_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 2),
    _ErpsPortTrackProtocolType_Type()
)
erpsPortTrackProtocolType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsPortTrackProtocolType.setStatus("current")


class _ErpsPortTrackCfmDomain_Type(DisplayString):
    """Custom type erpsPortTrackCfmDomain based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_ErpsPortTrackCfmDomain_Type.__name__ = "DisplayString"
_ErpsPortTrackCfmDomain_Object = MibTableColumn
erpsPortTrackCfmDomain = _ErpsPortTrackCfmDomain_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 3),
    _ErpsPortTrackCfmDomain_Type()
)
erpsPortTrackCfmDomain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsPortTrackCfmDomain.setStatus("current")


class _ErpsPortTrackCfmMaName_Type(DisplayString):
    """Custom type erpsPortTrackCfmMaName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_ErpsPortTrackCfmMaName_Type.__name__ = "DisplayString"
_ErpsPortTrackCfmMaName_Object = MibTableColumn
erpsPortTrackCfmMaName = _ErpsPortTrackCfmMaName_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 4),
    _ErpsPortTrackCfmMaName_Type()
)
erpsPortTrackCfmMaName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsPortTrackCfmMaName.setStatus("current")
_ErpsPortTrackCfmMaNum_Type = Integer32
_ErpsPortTrackCfmMaNum_Object = MibTableColumn
erpsPortTrackCfmMaNum = _ErpsPortTrackCfmMaNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 5),
    _ErpsPortTrackCfmMaNum_Type()
)
erpsPortTrackCfmMaNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsPortTrackCfmMaNum.setStatus("current")
_ErpsPortTrackCfmPvlanId_Type = Integer32
_ErpsPortTrackCfmPvlanId_Object = MibTableColumn
erpsPortTrackCfmPvlanId = _ErpsPortTrackCfmPvlanId_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 6),
    _ErpsPortTrackCfmPvlanId_Type()
)
erpsPortTrackCfmPvlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsPortTrackCfmPvlanId.setStatus("current")
_ErpsPortTrackCfmMepId_Type = Integer32
_ErpsPortTrackCfmMepId_Object = MibTableColumn
erpsPortTrackCfmMepId = _ErpsPortTrackCfmMepId_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 7),
    _ErpsPortTrackCfmMepId_Type()
)
erpsPortTrackCfmMepId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsPortTrackCfmMepId.setStatus("current")
_ErpsPortTrackCfmRmepId_Type = Integer32
_ErpsPortTrackCfmRmepId_Object = MibTableColumn
erpsPortTrackCfmRmepId = _ErpsPortTrackCfmRmepId_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 8),
    _ErpsPortTrackCfmRmepId_Type()
)
erpsPortTrackCfmRmepId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsPortTrackCfmRmepId.setStatus("current")


class _ErpsPortTrackRowStatus_Type(Integer32):
    """Custom type erpsPortTrackRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("unset", 0),
          ("set", 1))
    )


_ErpsPortTrackRowStatus_Type.__name__ = "Integer32"
_ErpsPortTrackRowStatus_Object = MibTableColumn
erpsPortTrackRowStatus = _ErpsPortTrackRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 5, 1, 1, 9),
    _ErpsPortTrackRowStatus_Type()
)
erpsPortTrackRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    erpsPortTrackRowStatus.setStatus("current")
_ErpsPortStatistics_ObjectIdentity = ObjectIdentity
erpsPortStatistics = _ErpsPortStatistics_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6)
)
_ErpsPort0StatisticsTable_Object = MibTable
erpsPort0StatisticsTable = _ErpsPort0StatisticsTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1)
)
if mibBuilder.loadTexts:
    erpsPort0StatisticsTable.setStatus("current")
_ErpsPort0StatisticsEntry_Object = MibTableRow
erpsPort0StatisticsEntry = _ErpsPort0StatisticsEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1)
)
erpsPort0StatisticsEntry.setIndexNames(
    (0, "NAG-MIB", "erpsRingNameIndex"),
    (0, "NAG-MIB", "erpsInstanceId"),
)
if mibBuilder.loadTexts:
    erpsPort0StatisticsEntry.setStatus("current")
_ErpsPort0TxRapsNrPktCnt_Type = Integer32
_ErpsPort0TxRapsNrPktCnt_Object = MibTableColumn
erpsPort0TxRapsNrPktCnt = _ErpsPort0TxRapsNrPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 1),
    _ErpsPort0TxRapsNrPktCnt_Type()
)
erpsPort0TxRapsNrPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort0TxRapsNrPktCnt.setStatus("current")
_ErpsPort0RxRapsNrPktCnt_Type = Integer32
_ErpsPort0RxRapsNrPktCnt_Object = MibTableColumn
erpsPort0RxRapsNrPktCnt = _ErpsPort0RxRapsNrPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 2),
    _ErpsPort0RxRapsNrPktCnt_Type()
)
erpsPort0RxRapsNrPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort0RxRapsNrPktCnt.setStatus("current")
_ErpsPort0TxRapsNrRbPktCnt_Type = Integer32
_ErpsPort0TxRapsNrRbPktCnt_Object = MibTableColumn
erpsPort0TxRapsNrRbPktCnt = _ErpsPort0TxRapsNrRbPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 3),
    _ErpsPort0TxRapsNrRbPktCnt_Type()
)
erpsPort0TxRapsNrRbPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort0TxRapsNrRbPktCnt.setStatus("current")
_ErpsPort0RxRapsNrRbPktCnt_Type = Integer32
_ErpsPort0RxRapsNrRbPktCnt_Object = MibTableColumn
erpsPort0RxRapsNrRbPktCnt = _ErpsPort0RxRapsNrRbPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 4),
    _ErpsPort0RxRapsNrRbPktCnt_Type()
)
erpsPort0RxRapsNrRbPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort0RxRapsNrRbPktCnt.setStatus("current")
_ErpsPort0TxRapsSfPktCnt_Type = Integer32
_ErpsPort0TxRapsSfPktCnt_Object = MibTableColumn
erpsPort0TxRapsSfPktCnt = _ErpsPort0TxRapsSfPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 5),
    _ErpsPort0TxRapsSfPktCnt_Type()
)
erpsPort0TxRapsSfPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort0TxRapsSfPktCnt.setStatus("current")
_ErpsPort0RxRapsSfPktCnt_Type = Integer32
_ErpsPort0RxRapsSfPktCnt_Object = MibTableColumn
erpsPort0RxRapsSfPktCnt = _ErpsPort0RxRapsSfPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 6),
    _ErpsPort0RxRapsSfPktCnt_Type()
)
erpsPort0RxRapsSfPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort0RxRapsSfPktCnt.setStatus("current")
_ErpsPort0TxRapsMsPktCnt_Type = Integer32
_ErpsPort0TxRapsMsPktCnt_Object = MibTableColumn
erpsPort0TxRapsMsPktCnt = _ErpsPort0TxRapsMsPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 7),
    _ErpsPort0TxRapsMsPktCnt_Type()
)
erpsPort0TxRapsMsPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort0TxRapsMsPktCnt.setStatus("current")
_ErpsPort0RxRapsMsPktCnt_Type = Integer32
_ErpsPort0RxRapsMsPktCnt_Object = MibTableColumn
erpsPort0RxRapsMsPktCnt = _ErpsPort0RxRapsMsPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 8),
    _ErpsPort0RxRapsMsPktCnt_Type()
)
erpsPort0RxRapsMsPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort0RxRapsMsPktCnt.setStatus("current")
_ErpsPort0TxRapsFsPktCnt_Type = Integer32
_ErpsPort0TxRapsFsPktCnt_Object = MibTableColumn
erpsPort0TxRapsFsPktCnt = _ErpsPort0TxRapsFsPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 9),
    _ErpsPort0TxRapsFsPktCnt_Type()
)
erpsPort0TxRapsFsPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort0TxRapsFsPktCnt.setStatus("current")
_ErpsPort0RxRapsFsPktCnt_Type = Integer32
_ErpsPort0RxRapsFsPktCnt_Object = MibTableColumn
erpsPort0RxRapsFsPktCnt = _ErpsPort0RxRapsFsPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 10),
    _ErpsPort0RxRapsFsPktCnt_Type()
)
erpsPort0RxRapsFsPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort0RxRapsFsPktCnt.setStatus("current")
_ErpsPort0TxRapsEventPktCnt_Type = Integer32
_ErpsPort0TxRapsEventPktCnt_Object = MibTableColumn
erpsPort0TxRapsEventPktCnt = _ErpsPort0TxRapsEventPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 11),
    _ErpsPort0TxRapsEventPktCnt_Type()
)
erpsPort0TxRapsEventPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort0TxRapsEventPktCnt.setStatus("current")
_ErpsPort0RxRapsEventPktCnt_Type = Integer32
_ErpsPort0RxRapsEventPktCnt_Object = MibTableColumn
erpsPort0RxRapsEventPktCnt = _ErpsPort0RxRapsEventPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 12),
    _ErpsPort0RxRapsEventPktCnt_Type()
)
erpsPort0RxRapsEventPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort0RxRapsEventPktCnt.setStatus("current")
_ErpsPort0TxRapsTotalPktCnt_Type = Integer32
_ErpsPort0TxRapsTotalPktCnt_Object = MibTableColumn
erpsPort0TxRapsTotalPktCnt = _ErpsPort0TxRapsTotalPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 13),
    _ErpsPort0TxRapsTotalPktCnt_Type()
)
erpsPort0TxRapsTotalPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort0TxRapsTotalPktCnt.setStatus("current")
_ErpsPort0RxRapsTotalPktCnt_Type = Integer32
_ErpsPort0RxRapsTotalPktCnt_Object = MibTableColumn
erpsPort0RxRapsTotalPktCnt = _ErpsPort0RxRapsTotalPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 1, 1, 14),
    _ErpsPort0RxRapsTotalPktCnt_Type()
)
erpsPort0RxRapsTotalPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort0RxRapsTotalPktCnt.setStatus("current")
_ErpsPort1StatisticsTable_Object = MibTable
erpsPort1StatisticsTable = _ErpsPort1StatisticsTable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2)
)
if mibBuilder.loadTexts:
    erpsPort1StatisticsTable.setStatus("current")
_ErpsPort1StatisticsEntry_Object = MibTableRow
erpsPort1StatisticsEntry = _ErpsPort1StatisticsEntry_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1)
)
erpsPort1StatisticsEntry.setIndexNames(
    (0, "NAG-MIB", "erpsRingNameIndex"),
    (0, "NAG-MIB", "erpsInstanceId"),
)
if mibBuilder.loadTexts:
    erpsPort1StatisticsEntry.setStatus("current")
_ErpsPort1TxRapsNrPktCnt_Type = Integer32
_ErpsPort1TxRapsNrPktCnt_Object = MibTableColumn
erpsPort1TxRapsNrPktCnt = _ErpsPort1TxRapsNrPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 1),
    _ErpsPort1TxRapsNrPktCnt_Type()
)
erpsPort1TxRapsNrPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort1TxRapsNrPktCnt.setStatus("current")
_ErpsPort1RxRapsNrPktCnt_Type = Integer32
_ErpsPort1RxRapsNrPktCnt_Object = MibTableColumn
erpsPort1RxRapsNrPktCnt = _ErpsPort1RxRapsNrPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 2),
    _ErpsPort1RxRapsNrPktCnt_Type()
)
erpsPort1RxRapsNrPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort1RxRapsNrPktCnt.setStatus("current")
_ErpsPort1TxRapsNrRbPktCnt_Type = Integer32
_ErpsPort1TxRapsNrRbPktCnt_Object = MibTableColumn
erpsPort1TxRapsNrRbPktCnt = _ErpsPort1TxRapsNrRbPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 3),
    _ErpsPort1TxRapsNrRbPktCnt_Type()
)
erpsPort1TxRapsNrRbPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort1TxRapsNrRbPktCnt.setStatus("current")
_ErpsPort1RxRapsNrRbPktCnt_Type = Integer32
_ErpsPort1RxRapsNrRbPktCnt_Object = MibTableColumn
erpsPort1RxRapsNrRbPktCnt = _ErpsPort1RxRapsNrRbPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 4),
    _ErpsPort1RxRapsNrRbPktCnt_Type()
)
erpsPort1RxRapsNrRbPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort1RxRapsNrRbPktCnt.setStatus("current")
_ErpsPort1TxRapsSfPktCnt_Type = Integer32
_ErpsPort1TxRapsSfPktCnt_Object = MibTableColumn
erpsPort1TxRapsSfPktCnt = _ErpsPort1TxRapsSfPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 5),
    _ErpsPort1TxRapsSfPktCnt_Type()
)
erpsPort1TxRapsSfPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort1TxRapsSfPktCnt.setStatus("current")
_ErpsPort1RxRapsSfPktCnt_Type = Integer32
_ErpsPort1RxRapsSfPktCnt_Object = MibTableColumn
erpsPort1RxRapsSfPktCnt = _ErpsPort1RxRapsSfPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 6),
    _ErpsPort1RxRapsSfPktCnt_Type()
)
erpsPort1RxRapsSfPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort1RxRapsSfPktCnt.setStatus("current")
_ErpsPort1TxRapsMsPktCnt_Type = Integer32
_ErpsPort1TxRapsMsPktCnt_Object = MibTableColumn
erpsPort1TxRapsMsPktCnt = _ErpsPort1TxRapsMsPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 7),
    _ErpsPort1TxRapsMsPktCnt_Type()
)
erpsPort1TxRapsMsPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort1TxRapsMsPktCnt.setStatus("current")
_ErpsPort1RxRapsMsPktCnt_Type = Integer32
_ErpsPort1RxRapsMsPktCnt_Object = MibTableColumn
erpsPort1RxRapsMsPktCnt = _ErpsPort1RxRapsMsPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 8),
    _ErpsPort1RxRapsMsPktCnt_Type()
)
erpsPort1RxRapsMsPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort1RxRapsMsPktCnt.setStatus("current")
_ErpsPort1TxRapsFsPktCnt_Type = Integer32
_ErpsPort1TxRapsFsPktCnt_Object = MibTableColumn
erpsPort1TxRapsFsPktCnt = _ErpsPort1TxRapsFsPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 9),
    _ErpsPort1TxRapsFsPktCnt_Type()
)
erpsPort1TxRapsFsPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort1TxRapsFsPktCnt.setStatus("current")
_ErpsPort1RxRapsFsPktCnt_Type = Integer32
_ErpsPort1RxRapsFsPktCnt_Object = MibTableColumn
erpsPort1RxRapsFsPktCnt = _ErpsPort1RxRapsFsPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 10),
    _ErpsPort1RxRapsFsPktCnt_Type()
)
erpsPort1RxRapsFsPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort1RxRapsFsPktCnt.setStatus("current")
_ErpsPort1TxRapsEventPktCnt_Type = Integer32
_ErpsPort1TxRapsEventPktCnt_Object = MibTableColumn
erpsPort1TxRapsEventPktCnt = _ErpsPort1TxRapsEventPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 11),
    _ErpsPort1TxRapsEventPktCnt_Type()
)
erpsPort1TxRapsEventPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort1TxRapsEventPktCnt.setStatus("current")
_ErpsPort1RxRapsEventPktCnt_Type = Integer32
_ErpsPort1RxRapsEventPktCnt_Object = MibTableColumn
erpsPort1RxRapsEventPktCnt = _ErpsPort1RxRapsEventPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 12),
    _ErpsPort1RxRapsEventPktCnt_Type()
)
erpsPort1RxRapsEventPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort1RxRapsEventPktCnt.setStatus("current")
_ErpsPort1TxRapsTotalPktCnt_Type = Integer32
_ErpsPort1TxRapsTotalPktCnt_Object = MibTableColumn
erpsPort1TxRapsTotalPktCnt = _ErpsPort1TxRapsTotalPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 13),
    _ErpsPort1TxRapsTotalPktCnt_Type()
)
erpsPort1TxRapsTotalPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort1TxRapsTotalPktCnt.setStatus("current")
_ErpsPort1RxRapsTotalPktCnt_Type = Integer32
_ErpsPort1RxRapsTotalPktCnt_Object = MibTableColumn
erpsPort1RxRapsTotalPktCnt = _ErpsPort1RxRapsTotalPktCnt_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 39, 6, 2, 1, 14),
    _ErpsPort1RxRapsTotalPktCnt_Type()
)
erpsPort1RxRapsTotalPktCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    erpsPort1RxRapsTotalPktCnt.setStatus("current")
_FdbMacInfo_ObjectIdentity = ObjectIdentity
fdbMacInfo = _FdbMacInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 40)
)
_FdbMacInfoTable_ObjectIdentity = ObjectIdentity
fdbMacInfoTable = _FdbMacInfoTable_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1)
)
_FdbMacMaxTotalNum_Type = Integer32
_FdbMacMaxTotalNum_Object = MibScalar
fdbMacMaxTotalNum = _FdbMacMaxTotalNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 1),
    _FdbMacMaxTotalNum_Type()
)
fdbMacMaxTotalNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbMacMaxTotalNum.setStatus("current")
_FdbMacMaxStaticNum_Type = Integer32
_FdbMacMaxStaticNum_Object = MibScalar
fdbMacMaxStaticNum = _FdbMacMaxStaticNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 2),
    _FdbMacMaxStaticNum_Type()
)
fdbMacMaxStaticNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbMacMaxStaticNum.setStatus("current")
_FdbMacMaxUnicastNum_Type = Integer32
_FdbMacMaxUnicastNum_Object = MibScalar
fdbMacMaxUnicastNum = _FdbMacMaxUnicastNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 3),
    _FdbMacMaxUnicastNum_Type()
)
fdbMacMaxUnicastNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbMacMaxUnicastNum.setStatus("current")
_FdbMacMaxMulticastNum_Type = Integer32
_FdbMacMaxMulticastNum_Object = MibScalar
fdbMacMaxMulticastNum = _FdbMacMaxMulticastNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 4),
    _FdbMacMaxMulticastNum_Type()
)
fdbMacMaxMulticastNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbMacMaxMulticastNum.setStatus("current")
_FdbMacCurTotalNum_Type = Integer32
_FdbMacCurTotalNum_Object = MibScalar
fdbMacCurTotalNum = _FdbMacCurTotalNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 5),
    _FdbMacCurTotalNum_Type()
)
fdbMacCurTotalNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbMacCurTotalNum.setStatus("current")
_FdbMacCurStaticNum_Type = Integer32
_FdbMacCurStaticNum_Object = MibScalar
fdbMacCurStaticNum = _FdbMacCurStaticNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 6),
    _FdbMacCurStaticNum_Type()
)
fdbMacCurStaticNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbMacCurStaticNum.setStatus("current")
_FdbMacCurUnicastNum_Type = Integer32
_FdbMacCurUnicastNum_Object = MibScalar
fdbMacCurUnicastNum = _FdbMacCurUnicastNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 7),
    _FdbMacCurUnicastNum_Type()
)
fdbMacCurUnicastNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbMacCurUnicastNum.setStatus("current")
_FdbMacCurHiddenNum_Type = Integer32
_FdbMacCurHiddenNum_Object = MibScalar
fdbMacCurHiddenNum = _FdbMacCurHiddenNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 8),
    _FdbMacCurHiddenNum_Type()
)
fdbMacCurHiddenNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbMacCurHiddenNum.setStatus("current")
_FdbMacCurMulticastInsertNum_Type = Integer32
_FdbMacCurMulticastInsertNum_Object = MibScalar
fdbMacCurMulticastInsertNum = _FdbMacCurMulticastInsertNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 9),
    _FdbMacCurMulticastInsertNum_Type()
)
fdbMacCurMulticastInsertNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbMacCurMulticastInsertNum.setStatus("current")
_FdbMacCurMulticastWaitNum_Type = Integer32
_FdbMacCurMulticastWaitNum_Object = MibScalar
fdbMacCurMulticastWaitNum = _FdbMacCurMulticastWaitNum_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 10),
    _FdbMacCurMulticastWaitNum_Type()
)
fdbMacCurMulticastWaitNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbMacCurMulticastWaitNum.setStatus("current")
_FdbMacCounterTimeStamp_Type = TimeStamp
_FdbMacCounterTimeStamp_Object = MibScalar
fdbMacCounterTimeStamp = _FdbMacCounterTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 40, 1, 11),
    _FdbMacCounterTimeStamp_Type()
)
fdbMacCounterTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbMacCounterTimeStamp.setStatus("current")
_LldpPrivateInfo_ObjectIdentity = ObjectIdentity
lldpPrivateInfo = _LldpPrivateInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 200)
)


class _LldpGlobalEnable_Type(Integer32):
    """Custom type lldpGlobalEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_LldpGlobalEnable_Type.__name__ = "Integer32"
_LldpGlobalEnable_Object = MibScalar
lldpGlobalEnable = _LldpGlobalEnable_Object(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 200, 1),
    _LldpGlobalEnable_Type()
)
lldpGlobalEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpGlobalEnable.setStatus("current")
_Notifications_ObjectIdentity = ObjectIdentity
notifications = _Notifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101)
)
_AntiArpscan_ObjectIdentity = ObjectIdentity
antiArpscan = _AntiArpscan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 100)
)
_Fan_ObjectIdentity = ObjectIdentity
fan = _Fan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 101)
)
_Power_ObjectIdentity = ObjectIdentity
power = _Power_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 102)
)
_SlotTemperature_ObjectIdentity = ObjectIdentity
slotTemperature = _SlotTemperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 103)
)
_Dhcpsnooping_ObjectIdentity = ObjectIdentity
dhcpsnooping = _Dhcpsnooping_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 104)
)
_RateViolation_ObjectIdentity = ObjectIdentity
rateViolation = _RateViolation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 105)
)
_PortGroup_ObjectIdentity = ObjectIdentity
portGroup = _PortGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 106)
)
_EfmOam_ObjectIdentity = ObjectIdentity
efmOam = _EfmOam_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 109)
)
_TransceiverMonitor_ObjectIdentity = ObjectIdentity
transceiverMonitor = _TransceiverMonitor_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 110)
)
_DyingGasp_ObjectIdentity = ObjectIdentity
dyingGasp = _DyingGasp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 114)
)
_CopyRunningConfig_ObjectIdentity = ObjectIdentity
copyRunningConfig = _CopyRunningConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 116)
)
_Mstp_ObjectIdentity = ObjectIdentity
mstp = _Mstp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 121)
)
_PowerGroup_ObjectIdentity = ObjectIdentity
powerGroup = _PowerGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 122)
)
_ErpsGroup_ObjectIdentity = ObjectIdentity
erpsGroup = _ErpsGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 125)
)
_AuthLogGroup_ObjectIdentity = ObjectIdentity
authLogGroup = _AuthLogGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 126)
)
_Conformance_ObjectIdentity = ObjectIdentity
conformance = _Conformance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 40418, 7, 102)
)

# Managed Objects groups

ntpEntObjectsGroup1 = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 6, 2, 1)
)
ntpEntObjectsGroup1.setObjects(
      *(("NAG-MIB", "ntpEntSoftwareName"),
        ("NAG-MIB", "ntpEntSoftwareVersion"),
        ("NAG-MIB", "ntpEntSoftwareVendor"),
        ("NAG-MIB", "ntpEntSystemType"),
        ("NAG-MIB", "ntpEntStatusDateTime"))
)
if mibBuilder.loadTexts:
    ntpEntObjectsGroup1.setStatus("current")

ntpEntObjectsGroup2 = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 6, 2, 2)
)
ntpEntObjectsGroup2.setObjects(
      *(("NAG-MIB", "ntpEntTimeResolution"),
        ("NAG-MIB", "ntpEntTimePrecision"),
        ("NAG-MIB", "ntpEntStatusCurrentMode"),
        ("NAG-MIB", "ntpEntStatusCurrentModeVal"),
        ("NAG-MIB", "ntpEntStatusStratum"),
        ("NAG-MIB", "ntpEntStatusActiveRefSourceId"),
        ("NAG-MIB", "ntpEntStatusActiveRefSourceName"),
        ("NAG-MIB", "ntpEntStatusNumberOfRefSources"),
        ("NAG-MIB", "ntpEntStatusInPkts"),
        ("NAG-MIB", "ntpEntStatusOutPkts"),
        ("NAG-MIB", "ntpEntStatusBadVersion"),
        ("NAG-MIB", "ntpEntStatusProtocolError"))
)
if mibBuilder.loadTexts:
    ntpEntObjectsGroup2.setStatus("current")


# Notification objects

prohibitPortOID = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 1)
)
if mibBuilder.loadTexts:
    prohibitPortOID.setStatus(
        "current"
    )

recoverPortOID = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 2)
)
if mibBuilder.loadTexts:
    recoverPortOID.setStatus(
        "current"
    )

prohibitIPOID = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 3)
)
if mibBuilder.loadTexts:
    prohibitIPOID.setStatus(
        "current"
    )

prohibitIPExceedSlimitOID = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 4)
)
if mibBuilder.loadTexts:
    prohibitIPExceedSlimitOID.setStatus(
        "current"
    )

prohibitIPExceedHlimitOID = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 5)
)
if mibBuilder.loadTexts:
    prohibitIPExceedHlimitOID.setStatus(
        "current"
    )

recoverIPOID = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 6)
)
if mibBuilder.loadTexts:
    recoverIPOID.setStatus(
        "current"
    )

ipAddress = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 7)
)
if mibBuilder.loadTexts:
    ipAddress.setStatus(
        "current"
    )

arpSpeedLimitOID = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 8)
)
if mibBuilder.loadTexts:
    arpSpeedLimitOID.setStatus(
        "current"
    )

arpDiscardOID = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 9)
)
if mibBuilder.loadTexts:
    arpDiscardOID.setStatus(
        "current"
    )

recoverArpSpeedOID = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 10)
)
if mibBuilder.loadTexts:
    recoverArpSpeedOID.setStatus(
        "current"
    )

recoverArpDiscardOID = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 100, 11)
)
if mibBuilder.loadTexts:
    recoverArpDiscardOID.setStatus(
        "current"
    )

fanAbnormalOID = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 101, 1)
)
if mibBuilder.loadTexts:
    fanAbnormalOID.setStatus(
        "current"
    )

fanNormalOID = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 101, 2)
)
if mibBuilder.loadTexts:
    fanNormalOID.setStatus(
        "current"
    )

fanInsertOID = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 101, 3)
)
if mibBuilder.loadTexts:
    fanInsertOID.setStatus(
        "current"
    )

fanPullOutOID = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 101, 4)
)
if mibBuilder.loadTexts:
    fanPullOutOID.setStatus(
        "current"
    )

powerAbnormalOID = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 102, 1)
)
if mibBuilder.loadTexts:
    powerAbnormalOID.setStatus(
        "current"
    )

powerNormalOID = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 102, 2)
)
if mibBuilder.loadTexts:
    powerNormalOID.setStatus(
        "current"
    )

powerInsertOID = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 102, 3)
)
if mibBuilder.loadTexts:
    powerInsertOID.setStatus(
        "current"
    )

powerPullOutOID = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 102, 4)
)
if mibBuilder.loadTexts:
    powerPullOutOID.setStatus(
        "current"
    )

slotTemperatureHigherOID = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 103, 1)
)
if mibBuilder.loadTexts:
    slotTemperatureHigherOID.setStatus(
        "current"
    )

slotTemperatureLowerOID = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 103, 2)
)
if mibBuilder.loadTexts:
    slotTemperatureLowerOID.setStatus(
        "current"
    )

shutdownPort = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 104, 1)
)
if mibBuilder.loadTexts:
    shutdownPort.setStatus(
        "current"
    )

noShutdownPort = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 104, 2)
)
if mibBuilder.loadTexts:
    noShutdownPort.setStatus(
        "current"
    )

addBlackhole = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 104, 3)
)
if mibBuilder.loadTexts:
    addBlackhole.setStatus(
        "current"
    )

delBlackhole = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 104, 4)
)
if mibBuilder.loadTexts:
    delBlackhole.setStatus(
        "current"
    )

addBlockedinfo = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 104, 5)
)
if mibBuilder.loadTexts:
    addBlockedinfo.setStatus(
        "current"
    )

rateViolationShutdownPort = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 105, 1)
)
if mibBuilder.loadTexts:
    rateViolationShutdownPort.setStatus(
        "current"
    )

rateViolationNoShutdownPort = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 105, 2)
)
if mibBuilder.loadTexts:
    rateViolationNoShutdownPort.setStatus(
        "current"
    )

portGroupCreate = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 106, 1)
)
if mibBuilder.loadTexts:
    portGroupCreate.setStatus(
        "current"
    )

portGroupDelete = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 106, 2)
)
if mibBuilder.loadTexts:
    portGroupDelete.setStatus(
        "current"
    )

portGroupUpdate = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 106, 3)
)
if mibBuilder.loadTexts:
    portGroupUpdate.setStatus(
        "current"
    )

efmOamDiscoverySuccess = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 1)
)
if mibBuilder.loadTexts:
    efmOamDiscoverySuccess.setStatus(
        "current"
    )

efmOamDiscoveryTimeout = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 2)
)
if mibBuilder.loadTexts:
    efmOamDiscoveryTimeout.setStatus(
        "current"
    )

efmOamLocalErrSymbolPeriodEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 3)
)
if mibBuilder.loadTexts:
    efmOamLocalErrSymbolPeriodEvent.setStatus(
        "current"
    )

efmOamLocalErrFramePeriodEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 4)
)
if mibBuilder.loadTexts:
    efmOamLocalErrFramePeriodEvent.setStatus(
        "current"
    )

efmOamLocalErrFrameEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 5)
)
if mibBuilder.loadTexts:
    efmOamLocalErrFrameEvent.setStatus(
        "current"
    )

efmOamLocalErrFrameSecondsSummaryEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 6)
)
if mibBuilder.loadTexts:
    efmOamLocalErrFrameSecondsSummaryEvent.setStatus(
        "current"
    )

efmOamLocalLinkFault = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 7)
)
if mibBuilder.loadTexts:
    efmOamLocalLinkFault.setStatus(
        "current"
    )

efmOamLocalCriticalEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 8)
)
if mibBuilder.loadTexts:
    efmOamLocalCriticalEvent.setStatus(
        "current"
    )

efmOamRemoteErrSymbolPeriodEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 9)
)
if mibBuilder.loadTexts:
    efmOamRemoteErrSymbolPeriodEvent.setStatus(
        "current"
    )

efmOamRemoteErrFramePeriodEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 10)
)
if mibBuilder.loadTexts:
    efmOamRemoteErrFramePeriodEvent.setStatus(
        "current"
    )

efmOamRemoteErrFrameEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 11)
)
if mibBuilder.loadTexts:
    efmOamRemoteErrFrameEvent.setStatus(
        "current"
    )

efmOamRemoteErrFrameSecondsSummaryEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 12)
)
if mibBuilder.loadTexts:
    efmOamRemoteErrFrameSecondsSummaryEvent.setStatus(
        "current"
    )

efmOamRemoteLinkFault = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 13)
)
if mibBuilder.loadTexts:
    efmOamRemoteLinkFault.setStatus(
        "current"
    )

efmOamRemoteCriticalEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 14)
)
if mibBuilder.loadTexts:
    efmOamRemoteCriticalEvent.setStatus(
        "current"
    )

efmOamRemoteDyingGasp = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 15)
)
if mibBuilder.loadTexts:
    efmOamRemoteDyingGasp.setStatus(
        "current"
    )

efmOamLoopBackSuccess = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 16)
)
if mibBuilder.loadTexts:
    efmOamLoopBackSuccess.setStatus(
        "current"
    )

efmOamLoopBackExit = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 109, 17)
)
if mibBuilder.loadTexts:
    efmOamLoopBackExit.setStatus(
        "current"
    )

transceiverMonitorAlarmEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 110, 1)
)
if mibBuilder.loadTexts:
    transceiverMonitorAlarmEvent.setStatus(
        "current"
    )

transceiverMonitorWarnEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 110, 2)
)
if mibBuilder.loadTexts:
    transceiverMonitorWarnEvent.setStatus(
        "current"
    )

dyingGaspEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 114, 1)
)
if mibBuilder.loadTexts:
    dyingGaspEvent.setStatus(
        "current"
    )

copyRunningConfigEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 116, 1)
)
if mibBuilder.loadTexts:
    copyRunningConfigEvent.setStatus(
        "current"
    )

mstpTcnTrapOID = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 121, 1)
)
if mibBuilder.loadTexts:
    mstpTcnTrapOID.setStatus(
        "current"
    )

powerSupplyTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 122, 2)
)
if mibBuilder.loadTexts:
    powerSupplyTrap.setStatus(
        "current"
    )

powerPresentTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 122, 4)
)
if mibBuilder.loadTexts:
    powerPresentTrap.setStatus(
        "current"
    )

swERPSSFDetectedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 125, 1)
)
if mibBuilder.loadTexts:
    swERPSSFDetectedTrap.setStatus(
        "current"
    )

swERPSSFClearedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 125, 2)
)
if mibBuilder.loadTexts:
    swERPSSFClearedTrap.setStatus(
        "current"
    )

authLogin = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 126, 1)
)
if mibBuilder.loadTexts:
    authLogin.setStatus(
        "current"
    )

authLogout = NotificationType(
    (1, 3, 6, 1, 4, 1, 40418, 7, 101, 126, 2)
)
if mibBuilder.loadTexts:
    authLogout.setStatus(
        "current"
    )


# Notifications groups


# Agent capabilities


# Module compliance

ntpEntNTPCompliance = ModuleCompliance(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 6, 1, 1)
)
ntpEntNTPCompliance.setObjects(
      *(("NAG-MIB", "ntpEntObjectsGroup1"),
        ("NAG-MIB", "ntpEntObjectsGroup2"))
)
if mibBuilder.loadTexts:
    ntpEntNTPCompliance.setStatus(
        "current"
    )

ntpEntSNTPCompliance = ModuleCompliance(
    (1, 3, 6, 1, 4, 1, 40418, 7, 100, 25, 6, 1, 2)
)
ntpEntSNTPCompliance.setObjects(
    ("NAG-MIB", "ntpEntObjectsGroup1")
)
if mibBuilder.loadTexts:
    ntpEntSNTPCompliance.setStatus(
        "current"
    )


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "NAG-MIB",
    **{"DisplayString": DisplayString,
       "MacAddress": MacAddress,
       "InetAddressType": InetAddressType,
       "InetAddress": InetAddress,
       "VlanList": VlanList,
       "PortList": PortList,
       "EnabledStatusPrivate": EnabledStatusPrivate,
       "ValidStatus": ValidStatus,
       "OspfBigMetric": OspfBigMetric,
       "OspfAreaID": OspfAreaID,
       "SnmpAdminString": SnmpAdminString,
       "InterfaceIndex": InterfaceIndex,
       "InterfaceIndexOrZero": InterfaceIndexOrZero,
       "TimeFilter": TimeFilter,
       "Ipv6Address": Ipv6Address,
       "NtpStratum": NtpStratum,
       "NtpDateTime": NtpDateTime,
       "NAG": NAG,
       "SNR": SNR,
       "os": os,
       "priSystem": priSystem,
       "sysResetUnit": sysResetUnit,
       "sysHardwareVersion": sysHardwareVersion,
       "sysSoftwareVersion": sysSoftwareVersion,
       "sysStackFlag": sysStackFlag,
       "sysCPUMac": sysCPUMac,
       "sysWriteConfig": sysWriteConfig,
       "sysPowerStateTable": sysPowerStateTable,
       "sysPowerStateEntry": sysPowerStateEntry,
       "sysPowerSlotIndex": sysPowerSlotIndex,
       "sysPowerState": sysPowerState,
       "sysPowerValue": sysPowerValue,
       "sysPowerType": sysPowerType,
       "sysPowerStatus": sysPowerStatus,
       "sysSlotTable": sysSlotTable,
       "sysSlotEntry": sysSlotEntry,
       "sysSlotIndex": sysSlotIndex,
       "sysCPUType": sysCPUType,
       "sysCPUFiveSecondIdle": sysCPUFiveSecondIdle,
       "sysCPUThirtySecondIdle": sysCPUThirtySecondIdle,
       "sysCPUFiveMinuteIdle": sysCPUFiveMinuteIdle,
       "sysCPUIdle": sysCPUIdle,
       "sysMemorySize": sysMemorySize,
       "sysMemoryBusy": sysMemoryBusy,
       "sysFlashSize": sysFlashSize,
       "sysTemperature": sysTemperature,
       "sysCpuUsage": sysCpuUsage,
       "sysMemoryUsage": sysMemoryUsage,
       "sysMemUsage": sysMemUsage,
       "sysPortNum": sysPortNum,
       "sysFreeFlashSize": sysFreeFlashSize,
       "sysMemorySizeInMB": sysMemorySizeInMB,
       "switchInfoTable": switchInfoTable,
       "switchInfoEntry": switchInfoEntry,
       "swSlotIndex": swSlotIndex,
       "swUnitIndex": swUnitIndex,
       "swModuleType": swModuleType,
       "switchFileCopy": switchFileCopy,
       "fileUserName": fileUserName,
       "fileUserPassword": fileUserPassword,
       "fileIPaddress": fileIPaddress,
       "sourceFileCopy": sourceFileCopy,
       "destinationFileCopy": destinationFileCopy,
       "fileCopyMode": fileCopyMode,
       "fileCopyUseMode": fileCopyUseMode,
       "fileCopy": fileCopy,
       "fileCopyResult": fileCopyResult,
       "fileName": fileName,
       "fileType": fileType,
       "filePort": filePort,
       "fileCopyFailReason": fileCopyFailReason,
       "fileCMCCCopy": fileCMCCCopy,
       "fileCMCCIPaddress": fileCMCCIPaddress,
       "fileCMCCCopyResult": fileCMCCCopyResult,
       "switchInfo": switchInfo,
       "switchCPUType": switchCPUType,
       "switchCPUFiveSecondIdle": switchCPUFiveSecondIdle,
       "switchCPUThirtySecondIdle": switchCPUThirtySecondIdle,
       "switchCPUFiveMinuteIdle": switchCPUFiveMinuteIdle,
       "switchCPUIdle": switchCPUIdle,
       "switchMemorySize": switchMemorySize,
       "switchMemoryBusy": switchMemoryBusy,
       "switchFlashSize": switchFlashSize,
       "switchTemperature": switchTemperature,
       "switchCpuUsage": switchCpuUsage,
       "switchMemoryUsage": switchMemoryUsage,
       "sysFanTable": sysFanTable,
       "sysFanEntry": sysFanEntry,
       "sysFanIndex": sysFanIndex,
       "sysFanInserted": sysFanInserted,
       "sysFanStatus": sysFanStatus,
       "sysFanSpeed": sysFanSpeed,
       "switchBootImgPrimary": switchBootImgPrimary,
       "switchBootImgSecondary": switchBootImgSecondary,
       "switchBootStartUpCfg": switchBootStartUpCfg,
       "showSwitchStartUpStatus": showSwitchStartUpStatus,
       "sysSlotBootInfoTable": sysSlotBootInfoTable,
       "sysSlotBootInfoEntry": sysSlotBootInfoEntry,
       "sysBootInfoIndex": sysBootInfoIndex,
       "sysBootImgPrimary": sysBootImgPrimary,
       "sysBootImgSecondary": sysBootImgSecondary,
       "sysBootStartupCfg": sysBootStartupCfg,
       "sysSetBootPassword": sysSetBootPassword,
       "oldPassword": oldPassword,
       "newPassword": newPassword,
       "confirmPassword": confirmPassword,
       "deletePassword": deletePassword,
       "sysSetBootPwStatus": sysSetBootPwStatus,
       "sysAddUser": sysAddUser,
       "sysUserName": sysUserName,
       "sysUserPassword": sysUserPassword,
       "sysUserPasswordOption": sysUserPasswordOption,
       "sysUserNamePrivilege": sysUserNamePrivilege,
       "sysAddUserStatus": sysAddUserStatus,
       "priPowerTable": priPowerTable,
       "priPowerEntry": priPowerEntry,
       "priPowerIndex": priPowerIndex,
       "priPowerPresent": priPowerPresent,
       "priPowerSupply": priPowerSupply,
       "vsfInfo": vsfInfo,
       "vsfCount": vsfCount,
       "vsfModuleTable": vsfModuleTable,
       "vsfModuleEntry": vsfModuleEntry,
       "vsfSlotIndex": vsfSlotIndex,
       "vsfMemberIndex": vsfMemberIndex,
       "vsfModuleType": vsfModuleType,
       "sysMonitorAlarmTable": sysMonitorAlarmTable,
       "sysMonitorAlarmEntry": sysMonitorAlarmEntry,
       "sysMonitorAlarmIndex": sysMonitorAlarmIndex,
       "sysMonitorAlarmEnable": sysMonitorAlarmEnable,
       "sysMonitorAlarmBindSet": sysMonitorAlarmBindSet,
       "sysMonitorAlarmInputSet": sysMonitorAlarmInputSet,
       "sysMonitorAlarmOutputSet": sysMonitorAlarmOutputSet,
       "deviceTypeID": deviceTypeID,
       "rpsPowerVoltage": rpsPowerVoltage,
       "priSpanningTree": priSpanningTree,
       "spanGlobalEnable": spanGlobalEnable,
       "mstpMgt": mstpMgt,
       "mstpSystemGroup": mstpSystemGroup,
       "mstpEnable": mstpEnable,
       "mstpTCFlush": mstpTCFlush,
       "mstpForwardTime": mstpForwardTime,
       "mstpHelloTime": mstpHelloTime,
       "mstpMaxage": mstpMaxage,
       "mstpMaxhop": mstpMaxhop,
       "mstpMode": mstpMode,
       "mstpName": mstpName,
       "mstpRevisionLevel": mstpRevisionLevel,
       "mstpBridgeForwardDelay": mstpBridgeForwardDelay,
       "mstpBridgeHelloTime": mstpBridgeHelloTime,
       "mstpBridgeMaxage": mstpBridgeMaxage,
       "mstpInstanceTable": mstpInstanceTable,
       "mstpInstanceEntry": mstpInstanceEntry,
       "mstpInstanceID": mstpInstanceID,
       "mstpInstanceVlans": mstpInstanceVlans,
       "mstpInstanceSwitchPriority": mstpInstanceSwitchPriority,
       "mstpInstanceRegionRootID": mstpInstanceRegionRootID,
       "mstpInstanceIntRootPathCost": mstpInstanceIntRootPathCost,
       "mstpInstanceRootPortID": mstpInstanceRootPortID,
       "mstpInstancePortTable": mstpInstancePortTable,
       "mstpInstancePortEntry": mstpInstancePortEntry,
       "mstpInstancePortInstanceID": mstpInstancePortInstanceID,
       "mstpInstancePortPortIndex": mstpInstancePortPortIndex,
       "mstpInstancePortCost": mstpInstancePortCost,
       "mstpInstancePortPriority": mstpInstancePortPriority,
       "mstpInstancePortRootGuard": mstpInstancePortRootGuard,
       "mstpInstancePortID": mstpInstancePortID,
       "mstpInstancePortExtRootPathCost": mstpInstancePortExtRootPathCost,
       "mstpInstancePortIntRootPathCost": mstpInstancePortIntRootPathCost,
       "mstpInstancePortState": mstpInstancePortState,
       "mstpInstancePortRole": mstpInstancePortRole,
       "mstpInstancePortDesignatedBridgeID": mstpInstancePortDesignatedBridgeID,
       "mstpInstancePortDesignatedPortID": mstpInstancePortDesignatedPortID,
       "mstpPortInfoTable": mstpPortInfoTable,
       "mstpPortInfoEntry": mstpPortInfoEntry,
       "mstpPortInfoPortIndex": mstpPortInfoPortIndex,
       "mstpPortInfoEnable": mstpPortInfoEnable,
       "mstpPortLinkType": mstpPortLinkType,
       "mstpPortMcheck": mstpPortMcheck,
       "mstpPortPortFast": mstpPortPortFast,
       "mstpPortFormat": mstpPortFormat,
       "mstpPortDigestSnp": mstpPortDigestSnp,
       "mstpPortTCFlush": mstpPortTCFlush,
       "priPorts": priPorts,
       "portCount": portCount,
       "portTable": portTable,
       "priPortEntry": priPortEntry,
       "portIndex": portIndex,
       "portName": portName,
       "switchNum": switchNum,
       "slotNum": slotNum,
       "portType": portType,
       "flowControlStatus": flowControlStatus,
       "bandwidthControlStatus": bandwidthControlStatus,
       "maxBandwidth": maxBandwidth,
       "receiveBandwidth": receiveBandwidth,
       "transmitBandwidth": transmitBandwidth,
       "shutdown": shutdown,
       "loopback": loopback,
       "speedDuplex": speedDuplex,
       "portMode": portMode,
       "pvid": pvid,
       "indicatesType": indicatesType,
       "vctAction": vctAction,
       "vctLastStatus": vctLastStatus,
       "portTrunkAllowedvlan": portTrunkAllowedvlan,
       "portHybridTaggedAllowedvlan": portHybridTaggedAllowedvlan,
       "portHybridUntaggedAllowedvlan": portHybridUntaggedAllowedvlan,
       "portBandWidthUsage": portBandWidthUsage,
       "lastFiveMinInPktsPerSec": lastFiveMinInPktsPerSec,
       "lastFiveMinOutPktsPerSec": lastFiveMinOutPktsPerSec,
       "lastFiveSecInPktsPerSec": lastFiveSecInPktsPerSec,
       "lastFiveSecOutPktsPerSec": lastFiveSecOutPktsPerSec,
       "transceiverSn": transceiverSn,
       "portBlockMode": portBlockMode,
       "portBlockState": portBlockState,
       "portComboMediaType": portComboMediaType,
       "portDiscardPktType": portDiscardPktType,
       "stormControlTable": stormControlTable,
       "stormControlEntry": stormControlEntry,
       "stormControlIndex": stormControlIndex,
       "stormControlType": stormControlType,
       "stormControlRate": stormControlRate,
       "stormControlStatus": stormControlStatus,
       "loopbackDetection": loopbackDetection,
       "loopbackDetecCtrlRecovery": loopbackDetecCtrlRecovery,
       "loopbackDetecIntervalTime": loopbackDetecIntervalTime,
       "lpbackDetecExistInterval": lpbackDetecExistInterval,
       "lpbackDetecNoExistInterval": lpbackDetecNoExistInterval,
       "loopbackDetecCtrlTable": loopbackDetecCtrlTable,
       "loopbackDetecCtrlEntry": loopbackDetecCtrlEntry,
       "lpbackDetecCtrlIndex": lpbackDetecCtrlIndex,
       "lpbackDetecCtrlMode": lpbackDetecCtrlMode,
       "loopbackDetecSpecVlanTable": loopbackDetecSpecVlanTable,
       "loopbackDetecSpecVlanEntry": loopbackDetecSpecVlanEntry,
       "lpbackDetecVlanPortIndex": lpbackDetecVlanPortIndex,
       "lpbackDetecVlanList": lpbackDetecVlanList,
       "lpbackDetecVlanListSetFlag": lpbackDetecVlanListSetFlag,
       "loopbackDetecShowTable": loopbackDetecShowTable,
       "loopbackDetecShowEntry": loopbackDetecShowEntry,
       "lpbackDetecShowPortIndex": lpbackDetecShowPortIndex,
       "lpbackDetecShowInformation": lpbackDetecShowInformation,
       "stormControlPortTable": stormControlPortTable,
       "stormControlPortEntry": stormControlPortEntry,
       "stormControlPortIndex": stormControlPortIndex,
       "stormControlSuppressType": stormControlSuppressType,
       "stormControlSuppressRateUnit": stormControlSuppressRateUnit,
       "stormControlSuppressRateValue": stormControlSuppressRateValue,
       "stormControlSuppressStatus": stormControlSuppressStatus,
       "flowCounterTable": flowCounterTable,
       "flowCouterEntry": flowCouterEntry,
       "flowPortIndex": flowPortIndex,
       "flowVlanID": flowVlanID,
       "flowCounterInOctets": flowCounterInOctets,
       "flowCounterInUcastPkts": flowCounterInUcastPkts,
       "flowCounterInMulticastPkts": flowCounterInMulticastPkts,
       "flowCounterInBroadcastPkts": flowCounterInBroadcastPkts,
       "flowCounterOutOctets": flowCounterOutOctets,
       "flowCounterOutUcastPkts": flowCounterOutUcastPkts,
       "flowCounterOutMulticastPkts": flowCounterOutMulticastPkts,
       "flowCounterOutBroadcastPkts": flowCounterOutBroadcastPkts,
       "clearFlowCounter": clearFlowCounter,
       "sumFlowCounterTable": sumFlowCounterTable,
       "sumFlowCouterEntry": sumFlowCouterEntry,
       "sumFlowVlanID": sumFlowVlanID,
       "sumFlowCounterInOctets": sumFlowCounterInOctets,
       "sumFlowCounterInPkts": sumFlowCounterInPkts,
       "sumFlowCounterOutOctets": sumFlowCounterOutOctets,
       "sumFlowCounterOutPkts": sumFlowCounterOutPkts,
       "clearSumFlowCounter": clearSumFlowCounter,
       "portUtilTable": portUtilTable,
       "portUtilEntry": portUtilEntry,
       "portUtilIndex": portUtilIndex,
       "wanIfInUtil": wanIfInUtil,
       "wanIfOutUtil": wanIfOutUtil,
       "ifBer": ifBer,
       "ifPaketLostRate": ifPaketLostRate,
       "portLEDShutoffTable": portLEDShutoffTable,
       "portLEDTimerange": portLEDTimerange,
       "portLEDTimeRangeMapTable": portLEDTimeRangeMapTable,
       "portLEDTimeRangeMapEntry": portLEDTimeRangeMapEntry,
       "portLEDTimeRangeMapIndex": portLEDTimeRangeMapIndex,
       "portLEDTimeRangeMapName": portLEDTimeRangeMapName,
       "portLEDTimeRangeMapStatus": portLEDTimeRangeMapStatus,
       "portLEDTimeRangeTable": portLEDTimeRangeTable,
       "portLEDTimeRangeEntry": portLEDTimeRangeEntry,
       "portLEDTimeRangeIndex": portLEDTimeRangeIndex,
       "portLEDTimeRangeSubIndex": portLEDTimeRangeSubIndex,
       "portLEDTimeRangeType": portLEDTimeRangeType,
       "portLEDTimeRangeStartWeek": portLEDTimeRangeStartWeek,
       "portLEDTimeRangeStartDate": portLEDTimeRangeStartDate,
       "portLEDTimeRangeStartTime": portLEDTimeRangeStartTime,
       "portLEDTimeRangeEndWeek": portLEDTimeRangeEndWeek,
       "portLEDTimeRangeEndDate": portLEDTimeRangeEndDate,
       "portLEDTimeRangeEndTime": portLEDTimeRangeEndTime,
       "portLEDTimeRangeStatus": portLEDTimeRangeStatus,
       "portLEDConfig": portLEDConfig,
       "portLEDTimeRangeName": portLEDTimeRangeName,
       "portLEDState": portLEDState,
       "portLEDTimeRangeDelete": portLEDTimeRangeDelete,
       "portTruckAllowedVlanTable": portTruckAllowedVlanTable,
       "portTruckAllowedVlanEntry": portTruckAllowedVlanEntry,
       "portTruckPortIndex": portTruckPortIndex,
       "portTruckAllowedVlan": portTruckAllowedVlan,
       "portTruckAllowedVlanAdd": portTruckAllowedVlanAdd,
       "portTruckAllowedVlanExcept": portTruckAllowedVlanExcept,
       "portTruckAllowedVlanRemove": portTruckAllowedVlanRemove,
       "portTruckAllowedVlanAll": portTruckAllowedVlanAll,
       "portHybridTaggedAllowedVlanTable": portHybridTaggedAllowedVlanTable,
       "portHybridTaggedAllowedVlanEntry": portHybridTaggedAllowedVlanEntry,
       "portHybridTaggedPortIndex": portHybridTaggedPortIndex,
       "portHybridTaggedAllowedVlan": portHybridTaggedAllowedVlan,
       "portHybridTaggedAllowedVlanAdd": portHybridTaggedAllowedVlanAdd,
       "portHybridTaggedAllowedVlanExcept": portHybridTaggedAllowedVlanExcept,
       "portHybridTaggedAllowedVlanRemove": portHybridTaggedAllowedVlanRemove,
       "portHybridTaggedAllowedVlanAll": portHybridTaggedAllowedVlanAll,
       "portHybridUntaggedAllowedVlanTable": portHybridUntaggedAllowedVlanTable,
       "portHybridUntaggedAllowedVlanEntry": portHybridUntaggedAllowedVlanEntry,
       "portHybridUntaggedPortIndex": portHybridUntaggedPortIndex,
       "portHybridUntaggedAllowedVlan": portHybridUntaggedAllowedVlan,
       "portHybridUntaggedAllowedVlanAdd": portHybridUntaggedAllowedVlanAdd,
       "portHybridUntaggedAllowedVlanExcept": portHybridUntaggedAllowedVlanExcept,
       "portHybridUntaggedAllowedVlanRemove": portHybridUntaggedAllowedVlanRemove,
       "portHybridUntaggedAllowedVlanAll": portHybridUntaggedAllowedVlanAll,
       "priIpConfig": priIpConfig,
       "netDefaultGateway": netDefaultGateway,
       "ipHttpState": ipHttpState,
       "iPAddrTable": iPAddrTable,
       "iPAddrEntry": iPAddrEntry,
       "iPAddrVid": iPAddrVid,
       "iPAddrIPAddress": iPAddrIPAddress,
       "iPAddrSubnetMask": iPAddrSubnetMask,
       "iPAddrPrimaryInterface": iPAddrPrimaryInterface,
       "iPAddrStatus": iPAddrStatus,
       "interfaceTable": interfaceTable,
       "interfaceEntry": interfaceEntry,
       "intfacetype": intfacetype,
       "intfaceID": intfaceID,
       "intfaceIndex": intfaceIndex,
       "intfaceStatus": intfaceStatus,
       "priVlanConfig": priVlanConfig,
       "vlanInfoTable": vlanInfoTable,
       "vlanInfoEntry": vlanInfoEntry,
       "vlanID": vlanID,
       "vlanName": vlanName,
       "vlanPortNumber": vlanPortNumber,
       "vlanRowStatus": vlanRowStatus,
       "mvlanInfoTable": mvlanInfoTable,
       "mvlanInfoEntry": mvlanInfoEntry,
       "mvlanID": mvlanID,
       "mvlanStatus": mvlanStatus,
       "mvlanAssoVlanList": mvlanAssoVlanList,
       "mvlanAssoVlanStatus": mvlanAssoVlanStatus,
       "mvlanMode": mvlanMode,
       "mvlanPortInfoTable": mvlanPortInfoTable,
       "mvlanPortInfoEntry": mvlanPortInfoEntry,
       "mvlanVId": mvlanVId,
       "mvlanPortIndex": mvlanPortIndex,
       "mvlanAssoPortTagid": mvlanAssoPortTagid,
       "mvlanPortStatus": mvlanPortStatus,
       "vlanFlowCounterTable": vlanFlowCounterTable,
       "vlanFlowCounterEntry": vlanFlowCounterEntry,
       "vlanFCVlanID": vlanFCVlanID,
       "vlanInOctets": vlanInOctets,
       "vlanInUcastPkts": vlanInUcastPkts,
       "vlanInMulticastPkts": vlanInMulticastPkts,
       "vlanInBroadcastPkts": vlanInBroadcastPkts,
       "vlanOutOctets": vlanOutOctets,
       "vlanOutUcastPkts": vlanOutUcastPkts,
       "vlanOutMulticastPkts": vlanOutMulticastPkts,
       "vlanOutBroadcastPkts": vlanOutBroadcastPkts,
       "clearVlanFlowCounter": clearVlanFlowCounter,
       "priJumblyStacking": priJumblyStacking,
       "sysStackUnitNumber": sysStackUnitNumber,
       "jumblyStackingInfoTable": jumblyStackingInfoTable,
       "jumblyStackingInfoEntry": jumblyStackingInfoEntry,
       "stackingUnitIndex": stackingUnitIndex,
       "swHardwareVersion": swHardwareVersion,
       "swSoftwareVersion": swSoftwareVersion,
       "swCPUMac": swCPUMac,
       "swType": swType,
       "priUamSecurityPortMib": priUamSecurityPortMib,
       "portSecurityTable": portSecurityTable,
       "portSecurityEntry": portSecurityEntry,
       "psPortIndex": psPortIndex,
       "psPortSecurity": psPortSecurity,
       "psSecuritytSaticMacAdd": psSecuritytSaticMacAdd,
       "psSecurityStaticMacDel": psSecurityStaticMacDel,
       "psSecurityPortLock": psSecurityPortLock,
       "psSecurityPortMax": psSecurityPortMax,
       "psSecurityPortConvertmac": psSecurityPortConvertmac,
       "psSecurityPortLocktimer": psSecurityPortLocktimer,
       "securityMacPortTable": securityMacPortTable,
       "securityMacPortEntry": securityMacPortEntry,
       "secPortIndex": secPortIndex,
       "secMacAdress": secMacAdress,
       "secVid": secVid,
       "priIgmpSnoopingMib": priIgmpSnoopingMib,
       "priIgmpSnoopingGlobalEnable": priIgmpSnoopingGlobalEnable,
       "priIgmpSnoopingVlanTable": priIgmpSnoopingVlanTable,
       "priIgmpSnoopingEntry": priIgmpSnoopingEntry,
       "priIgmpSnoopingvlanID": priIgmpSnoopingvlanID,
       "priIgmpSnoopingvlanEnable": priIgmpSnoopingvlanEnable,
       "priIgmpSnoopingleave": priIgmpSnoopingleave,
       "priIgmpSnoopingL2gen": priIgmpSnoopingL2gen,
       "priIgmpSnoopingGroupNum": priIgmpSnoopingGroupNum,
       "priIgmpSnoopingSourceNum": priIgmpSnoopingSourceNum,
       "priIgmpSnoopingPort": priIgmpSnoopingPort,
       "priIgmpSnoopingNoPort": priIgmpSnoopingNoPort,
       "priIgmpSnoopingPortTime": priIgmpSnoopingPortTime,
       "priIgmpSnoopingQueryInterval": priIgmpSnoopingQueryInterval,
       "priIgmpSnoopingQueryMrsp": priIgmpSnoopingQueryMrsp,
       "priIgmpSnoopingQueryRobustness": priIgmpSnoopingQueryRobustness,
       "priIgmpSnoopingSuppression": priIgmpSnoopingSuppression,
       "priIgmpSnoopingBindTable": priIgmpSnoopingBindTable,
       "priIgmpSnoopingBindEntry": priIgmpSnoopingBindEntry,
       "priIgmpSnoopingVlanID": priIgmpSnoopingVlanID,
       "priIgmpSnoopingGroupAddress": priIgmpSnoopingGroupAddress,
       "priIgmpSnoopingPortBitmap": priIgmpSnoopingPortBitmap,
       "priIgmpSnoopingLimitPortTable": priIgmpSnoopingLimitPortTable,
       "priIgmpSnoopingLimitPortEntry": priIgmpSnoopingLimitPortEntry,
       "priIgmpSnoopingLimitVlanID": priIgmpSnoopingLimitVlanID,
       "priIgmpSnoopingLimitPortIndex": priIgmpSnoopingLimitPortIndex,
       "priIgmpSnoopingLimitPortGroupNum": priIgmpSnoopingLimitPortGroupNum,
       "priIgmpSnoopingLimitPortSourceNum": priIgmpSnoopingLimitPortSourceNum,
       "priIgmpSnoopingLimitPortStrategy": priIgmpSnoopingLimitPortStrategy,
       "priIgmpSnoopingLimitPortStatus": priIgmpSnoopingLimitPortStatus,
       "priIgmpSnoopingPortCtrlPktTable": priIgmpSnoopingPortCtrlPktTable,
       "priIgmpSnoopingPortCtrlPktEntry": priIgmpSnoopingPortCtrlPktEntry,
       "priIgmpSnoopingPortCtrlPktDrop": priIgmpSnoopingPortCtrlPktDrop,
       "priIgmpSnoopingPortAuthTable": priIgmpSnoopingPortAuthTable,
       "priIgmpSnoopingPortAuthEntry": priIgmpSnoopingPortAuthEntry,
       "priIgmpSnoopingPortAuthEnable": priIgmpSnoopingPortAuthEnable,
       "priIgmpSnoopingPortAuthFreeRule": priIgmpSnoopingPortAuthFreeRule,
       "priQinQmib": priQinQmib,
       "dot1qTunnelTable": dot1qTunnelTable,
       "dot1qTunnelEntry": dot1qTunnelEntry,
       "qinqPortIndex": qinqPortIndex,
       "tunnelPortEnable": tunnelPortEnable,
       "tunnelPortType": tunnelPortType,
       "vlanTranslationTable": vlanTranslationTable,
       "vlanTranslationEntry": vlanTranslationEntry,
       "translatPortIndex": translatPortIndex,
       "translationEnable": translationEnable,
       "translationDropType": translationDropType,
       "vlanTranslationTypeTable": vlanTranslationTypeTable,
       "vlanTranslationTypeEntry": vlanTranslationTypeEntry,
       "translatPortTypeIndex": translatPortTypeIndex,
       "translationType": translationType,
       "translationOldVlanid": translationOldVlanid,
       "translationNewVlanid": translationNewVlanid,
       "translationTypeStatus": translationTypeStatus,
       "prisecurity": prisecurity,
       "acl": acl,
       "fireWall": fireWall,
       "fireWallEnable": fireWallEnable,
       "timeRange": timeRange,
       "timeRangeMapTable": timeRangeMapTable,
       "timeRangeMapEntry": timeRangeMapEntry,
       "timeRangeMapIndex": timeRangeMapIndex,
       "timeRangeMapName": timeRangeMapName,
       "timeRangeMapStatus": timeRangeMapStatus,
       "timeRangeTable": timeRangeTable,
       "timeRangeEntry": timeRangeEntry,
       "timeRangeIndex": timeRangeIndex,
       "timeRangeSubIndex": timeRangeSubIndex,
       "timeRangeType": timeRangeType,
       "timeRangeStartWeek": timeRangeStartWeek,
       "timeRangeStartDate": timeRangeStartDate,
       "timeRangeStartTime": timeRangeStartTime,
       "timeRangeEndWeek": timeRangeEndWeek,
       "timeRangeEndDate": timeRangeEndDate,
       "timeRangeEndTime": timeRangeEndTime,
       "timeRangeStatus": timeRangeStatus,
       "aclConfig": aclConfig,
       "numAclGroupTable": numAclGroupTable,
       "numAclGroupEntry": numAclGroupEntry,
       "numAclGroupAclIndex": numAclGroupAclIndex,
       "numAclGroupMatchOrder": numAclGroupMatchOrder,
       "numAclGroupSubitemNum": numAclGroupSubitemNum,
       "numAclGroupStatus": numAclGroupStatus,
       "nameAclGroupTable": nameAclGroupTable,
       "nameAclGroupEntry": nameAclGroupEntry,
       "nameAclGroupAclIndex": nameAclGroupAclIndex,
       "nameAclGroupAclName": nameAclGroupAclName,
       "nameAclGroupAclType": nameAclGroupAclType,
       "nameAclGroupMatchOrder": nameAclGroupMatchOrder,
       "nameAclGroupSubitemNum": nameAclGroupSubitemNum,
       "nameAclGroupStatus": nameAclGroupStatus,
       "ipStandardAclTable": ipStandardAclTable,
       "ipStandardAclEntry": ipStandardAclEntry,
       "ipStandardIndex": ipStandardIndex,
       "ipStandardSubIndex": ipStandardSubIndex,
       "ipStandardPriority": ipStandardPriority,
       "ipStandardAct": ipStandardAct,
       "ipStandardSrcIp": ipStandardSrcIp,
       "ipStandardSrcIpWild": ipStandardSrcIpWild,
       "ipStandardStatus": ipStandardStatus,
       "ipExternAclTable": ipExternAclTable,
       "ipExternAclEntry": ipExternAclEntry,
       "ipExternIndex": ipExternIndex,
       "ipExternSubIndex": ipExternSubIndex,
       "ipExternPriority": ipExternPriority,
       "ipExternAct": ipExternAct,
       "ipExternProtocal": ipExternProtocal,
       "ipExternSrcIp": ipExternSrcIp,
       "ipExternSrcIpWild": ipExternSrcIpWild,
       "ipExternDstIp": ipExternDstIp,
       "ipExternDstIpWild": ipExternDstIpWild,
       "ipExternTimeRangeName": ipExternTimeRangeName,
       "ipExternSrcOp": ipExternSrcOp,
       "ipExternSrcPort1": ipExternSrcPort1,
       "ipExternSrcPort2": ipExternSrcPort2,
       "ipExternDstOp": ipExternDstOp,
       "ipExternDstPort1": ipExternDstPort1,
       "ipExternDstPort2": ipExternDstPort2,
       "ipExternStatus": ipExternStatus,
       "macStandardAclTable": macStandardAclTable,
       "macStandardAclEntry": macStandardAclEntry,
       "macStandardIndex": macStandardIndex,
       "macStandardSubIndex": macStandardSubIndex,
       "macStandardPriority": macStandardPriority,
       "macStandardAct": macStandardAct,
       "macStandardSrcMac": macStandardSrcMac,
       "macStandardSrcMacWild": macStandardSrcMacWild,
       "macStandardStatus": macStandardStatus,
       "macExternAclTable": macExternAclTable,
       "macExternAclEntry": macExternAclEntry,
       "macExternIndex": macExternIndex,
       "macExternSubIndex": macExternSubIndex,
       "macExternPriority": macExternPriority,
       "macExternAct": macExternAct,
       "macExternSrcMac": macExternSrcMac,
       "macExternSrcMacWild": macExternSrcMacWild,
       "macExternDstMac": macExternDstMac,
       "macExternDstMacWild": macExternDstMacWild,
       "macExternPacketType": macExternPacketType,
       "macExternEtherType": macExternEtherType,
       "macExternEtherTypeWild": macExternEtherTypeWild,
       "macExternCos": macExternCos,
       "macExternCosWild": macExternCosWild,
       "macExternVlanId": macExternVlanId,
       "macExternVlanIdWild": macExternVlanIdWild,
       "macExternStatus": macExternStatus,
       "ipv6StandardAclTable": ipv6StandardAclTable,
       "ipv6StandardAclEntry": ipv6StandardAclEntry,
       "ipv6StandardIndex": ipv6StandardIndex,
       "ipv6StandardSubIndex": ipv6StandardSubIndex,
       "ipv6StandardPriority": ipv6StandardPriority,
       "ipv6StandardAct": ipv6StandardAct,
       "ipv6StandardSrcIp": ipv6StandardSrcIp,
       "ipv6StandardSrcPrefixLen": ipv6StandardSrcPrefixLen,
       "ipv6StandardStatus": ipv6StandardStatus,
       "ipv6ExternAclTable": ipv6ExternAclTable,
       "ipv6ExternAclEntry": ipv6ExternAclEntry,
       "ipv6ExternIndex": ipv6ExternIndex,
       "ipv6ExternSubIndex": ipv6ExternSubIndex,
       "ipv6ExternPriority": ipv6ExternPriority,
       "ipv6ExternAct": ipv6ExternAct,
       "ipv6ExternProtocal": ipv6ExternProtocal,
       "ipv6ExternSrcIp": ipv6ExternSrcIp,
       "ipv6ExternSrcPreLen": ipv6ExternSrcPreLen,
       "ipv6ExternDstIp": ipv6ExternDstIp,
       "ipv6ExternDstPreLen": ipv6ExternDstPreLen,
       "ipv6ExternTimeRangeName": ipv6ExternTimeRangeName,
       "ipv6ExternSrcOp": ipv6ExternSrcOp,
       "ipv6ExternSrcPort1": ipv6ExternSrcPort1,
       "ipv6ExternSrcPort2": ipv6ExternSrcPort2,
       "ipv6ExternDstOp": ipv6ExternDstOp,
       "ipv6ExternDstPort1": ipv6ExternDstPort1,
       "ipv6ExternDstPort2": ipv6ExternDstPort2,
       "ipv6ExternStatus": ipv6ExternStatus,
       "macIpExternAclTable": macIpExternAclTable,
       "macIpExternAclEntry": macIpExternAclEntry,
       "macIpExternIndex": macIpExternIndex,
       "macIpExternSubIndex": macIpExternSubIndex,
       "macIpExternPriority": macIpExternPriority,
       "macIpExternAct": macIpExternAct,
       "macIpExternProtocal": macIpExternProtocal,
       "macIpExternSrcMac": macIpExternSrcMac,
       "macIpExternSrcMacWild": macIpExternSrcMacWild,
       "macIpExternDstMac": macIpExternDstMac,
       "macIpExternDstMacWild": macIpExternDstMacWild,
       "macIpExternSrcIp": macIpExternSrcIp,
       "macIpExternSrcIpWild": macIpExternSrcIpWild,
       "macIpExternDstIp": macIpExternDstIp,
       "macIpExternDstIpWild": macIpExternDstIpWild,
       "macIpExternTimeRangeName": macIpExternTimeRangeName,
       "macIpExternSrcOp": macIpExternSrcOp,
       "macIpExternSrcPort1": macIpExternSrcPort1,
       "macIpExternSrcPort2": macIpExternSrcPort2,
       "macIpExternDstOp": macIpExternDstOp,
       "macIpExternDstPort1": macIpExternDstPort1,
       "macIpExternDstPort2": macIpExternDstPort2,
       "macIpExternPrecedence": macIpExternPrecedence,
       "macIpExternTos": macIpExternTos,
       "macIpExternStatus": macIpExternStatus,
       "macIpExternVlanId": macIpExternVlanId,
       "macIpExternVlanIdWild": macIpExternVlanIdWild,
       "aclAttach": aclAttach,
       "aclActiveTable": aclActiveTable,
       "aclActiveEntry": aclActiveEntry,
       "aclActiveBindType": aclActiveBindType,
       "aclActiveIndex": aclActiveIndex,
       "aclActiveType": aclActiveType,
       "aclActiveDirection": aclActiveDirection,
       "aclActiveAclIndex": aclActiveAclIndex,
       "aclActiveStatistic": aclActiveStatistic,
       "aclActiveStatus": aclActiveStatus,
       "aclStatisticClearTable": aclStatisticClearTable,
       "aclStatisticClearEntry": aclStatisticClearEntry,
       "aclStatisticClearBindType": aclStatisticClearBindType,
       "aclStatisticClearDirection": aclStatisticClearDirection,
       "aclStatisticClearIndex": aclStatisticClearIndex,
       "aclStatisticClearStatus": aclStatisticClearStatus,
       "sshMgt": sshMgt,
       "sshServerStatus": sshServerStatus,
       "sshServerVersion": sshServerVersion,
       "sshTimeout": sshTimeout,
       "sshAuthRetries": sshAuthRetries,
       "sshUseTable": sshUseTable,
       "sshUseEntry": sshUseEntry,
       "sshUserIndex": sshUserIndex,
       "sshUserName": sshUserName,
       "sshUserType": sshUserType,
       "sshUserPassword": sshUserPassword,
       "sshUserStatus": sshUserStatus,
       "sshConnInfoTable": sshConnInfoTable,
       "sshConnInfoEntry": sshConnInfoEntry,
       "sshConnID": sshConnID,
       "sshConnVersion": sshConnVersion,
       "sshConnStatus": sshConnStatus,
       "sshConnUserName": sshConnUserName,
       "tacacsMgt": tacacsMgt,
       "tacacsServerHostTable": tacacsServerHostTable,
       "tacacsServerHostEntry": tacacsServerHostEntry,
       "tacacsServerHostIndex": tacacsServerHostIndex,
       "tacacsServerHostIP": tacacsServerHostIP,
       "tacacsServerHostPort": tacacsServerHostPort,
       "tacacsServerHostPrimary": tacacsServerHostPrimary,
       "tacacsServerHostStatus": tacacsServerHostStatus,
       "tacacsServerHostKey": tacacsServerHostKey,
       "tacacsServerHostTimeout": tacacsServerHostTimeout,
       "tacacsServerTimeout": tacacsServerTimeout,
       "tacacsServerKey": tacacsServerKey,
       "am": am,
       "amGlobalEnable": amGlobalEnable,
       "amPortInfoTable": amPortInfoTable,
       "amPortInfoEntry": amPortInfoEntry,
       "amPortIndex": amPortIndex,
       "amPortEnable": amPortEnable,
       "amPortForwardingType": amPortForwardingType,
       "amPortIp": amPortIp,
       "amPortMac": amPortMac,
       "amPortCount": amPortCount,
       "amPortStatus": amPortStatus,
       "radiusMgt": radiusMgt,
       "aaaEnabled": aaaEnabled,
       "aaaAccount": aaaAccount,
       "aaaAccountUpdate": aaaAccountUpdate,
       "aaaAccountBindingDHCP": aaaAccountBindingDHCP,
       "radiusAuthenServerHostTable": radiusAuthenServerHostTable,
       "radiusAuthenServerHostEntry": radiusAuthenServerHostEntry,
       "radiusAuthenServerHostIndex": radiusAuthenServerHostIndex,
       "radiusAuthenServerHostIP": radiusAuthenServerHostIP,
       "radiusAuthenServerHostPort": radiusAuthenServerHostPort,
       "radiusAutServerHostKey": radiusAutServerHostKey,
       "radiusAuthenServerHostPrimary": radiusAuthenServerHostPrimary,
       "radiusAutServerHostAccessMode": radiusAutServerHostAccessMode,
       "radiusAuthenServerHostStatus": radiusAuthenServerHostStatus,
       "radiusAcctServerHostTable": radiusAcctServerHostTable,
       "radiusAcctServerHostEntry": radiusAcctServerHostEntry,
       "radiusAcctServerHostIndex": radiusAcctServerHostIndex,
       "radiusAcctServerHostIP": radiusAcctServerHostIP,
       "radiusAcctServerHostPort": radiusAcctServerHostPort,
       "radiusAcctServerHostKey": radiusAcctServerHostKey,
       "radiusAcctServerHostPrimary": radiusAcctServerHostPrimary,
       "radiusAcctServerHostStatus": radiusAcctServerHostStatus,
       "radiusServerTimeout": radiusServerTimeout,
       "radiusServerRetransmit": radiusServerRetransmit,
       "radiusServerDeadTime": radiusServerDeadTime,
       "radiusServerKey": radiusServerKey,
       "radiusServerAccountTimeOut": radiusServerAccountTimeOut,
       "radiusServerNasIpv4": radiusServerNasIpv4,
       "radiusServerNasIpv6": radiusServerNasIpv6,
       "priQos": priQos,
       "qos": qos,
       "qosEnable": qosEnable,
       "qosPortTable": qosPortTable,
       "qosPortEntry": qosPortEntry,
       "qosPortIndex": qosPortIndex,
       "qosPortType": qosPortType,
       "qosPortCos": qosPortCos,
       "qosPortTrust": qosPortTrust,
       "qosPortPriority": qosPortPriority,
       "qosPortMutation": qosPortMutation,
       "qosPortQueue": qosPortQueue,
       "qosPortStatus": qosPortStatus,
       "qosClassMapTable": qosClassMapTable,
       "qosclassmapEntry": qosclassmapEntry,
       "qosClassMapName": qosClassMapName,
       "qosClassMapType": qosClassMapType,
       "qosClassMapAccessGroup": qosClassMapAccessGroup,
       "qosClassMapDscp": qosClassMapDscp,
       "qosClassMapV6Dscp": qosClassMapV6Dscp,
       "qosClassMapIpPre": qosClassMapIpPre,
       "qosClassMapV6AccGroup": qosClassMapV6AccGroup,
       "qosClassMapV6Flow": qosClassMapV6Flow,
       "qosClassMapVlan": qosClassMapVlan,
       "qosClassCos": qosClassCos,
       "qosClassMapEXPtopmost": qosClassMapEXPtopmost,
       "qosClassMapStatus": qosClassMapStatus,
       "qosPolicyTable": qosPolicyTable,
       "qosPolicyEntry": qosPolicyEntry,
       "qosPolicyName": qosPolicyName,
       "qosPolicyClassMap": qosPolicyClassMap,
       "qosPolicyType": qosPolicyType,
       "qosPolicyRateKbps": qosPolicyRateKbps,
       "qosPolicyNormalBurstKbps": qosPolicyNormalBurstKbps,
       "qosPolicyMaximumBurstKbps": qosPolicyMaximumBurstKbps,
       "qosPolicyPeakKbps": qosPolicyPeakKbps,
       "qosPolicyConformAction": qosPolicyConformAction,
       "qosPolicyConformActionChangeValue": qosPolicyConformActionChangeValue,
       "qosPolicyExceedAction": qosPolicyExceedAction,
       "qosPolicyViolateAction": qosPolicyViolateAction,
       "qosPolicyAggregatePolicer": qosPolicyAggregatePolicer,
       "qosPolicyStatus": qosPolicyStatus,
       "qosAggPolicerTable": qosAggPolicerTable,
       "qosAggPolicerEntry": qosAggPolicerEntry,
       "qosAggPolicerName": qosAggPolicerName,
       "qosAggPolicerRateKbps": qosAggPolicerRateKbps,
       "qosAggPolicerNormalBurstKbps": qosAggPolicerNormalBurstKbps,
       "qosAggPolicerMaximumBurstKbps": qosAggPolicerMaximumBurstKbps,
       "qosAggPolicerPeakKbps": qosAggPolicerPeakKbps,
       "qosAggPolicerConformAction": qosAggPolicerConformAction,
       "qosAggPolicerConformActionChangeValue": qosAggPolicerConformActionChangeValue,
       "qosAggPolicerExceedAction": qosAggPolicerExceedAction,
       "qosAggPolicerViolateAction": qosAggPolicerViolateAction,
       "qosAggPolicerStatus": qosAggPolicerStatus,
       "qosSetTable": qosSetTable,
       "qosSetEntry": qosSetEntry,
       "qosSetPolicyMapName": qosSetPolicyMapName,
       "qosSetClassMapName": qosSetClassMapName,
       "qosSetType": qosSetType,
       "qosSetdscp": qosSetdscp,
       "qosSetprecedence": qosSetprecedence,
       "qosSetnextHop": qosSetnextHop,
       "qosSetv6Dscp": qosSetv6Dscp,
       "qosSetv6FlowLabel": qosSetv6FlowLabel,
       "qosSetv6nextHop": qosSetv6nextHop,
       "qosSetCos": qosSetCos,
       "qosSetEXPimposition": qosSetEXPimposition,
       "qosSetStatus": qosSetStatus,
       "qosPortBindTable": qosPortBindTable,
       "qosPortBindEntry": qosPortBindEntry,
       "qosPortBindIndex": qosPortBindIndex,
       "qosPortBindPolicy": qosPortBindPolicy,
       "qosPortBindType": qosPortBindType,
       "qosPortQueueTable": qosPortQueueTable,
       "qosPortQueueEntry": qosPortQueueEntry,
       "qosPortQueueIndex": qosPortQueueIndex,
       "qosPortQueueWeight1": qosPortQueueWeight1,
       "qosPortQueueWeight2": qosPortQueueWeight2,
       "qosPortQueueWeight3": qosPortQueueWeight3,
       "qosPortQueueWeight4": qosPortQueueWeight4,
       "qosPortQueueWeight5": qosPortQueueWeight5,
       "qosPortQueueWeight6": qosPortQueueWeight6,
       "qosPortQueueWeight7": qosPortQueueWeight7,
       "qosPortQueueWeight8": qosPortQueueWeight8,
       "qosPortQueueStatus": qosPortQueueStatus,
       "qosMap": qosMap,
       "qosMapType": qosMapType,
       "qosMapDscp1": qosMapDscp1,
       "qosMapDscp2": qosMapDscp2,
       "qosMapDscp3": qosMapDscp3,
       "qosMapDscp4": qosMapDscp4,
       "qosMapDscp5": qosMapDscp5,
       "qosMapDscp6": qosMapDscp6,
       "qosMapDscp7": qosMapDscp7,
       "qosMapDscp8": qosMapDscp8,
       "qosMapCos": qosMapCos,
       "qosMapEXP": qosMapEXP,
       "qosMapMarkDownDscp": qosMapMarkDownDscp,
       "qosMapMarkDownType": qosMapMarkDownType,
       "qosMapMutationName": qosMapMutationName,
       "qosMapMutationOut": qosMapMutationOut,
       "qosMapStatus": qosMapStatus,
       "showqos": showqos,
       "showclassmapTable": showclassmapTable,
       "showclassmapEntry": showclassmapEntry,
       "showclassmapname": showclassmapname,
       "showclassmapmatch": showclassmapmatch,
       "showpolicymapTable": showpolicymapTable,
       "showpolicymapEntry": showpolicymapEntry,
       "showpolicymapname": showpolicymapname,
       "showpolicymapcontent": showpolicymapcontent,
       "showqosaggregatepolicerTable": showqosaggregatepolicerTable,
       "showqosaggregatepolicerEntry": showqosaggregatepolicerEntry,
       "showqosaggregatepolicername": showqosaggregatepolicername,
       "showqosaggregatepolicercontent": showqosaggregatepolicercontent,
       "showmlsqosinterfaceTable": showmlsqosinterfaceTable,
       "showmlsqosinterfaceEntry": showmlsqosinterfaceEntry,
       "showmlsqosinterfaceIndex": showmlsqosinterfaceIndex,
       "showmlsqosinterfaceqoscontent": showmlsqosinterfaceqoscontent,
       "showmlsqosmaps": showmlsqosmaps,
       "showmlsqosmapscosdscp": showmlsqosmapscosdscp,
       "showmlsqosmapscosqueue": showmlsqosmapscosqueue,
       "showmlsqosmapsdscpcos": showmlsqosmapsdscpcos,
       "showmlsqosmapsipprecdscp": showmlsqosmapsipprecdscp,
       "showmlsqosmapspoliceddscp": showmlsqosmapspoliceddscp,
       "showmlsqosmapspoliceddscpnormalburst": showmlsqosmapspoliceddscpnormalburst,
       "showmlsqosmapsexpdscp": showmlsqosmapsexpdscp,
       "showmlsqosmapsdscpexp": showmlsqosmapsdscpexp,
       "showmlsqosmapsdscpmutationTable": showmlsqosmapsdscpmutationTable,
       "showmlsqosmapsdscpmutationEntry": showmlsqosmapsdscpmutationEntry,
       "showmlsqosmapsdscpmutationname": showmlsqosmapsdscpmutationname,
       "showmlsqosmapsdscpmutationcontent": showmlsqosmapsdscpmutationcontent,
       "qos3": qos3,
       "qos3PolicyMapGroupTable": qos3PolicyMapGroupTable,
       "qos3PolicyMapGroupEntry": qos3PolicyMapGroupEntry,
       "qos3PolicyMapGroupIndex": qos3PolicyMapGroupIndex,
       "qos3PolicyMapGroupName": qos3PolicyMapGroupName,
       "qos3PolicyMapGroupIsExt": qos3PolicyMapGroupIsExt,
       "qos3PolicyMapGroupStatus": qos3PolicyMapGroupStatus,
       "qos3ClassMapTable": qos3ClassMapTable,
       "qos3ClassMapEntry": qos3ClassMapEntry,
       "qos3ClassMapName": qos3ClassMapName,
       "qos3ClassMapType": qos3ClassMapType,
       "qos3ClassMapValue": qos3ClassMapValue,
       "qos3ClassMapUsedTime": qos3ClassMapUsedTime,
       "qos3ClassMapStatus": qos3ClassMapStatus,
       "qos3AggregatePolicyTable": qos3AggregatePolicyTable,
       "qos3AggregatePolicyEntry": qos3AggregatePolicyEntry,
       "qos3AggPolicyMapName": qos3AggPolicyMapName,
       "qos3AggPolicyCIRKbps": qos3AggPolicyCIRKbps,
       "qos3AggPolicyCBSKbps": qos3AggPolicyCBSKbps,
       "qos3AggPolicyPBSKbps": qos3AggPolicyPBSKbps,
       "qos3AggPolicyPIRKbps": qos3AggPolicyPIRKbps,
       "qos3AggPolicyConformAction": qos3AggPolicyConformAction,
       "qos3AggPolicyconformSetCos": qos3AggPolicyconformSetCos,
       "qos3AggPolicyconformSetDscp": qos3AggPolicyconformSetDscp,
       "qos3AggPolicyconformSetPrec": qos3AggPolicyconformSetPrec,
       "qos3AggPolicyconformSetIntp": qos3AggPolicyconformSetIntp,
       "qos3AggPolicyconformSetDp": qos3AggPolicyconformSetDp,
       "qos3AggPolicyExceedAction": qos3AggPolicyExceedAction,
       "qos3AggPolicyExceedSetCos": qos3AggPolicyExceedSetCos,
       "qos3AggPolicyExceedSetDscp": qos3AggPolicyExceedSetDscp,
       "qos3AggPolicyExceedSetPrec": qos3AggPolicyExceedSetPrec,
       "qos3AggPolicyExceedSetIntp": qos3AggPolicyExceedSetIntp,
       "qos3AggPolicyExceedSetDp": qos3AggPolicyExceedSetDp,
       "qos3AggPolicyViolateAction": qos3AggPolicyViolateAction,
       "qos3AggPolicyViolateSetCos": qos3AggPolicyViolateSetCos,
       "qos3AggPolicyViolateSetDscp": qos3AggPolicyViolateSetDscp,
       "qos3AggPolicyViolateSetPrec": qos3AggPolicyViolateSetPrec,
       "qos3AggPolicyViolateSetIntp": qos3AggPolicyViolateSetIntp,
       "qos3AggPolicyViolateSetDp": qos3AggPolicyViolateSetDp,
       "qos3AggPolicyStatus": qos3AggPolicyStatus,
       "qos3PolicyTable": qos3PolicyTable,
       "qos3PolicyEntry": qos3PolicyEntry,
       "qos3PolicyMapIndex": qos3PolicyMapIndex,
       "qos3PolicyClassMapName": qos3PolicyClassMapName,
       "qos3PolicyInsertClassMapName": qos3PolicyInsertClassMapName,
       "qos3PolicyType": qos3PolicyType,
       "qos3PolicyCIRKbps": qos3PolicyCIRKbps,
       "qos3PolicyCBSKbps": qos3PolicyCBSKbps,
       "qos3PolicyPBSKbps": qos3PolicyPBSKbps,
       "qos3PolicyPIRKbps": qos3PolicyPIRKbps,
       "qos3PolicyConformAction": qos3PolicyConformAction,
       "qos3PolicyconformSetCos": qos3PolicyconformSetCos,
       "qos3PolicyconformSetDscp": qos3PolicyconformSetDscp,
       "qos3PolicyconformSetPrec": qos3PolicyconformSetPrec,
       "qos3PolicyconformSetIntp": qos3PolicyconformSetIntp,
       "qos3PolicyconformSetDp": qos3PolicyconformSetDp,
       "qos3PolicyExceedAction": qos3PolicyExceedAction,
       "qos3PolicyExceedSetCos": qos3PolicyExceedSetCos,
       "qos3PolicyExceedSetDscp": qos3PolicyExceedSetDscp,
       "qos3PolicyExceedSetPrec": qos3PolicyExceedSetPrec,
       "qos3PolicyExceedSetIntp": qos3PolicyExceedSetIntp,
       "qos3PolicyExceedSetDp": qos3PolicyExceedSetDp,
       "qos3PolicyViolateAction": qos3PolicyViolateAction,
       "qos3PolicyViolateSetCos": qos3PolicyViolateSetCos,
       "qos3PolicyViolateSetDscp": qos3PolicyViolateSetDscp,
       "qos3PolicyViolateSetPrec": qos3PolicyViolateSetPrec,
       "qos3PolicyViolateSetIntp": qos3PolicyViolateSetIntp,
       "qos3PolicyViolateSetDp": qos3PolicyViolateSetDp,
       "qos3PolicyAggregatePolicer": qos3PolicyAggregatePolicer,
       "qos3PolicyAccounting": qos3PolicyAccounting,
       "qos3PolicyPidAction": qos3PolicyPidAction,
       "qos3SetCos": qos3SetCos,
       "qos3SetIpDscp": qos3SetIpDscp,
       "qos3SetIpPrec": qos3SetIpPrec,
       "qos3SetIntp": qos3SetIntp,
       "qos3SetDp": qos3SetDp,
       "qos3SetCVid": qos3SetCVid,
       "qos3SetSVid": qos3SetSVid,
       "qos3SetSTpid": qos3SetSTpid,
       "qos3AddSVid": qos3AddSVid,
       "qos3DelCVid": qos3DelCVid,
       "qos3SetTunnelId": qos3SetTunnelId,
       "qos3SetIpDefaultPBR": qos3SetIpDefaultPBR,
       "qos3SetIpVrf": qos3SetIpVrf,
       "qos3SetIpNextHop": qos3SetIpNextHop,
       "qos3SetExp": qos3SetExp,
       "qos3SetIpv6DefaultPBR": qos3SetIpv6DefaultPBR,
       "qos3SetIpv6Vrf": qos3SetIpv6Vrf,
       "qos3SetIpv6NextHop": qos3SetIpv6NextHop,
       "qos3PolicyStatus": qos3PolicyStatus,
       "qos3PortTable": qos3PortTable,
       "qos3PortEntry": qos3PortEntry,
       "qos3PortIndex": qos3PortIndex,
       "qos3PortCos": qos3PortCos,
       "qos3PortTrust": qos3PortTrust,
       "qos3PortWredEnable": qos3PortWredEnable,
       "qos3PortQueueAlgorithm": qos3PortQueueAlgorithm,
       "qos3PortPassThroughCos": qos3PortPassThroughCos,
       "qos3PortPassThroughDscp": qos3PortPassThroughDscp,
       "qos3QueueWeightTable": qos3QueueWeightTable,
       "qos3QueueWeightEntry": qos3QueueWeightEntry,
       "qos3QueueWeightPortIndex": qos3QueueWeightPortIndex,
       "qos3QueueWeightType": qos3QueueWeightType,
       "qos3QueueWeight0": qos3QueueWeight0,
       "qos3QueueWeight1": qos3QueueWeight1,
       "qos3QueueWeight2": qos3QueueWeight2,
       "qos3QueueWeight3": qos3QueueWeight3,
       "qos3QueueWeight4": qos3QueueWeight4,
       "qos3QueueWeight5": qos3QueueWeight5,
       "qos3QueueWeight6": qos3QueueWeight6,
       "qos3QueueWeight7": qos3QueueWeight7,
       "qos3QueueWeightStatus": qos3QueueWeightStatus,
       "qos3QueueBindWidthTable": qos3QueueBindWidthTable,
       "qos3QueueBindWidthEntry": qos3QueueBindWidthEntry,
       "qos3QueueBindWidthPortIndex": qos3QueueBindWidthPortIndex,
       "qos3QueueBindWidthQueueId": qos3QueueBindWidthQueueId,
       "qos3QueueBindWidthMin": qos3QueueBindWidthMin,
       "qos3QueueBindWidthMax": qos3QueueBindWidthMax,
       "qos3QueueBindWidthStatus": qos3QueueBindWidthStatus,
       "qos3QueueWredTable": qos3QueueWredTable,
       "qos3QueueWredEntry": qos3QueueWredEntry,
       "qos3QueueWredPortIndex": qos3QueueWredPortIndex,
       "qos3QueueWredQueueId": qos3QueueWredQueueId,
       "qos3QueueWredDp": qos3QueueWredDp,
       "qos3QueueWredDpStart": qos3QueueWredDpStart,
       "qos3QueueWredDpEnd": qos3QueueWredDpEnd,
       "qos3QueueWredDpMaxRate": qos3QueueWredDpMaxRate,
       "qos3QueueWredStatus": qos3QueueWredStatus,
       "qos3MapTable": qos3MapTable,
       "qos3MapEntry": qos3MapEntry,
       "qos3MapType": qos3MapType,
       "qos3MapAtoB1": qos3MapAtoB1,
       "qos3MapAtoB2": qos3MapAtoB2,
       "qos3MapAtoB3": qos3MapAtoB3,
       "qos3MapAtoB4": qos3MapAtoB4,
       "qos3MapAtoB5": qos3MapAtoB5,
       "qos3MapAtoB6": qos3MapAtoB6,
       "qos3MapAtoB7": qos3MapAtoB7,
       "qos3MapAtoB8": qos3MapAtoB8,
       "qos3MapStatus": qos3MapStatus,
       "qos3MapDscpTable": qos3MapDscpTable,
       "qos3MapDscpEntry": qos3MapDscpEntry,
       "qos3MapDscpType": qos3MapDscpType,
       "qos3MapDscpIndex": qos3MapDscpIndex,
       "qos3MapDscpValue": qos3MapDscpValue,
       "qos3mapDscpStatus": qos3mapDscpStatus,
       "qos3ServicePolicyTable": qos3ServicePolicyTable,
       "qos3ServicePolicyEntry": qos3ServicePolicyEntry,
       "qos3ServicePolicyBindType": qos3ServicePolicyBindType,
       "qos3ServicePolicyIndex": qos3ServicePolicyIndex,
       "qos3ServicePolicyDirection": qos3ServicePolicyDirection,
       "qos3ServicePolicyName": qos3ServicePolicyName,
       "qos3SercivePolicyStatus": qos3SercivePolicyStatus,
       "qos3StatisticClearTable": qos3StatisticClearTable,
       "qos3StatisticClearEntry": qos3StatisticClearEntry,
       "qos3StatisticClearBindType": qos3StatisticClearBindType,
       "qos3StatisticClearIndex": qos3StatisticClearIndex,
       "qos3StatisticClearDirection": qos3StatisticClearDirection,
       "qos3StatisticClearStatus": qos3StatisticClearStatus,
       "qos3Ets": qos3Ets,
       "qos3EtsTable": qos3EtsTable,
       "qos3EtsEntry": qos3EtsEntry,
       "qos3EtsPortIndex": qos3EtsPortIndex,
       "qos3EtsScheduleStatusConfig": qos3EtsScheduleStatusConfig,
       "qos3EtsStatus": qos3EtsStatus,
       "qos3McQueueBindWidthTable": qos3McQueueBindWidthTable,
       "qos3McQueueBindWidthEntry": qos3McQueueBindWidthEntry,
       "qos3McQueueBindWidthPortIndex": qos3McQueueBindWidthPortIndex,
       "qos3McQueueID": qos3McQueueID,
       "qos3McQueueBindWidthMin": qos3McQueueBindWidthMin,
       "qos3McQueueBindWidthMax": qos3McQueueBindWidthMax,
       "qos3McQueueBindWidthStatus": qos3McQueueBindWidthStatus,
       "qos3SchedulePolicyMapTable": qos3SchedulePolicyMapTable,
       "qos3SchedulePolicyMapEntry": qos3SchedulePolicyMapEntry,
       "qos3SchedulePolicyMapIndex": qos3SchedulePolicyMapIndex,
       "qos3SchedulePolicyName": qos3SchedulePolicyName,
       "qos3SchedulePolicyStatus": qos3SchedulePolicyStatus,
       "qos3NodeScheduleTable": qos3NodeScheduleTable,
       "qos3NodeScheduleEntry": qos3NodeScheduleEntry,
       "qos3NodeSchedulePolicyIndex": qos3NodeSchedulePolicyIndex,
       "qos3NodeScheduleLevelID": qos3NodeScheduleLevelID,
       "qos3NodeScheduleNodeID": qos3NodeScheduleNodeID,
       "qos3NodeScheduleStatus": qos3NodeScheduleStatus,
       "qos3ScheduleQueueAlgorithmTable": qos3ScheduleQueueAlgorithmTable,
       "qos3ScheduleQueueAlgorithmEntry": qos3ScheduleQueueAlgorithmEntry,
       "qos3ScheduleQueueAlgorithmPolicyIndex": qos3ScheduleQueueAlgorithmPolicyIndex,
       "qos3ScheduleQueueAlgorithmLevelID": qos3ScheduleQueueAlgorithmLevelID,
       "qos3ScheduleQueueAlgorithmNodeID": qos3ScheduleQueueAlgorithmNodeID,
       "qos3ScheduleQueueAlgorithmConfig": qos3ScheduleQueueAlgorithmConfig,
       "qos3ScheduleQueueAlgorithmStatus": qos3ScheduleQueueAlgorithmStatus,
       "qos3ScheduleQueueWeightTable": qos3ScheduleQueueWeightTable,
       "qos3ScheduleQueueWeightEntry": qos3ScheduleQueueWeightEntry,
       "qos3ScheduleQueueWeightPolicyIndex": qos3ScheduleQueueWeightPolicyIndex,
       "qos3ScheduleQueueWeightLevelID": qos3ScheduleQueueWeightLevelID,
       "qos3ScheduleQueueWeightNodeID": qos3ScheduleQueueWeightNodeID,
       "qos3ScheduleQueueAlgorithm": qos3ScheduleQueueAlgorithm,
       "qos3ScheduleQueueWeightQueueID": qos3ScheduleQueueWeightQueueID,
       "qos3ScheduleQueueWeightValue": qos3ScheduleQueueWeightValue,
       "qos3ScheduleQueueWeightStatus": qos3ScheduleQueueWeightStatus,
       "qos3ScheduleQueueInputTable": qos3ScheduleQueueInputTable,
       "qos3ScheduleQueueInputEntry": qos3ScheduleQueueInputEntry,
       "qos3ScheduleQueueInputPolicyIndex": qos3ScheduleQueueInputPolicyIndex,
       "qos3ScheduleQueueInputLevelID": qos3ScheduleQueueInputLevelID,
       "qos3ScheduleQueueInputNodeID": qos3ScheduleQueueInputNodeID,
       "qos3ScheduleQueueInputQueueID": qos3ScheduleQueueInputQueueID,
       "qos3ScheduleQueueInputType": qos3ScheduleQueueInputType,
       "qos3ScheduleQueueInputTypeValue": qos3ScheduleQueueInputTypeValue,
       "qos3ScheduleQueueInputStatus": qos3ScheduleQueueInputStatus,
       "qos3ScheduleBindWidthTable": qos3ScheduleBindWidthTable,
       "qos3ScheduleBindWidthEntry": qos3ScheduleBindWidthEntry,
       "qos3ScheduleBindWidthPolicyIndex": qos3ScheduleBindWidthPolicyIndex,
       "qos3ScheduleBindWidthLevelID": qos3ScheduleBindWidthLevelID,
       "qos3ScheduleBindWidthNodeID": qos3ScheduleBindWidthNodeID,
       "qos3ScheduleBindWidthMin": qos3ScheduleBindWidthMin,
       "qos3ScheduleBindWidthMax": qos3ScheduleBindWidthMax,
       "qos3ScheduleBindWidthStatus": qos3ScheduleBindWidthStatus,
       "qos3SchedulePolicyBindTable": qos3SchedulePolicyBindTable,
       "qos3SchedulePolicyBindEntry": qos3SchedulePolicyBindEntry,
       "qos3SchedulePolicyBindPortIndex": qos3SchedulePolicyBindPortIndex,
       "qos3SchedulePolicyBindPolicyName": qos3SchedulePolicyBindPolicyName,
       "qos3SchedulePolicyBindStatus": qos3SchedulePolicyBindStatus,
       "qos3MapIntpExtendTable": qos3MapIntpExtendTable,
       "qos3MapIntpExtendEntry": qos3MapIntpExtendEntry,
       "qos3MapIntpExtendType": qos3MapIntpExtendType,
       "qos3MapIntpExtendIndex": qos3MapIntpExtendIndex,
       "qos3MapIntpExtendValue": qos3MapIntpExtendValue,
       "qos3mapIntpExtendStatus": qos3mapIntpExtendStatus,
       "qos3EgressRemark": qos3EgressRemark,
       "qos3EgressGreenRemark": qos3EgressGreenRemark,
       "showQos3": showQos3,
       "showQos3VlanTable": showQos3VlanTable,
       "showQos3VlanEntry": showQos3VlanEntry,
       "showQos3VlanId": showQos3VlanId,
       "showQos3PolicyDirection": showQos3PolicyDirection,
       "showQos3ClassmapName": showQos3ClassmapName,
       "showQos3VlanInCounter": showQos3VlanInCounter,
       "showQos3VlanOutCounter": showQos3VlanOutCounter,
       "showQos3VlanGreenCounter": showQos3VlanGreenCounter,
       "showQos3VlanYellowCounter": showQos3VlanYellowCounter,
       "showQos3VlanRedCounter": showQos3VlanRedCounter,
       "showQos3QueueStatisticsTable": showQos3QueueStatisticsTable,
       "showQos3QueueStatisticsEntry": showQos3QueueStatisticsEntry,
       "showQos3QueueStatisticsPortIndex": showQos3QueueStatisticsPortIndex,
       "showQos3QueueStatisticsQueueID": showQos3QueueStatisticsQueueID,
       "showQos3QueueStatisticsPassedPacket": showQos3QueueStatisticsPassedPacket,
       "showQos3QueueStatisticsDropedPacket": showQos3QueueStatisticsDropedPacket,
       "showQos3MCQueueStatisticsTable": showQos3MCQueueStatisticsTable,
       "showQos3MCQueueStatisticsEntry": showQos3MCQueueStatisticsEntry,
       "showQos3MCQueueStatisticsPortIndex": showQos3MCQueueStatisticsPortIndex,
       "showQos3MCQueueStatisticsQueueID": showQos3MCQueueStatisticsQueueID,
       "showQos3MCQueueStatisticsPassedPacket": showQos3MCQueueStatisticsPassedPacket,
       "showQos3MCQueueStatisticsDropedPacket": showQos3MCQueueStatisticsDropedPacket,
       "primirror": primirror,
       "mirrorDestTable": mirrorDestTable,
       "mirrorDestEntry": mirrorDestEntry,
       "mirrorDestSession": mirrorDestSession,
       "mirrorDestPort": mirrorDestPort,
       "mirrorDestStatus": mirrorDestStatus,
       "mirrorSrcPortTable": mirrorSrcPortTable,
       "mirrorSrcPortEntry": mirrorSrcPortEntry,
       "mirrorSrcPortSession": mirrorSrcPortSession,
       "mirrorSrcPortDirect": mirrorSrcPortDirect,
       "mirrorSrcPort": mirrorSrcPort,
       "mirrorSrcPortStatus": mirrorSrcPortStatus,
       "mirrorSrcCpuTable": mirrorSrcCpuTable,
       "mirrorSrcCpuEntry": mirrorSrcCpuEntry,
       "mirrorSrcCpuSession": mirrorSrcCpuSession,
       "mirrorSrcCpuDirect": mirrorSrcCpuDirect,
       "mirrorSrcCpuSlot": mirrorSrcCpuSlot,
       "mirrorSrcCpuStatus": mirrorSrcCpuStatus,
       "mirrorReflectorPortTable": mirrorReflectorPortTable,
       "mirrorReflectorPortEntry": mirrorReflectorPortEntry,
       "mirrorReflectorPortSession": mirrorReflectorPortSession,
       "mirrorReflectorPort": mirrorReflectorPort,
       "mirrorReflectorPortStatus": mirrorReflectorPortStatus,
       "mirrorRspanVlanTable": mirrorRspanVlanTable,
       "mirrorRspanVlanEntry": mirrorRspanVlanEntry,
       "mirrorRspanVlan": mirrorRspanVlan,
       "mirrorRspanVlanStatus": mirrorRspanVlanStatus,
       "mirrorRspanSessionTable": mirrorRspanSessionTable,
       "mirrorRspanSessionEntry": mirrorRspanSessionEntry,
       "mirrorRspanSession": mirrorRspanSession,
       "mirrorRspanSessionVlan": mirrorRspanSessionVlan,
       "mirrorRspanSessionStatus": mirrorRspanSessionStatus,
       "mirrorDestGreTable": mirrorDestGreTable,
       "mirrorDestGreEntry": mirrorDestGreEntry,
       "mirrorDestGreSession": mirrorDestGreSession,
       "mirrorDestGrePort": mirrorDestGrePort,
       "mirrorDestMacAddr": mirrorDestMacAddr,
       "mirrorDestIP": mirrorDestIP,
       "mirrorSrcIP": mirrorSrcIP,
       "mirrorDestGreStatus": mirrorDestGreStatus,
       "pridhcp": pridhcp,
       "dhcpRelay": dhcpRelay,
       "dhcpRelayForwardUdpBootps": dhcpRelayForwardUdpBootps,
       "dhcpRelayServerAddrTable": dhcpRelayServerAddrTable,
       "dhcpRelayServerAddrEntry": dhcpRelayServerAddrEntry,
       "dhcpRelayServerAddrVlanId": dhcpRelayServerAddrVlanId,
       "dhcpRelayServerAddrIndex": dhcpRelayServerAddrIndex,
       "dhcpRelayServerAddrServerIp": dhcpRelayServerAddrServerIp,
       "dhcpRelayServerAddrStatus": dhcpRelayServerAddrStatus,
       "dhcpRelayOption82Enalbe": dhcpRelayOption82Enalbe,
       "dhcpRelayInformationOptionRemoteIDFormat": dhcpRelayInformationOptionRemoteIDFormat,
       "dhcpRelayInformationOptionRemoteID": dhcpRelayInformationOptionRemoteID,
       "dhcpRelayInformationOptionSubscriberIDFormat": dhcpRelayInformationOptionSubscriberIDFormat,
       "dhcpServerRelayInformationEnable": dhcpServerRelayInformationEnable,
       "dhcpRelayInformationOptionDelimiter": dhcpRelayInformationOptionDelimiter,
       "dhcpRelayOptionSelfDefinedSubscriberIDFormat": dhcpRelayOptionSelfDefinedSubscriberIDFormat,
       "dhcpRelayOptionSelfDefinedRemoteIDFormat": dhcpRelayOptionSelfDefinedRemoteIDFormat,
       "dhcpRelayOptionSelfDefinedSubscriberID": dhcpRelayOptionSelfDefinedSubscriberID,
       "dhcpRelayOptionSelfDefinedRemoteID": dhcpRelayOptionSelfDefinedRemoteID,
       "dhcpRelayOption82InterfaceConfigureTable": dhcpRelayOption82InterfaceConfigureTable,
       "dhcpRelayOption82InterfaceConfigureEntry": dhcpRelayOption82InterfaceConfigureEntry,
       "dhcpRelayOption82Vid": dhcpRelayOption82Vid,
       "dhcpRelayOption82ForwardPolicy": dhcpRelayOption82ForwardPolicy,
       "dhcpRelayOption82SubscriberID": dhcpRelayOption82SubscriberID,
       "dhcpRelaySharevlanSubvlanConfigureTable": dhcpRelaySharevlanSubvlanConfigureTable,
       "dhcpRelaySharevlanSubvlanConfigureEntry": dhcpRelaySharevlanSubvlanConfigureEntry,
       "dhcpRelaySharevlanSubvlanList": dhcpRelaySharevlanSubvlanList,
       "dhcpRelayNoSharevlan": dhcpRelayNoSharevlan,
       "dhcpServer": dhcpServer,
       "dhcpServerServiceStatus": dhcpServerServiceStatus,
       "dhcploggingStatus": dhcploggingStatus,
       "dhcpPool": dhcpPool,
       "dhcpPoolTable": dhcpPoolTable,
       "dhcpPoolEntry": dhcpPoolEntry,
       "dhcpPoolPoolName": dhcpPoolPoolName,
       "dhcpPoolStatus": dhcpPoolStatus,
       "dhcpPoolAddressType": dhcpPoolAddressType,
       "dhcpPoolAddress": dhcpPoolAddress,
       "dhcpPoolAddressPrefix": dhcpPoolAddressPrefix,
       "dhcpPoolAddressStatus": dhcpPoolAddressStatus,
       "dhcpPoolMacAddress": dhcpPoolMacAddress,
       "dhcpPoolProType": dhcpPoolProType,
       "dhcpPoolMacStatus": dhcpPoolMacStatus,
       "dhcpPoolExpandTable": dhcpPoolExpandTable,
       "dhcpPoolExpandEntry": dhcpPoolExpandEntry,
       "dhcpPoolExpandName": dhcpPoolExpandName,
       "dhcpPoolNetbiosNodeType": dhcpPoolNetbiosNodeType,
       "dhcpPoolDomainName": dhcpPoolDomainName,
       "dhcpPoolBootFile": dhcpPoolBootFile,
       "dhcpPoolCLid": dhcpPoolCLid,
       "dhcpPoolExpandstatus": dhcpPoolExpandstatus,
       "dhcpLeaseTimeTable": dhcpLeaseTimeTable,
       "dhcpLeaseTimeEntry": dhcpLeaseTimeEntry,
       "dhcpLeaseTimePoolName": dhcpLeaseTimePoolName,
       "dhcpLeaseTimeType": dhcpLeaseTimeType,
       "dhcpLeaseTimeDay": dhcpLeaseTimeDay,
       "dhcpLeaseTimeHours": dhcpLeaseTimeHours,
       "dhcpLeaseTimeMinutes": dhcpLeaseTimeMinutes,
       "dhcpLeaseTimeStatus": dhcpLeaseTimeStatus,
       "dhcpPoolOptionTable": dhcpPoolOptionTable,
       "dhcpPoolOptionEntry": dhcpPoolOptionEntry,
       "dhcpPoolOptionName": dhcpPoolOptionName,
       "dhcpPoolOptionIndex": dhcpPoolOptionIndex,
       "dhcpPoolOptionId": dhcpPoolOptionId,
       "dhcpPoolOptionType": dhcpPoolOptionType,
       "dhcpPoolOption": dhcpPoolOption,
       "dhcpPoolOptionStatus": dhcpPoolOptionStatus,
       "dhcpServerExcludedIpAddrTable": dhcpServerExcludedIpAddrTable,
       "dhcpServerExcludedIpAddrEntry": dhcpServerExcludedIpAddrEntry,
       "dhcpServerExcludedIpAddrLowIp": dhcpServerExcludedIpAddrLowIp,
       "dhcpServerExcludedIpAddrHiIp": dhcpServerExcludedIpAddrHiIp,
       "dhcpServerExcludedIpAddrStatus": dhcpServerExcludedIpAddrStatus,
       "dhcpPoolDnsSerTable": dhcpPoolDnsSerTable,
       "dhcpPoolDnsSerEntry": dhcpPoolDnsSerEntry,
       "dhcpPoolDnsSerPoolName": dhcpPoolDnsSerPoolName,
       "dhcpPoolDnsSerIpAddress1": dhcpPoolDnsSerIpAddress1,
       "dhcpPoolDnsSerIpAddress2": dhcpPoolDnsSerIpAddress2,
       "dhcpPoolDnsSerIpAddress3": dhcpPoolDnsSerIpAddress3,
       "dhcpPoolDnsSerIpAddress4": dhcpPoolDnsSerIpAddress4,
       "dhcpPoolDnsSerIpAddress5": dhcpPoolDnsSerIpAddress5,
       "dhcpPoolDnsSerIpAddress6": dhcpPoolDnsSerIpAddress6,
       "dhcpPoolDnsSerIpAddress7": dhcpPoolDnsSerIpAddress7,
       "dhcpPoolDnsSerIpAddress8": dhcpPoolDnsSerIpAddress8,
       "dhcpPoolDnsSerStatus": dhcpPoolDnsSerStatus,
       "dhcpPoolDefaultRouterTable": dhcpPoolDefaultRouterTable,
       "dhcpPoolDefaultRouterEntry": dhcpPoolDefaultRouterEntry,
       "dhcpPoolDefaultRouterPoolName": dhcpPoolDefaultRouterPoolName,
       "dhcpPoolDefaultRouterIpAddress1": dhcpPoolDefaultRouterIpAddress1,
       "dhcpPoolDefaultRouterIpAddress2": dhcpPoolDefaultRouterIpAddress2,
       "dhcpPoolDefaultRouterIpAddress3": dhcpPoolDefaultRouterIpAddress3,
       "dhcpPoolDefaultRouterIpAddress4": dhcpPoolDefaultRouterIpAddress4,
       "dhcpPoolDefaultRouterIpAddress5": dhcpPoolDefaultRouterIpAddress5,
       "dhcpPoolDefaultRouterIpAddress6": dhcpPoolDefaultRouterIpAddress6,
       "dhcpPoolDefaultRouterIpAddress7": dhcpPoolDefaultRouterIpAddress7,
       "dhcpPoolDefaultRouterIpAddress8": dhcpPoolDefaultRouterIpAddress8,
       "dhcpPoolDefaultRouterStatus": dhcpPoolDefaultRouterStatus,
       "dhcpPoolNextServerTable": dhcpPoolNextServerTable,
       "dhcpPoolNextServerEntry": dhcpPoolNextServerEntry,
       "dhcpPoolNextServerPoolName": dhcpPoolNextServerPoolName,
       "dhcpPoolNextServerIpAddress1": dhcpPoolNextServerIpAddress1,
       "dhcpPoolNextServerIpAddress2": dhcpPoolNextServerIpAddress2,
       "dhcpPoolNextServerIpAddress3": dhcpPoolNextServerIpAddress3,
       "dhcpPoolNextServerIpAddress4": dhcpPoolNextServerIpAddress4,
       "dhcpPoolNextServerIpAddress5": dhcpPoolNextServerIpAddress5,
       "dhcpPoolNextServerIpAddress6": dhcpPoolNextServerIpAddress6,
       "dhcpPoolNextServerIpAddress7": dhcpPoolNextServerIpAddress7,
       "dhcpPoolNextServerIpAddress8": dhcpPoolNextServerIpAddress8,
       "dhcpPoolNextServerStatus": dhcpPoolNextServerStatus,
       "dhcpPoolWinsTable": dhcpPoolWinsTable,
       "dhcpPoolWinsEntry": dhcpPoolWinsEntry,
       "dhcpPoolWinsPoolName": dhcpPoolWinsPoolName,
       "dhcpPoolWinsIpAddress1": dhcpPoolWinsIpAddress1,
       "dhcpPoolWinsIpAddress2": dhcpPoolWinsIpAddress2,
       "dhcpPoolWinsIpAddress3": dhcpPoolWinsIpAddress3,
       "dhcpPoolWinsIpAddress4": dhcpPoolWinsIpAddress4,
       "dhcpPoolWinsIpAddress5": dhcpPoolWinsIpAddress5,
       "dhcpPoolWinsIpAddress6": dhcpPoolWinsIpAddress6,
       "dhcpPoolWinsIpAddress7": dhcpPoolWinsIpAddress7,
       "dhcpPoolWinsIpAddress8": dhcpPoolWinsIpAddress8,
       "dhcpPoolWinsStatus": dhcpPoolWinsStatus,
       "dhcpServerLeaseBindingTable": dhcpServerLeaseBindingTable,
       "dhcpServerLeaseBindingEntry": dhcpServerLeaseBindingEntry,
       "dhcpServerLeaseBindingIp": dhcpServerLeaseBindingIp,
       "dhcpServerLeaseBindingType": dhcpServerLeaseBindingType,
       "dhcpServerLeaseBindingMac": dhcpServerLeaseBindingMac,
       "dhcpServerLeaseBindingLeaseTime": dhcpServerLeaseBindingLeaseTime,
       "dhcpSnooping": dhcpSnooping,
       "dhcpSnoopingEnable": dhcpSnoopingEnable,
       "dhcpSnoopingBindingEnalbe": dhcpSnoopingBindingEnalbe,
       "dhcpSnoopingVlanEnable": dhcpSnoopingVlanEnable,
       "dhcpSnoopingInformationEnalbe": dhcpSnoopingInformationEnalbe,
       "dhcpSnoopingLimitRate": dhcpSnoopingLimitRate,
       "dhcpSnoopingActionMaxNum": dhcpSnoopingActionMaxNum,
       "dhcpSnoopingbindingARP": dhcpSnoopingbindingARP,
       "dhcpSnoopingInformationOptionDelimiter": dhcpSnoopingInformationOptionDelimiter,
       "dhcpSnoopingInformationOptionSubscriberIDFormat": dhcpSnoopingInformationOptionSubscriberIDFormat,
       "dhcpSnoopingInformationOptionRemoteID": dhcpSnoopingInformationOptionRemoteID,
       "dhcpSnoopingInformationOptionAllowUntrusted": dhcpSnoopingInformationOptionAllowUntrusted,
       "dhcpSnoopingOptionSelfDefinedSubscriberIDFormat": dhcpSnoopingOptionSelfDefinedSubscriberIDFormat,
       "dhcpSnoopingOptionSelfDefinedRemoteIDFormat": dhcpSnoopingOptionSelfDefinedRemoteIDFormat,
       "dhcpSnoopingOptionSelfDefinedSubscriberID": dhcpSnoopingOptionSelfDefinedSubscriberID,
       "dhcpSnoopingOptionSelfDefinedRemoteID": dhcpSnoopingOptionSelfDefinedRemoteID,
       "dhcpSnoopingClearBinding": dhcpSnoopingClearBinding,
       "dhcpSnoopingPortConfigTable": dhcpSnoopingPortConfigTable,
       "dhcpSnoopingPortConfigEntry": dhcpSnoopingPortConfigEntry,
       "dhcpSnoopingPortIndex": dhcpSnoopingPortIndex,
       "dhcpSnoopingUserControlMaxNum": dhcpSnoopingUserControlMaxNum,
       "dhcpSnoopingUserControl": dhcpSnoopingUserControl,
       "dhcpSnoopingTrust": dhcpSnoopingTrust,
       "dhcpSnoopingBindingDot1x": dhcpSnoopingBindingDot1x,
       "dhcpSnoopingSubScriberID": dhcpSnoopingSubScriberID,
       "dhcpSnoopingAlarmCount": dhcpSnoopingAlarmCount,
       "dhcpSnoopingBindingCount": dhcpSnoopingBindingCount,
       "dhcpSnoopingPortActionTable": dhcpSnoopingPortActionTable,
       "dhcpSnoopingPortActionEntry": dhcpSnoopingPortActionEntry,
       "dhcpSnoopingPort": dhcpSnoopingPort,
       "dhcpSnoopingActionType": dhcpSnoopingActionType,
       "dhcpSnoopingActionRecoveryTime": dhcpSnoopingActionRecoveryTime,
       "dhcpSnoopingActionStatus": dhcpSnoopingActionStatus,
       "dhcpSnoopingStaticBindingTable": dhcpSnoopingStaticBindingTable,
       "dhcpSnoopingStaticBindingEntry": dhcpSnoopingStaticBindingEntry,
       "dhcpSnoopingStaticBindingIP": dhcpSnoopingStaticBindingIP,
       "dhcpSnoopingStaticBindingMAC": dhcpSnoopingStaticBindingMAC,
       "dhcpSnoopingStaticBindingMask": dhcpSnoopingStaticBindingMask,
       "dhcpSnoopingStaticBindingPort": dhcpSnoopingStaticBindingPort,
       "dhcpSnoopingStaticBindingVid": dhcpSnoopingStaticBindingVid,
       "dhcpSnoopingStaticBindingStatus": dhcpSnoopingStaticBindingStatus,
       "dhcpSnoopingAckBindingInfoTable": dhcpSnoopingAckBindingInfoTable,
       "dhcpSnoopingAckBindingInfoEntry": dhcpSnoopingAckBindingInfoEntry,
       "dhcpSnoopingAckBindingIP": dhcpSnoopingAckBindingIP,
       "dhcpSnoopingAckBindingMAC": dhcpSnoopingAckBindingMAC,
       "dhcpSnoopingAckBindingPort": dhcpSnoopingAckBindingPort,
       "dhcpSnoopingAckBindingVid": dhcpSnoopingAckBindingVid,
       "dhcpSnoopingAckBindingLease": dhcpSnoopingAckBindingLease,
       "dhcpSnoopingAckBindingFlag": dhcpSnoopingAckBindingFlag,
       "dhcpSnoopingRequestBindingInfoTable": dhcpSnoopingRequestBindingInfoTable,
       "dhcpSnoopingRequestBindingInfoEntry": dhcpSnoopingRequestBindingInfoEntry,
       "dhcpSnoopingRequestBindingIP": dhcpSnoopingRequestBindingIP,
       "dhcpSnoopingRequestBindingMAC": dhcpSnoopingRequestBindingMAC,
       "dhcpSnoopingRequestBindingPort": dhcpSnoopingRequestBindingPort,
       "dhcpSnoopingRequestBindingVid": dhcpSnoopingRequestBindingVid,
       "dhcpSnoopingRequestBindingLease": dhcpSnoopingRequestBindingLease,
       "dhcpSnoopingAlarmInfoTable": dhcpSnoopingAlarmInfoTable,
       "dhcpSnoopingAlarmInfoEntry": dhcpSnoopingAlarmInfoEntry,
       "dhcpSnoopingAlarmInfoPortIndex": dhcpSnoopingAlarmInfoPortIndex,
       "dhcpSnoopingAlarmInfoNum": dhcpSnoopingAlarmInfoNum,
       "dhcpSnoopingAlarmInfoType": dhcpSnoopingAlarmInfoType,
       "dhcpSnoopingAlarmInfoBlackholeMAC": dhcpSnoopingAlarmInfoBlackholeMAC,
       "dhcpSnoopingAlarmInfoRecoveryTime": dhcpSnoopingAlarmInfoRecoveryTime,
       "dhcpSnoopingAlarmInfoRecoveryActionStatus": dhcpSnoopingAlarmInfoRecoveryActionStatus,
       "dhcpSnoopingStatisticTable": dhcpSnoopingStatisticTable,
       "dhcpSnoopingStatisticAlarmNum": dhcpSnoopingStatisticAlarmNum,
       "dhcpSnoopingStatisticAckBindingNum": dhcpSnoopingStatisticAckBindingNum,
       "dhcpSnoopingStatisticRequestBindingNum": dhcpSnoopingStatisticRequestBindingNum,
       "dhcpSnoopingStatisticDropPktsNum": dhcpSnoopingStatisticDropPktsNum,
       "dhcpSnoopingStatisticDiscardPktsNum": dhcpSnoopingStatisticDiscardPktsNum,
       "dhcpSnoopingBlockedInfoTable": dhcpSnoopingBlockedInfoTable,
       "dhcpSnoopingBlockedInfoEntry": dhcpSnoopingBlockedInfoEntry,
       "dhcpSnoopingBlockedInfoPortIndex": dhcpSnoopingBlockedInfoPortIndex,
       "dhcpSnoopingBlockedInfoRecordingTime": dhcpSnoopingBlockedInfoRecordingTime,
       "dhcpSnoopingBlockedInfoShow": dhcpSnoopingBlockedInfoShow,
       "priportGroup": priportGroup,
       "systemPriority": systemPriority,
       "portGroupTable": portGroupTable,
       "portGroupEntry": portGroupEntry,
       "portGroupIndex": portGroupIndex,
       "portGroupMemberCount": portGroupMemberCount,
       "loadBalance": loadBalance,
       "portGroupInfo": portGroupInfo,
       "portGroupPortListTable": portGroupPortListTable,
       "portGroupPortListEntry": portGroupPortListEntry,
       "portGroupMemberIndex": portGroupMemberIndex,
       "portGroupMemberName": portGroupMemberName,
       "portGroupMemberMode": portGroupMemberMode,
       "portGroupMemberPriority": portGroupMemberPriority,
       "portGroupMemberTimeout": portGroupMemberTimeout,
       "portGroupMemberStatus": portGroupMemberStatus,
       "prisnmpMgt": prisnmpMgt,
       "snmpSecurityIpStatus": snmpSecurityIpStatus,
       "snmpTrapHostStatus": snmpTrapHostStatus,
       "snmpRmonStatus": snmpRmonStatus,
       "securityIpTable": securityIpTable,
       "securityIpEntry": securityIpEntry,
       "securityIpIndex": securityIpIndex,
       "securityIpAddress": securityIpAddress,
       "securityIpStatus": securityIpStatus,
       "trapDestTable": trapDestTable,
       "trapDestEntry": trapDestEntry,
       "trapDestIndex": trapDestIndex,
       "trapDestAddress": trapDestAddress,
       "trapDestVersion": trapDestVersion,
       "trapDestCommunity": trapDestCommunity,
       "trapDestStatus": trapDestStatus,
       "l3": l3,
       "arpMgt": arpMgt,
       "arpCacheDeleteAll": arpCacheDeleteAll,
       "arpCacheTimeout": arpCacheTimeout,
       "arpSecurityUpdateProtectALL": arpSecurityUpdateProtectALL,
       "arpSecurityLearnProtectALL": arpSecurityLearnProtectALL,
       "arpSecurityConvertALL": arpSecurityConvertALL,
       "arpSecurityTable": arpSecurityTable,
       "arpsecurityEntry": arpsecurityEntry,
       "arpSecurityIfindex": arpSecurityIfindex,
       "arpSecurityUpdateProtect": arpSecurityUpdateProtect,
       "arpSecurityLearnProtect": arpSecurityLearnProtect,
       "arpSecurityConvert": arpSecurityConvert,
       "arpProxyArpTable": arpProxyArpTable,
       "arpProxyArpEntry": arpProxyArpEntry,
       "arpProxyArpIfIndex": arpProxyArpIfIndex,
       "arpProxyArpStatus": arpProxyArpStatus,
       "arpStacticTable": arpStacticTable,
       "arpStaticEntry": arpStaticEntry,
       "arpStaticIfindex": arpStaticIfindex,
       "arpStaticIpaddress": arpStaticIpaddress,
       "arpStaticMac": arpStaticMac,
       "arpStaticPortIndex": arpStaticPortIndex,
       "arpStaticStatus": arpStaticStatus,
       "routeMgt": routeMgt,
       "ipStaticRouteExtTable": ipStaticRouteExtTable,
       "ipStaticRouteExtEntry": ipStaticRouteExtEntry,
       "ipStaticRouteExtDest": ipStaticRouteExtDest,
       "ipStaticRouteExtMask": ipStaticRouteExtMask,
       "ipStaticRouteExtNextHop": ipStaticRouteExtNextHop,
       "ipStaticRouteExtMetric": ipStaticRouteExtMetric,
       "ipStaticRouteExtStatus": ipStaticRouteExtStatus,
       "ripMgt": ripMgt,
       "ripTimers": ripTimers,
       "ripUpdateTime": ripUpdateTime,
       "ripTimeoutTime": ripTimeoutTime,
       "ripGarbageCollectionTime": ripGarbageCollectionTime,
       "ripRoutingProcessStatus": ripRoutingProcessStatus,
       "ripRouterVersion": ripRouterVersion,
       "ripInstabilityPreventingTable": ripInstabilityPreventingTable,
       "ripInstabilityPreventingEntry": ripInstabilityPreventingEntry,
       "ripVlanIndex": ripVlanIndex,
       "ripSplitHorizonStatus": ripSplitHorizonStatus,
       "ripStatisticsReset": ripStatisticsReset,
       "ripNetworkInterfaceTable": ripNetworkInterfaceTable,
       "ripNetworkInterfaceEntry": ripNetworkInterfaceEntry,
       "ripNetworkInterfaceAddress": ripNetworkInterfaceAddress,
       "ripNetworkInterfaceStatus": ripNetworkInterfaceStatus,
       "ripNetworkAddrTable": ripNetworkAddrTable,
       "ripNetworkAddrEntry": ripNetworkAddrEntry,
       "ripNetworkAddrAddress": ripNetworkAddrAddress,
       "ripNetworkAddrPrefixLen": ripNetworkAddrPrefixLen,
       "ripNetworkAddrStatus": ripNetworkAddrStatus,
       "ospfMgt": ospfMgt,
       "ospfSystemGroup": ospfSystemGroup,
       "ospfRouterIdType": ospfRouterIdType,
       "ospfRfc1583CompatibleState": ospfRfc1583CompatibleState,
       "ospfAutoCost": ospfAutoCost,
       "ospfAdvertiseDefaultRoute": ospfAdvertiseDefaultRoute,
       "ospfDefaultExternalMetric": ospfDefaultExternalMetric,
       "ospfSpfHoldTime": ospfSpfHoldTime,
       "ospfSpfDelayTime": ospfSpfDelayTime,
       "ospfAreaNumber": ospfAreaNumber,
       "clearOspfProcess": clearOspfProcess,
       "ospfNssaTable": ospfNssaTable,
       "ospfNssaEntry": ospfNssaEntry,
       "ospfNssaAreaId": ospfNssaAreaId,
       "ospfNssaStatus": ospfNssaStatus,
       "ospfNssaRedistributeStatus": ospfNssaRedistributeStatus,
       "ospfNssaOriginateDefaultInfoStatus": ospfNssaOriginateDefaultInfoStatus,
       "ospfRedistributeTable": ospfRedistributeTable,
       "ospfRedistributeEntry": ospfRedistributeEntry,
       "ospfRedistributeProtocol": ospfRedistributeProtocol,
       "ospfRedistributeStatus": ospfRedistributeStatus,
       "ospfRedistributeMetricType": ospfRedistributeMetricType,
       "ospfRedistributeMetric": ospfRedistributeMetric,
       "ospfSummaryAddressTable": ospfSummaryAddressTable,
       "ospfSummaryAddressEntry": ospfSummaryAddressEntry,
       "ospfSummaryAddress": ospfSummaryAddress,
       "ospfSummaryMask": ospfSummaryMask,
       "ospfSummaryStatus": ospfSummaryStatus,
       "ospfNetworkAreaAddressTable": ospfNetworkAreaAddressTable,
       "ospfNetworkAreaAddressEntry": ospfNetworkAreaAddressEntry,
       "ospfNetworkAareaAddress": ospfNetworkAareaAddress,
       "ospfNetworkAreaMask": ospfNetworkAreaMask,
       "ospfNetworkAreaAreaId": ospfNetworkAreaAreaId,
       "ospfNetworkAreaStatus": ospfNetworkAreaStatus,
       "dvmrpMgt": dvmrpMgt,
       "dvmrpScalar": dvmrpScalar,
       "dvmrpVersionString": dvmrpVersionString,
       "dvmrpNumRoutes": dvmrpNumRoutes,
       "dvmrpReachableRoutes": dvmrpReachableRoutes,
       "dvmrpInterfaceTable": dvmrpInterfaceTable,
       "dvmrpInterfaceEntry": dvmrpInterfaceEntry,
       "dvmrpInterfaceIndex": dvmrpInterfaceIndex,
       "dvmrpInterfaceLocalAddress": dvmrpInterfaceLocalAddress,
       "dvmrpInterfaceMetric": dvmrpInterfaceMetric,
       "dvmrpInterfaceStatus": dvmrpInterfaceStatus,
       "dvmrpInterfaceRcvBadPkts": dvmrpInterfaceRcvBadPkts,
       "dvmrpInterfaceRcvBadRoutes": dvmrpInterfaceRcvBadRoutes,
       "dvmrpInterfaceSentRoutes": dvmrpInterfaceSentRoutes,
       "dvmrpInterfaceKey": dvmrpInterfaceKey,
       "dvmrpInterfaceKeyVersion": dvmrpInterfaceKeyVersion,
       "dvmrpInterfaceGenerationId": dvmrpInterfaceGenerationId,
       "dvmrpNeighborTable": dvmrpNeighborTable,
       "dvmrpNeighborEntry": dvmrpNeighborEntry,
       "dvmrpNeighborIfIndex": dvmrpNeighborIfIndex,
       "dvmrpNeighborAddress": dvmrpNeighborAddress,
       "dvmrpNeighborUpTime": dvmrpNeighborUpTime,
       "dvmrpNeighborExpiryTime": dvmrpNeighborExpiryTime,
       "dvmrpNeighborGenerationId": dvmrpNeighborGenerationId,
       "dvmrpNeighborMajorVersion": dvmrpNeighborMajorVersion,
       "dvmrpNeighborMinorVersion": dvmrpNeighborMinorVersion,
       "dvmrpNeighborCapabilities": dvmrpNeighborCapabilities,
       "dvmrpNeighborRcvRoutes": dvmrpNeighborRcvRoutes,
       "dvmrpNeighborRcvBadPkts": dvmrpNeighborRcvBadPkts,
       "dvmrpNeighborRcvBadRoutes": dvmrpNeighborRcvBadRoutes,
       "dvmrpNeighborState": dvmrpNeighborState,
       "dvmrpRouteTable": dvmrpRouteTable,
       "dvmrpRouteEntry": dvmrpRouteEntry,
       "dvmrpRouteSource": dvmrpRouteSource,
       "dvmrpRouteSourceMask": dvmrpRouteSourceMask,
       "dvmrpRouteUpstreamNeighbor": dvmrpRouteUpstreamNeighbor,
       "dvmrpRouteIfIndex": dvmrpRouteIfIndex,
       "dvmrpRouteMetric": dvmrpRouteMetric,
       "dvmrpRouteExpiryTime": dvmrpRouteExpiryTime,
       "dvmrpRouteUpTime": dvmrpRouteUpTime,
       "dvmrpRouteNextHopTable": dvmrpRouteNextHopTable,
       "dvmrpRouteNextHopEntry": dvmrpRouteNextHopEntry,
       "dvmrpRouteNextHopSource": dvmrpRouteNextHopSource,
       "dvmrpRouteNextHopSourceMask": dvmrpRouteNextHopSourceMask,
       "dvmrpRouteNextHopIfIndex": dvmrpRouteNextHopIfIndex,
       "dvmrpRouteNextHopType": dvmrpRouteNextHopType,
       "dvmrpPruneTable": dvmrpPruneTable,
       "dvmrpPruneEntry": dvmrpPruneEntry,
       "dvmrpPruneGroup": dvmrpPruneGroup,
       "dvmrpPruneSource": dvmrpPruneSource,
       "dvmrpPruneSourceMask": dvmrpPruneSourceMask,
       "dvmrpPruneExpiryTime": dvmrpPruneExpiryTime,
       "sntpMgt": sntpMgt,
       "sntpPollTime": sntpPollTime,
       "sntpServerTable": sntpServerTable,
       "sntpServerEntry": sntpServerEntry,
       "sntpServerVersion": sntpServerVersion,
       "sntpServerAddress": sntpServerAddress,
       "sntpServerStatus": sntpServerStatus,
       "sntpServer6Table": sntpServer6Table,
       "sntpServer6Entry": sntpServer6Entry,
       "sntpServer6Version": sntpServer6Version,
       "sntpServer6Address": sntpServer6Address,
       "sntpServer6Status": sntpServer6Status,
       "sntpTimeZone": sntpTimeZone,
       "sntpTimeZoneName": sntpTimeZoneName,
       "sntpTimeZoneType": sntpTimeZoneType,
       "sntpTimeZoneTime": sntpTimeZoneTime,
       "sntpTimeZoneStatus": sntpTimeZoneStatus,
       "urpf": urpf,
       "urpfEnable": urpfEnable,
       "urpfPortTable": urpfPortTable,
       "urpfPortEntry": urpfPortEntry,
       "urpfPortIndex": urpfPortIndex,
       "urpfPortMode": urpfPortMode,
       "urpfPortAllowDefault": urpfPortAllowDefault,
       "urpfPortStatus": urpfPortStatus,
       "dcscm": dcscm,
       "dcscmdcEnable": dcscmdcEnable,
       "dcscmdcAclTable": dcscmdcAclTable,
       "dcscmdcAclEntry": dcscmdcAclEntry,
       "dcscmdcAclNumber": dcscmdcAclNumber,
       "dcscmdcAclSubNumber": dcscmdcAclSubNumber,
       "dcscmdcAclSourceIp": dcscmdcAclSourceIp,
       "dcscmdcAclSourceMask": dcscmdcAclSourceMask,
       "dcscmdcAclDestinationIp": dcscmdcAclDestinationIp,
       "dcscmdcAclDestinationMask": dcscmdcAclDestinationMask,
       "dcscmdcAclPermitOrDeny": dcscmdcAclPermitOrDeny,
       "dcscmVMacbindingTable": dcscmVMacbindingTable,
       "dcscmVMacbindingEntry": dcscmVMacbindingEntry,
       "dcscmVMacbindingVlanid": dcscmVMacbindingVlanid,
       "dcscmVMacbindingMacAddr": dcscmVMacbindingMacAddr,
       "dcscmVMacbindingAclNumber": dcscmVMacbindingAclNumber,
       "dcscmSipbindingTable": dcscmSipbindingTable,
       "dcscmSipbindingEntry": dcscmSipbindingEntry,
       "dcscmSipbindingSipAddress": dcscmSipbindingSipAddress,
       "dcscmSipbindingSipMask": dcscmSipbindingSipMask,
       "dcscmSipbindingAclNumber": dcscmSipbindingAclNumber,
       "dcscmdcPortbindingTable": dcscmdcPortbindingTable,
       "dcscmdcPortbindingEntry": dcscmdcPortbindingEntry,
       "dcscmdcPortbindingPortName": dcscmdcPortbindingPortName,
       "dcscmdcPortbindingAclNumber": dcscmdcPortbindingAclNumber,
       "dcscmscEnable": dcscmscEnable,
       "dcscmscAclTable": dcscmscAclTable,
       "dcscmscAclEntry": dcscmscAclEntry,
       "dcscmscAclNumber": dcscmscAclNumber,
       "dcscmscAclSubNumber": dcscmscAclSubNumber,
       "dcscmscAclSourceIp": dcscmscAclSourceIp,
       "dcscmscAclSourceMask": dcscmscAclSourceMask,
       "dcscmscAclDestinationIp": dcscmscAclDestinationIp,
       "dcscmscAclDestinationMask": dcscmscAclDestinationMask,
       "dcscmscAclPermitOrDeny": dcscmscAclPermitOrDeny,
       "dcscmscPortbindingTable": dcscmscPortbindingTable,
       "dcscmscPortbindingEntry": dcscmscPortbindingEntry,
       "dcscmscPortbindingPortName": dcscmscPortbindingPortName,
       "dcscmscPortbindingAclNumber": dcscmscPortbindingAclNumber,
       "dcscmpcTable": dcscmpcTable,
       "dcscmpcEntry": dcscmpcEntry,
       "dcscmpcSourceIp": dcscmpcSourceIp,
       "dcscmpcSourceMasklen": dcscmpcSourceMasklen,
       "dcscmpcDestinationIp": dcscmpcDestinationIp,
       "dcscmpcDestinationMasklen": dcscmpcDestinationMasklen,
       "dcscmpccos": dcscmpccos,
       "dcscm6": dcscm6,
       "dcscm6dcEnable": dcscm6dcEnable,
       "dcscm6dcAcl": dcscm6dcAcl,
       "dcscm6dcAclNumber": dcscm6dcAclNumber,
       "dcscm6dcAclSourceIp": dcscm6dcAclSourceIp,
       "dcscm6dcAclSourceMask": dcscm6dcAclSourceMask,
       "dcscm6dcAclDestinationIp": dcscm6dcAclDestinationIp,
       "dcscm6dcAclDestinationMask": dcscm6dcAclDestinationMask,
       "dcscm6dcAclPermitOrDeny": dcscm6dcAclPermitOrDeny,
       "dcscm6VMacbindingTable": dcscm6VMacbindingTable,
       "dcscm6VMacbindingEntry": dcscm6VMacbindingEntry,
       "dcscm6VMacbindingVlanid": dcscm6VMacbindingVlanid,
       "dcscm6VMacbindingMacAddr": dcscm6VMacbindingMacAddr,
       "dcscm6VMacbindingAclNumber": dcscm6VMacbindingAclNumber,
       "dcscm6SipbindingTable": dcscm6SipbindingTable,
       "dcscm6SipbindingEntry": dcscm6SipbindingEntry,
       "dcscm6SipbindingSipAddress": dcscm6SipbindingSipAddress,
       "dcscm6SipbindingSipMaskLen": dcscm6SipbindingSipMaskLen,
       "dcscm6SipbindingAclNumber": dcscm6SipbindingAclNumber,
       "dcscm6dcPortbindingTable": dcscm6dcPortbindingTable,
       "dcscm6dcPortbindingEntry": dcscm6dcPortbindingEntry,
       "dcscm6dcPortbindingPortName": dcscm6dcPortbindingPortName,
       "dcscm6dcPortbindingAclNumber": dcscm6dcPortbindingAclNumber,
       "dcscm6scEnable": dcscm6scEnable,
       "dcscm6scAcl": dcscm6scAcl,
       "dcscm6scAclNumber": dcscm6scAclNumber,
       "dcscm6scAclSourceIp": dcscm6scAclSourceIp,
       "dcscm6scAclSourceMask": dcscm6scAclSourceMask,
       "dcscm6scAclDestinationIp": dcscm6scAclDestinationIp,
       "dcscm6scAclDestinationMask": dcscm6scAclDestinationMask,
       "dcscm6scAclPermitOrDeny": dcscm6scAclPermitOrDeny,
       "dcscm6scPortbindingTable": dcscm6scPortbindingTable,
       "dcscm6scPortbindingEntry": dcscm6scPortbindingEntry,
       "dcscm6scPortbindingPortName": dcscm6scPortbindingPortName,
       "dcscm6scPortbindingAclNumber": dcscm6scPortbindingAclNumber,
       "dcscm6pcTable": dcscm6pcTable,
       "dcscm6pcEntry": dcscm6pcEntry,
       "dcscm6pcSourceIp": dcscm6pcSourceIp,
       "dcscm6pcSourceMask": dcscm6pcSourceMask,
       "dcscm6pcDestinationIp": dcscm6pcDestinationIp,
       "dcscm6pcDestinationMask": dcscm6pcDestinationMask,
       "dcscm6pccos": dcscm6pccos,
       "prClusterv2": prClusterv2,
       "clusterv2Base": clusterv2Base,
       "clusterv2BaseKey": clusterv2BaseKey,
       "clusterv2BaseVlan": clusterv2BaseVlan,
       "clusterv2BaseRun": clusterv2BaseRun,
       "clusterv2BaseRole": clusterv2BaseRole,
       "clusterv2BaseVersion": clusterv2BaseVersion,
       "clusterv2BaseMaxNumberOfMembers": clusterv2BaseMaxNumberOfMembers,
       "clusterv2BaseMaxNumberOfSwitches": clusterv2BaseMaxNumberOfSwitches,
       "clusterv2Create": clusterv2Create,
       "clusterv2CreateIPPool": clusterv2CreateIPPool,
       "clusterv2CreateName": clusterv2CreateName,
       "clusterv2CreateCmdrOperate": clusterv2CreateCmdrOperate,
       "clusterv2Status": clusterv2Status,
       "clusterv2StatusClusterName": clusterv2StatusClusterName,
       "clusterv2StatusKeepalive": clusterv2StatusKeepalive,
       "clusterv2StatusLoss-count": clusterv2StatusLoss_count,
       "clusterv2Commander": clusterv2Commander,
       "clusterv2CommanderAutoAddMem": clusterv2CommanderAutoAddMem,
       "clusterv2MemberCounter": clusterv2MemberCounter,
       "clusterv2MemberTable": clusterv2MemberTable,
       "clusterv2MemberEntry": clusterv2MemberEntry,
       "clusterv2MemberNumber": clusterv2MemberNumber,
       "clusterv2MemberIpAddress": clusterv2MemberIpAddress,
       "clusterv2MemberOperStatus": clusterv2MemberOperStatus,
       "clusterv2MemberMacAddress": clusterv2MemberMacAddress,
       "clusterv2MemberHostName": clusterv2MemberHostName,
       "clusterv2MemberDeviceType": clusterv2MemberDeviceType,
       "clusterv2CandidateCounter": clusterv2CandidateCounter,
       "clusterv2CandidateTable": clusterv2CandidateTable,
       "clusterv2CandidateEntry": clusterv2CandidateEntry,
       "clusterv2CandidateId": clusterv2CandidateId,
       "clusterv2CandidateMacAddress": clusterv2CandidateMacAddress,
       "clusterv2CandidateHostName": clusterv2CandidateHostName,
       "clusterv2CandidateDeviceType": clusterv2CandidateDeviceType,
       "clusterv2RebootMem": clusterv2RebootMem,
       "dns": dns,
       "dnsEnable": dnsEnable,
       "dnsServerTable": dnsServerTable,
       "dnsServerEntry": dnsServerEntry,
       "dnsServerInetAddrType": dnsServerInetAddrType,
       "dnsServerIpAddr": dnsServerIpAddr,
       "dnsServerPriority": dnsServerPriority,
       "dnsServerStatus": dnsServerStatus,
       "dnsDomainSuffixTable": dnsDomainSuffixTable,
       "dnsDomainSuffixEntry": dnsDomainSuffixEntry,
       "dnsDomainSuffix": dnsDomainSuffix,
       "dnsDomainSuffixStatus": dnsDomainSuffixStatus,
       "dnsDynHostTable": dnsDynHostTable,
       "dnsDynHostEntry": dnsDynHostEntry,
       "dnsDynHostIndex": dnsDynHostIndex,
       "dnsDynHostName": dnsDynHostName,
       "dnsDynHostIpAddr": dnsDynHostIpAddr,
       "dnsDynHostTtl": dnsDynHostTtl,
       "ntpSnmpMIB": ntpSnmpMIB,
       "ntpSnmpMIBObjects": ntpSnmpMIBObjects,
       "ntpEntInfo": ntpEntInfo,
       "ntpEntSoftwareName": ntpEntSoftwareName,
       "ntpEntSoftwareVersion": ntpEntSoftwareVersion,
       "ntpEntSoftwareVendor": ntpEntSoftwareVendor,
       "ntpEntSystemType": ntpEntSystemType,
       "ntpEntTimeResolution": ntpEntTimeResolution,
       "ntpEntTimePrecision": ntpEntTimePrecision,
       "ntpEntStatus": ntpEntStatus,
       "ntpEntStatusCurrentMode": ntpEntStatusCurrentMode,
       "ntpEntStatusCurrentModeVal": ntpEntStatusCurrentModeVal,
       "ntpEntStatusStratum": ntpEntStatusStratum,
       "ntpEntStatusActiveRefSourceId": ntpEntStatusActiveRefSourceId,
       "ntpEntStatusActiveRefSourceName": ntpEntStatusActiveRefSourceName,
       "ntpEntStatusNumberOfRefSources": ntpEntStatusNumberOfRefSources,
       "ntpEntStatusDateTime": ntpEntStatusDateTime,
       "ntpEntStatusInPkts": ntpEntStatusInPkts,
       "ntpEntStatusOutPkts": ntpEntStatusOutPkts,
       "ntpEntStatusBadVersion": ntpEntStatusBadVersion,
       "ntpEntStatusProtocolError": ntpEntStatusProtocolError,
       "ntpEntConformance": ntpEntConformance,
       "ntpEntCompliances": ntpEntCompliances,
       "ntpEntNTPCompliance": ntpEntNTPCompliance,
       "ntpEntSNTPCompliance": ntpEntSNTPCompliance,
       "ntpEntGroups": ntpEntGroups,
       "ntpEntObjectsGroup1": ntpEntObjectsGroup1,
       "ntpEntObjectsGroup2": ntpEntObjectsGroup2,
       "priPoeConfig": priPoeConfig,
       "poeSystemEnable": poeSystemEnable,
       "poeMaxPower": poeMaxPower,
       "poePoliceEnable": poePoliceEnable,
       "poeLegacyEnable": poeLegacyEnable,
       "poeDisconnect": poeDisconnect,
       "poeCurrentPower": poeCurrentPower,
       "poePortMode": poePortMode,
       "poeSoftwareVersion": poeSoftwareVersion,
       "poeHardwareVersion": poeHardwareVersion,
       "poePortConfigTable": poePortConfigTable,
       "poePortConfigEntry": poePortConfigEntry,
       "poePortIndex": poePortIndex,
       "poePortStatus": poePortStatus,
       "poePortPriority": poePortPriority,
       "poePortMaxPower": poePortMaxPower,
       "poePortCurrentPower": poePortCurrentPower,
       "poePortCurrentCurrent": poePortCurrentCurrent,
       "poePortCurrentVoltage": poePortCurrentVoltage,
       "poePortPdStatus": poePortPdStatus,
       "poePortPdClass": poePortPdClass,
       "poeHighInrushEnable": poeHighInrushEnable,
       "priQos2": priQos2,
       "qos2": qos2,
       "qos2MapCostoIntp": qos2MapCostoIntp,
       "qos2MapCostoIntp1": qos2MapCostoIntp1,
       "qos2MapCostoIntp2": qos2MapCostoIntp2,
       "qos2MapCostoIntp3": qos2MapCostoIntp3,
       "qos2MapCostoIntp4": qos2MapCostoIntp4,
       "qos2MapCostoIntp5": qos2MapCostoIntp5,
       "qos2MapCostoIntp6": qos2MapCostoIntp6,
       "qos2MapCostoIntp7": qos2MapCostoIntp7,
       "qos2MapCostoIntp8": qos2MapCostoIntp8,
       "qos2MapCostoIntpStatus": qos2MapCostoIntpStatus,
       "qos2MapCostoDP": qos2MapCostoDP,
       "qos2MapCostoDP1": qos2MapCostoDP1,
       "qos2MapCostoDP2": qos2MapCostoDP2,
       "qos2MapCostoDP3": qos2MapCostoDP3,
       "qos2MapCostoDP4": qos2MapCostoDP4,
       "qos2MapCostoDP5": qos2MapCostoDP5,
       "qos2MapCostoDP6": qos2MapCostoDP6,
       "qos2MapCostoDP7": qos2MapCostoDP7,
       "qos2MapCostoDP8": qos2MapCostoDP8,
       "qos2MapCostoDPStatus": qos2MapCostoDPStatus,
       "qos2MapDSCPtoDSCP": qos2MapDSCPtoDSCP,
       "qos2MapDSCPtoDSCP1": qos2MapDSCPtoDSCP1,
       "qos2MapDSCPtoDSCP2": qos2MapDSCPtoDSCP2,
       "qos2MapDSCPtoDSCP3": qos2MapDSCPtoDSCP3,
       "qos2MapDSCPtoDSCP4": qos2MapDSCPtoDSCP4,
       "qos2MapDSCPtoDSCP5": qos2MapDSCPtoDSCP5,
       "qos2MapDSCPtoDSCP6": qos2MapDSCPtoDSCP6,
       "qos2MapDSCPtoDSCP7": qos2MapDSCPtoDSCP7,
       "qos2MapDSCPtoDSCP8": qos2MapDSCPtoDSCP8,
       "qos2MapDSCPtoDSCPoutDSCP": qos2MapDSCPtoDSCPoutDSCP,
       "qos2MapDSCPtoDSCPStatus": qos2MapDSCPtoDSCPStatus,
       "qos2MapDSCPtoIntp": qos2MapDSCPtoIntp,
       "qos2MapDSCPtoIntp1": qos2MapDSCPtoIntp1,
       "qos2MapDSCPtoIntp2": qos2MapDSCPtoIntp2,
       "qos2MapDSCPtoIntp3": qos2MapDSCPtoIntp3,
       "qos2MapDSCPtoIntp4": qos2MapDSCPtoIntp4,
       "qos2MapDSCPtoIntp5": qos2MapDSCPtoIntp5,
       "qos2MapDSCPtoIntp6": qos2MapDSCPtoIntp6,
       "qos2MapDSCPtoIntp7": qos2MapDSCPtoIntp7,
       "qos2MapDSCPtoIntp8": qos2MapDSCPtoIntp8,
       "qos2MapDSCPtoIntpIntPriovalue": qos2MapDSCPtoIntpIntPriovalue,
       "qos2MapDSCPtoIntpStatus": qos2MapDSCPtoIntpStatus,
       "qos2MapDSCPtoDP": qos2MapDSCPtoDP,
       "qos2MapDSCPtoDP1": qos2MapDSCPtoDP1,
       "qos2MapDSCPtoDP2": qos2MapDSCPtoDP2,
       "qos2MapDSCPtoDP3": qos2MapDSCPtoDP3,
       "qos2MapDSCPtoDP4": qos2MapDSCPtoDP4,
       "qos2MapDSCPtoDP5": qos2MapDSCPtoDP5,
       "qos2MapDSCPtoDP6": qos2MapDSCPtoDP6,
       "qos2MapDSCPtoDP7": qos2MapDSCPtoDP7,
       "qos2MapDSCPtoDP8": qos2MapDSCPtoDP8,
       "qos2MapDSCPtoDPvalue": qos2MapDSCPtoDPvalue,
       "qos2MapDSCPtoDPStatus": qos2MapDSCPtoDPStatus,
       "qos2MapExptoIntp": qos2MapExptoIntp,
       "qos2MapExptoIntp1": qos2MapExptoIntp1,
       "qos2MapExptoIntp2": qos2MapExptoIntp2,
       "qos2MapExptoIntp3": qos2MapExptoIntp3,
       "qos2MapExptoIntp4": qos2MapExptoIntp4,
       "qos2MapExptoIntp5": qos2MapExptoIntp5,
       "qos2MapExptoIntp6": qos2MapExptoIntp6,
       "qos2MapExptoIntp7": qos2MapExptoIntp7,
       "qos2MapExptoIntp8": qos2MapExptoIntp8,
       "qos2MapExptoIntpStatus": qos2MapExptoIntpStatus,
       "qos2MapExptoDP": qos2MapExptoDP,
       "qos2MapExptoDP1": qos2MapExptoDP1,
       "qos2MapExptoDP2": qos2MapExptoDP2,
       "qos2MapExptoDP3": qos2MapExptoDP3,
       "qos2MapExptoDP4": qos2MapExptoDP4,
       "qos2MapExptoDP5": qos2MapExptoDP5,
       "qos2MapExptoDP6": qos2MapExptoDP6,
       "qos2MapExptoDP7": qos2MapExptoDP7,
       "qos2MapExptoDP8": qos2MapExptoDP8,
       "qos2MapExptoDPStatus": qos2MapExptoDPStatus,
       "qos2MapIntptoDSCP": qos2MapIntptoDSCP,
       "qos2MapIntptoDSCP1": qos2MapIntptoDSCP1,
       "qos2MapIntptoDSCP2": qos2MapIntptoDSCP2,
       "qos2MapIntptoDSCP3": qos2MapIntptoDSCP3,
       "qos2MapIntptoDSCP4": qos2MapIntptoDSCP4,
       "qos2MapIntptoDSCP5": qos2MapIntptoDSCP5,
       "qos2MapIntptoDSCP6": qos2MapIntptoDSCP6,
       "qos2MapIntptoDSCP7": qos2MapIntptoDSCP7,
       "qos2MapIntptoDSCP8": qos2MapIntptoDSCP8,
       "qos2MapIntptoDSCPStatus": qos2MapIntptoDSCPStatus,
       "qos2MapIntptoEXP": qos2MapIntptoEXP,
       "qos2MapIntptoEXP1": qos2MapIntptoEXP1,
       "qos2MapIntptoEXP2": qos2MapIntptoEXP2,
       "qos2MapIntptoEXP3": qos2MapIntptoEXP3,
       "qos2MapIntptoEXP4": qos2MapIntptoEXP4,
       "qos2MapIntptoEXP5": qos2MapIntptoEXP5,
       "qos2MapIntptoEXP6": qos2MapIntptoEXP6,
       "qos2MapIntptoEXP7": qos2MapIntptoEXP7,
       "qos2MapIntptoEXP8": qos2MapIntptoEXP8,
       "qos2MapIntptoEXPStatus": qos2MapIntptoEXPStatus,
       "qos2AggregatePolicy": qos2AggregatePolicy,
       "qos2AggPolicyName": qos2AggPolicyName,
       "qos2AggPolicyCIRKbps": qos2AggPolicyCIRKbps,
       "qos2AggPolicyCBSKbps": qos2AggPolicyCBSKbps,
       "qos2AggPolicyPBSKbps": qos2AggPolicyPBSKbps,
       "qos2AggPolicyPIRKbps": qos2AggPolicyPIRKbps,
       "qos2AggPolicyConformAction": qos2AggPolicyConformAction,
       "qos2AggPolicyConformActionChangeValue": qos2AggPolicyConformActionChangeValue,
       "qos2AggPolicyExceedAction": qos2AggPolicyExceedAction,
       "qos2AggPolicyExceedActionChangeValue": qos2AggPolicyExceedActionChangeValue,
       "qos2AggPolicyViolateAction": qos2AggPolicyViolateAction,
       "qos2AggPolicyViolateActionChangeValue": qos2AggPolicyViolateActionChangeValue,
       "qos2AggPolicyStatus": qos2AggPolicyStatus,
       "qos2ServicePolicyTable": qos2ServicePolicyTable,
       "qos2ServicePolicyEntry": qos2ServicePolicyEntry,
       "qos2PolicyMapName": qos2PolicyMapName,
       "qos2ServicePolicyVlanList": qos2ServicePolicyVlanList,
       "qos2ServicePolicyStatus": qos2ServicePolicyStatus,
       "qos2PortTable": qos2PortTable,
       "qos2PortIndex": qos2PortIndex,
       "qos2PortType": qos2PortType,
       "qos2PortCos": qos2PortCos,
       "qos2PortTrust": qos2PortTrust,
       "qos2PortPolicy": qos2PortPolicy,
       "qos2PortQueueBandwidth": qos2PortQueueBandwidth,
       "qos2PortQueueAlgorithm": qos2PortQueueAlgorithm,
       "qos2PortQueueWdrr": qos2PortQueueWdrr,
       "qos2PortQueueWrr": qos2PortQueueWrr,
       "qos2PortStatus": qos2PortStatus,
       "qos2ClassMapTable": qos2ClassMapTable,
       "qos2ClassMapName": qos2ClassMapName,
       "qos2ClassMapType": qos2ClassMapType,
       "qos2ClassMapAccessGroup": qos2ClassMapAccessGroup,
       "qos2ClassMapDscp": qos2ClassMapDscp,
       "qos2ClassMapV6Dscp": qos2ClassMapV6Dscp,
       "qos2ClassMapIpPre": qos2ClassMapIpPre,
       "qos2ClassMapV6AccGroup": qos2ClassMapV6AccGroup,
       "qos2ClassMapV6Flow": qos2ClassMapV6Flow,
       "qos2ClassMapVlan": qos2ClassMapVlan,
       "qos2ClassMapCos": qos2ClassMapCos,
       "qos2ClassMapExp": qos2ClassMapExp,
       "qos2ClassMapStatus": qos2ClassMapStatus,
       "qos2PolicyTable": qos2PolicyTable,
       "qos2PolicyName": qos2PolicyName,
       "qos2PolicyClassMap": qos2PolicyClassMap,
       "qos2PolicyInsertClassMap": qos2PolicyInsertClassMap,
       "qos2PolicyType": qos2PolicyType,
       "qos2PolicyCIRKbps": qos2PolicyCIRKbps,
       "qos2PolicyCBSKbps": qos2PolicyCBSKbps,
       "qos2PolicyPBSKbps": qos2PolicyPBSKbps,
       "qos2PolicyPIRKbps": qos2PolicyPIRKbps,
       "qos2PolicyConformActionChange": qos2PolicyConformActionChange,
       "qos2PolicyConformActionChangeValue": qos2PolicyConformActionChangeValue,
       "qos2PolicyExceedActionChange": qos2PolicyExceedActionChange,
       "qos2PolicyExceedActionChangeValue": qos2PolicyExceedActionChangeValue,
       "qos2PolicyViolateActionChange": qos2PolicyViolateActionChange,
       "qos2PolicyViolateActionChangeValue": qos2PolicyViolateActionChangeValue,
       "qos2PolicyAggregatePolicer": qos2PolicyAggregatePolicer,
       "qos2PolicyStatus": qos2PolicyStatus,
       "qos2SetTable": qos2SetTable,
       "qos2SetPolicyMapName": qos2SetPolicyMapName,
       "qos2SetClassMapName": qos2SetClassMapName,
       "qos2SetType": qos2SetType,
       "qos2SetDscp": qos2SetDscp,
       "qos2SetPrecedence": qos2SetPrecedence,
       "qos2SetInternalPriority": qos2SetInternalPriority,
       "qos2SetDropPrecedence": qos2SetDropPrecedence,
       "qos2SetDefaultPBR": qos2SetDefaultPBR,
       "qos2SetVrf": qos2SetVrf,
       "qos2SetnextHop": qos2SetnextHop,
       "qos2Setv6nextHop": qos2Setv6nextHop,
       "qos2SetCos": qos2SetCos,
       "qos2SetStatus": qos2SetStatus,
       "dot1xMgt": dot1xMgt,
       "mabOnlineUserTable": mabOnlineUserTable,
       "mabOnlineUserEntry": mabOnlineUserEntry,
       "mabOnlineUserIndex": mabOnlineUserIndex,
       "mabOnlineUserMac": mabOnlineUserMac,
       "mabOnlineUserName": mabOnlineUserName,
       "mabOnlineUserPort": mabOnlineUserPort,
       "mabOnlineUserState": mabOnlineUserState,
       "mabSetUserOffline": mabSetUserOffline,
       "dot1xOnlineUserTable": dot1xOnlineUserTable,
       "dot1xOnlineUserEntry": dot1xOnlineUserEntry,
       "dot1xOnlineUserIndex": dot1xOnlineUserIndex,
       "dot1xOnlineUserMac": dot1xOnlineUserMac,
       "dot1xOnlineUserName": dot1xOnlineUserName,
       "dot1xOnlineUserPort": dot1xOnlineUserPort,
       "dot1xOnlineUserPortVlanid": dot1xOnlineUserPortVlanid,
       "dot1xOnlineUserPortMethod": dot1xOnlineUserPortMethod,
       "dot1xOnlineUserPortControl": dot1xOnlineUserPortControl,
       "dot1xOnlineUserState": dot1xOnlineUserState,
       "dot1xSetUserOffline": dot1xSetUserOffline,
       "portMacCountLimit": portMacCountLimit,
       "portMacCountLimitTable": portMacCountLimitTable,
       "portMacCountLimitEntry": portMacCountLimitEntry,
       "portMacCountLimitPortIndex": portMacCountLimitPortIndex,
       "portMacCountLimitConfigNum": portMacCountLimitConfigNum,
       "portMacCountLimitCurNum": portMacCountLimitCurNum,
       "portMacCountLimitDisable": portMacCountLimitDisable,
       "portMacCountLimitViolationMode": portMacCountLimitViolationMode,
       "portMacCountLimitShutRecoveryTime": portMacCountLimitShutRecoveryTime,
       "ddm": ddm,
       "ddmTranscDiagnosisTable": ddmTranscDiagnosisTable,
       "ddmTranscDiagnosisEntry": ddmTranscDiagnosisEntry,
       "ddmDiagnosisIfIndex": ddmDiagnosisIfIndex,
       "ddmDiagnosisTemperature": ddmDiagnosisTemperature,
       "ddmDiagTempHighAlarmThreshold": ddmDiagTempHighAlarmThreshold,
       "ddmDiagTempLowAlarmThreshold": ddmDiagTempLowAlarmThreshold,
       "ddmDiagTempHighWarnThreshold": ddmDiagTempHighWarnThreshold,
       "ddmDiagTempLowWarnThreshold": ddmDiagTempLowWarnThreshold,
       "ddmDiagnosisVoltage": ddmDiagnosisVoltage,
       "ddmDiagVoltHighAlarmThreshold": ddmDiagVoltHighAlarmThreshold,
       "ddmDiagVoltLowAlarmThreshold": ddmDiagVoltLowAlarmThreshold,
       "ddmDiagVoltHighWarnThreshold": ddmDiagVoltHighWarnThreshold,
       "ddmDiagVoltLowWarnThreshold": ddmDiagVoltLowWarnThreshold,
       "ddmDiagnosisBias": ddmDiagnosisBias,
       "ddmDiagBiasHighAlarmThreshold": ddmDiagBiasHighAlarmThreshold,
       "ddmDiagBiasLowAlarmThreshold": ddmDiagBiasLowAlarmThreshold,
       "ddmDiagBiasHighWarnThreshold": ddmDiagBiasHighWarnThreshold,
       "ddmDiagBiasLowWarnThreshold": ddmDiagBiasLowWarnThreshold,
       "ddmDiagnosisRXPower": ddmDiagnosisRXPower,
       "ddmDiagRXPowerHighAlarmThreshold": ddmDiagRXPowerHighAlarmThreshold,
       "ddmDiagRXPowerLowAlarmThreshold": ddmDiagRXPowerLowAlarmThreshold,
       "ddmDiagRXPowerHighWarnThreshold": ddmDiagRXPowerHighWarnThreshold,
       "ddmDiagRXPowerLowWarnThreshold": ddmDiagRXPowerLowWarnThreshold,
       "ddmDiagnosisTXPower": ddmDiagnosisTXPower,
       "ddmDiagTXPowerHighAlarmThreshold": ddmDiagTXPowerHighAlarmThreshold,
       "ddmDiagTXPowerLowAlarmThreshold": ddmDiagTXPowerLowAlarmThreshold,
       "ddmDiagTXPowerHighWarnThreshold": ddmDiagTXPowerHighWarnThreshold,
       "ddmDiagTXPowerLowWarnThreshold": ddmDiagTXPowerLowWarnThreshold,
       "ddmTranscAlarmTable": ddmTranscAlarmTable,
       "ddmTranscAlarmEntry": ddmTranscAlarmEntry,
       "ddmAlarmIfIndex": ddmAlarmIfIndex,
       "ddmAlarmInfo": ddmAlarmInfo,
       "ddmTranscBasicInfoTable": ddmTranscBasicInfoTable,
       "ddmTranscBasicInfoEntry": ddmTranscBasicInfoEntry,
       "ddmTransSerialIndex": ddmTransSerialIndex,
       "ddmTransSerialName": ddmTransSerialName,
       "ddmTransSerialNo": ddmTransSerialNo,
       "ddmTransSerialVendorName": ddmTransSerialVendorName,
       "ddmTransSerialModelName": ddmTransSerialModelName,
       "ddmTransSerialTypeName": ddmTransSerialTypeName,
       "ddmTransSerialBitRate": ddmTransSerialBitRate,
       "ddmTransSerialWaveLength": ddmTransSerialWaveLength,
       "priPppoeIaMib": priPppoeIaMib,
       "priPppoeIaGlobalEnable": priPppoeIaGlobalEnable,
       "priPppoeIaSelfDefinedCircuitID": priPppoeIaSelfDefinedCircuitID,
       "priPppoeIaTr101CircuitID": priPppoeIaTr101CircuitID,
       "priPppoeIaSelfDefinedRemoteID": priPppoeIaSelfDefinedRemoteID,
       "priPppoeIaDelimiter": priPppoeIaDelimiter,
       "priPppoeIaCircuitIdFormat": priPppoeIaCircuitIdFormat,
       "priPppoeIaRemoteIdFormat": priPppoeIaRemoteIdFormat,
       "priPppoeIaPortTable": priPppoeIaPortTable,
       "priPppoeIaEntry": priPppoeIaEntry,
       "priPppoeIaPortID": priPppoeIaPortID,
       "priPppoeIaPortEnable": priPppoeIaPortEnable,
       "priPppoeIaPortCircuitID": priPppoeIaPortCircuitID,
       "priPppoeIaPortRemoteID": priPppoeIaPortRemoteID,
       "priPppoeIaPortTrust": priPppoeIaPortTrust,
       "priPppoeIaPortVendorTagStrip": priPppoeIaPortVendorTagStrip,
       "portSecurity": portSecurity,
       "newPortSecurityTable": newPortSecurityTable,
       "newPortSecurityEntry": newPortSecurityEntry,
       "portSecurityPortIndex": portSecurityPortIndex,
       "portSecurityState": portSecurityState,
       "portSecuritySticky": portSecuritySticky,
       "portSecurityMaxMacNum": portSecurityMaxMacNum,
       "portSecurityCurMacNum": portSecurityCurMacNum,
       "portSecurityCfgMacNum": portSecurityCfgMacNum,
       "portSecurityVioMacNum": portSecurityVioMacNum,
       "portSecurityAgingTime": portSecurityAgingTime,
       "portSecurityAgingType": portSecurityAgingType,
       "portSecurityVioMode": portSecurityVioMode,
       "portSecurityVioShutRecoveryTime": portSecurityVioShutRecoveryTime,
       "portSecurityVioRestrictRecoveryTime": portSecurityVioRestrictRecoveryTime,
       "portSecurityVlanMaxNumTable": portSecurityVlanMaxNumTable,
       "portSecurityVlanMaxNumEntry": portSecurityVlanMaxNumEntry,
       "portSecurityVlanPortIndex": portSecurityVlanPortIndex,
       "portSecurityVlanIndex": portSecurityVlanIndex,
       "portSecurityVlanMaxMacNum": portSecurityVlanMaxMacNum,
       "portSecurityVlanCurMacNum": portSecurityVlanCurMacNum,
       "portSecurityMacAddressTable": portSecurityMacAddressTable,
       "portSecurityMacAddressEntry": portSecurityMacAddressEntry,
       "portSecurityMacAddressPortIndex": portSecurityMacAddressPortIndex,
       "portSecurityMacAddressVlanIndex": portSecurityMacAddressVlanIndex,
       "portSecurityMacAddress": portSecurityMacAddress,
       "portSecurityMacType": portSecurityMacType,
       "portSecurityMacStatus": portSecurityMacStatus,
       "macNotificationMib": macNotificationMib,
       "macNotificationMibObjects": macNotificationMibObjects,
       "macNotificationGlobalObjects": macNotificationGlobalObjects,
       "macNotificationGlobalFeatureEnabled": macNotificationGlobalFeatureEnabled,
       "macNotificationNotificationInterval": macNotificationNotificationInterval,
       "macNotificationMacAddressesLearnt": macNotificationMacAddressesLearnt,
       "macNotificationMacAddressesRemoved": macNotificationMacAddressesRemoved,
       "macNotificationNotificationsEnabled": macNotificationNotificationsEnabled,
       "macNotificationNotificationsSent": macNotificationNotificationsSent,
       "macNotificationHistTableMaxLength": macNotificationHistTableMaxLength,
       "macNotificationHistoryTable": macNotificationHistoryTable,
       "macNotificationHistoryEntry": macNotificationHistoryEntry,
       "macNotificationHistIndex": macNotificationHistIndex,
       "macNotificationHistMacChangedMsg": macNotificationHistMacChangedMsg,
       "macNotificationHistTimestamp": macNotificationHistTimestamp,
       "macNotificationInterfaceObjects": macNotificationInterfaceObjects,
       "macNotificationIfConfigTable": macNotificationIfConfigTable,
       "macNotificationIfConfigEntry": macNotificationIfConfigEntry,
       "macNotificationMacAddrLearntEnable": macNotificationMacAddrLearntEnable,
       "macNotificationMacAddrRemovedEnable": macNotificationMacAddrRemovedEnable,
       "prieeePortConfig": prieeePortConfig,
       "prieeePortTable": prieeePortTable,
       "prieeePortEntry": prieeePortEntry,
       "eeePortIndex": eeePortIndex,
       "eeePortStatus": eeePortStatus,
       "portRateLimit": portRateLimit,
       "portRateLimitTable": portRateLimitTable,
       "portRateLimitEntry": portRateLimitEntry,
       "portRateLimitPortIndex": portRateLimitPortIndex,
       "portRateLimitConfigBroadcastNum": portRateLimitConfigBroadcastNum,
       "portRateLimitCurBroadcastNum": portRateLimitCurBroadcastNum,
       "portRateLimitConfigMulticastNum": portRateLimitConfigMulticastNum,
       "portRateLimitCurMulticastNum": portRateLimitCurMulticastNum,
       "portRateLimitConfigUnicastNum": portRateLimitConfigUnicastNum,
       "portRateLimitCurUnicastNum": portRateLimitCurUnicastNum,
       "portRateLimitConfigAllNum": portRateLimitConfigAllNum,
       "portRateLimitCurAllNum": portRateLimitCurAllNum,
       "portRateLimitPacketsType": portRateLimitPacketsType,
       "portRateLimitViolationMode": portRateLimitViolationMode,
       "portRateLimitShutRecoveryTime": portRateLimitShutRecoveryTime,
       "macBlackholeConfig": macBlackholeConfig,
       "macBlackholeTable": macBlackholeTable,
       "macBlackholeEntry": macBlackholeEntry,
       "macAddressInVlanID": macAddressInVlanID,
       "macAddress": macAddress,
       "macType": macType,
       "macStatus": macStatus,
       "priCable": priCable,
       "cableTable": cableTable,
       "priCableEntry": priCableEntry,
       "cableLengthInfo": cableLengthInfo,
       "priMrppRing": priMrppRing,
       "priMrppRingTable": priMrppRingTable,
       "priMrppRingEntry": priMrppRingEntry,
       "mrppRingIndex": mrppRingIndex,
       "mrppRingNodeMode": mrppRingNodeMode,
       "mrppRingNodeState": mrppRingNodeState,
       "mrppRingStatus": mrppRingStatus,
       "mrppRingPriPortName": mrppRingPriPortName,
       "mrppRingPriPortBlockState": mrppRingPriPortBlockState,
       "mrppRingSecPortName": mrppRingSecPortName,
       "mrppRingSecPortBlockState": mrppRingSecPortBlockState,
       "erpsMgt": erpsMgt,
       "erpsTcnPropagationConfig": erpsTcnPropagationConfig,
       "erpsRingConfigTable": erpsRingConfigTable,
       "erpsRingConfigEntry": erpsRingConfigEntry,
       "erpsRingNameIndex": erpsRingNameIndex,
       "erpsRingName": erpsRingName,
       "erpsVersion": erpsVersion,
       "erpsOpenRing": erpsOpenRing,
       "erpsRapsVirtualChannel": erpsRapsVirtualChannel,
       "erpsRingPort0": erpsRingPort0,
       "erpsRingPort0Index": erpsRingPort0Index,
       "erpsRingPort1ExistFlag": erpsRingPort1ExistFlag,
       "erpsRingPort1": erpsRingPort1,
       "erpsRingPort1Index": erpsRingPort1Index,
       "erpsRingRowStatus": erpsRingRowStatus,
       "erpsTrapEnabled": erpsTrapEnabled,
       "erpsLogEnabled": erpsLogEnabled,
       "erpsInstanceConfigTable": erpsInstanceConfigTable,
       "erpsInstanceConfigEntry": erpsInstanceConfigEntry,
       "erpsInstanceId": erpsInstanceId,
       "erpsDescription": erpsDescription,
       "erpsRingId": erpsRingId,
       "erpsRplPort0Role": erpsRplPort0Role,
       "erpsRplPort1Role": erpsRplPort1Role,
       "erpsRevertiveMode": erpsRevertiveMode,
       "erpsGuardTimer": erpsGuardTimer,
       "erpsHoldoffTimer": erpsHoldoffTimer,
       "erpsWtrTimer": erpsWtrTimer,
       "erpsProtectedInstance": erpsProtectedInstance,
       "erpsRapsMel": erpsRapsMel,
       "erpsControlVlan": erpsControlVlan,
       "erpsForcedSwitch": erpsForcedSwitch,
       "erpsManualSwitch": erpsManualSwitch,
       "erpsClearCommand": erpsClearCommand,
       "erpsClearPortStatistics": erpsClearPortStatistics,
       "erpsInstanceRowStatus": erpsInstanceRowStatus,
       "erpsStatus": erpsStatus,
       "erpsInstanceStatusTable": erpsInstanceStatusTable,
       "erpsInstanceStatusEntry": erpsInstanceStatusEntry,
       "erpsActiveStatus": erpsActiveStatus,
       "erpsNodeState": erpsNodeState,
       "erpsPort0StatusTable": erpsPort0StatusTable,
       "erpsPort0StatusEntry": erpsPort0StatusEntry,
       "erpsPort0Name": erpsPort0Name,
       "erpsPort0Status": erpsPort0Status,
       "erpsPort0SignalStatus": erpsPort0SignalStatus,
       "erpsPort0RRapsNodeId": erpsPort0RRapsNodeId,
       "erpsPort0BPR": erpsPort0BPR,
       "erpsPort1StatusTable": erpsPort1StatusTable,
       "erpsPort1StatusEntry": erpsPort1StatusEntry,
       "erpsPort1Name": erpsPort1Name,
       "erpsPort1Status": erpsPort1Status,
       "erpsPort1SignalStatus": erpsPort1SignalStatus,
       "erpsPort1RRapsNodeId": erpsPort1RRapsNodeId,
       "erpsPort1BPR": erpsPort1BPR,
       "erpsPortTrackConfig": erpsPortTrackConfig,
       "erpsPortTrackConfigTable": erpsPortTrackConfigTable,
       "erpsPortTrackConfigEntry": erpsPortTrackConfigEntry,
       "erpsRingPortIndex": erpsRingPortIndex,
       "erpsPortTrackProtocolType": erpsPortTrackProtocolType,
       "erpsPortTrackCfmDomain": erpsPortTrackCfmDomain,
       "erpsPortTrackCfmMaName": erpsPortTrackCfmMaName,
       "erpsPortTrackCfmMaNum": erpsPortTrackCfmMaNum,
       "erpsPortTrackCfmPvlanId": erpsPortTrackCfmPvlanId,
       "erpsPortTrackCfmMepId": erpsPortTrackCfmMepId,
       "erpsPortTrackCfmRmepId": erpsPortTrackCfmRmepId,
       "erpsPortTrackRowStatus": erpsPortTrackRowStatus,
       "erpsPortStatistics": erpsPortStatistics,
       "erpsPort0StatisticsTable": erpsPort0StatisticsTable,
       "erpsPort0StatisticsEntry": erpsPort0StatisticsEntry,
       "erpsPort0TxRapsNrPktCnt": erpsPort0TxRapsNrPktCnt,
       "erpsPort0RxRapsNrPktCnt": erpsPort0RxRapsNrPktCnt,
       "erpsPort0TxRapsNrRbPktCnt": erpsPort0TxRapsNrRbPktCnt,
       "erpsPort0RxRapsNrRbPktCnt": erpsPort0RxRapsNrRbPktCnt,
       "erpsPort0TxRapsSfPktCnt": erpsPort0TxRapsSfPktCnt,
       "erpsPort0RxRapsSfPktCnt": erpsPort0RxRapsSfPktCnt,
       "erpsPort0TxRapsMsPktCnt": erpsPort0TxRapsMsPktCnt,
       "erpsPort0RxRapsMsPktCnt": erpsPort0RxRapsMsPktCnt,
       "erpsPort0TxRapsFsPktCnt": erpsPort0TxRapsFsPktCnt,
       "erpsPort0RxRapsFsPktCnt": erpsPort0RxRapsFsPktCnt,
       "erpsPort0TxRapsEventPktCnt": erpsPort0TxRapsEventPktCnt,
       "erpsPort0RxRapsEventPktCnt": erpsPort0RxRapsEventPktCnt,
       "erpsPort0TxRapsTotalPktCnt": erpsPort0TxRapsTotalPktCnt,
       "erpsPort0RxRapsTotalPktCnt": erpsPort0RxRapsTotalPktCnt,
       "erpsPort1StatisticsTable": erpsPort1StatisticsTable,
       "erpsPort1StatisticsEntry": erpsPort1StatisticsEntry,
       "erpsPort1TxRapsNrPktCnt": erpsPort1TxRapsNrPktCnt,
       "erpsPort1RxRapsNrPktCnt": erpsPort1RxRapsNrPktCnt,
       "erpsPort1TxRapsNrRbPktCnt": erpsPort1TxRapsNrRbPktCnt,
       "erpsPort1RxRapsNrRbPktCnt": erpsPort1RxRapsNrRbPktCnt,
       "erpsPort1TxRapsSfPktCnt": erpsPort1TxRapsSfPktCnt,
       "erpsPort1RxRapsSfPktCnt": erpsPort1RxRapsSfPktCnt,
       "erpsPort1TxRapsMsPktCnt": erpsPort1TxRapsMsPktCnt,
       "erpsPort1RxRapsMsPktCnt": erpsPort1RxRapsMsPktCnt,
       "erpsPort1TxRapsFsPktCnt": erpsPort1TxRapsFsPktCnt,
       "erpsPort1RxRapsFsPktCnt": erpsPort1RxRapsFsPktCnt,
       "erpsPort1TxRapsEventPktCnt": erpsPort1TxRapsEventPktCnt,
       "erpsPort1RxRapsEventPktCnt": erpsPort1RxRapsEventPktCnt,
       "erpsPort1TxRapsTotalPktCnt": erpsPort1TxRapsTotalPktCnt,
       "erpsPort1RxRapsTotalPktCnt": erpsPort1RxRapsTotalPktCnt,
       "fdbMacInfo": fdbMacInfo,
       "fdbMacInfoTable": fdbMacInfoTable,
       "fdbMacMaxTotalNum": fdbMacMaxTotalNum,
       "fdbMacMaxStaticNum": fdbMacMaxStaticNum,
       "fdbMacMaxUnicastNum": fdbMacMaxUnicastNum,
       "fdbMacMaxMulticastNum": fdbMacMaxMulticastNum,
       "fdbMacCurTotalNum": fdbMacCurTotalNum,
       "fdbMacCurStaticNum": fdbMacCurStaticNum,
       "fdbMacCurUnicastNum": fdbMacCurUnicastNum,
       "fdbMacCurHiddenNum": fdbMacCurHiddenNum,
       "fdbMacCurMulticastInsertNum": fdbMacCurMulticastInsertNum,
       "fdbMacCurMulticastWaitNum": fdbMacCurMulticastWaitNum,
       "fdbMacCounterTimeStamp": fdbMacCounterTimeStamp,
       "lldpPrivateInfo": lldpPrivateInfo,
       "lldpGlobalEnable": lldpGlobalEnable,
       "notifications": notifications,
       "antiArpscan": antiArpscan,
       "prohibitPortOID": prohibitPortOID,
       "recoverPortOID": recoverPortOID,
       "prohibitIPOID": prohibitIPOID,
       "prohibitIPExceedSlimitOID": prohibitIPExceedSlimitOID,
       "prohibitIPExceedHlimitOID": prohibitIPExceedHlimitOID,
       "recoverIPOID": recoverIPOID,
       "ipAddress": ipAddress,
       "arpSpeedLimitOID": arpSpeedLimitOID,
       "arpDiscardOID": arpDiscardOID,
       "recoverArpSpeedOID": recoverArpSpeedOID,
       "recoverArpDiscardOID": recoverArpDiscardOID,
       "fan": fan,
       "fanAbnormalOID": fanAbnormalOID,
       "fanNormalOID": fanNormalOID,
       "fanInsertOID": fanInsertOID,
       "fanPullOutOID": fanPullOutOID,
       "power": power,
       "powerAbnormalOID": powerAbnormalOID,
       "powerNormalOID": powerNormalOID,
       "powerInsertOID": powerInsertOID,
       "powerPullOutOID": powerPullOutOID,
       "slotTemperature": slotTemperature,
       "slotTemperatureHigherOID": slotTemperatureHigherOID,
       "slotTemperatureLowerOID": slotTemperatureLowerOID,
       "dhcpsnooping": dhcpsnooping,
       "shutdownPort": shutdownPort,
       "noShutdownPort": noShutdownPort,
       "addBlackhole": addBlackhole,
       "delBlackhole": delBlackhole,
       "addBlockedinfo": addBlockedinfo,
       "rateViolation": rateViolation,
       "rateViolationShutdownPort": rateViolationShutdownPort,
       "rateViolationNoShutdownPort": rateViolationNoShutdownPort,
       "portGroup": portGroup,
       "portGroupCreate": portGroupCreate,
       "portGroupDelete": portGroupDelete,
       "portGroupUpdate": portGroupUpdate,
       "efmOam": efmOam,
       "efmOamDiscoverySuccess": efmOamDiscoverySuccess,
       "efmOamDiscoveryTimeout": efmOamDiscoveryTimeout,
       "efmOamLocalErrSymbolPeriodEvent": efmOamLocalErrSymbolPeriodEvent,
       "efmOamLocalErrFramePeriodEvent": efmOamLocalErrFramePeriodEvent,
       "efmOamLocalErrFrameEvent": efmOamLocalErrFrameEvent,
       "efmOamLocalErrFrameSecondsSummaryEvent": efmOamLocalErrFrameSecondsSummaryEvent,
       "efmOamLocalLinkFault": efmOamLocalLinkFault,
       "efmOamLocalCriticalEvent": efmOamLocalCriticalEvent,
       "efmOamRemoteErrSymbolPeriodEvent": efmOamRemoteErrSymbolPeriodEvent,
       "efmOamRemoteErrFramePeriodEvent": efmOamRemoteErrFramePeriodEvent,
       "efmOamRemoteErrFrameEvent": efmOamRemoteErrFrameEvent,
       "efmOamRemoteErrFrameSecondsSummaryEvent": efmOamRemoteErrFrameSecondsSummaryEvent,
       "efmOamRemoteLinkFault": efmOamRemoteLinkFault,
       "efmOamRemoteCriticalEvent": efmOamRemoteCriticalEvent,
       "efmOamRemoteDyingGasp": efmOamRemoteDyingGasp,
       "efmOamLoopBackSuccess": efmOamLoopBackSuccess,
       "efmOamLoopBackExit": efmOamLoopBackExit,
       "transceiverMonitor": transceiverMonitor,
       "transceiverMonitorAlarmEvent": transceiverMonitorAlarmEvent,
       "transceiverMonitorWarnEvent": transceiverMonitorWarnEvent,
       "dyingGasp": dyingGasp,
       "dyingGaspEvent": dyingGaspEvent,
       "copyRunningConfig": copyRunningConfig,
       "copyRunningConfigEvent": copyRunningConfigEvent,
       "mstp": mstp,
       "mstpTcnTrapOID": mstpTcnTrapOID,
       "powerGroup": powerGroup,
       "powerSupplyTrap": powerSupplyTrap,
       "powerPresentTrap": powerPresentTrap,
       "erpsGroup": erpsGroup,
       "swERPSSFDetectedTrap": swERPSSFDetectedTrap,
       "swERPSSFClearedTrap": swERPSSFClearedTrap,
       "authLogGroup": authLogGroup,
       "authLogin": authLogin,
       "authLogout": authLogout,
       "conformance": conformance}
)
