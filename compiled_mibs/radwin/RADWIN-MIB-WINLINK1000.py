# SNMP MIB module (RADWIN-MIB-WINLINK1000) expressed in pysnmp data model.
#
# This Python module is designed to be imported and executed by the
# pysnmp library.
#
# See https://www.pysnmp.com/pysnmp for further information.
#
# Notes
# -----
# ASN.1 source file://mibs\radwin\RADWIN-MIB-WINLINK1000
# Produced by pysmi-1.6.2 at Thu Oct  2 12:22:54 2025
# On host DESKTOP-ORUUBP9 platform Windows version 11 by user speterman
# Using Python version 3.12.8 (tags/v3.12.8:2dc476b, Dec  3 2024, 19:30:04) [MSC v.1942 64 bit (AMD64)]

if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 ConstraintsUnion,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "ConstraintsUnion",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint")

# Import SMI symbols from the MIBs this MIB depends on

(ifIndex,) = mibBuilder.importSymbols(
    "IF-MIB",
    "ifIndex")

(ModuleCompliance,
 NotificationGroup) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "ModuleCompliance",
    "NotificationGroup")

(Bits,
 Counter32,
 Counter64,
 Gauge32,
 Integer32,
 IpAddress,
 ModuleIdentity,
 MibIdentifier,
 NotificationType,
 ObjectIdentity,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 NotificationType,
 TimeTicks,
 Unsigned32,
 enterprises,
 iso) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "Bits",
    "Counter32",
    "Counter64",
    "Gauge32",
    "Integer32",
    "IpAddress",
    "ModuleIdentity",
    "MibIdentifier",
    "NotificationType",
    "ObjectIdentity",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "NotificationType",
    "TimeTicks",
    "Unsigned32",
    "enterprises",
    "iso")

(DisplayString,
 PhysAddress,
 TextualConvention) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "DisplayString",
    "PhysAddress",
    "TextualConvention")


# MODULE-IDENTITY


# Types definitions


# TEXTUAL-CONVENTIONS



# MIB Managed Objects in the order of their OIDs

_Radwin_ObjectIdentity = ObjectIdentity
radwin = _Radwin_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458)
)
_RadwinProducts_ObjectIdentity = ObjectIdentity
radwinProducts = _RadwinProducts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20)
)
_Winlink1000Family_ObjectIdentity = ObjectIdentity
winlink1000Family = _Winlink1000Family_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 2)
)
_Odu_ObjectIdentity = ObjectIdentity
odu = _Odu_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 2, 1)
)
_OduIntegratedAntenna_ObjectIdentity = ObjectIdentity
oduIntegratedAntenna = _OduIntegratedAntenna_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 2, 1, 1)
)
_OduExternalAntenna_ObjectIdentity = ObjectIdentity
oduExternalAntenna = _OduExternalAntenna_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 2, 1, 2)
)
_Radwin2000Family_ObjectIdentity = ObjectIdentity
radwin2000Family = _Radwin2000Family_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 3)
)
_Odu2000_ObjectIdentity = ObjectIdentity
odu2000 = _Odu2000_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 3, 1)
)
_Odu2KIntegratedAntenna_ObjectIdentity = ObjectIdentity
odu2KIntegratedAntenna = _Odu2KIntegratedAntenna_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 3, 1, 1)
)
_Odu2KExternalAntenna_ObjectIdentity = ObjectIdentity
odu2KExternalAntenna = _Odu2KExternalAntenna_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 3, 1, 2)
)
_GpsSynchronizerFamily_ObjectIdentity = ObjectIdentity
gpsSynchronizerFamily = _GpsSynchronizerFamily_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 4)
)
_OduGSU_ObjectIdentity = ObjectIdentity
oduGSU = _OduGSU_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 4, 1)
)
_OduGSUExternalAntenna_ObjectIdentity = ObjectIdentity
oduGSUExternalAntenna = _OduGSUExternalAntenna_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 4, 1, 2)
)
_HssSyncUnits_ObjectIdentity = ObjectIdentity
hssSyncUnits = _HssSyncUnits_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 4, 2)
)
_HssISU_ObjectIdentity = ObjectIdentity
hssISU = _HssISU_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 4, 2, 1)
)
_HssGSU_ObjectIdentity = ObjectIdentity
hssGSU = _HssGSU_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 4, 2, 2)
)
_Radwin5000HBSFamily_ObjectIdentity = ObjectIdentity
radwin5000HBSFamily = _Radwin5000HBSFamily_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 5)
)
_OduHBS_ObjectIdentity = ObjectIdentity
oduHBS = _OduHBS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 5, 1)
)
_OduHBSIntegratedAntenna_ObjectIdentity = ObjectIdentity
oduHBSIntegratedAntenna = _OduHBSIntegratedAntenna_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 5, 1, 1)
)
_OduHBSExternalAntenna_ObjectIdentity = ObjectIdentity
oduHBSExternalAntenna = _OduHBSExternalAntenna_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 5, 1, 2)
)
_OduHBSEmbeddedAntenna_ObjectIdentity = ObjectIdentity
oduHBSEmbeddedAntenna = _OduHBSEmbeddedAntenna_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 5, 1, 3)
)
_Radwin5000HSUFamily_ObjectIdentity = ObjectIdentity
radwin5000HSUFamily = _Radwin5000HSUFamily_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 6)
)
_OduHSU_ObjectIdentity = ObjectIdentity
oduHSU = _OduHSU_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 6, 1)
)
_OduHSUIntegratedAntenna_ObjectIdentity = ObjectIdentity
oduHSUIntegratedAntenna = _OduHSUIntegratedAntenna_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 6, 1, 1)
)
_OduHSUExternalAntenna_ObjectIdentity = ObjectIdentity
oduHSUExternalAntenna = _OduHSUExternalAntenna_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 6, 1, 2)
)
_OduHSUEmbeddedAntenna_ObjectIdentity = ObjectIdentity
oduHSUEmbeddedAntenna = _OduHSUEmbeddedAntenna_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 6, 1, 3)
)
_Radwin6000Family_ObjectIdentity = ObjectIdentity
radwin6000Family = _Radwin6000Family_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 10)
)
_Odu6000_ObjectIdentity = ObjectIdentity
odu6000 = _Odu6000_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 10, 1)
)
_Odu6K_ObjectIdentity = ObjectIdentity
odu6K = _Odu6K_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 10, 1, 1)
)
_Gateway6000_ObjectIdentity = ObjectIdentity
gateway6000 = _Gateway6000_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 10, 2)
)
_Gateway6K_ObjectIdentity = ObjectIdentity
gateway6K = _Gateway6K_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 10, 2, 1)
)
_RadwinWiFiAPFamily_ObjectIdentity = ObjectIdentity
radwinWiFiAPFamily = _RadwinWiFiAPFamily_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 20)
)
_Odu600_ObjectIdentity = ObjectIdentity
odu600 = _Odu600_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 20, 1)
)
_OduWiFiAP_ObjectIdentity = ObjectIdentity
oduWiFiAP = _OduWiFiAP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 20, 1, 1)
)
_RadwinSmartNodeFamily_ObjectIdentity = ObjectIdentity
radwinSmartNodeFamily = _RadwinSmartNodeFamily_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 30)
)
_SmartNode_ObjectIdentity = ObjectIdentity
smartNode = _SmartNode_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 30, 1)
)
_RadwinNetworkingFamiliy_ObjectIdentity = ObjectIdentity
radwinNetworkingFamiliy = _RadwinNetworkingFamiliy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 40)
)
_IduS_ObjectIdentity = ObjectIdentity
iduS = _IduS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 40, 1)
)
_IduSI_ObjectIdentity = ObjectIdentity
iduSI = _IduSI_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 40, 2)
)
_CenterNet_ObjectIdentity = ObjectIdentity
centerNet = _CenterNet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 40, 3)
)
_Radwin2000EFamiliy_ObjectIdentity = ObjectIdentity
radwin2000EFamiliy = _Radwin2000EFamiliy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 50)
)
_Odu2000E_ObjectIdentity = ObjectIdentity
odu2000E = _Odu2000E_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 50, 1)
)
_Odu2KEIntegratedAntenna_ObjectIdentity = ObjectIdentity
odu2KEIntegratedAntenna = _Odu2KEIntegratedAntenna_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 50, 1, 1)
)
_Odu2KEExternalAntenna_ObjectIdentity = ObjectIdentity
odu2KEExternalAntenna = _Odu2KEExternalAntenna_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 20, 50, 1, 2)
)
_Winlink1000_ObjectIdentity = ObjectIdentity
winlink1000 = _Winlink1000_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000)
)
_Winlink1000Odu_ObjectIdentity = ObjectIdentity
winlink1000Odu = _Winlink1000Odu_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1)
)
_Winlink1000OduAdmin_ObjectIdentity = ObjectIdentity
winlink1000OduAdmin = _Winlink1000OduAdmin_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1)
)
_Winlink1000OduAdmProductType_Type = DisplayString
_Winlink1000OduAdmProductType_Object = MibScalar
winlink1000OduAdmProductType = _Winlink1000OduAdmProductType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 1),
    _Winlink1000OduAdmProductType_Type()
)
winlink1000OduAdmProductType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmProductType.setStatus("mandatory")
_Winlink1000OduAdmHwRev_Type = DisplayString
_Winlink1000OduAdmHwRev_Object = MibScalar
winlink1000OduAdmHwRev = _Winlink1000OduAdmHwRev_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 2),
    _Winlink1000OduAdmHwRev_Type()
)
winlink1000OduAdmHwRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmHwRev.setStatus("mandatory")
_Winlink1000OduAdmSwRev_Type = DisplayString
_Winlink1000OduAdmSwRev_Object = MibScalar
winlink1000OduAdmSwRev = _Winlink1000OduAdmSwRev_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 3),
    _Winlink1000OduAdmSwRev_Type()
)
winlink1000OduAdmSwRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmSwRev.setStatus("mandatory")
_Winlink1000OduAdmLinkName_Type = DisplayString
_Winlink1000OduAdmLinkName_Object = MibScalar
winlink1000OduAdmLinkName = _Winlink1000OduAdmLinkName_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 4),
    _Winlink1000OduAdmLinkName_Type()
)
winlink1000OduAdmLinkName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmLinkName.setStatus("mandatory")
_Winlink1000OduAdmResetCmd_Type = Integer32
_Winlink1000OduAdmResetCmd_Object = MibScalar
winlink1000OduAdmResetCmd = _Winlink1000OduAdmResetCmd_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 5),
    _Winlink1000OduAdmResetCmd_Type()
)
winlink1000OduAdmResetCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmResetCmd.setStatus("mandatory")
_Winlink1000OduAdmAddres_Type = IpAddress
_Winlink1000OduAdmAddres_Object = MibScalar
winlink1000OduAdmAddres = _Winlink1000OduAdmAddres_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 6),
    _Winlink1000OduAdmAddres_Type()
)
winlink1000OduAdmAddres.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmAddres.setStatus("mandatory")
_Winlink1000OduAdmMask_Type = IpAddress
_Winlink1000OduAdmMask_Object = MibScalar
winlink1000OduAdmMask = _Winlink1000OduAdmMask_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 7),
    _Winlink1000OduAdmMask_Type()
)
winlink1000OduAdmMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmMask.setStatus("mandatory")
_Winlink1000OduAdmGateway_Type = IpAddress
_Winlink1000OduAdmGateway_Object = MibScalar
winlink1000OduAdmGateway = _Winlink1000OduAdmGateway_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 8),
    _Winlink1000OduAdmGateway_Type()
)
winlink1000OduAdmGateway.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmGateway.setStatus("mandatory")
_Winlink1000OduAdmBroadcast_Type = Integer32
_Winlink1000OduAdmBroadcast_Object = MibScalar
winlink1000OduAdmBroadcast = _Winlink1000OduAdmBroadcast_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 10),
    _Winlink1000OduAdmBroadcast_Type()
)
winlink1000OduAdmBroadcast.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmBroadcast.setStatus("mandatory")
_Winlink1000OduAdmHwModel_Type = Integer32
_Winlink1000OduAdmHwModel_Object = MibScalar
winlink1000OduAdmHwModel = _Winlink1000OduAdmHwModel_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 11),
    _Winlink1000OduAdmHwModel_Type()
)
winlink1000OduAdmHwModel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmHwModel.setStatus("mandatory")
_Winlink1000OduAdmHostsTable_Object = MibTable
winlink1000OduAdmHostsTable = _Winlink1000OduAdmHostsTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12)
)
if mibBuilder.loadTexts:
    winlink1000OduAdmHostsTable.setStatus("mandatory")
_Winlink1000OduAdmHostsEntry_Object = MibTableRow
winlink1000OduAdmHostsEntry = _Winlink1000OduAdmHostsEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12, 1)
)
winlink1000OduAdmHostsEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAdmHostsIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduAdmHostsEntry.setStatus("mandatory")


class _Winlink1000OduAdmHostsIndex_Type(Integer32):
    """Custom type winlink1000OduAdmHostsIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000OduAdmHostsIndex_Type.__name__ = "Integer32"
_Winlink1000OduAdmHostsIndex_Object = MibTableColumn
winlink1000OduAdmHostsIndex = _Winlink1000OduAdmHostsIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12, 1, 1),
    _Winlink1000OduAdmHostsIndex_Type()
)
winlink1000OduAdmHostsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmHostsIndex.setStatus("mandatory")
_Winlink1000OduAdmHostsIp_Type = IpAddress
_Winlink1000OduAdmHostsIp_Object = MibTableColumn
winlink1000OduAdmHostsIp = _Winlink1000OduAdmHostsIp_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12, 1, 2),
    _Winlink1000OduAdmHostsIp_Type()
)
winlink1000OduAdmHostsIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmHostsIp.setStatus("mandatory")


class _Winlink1000OduAdmHostsPort_Type(Integer32):
    """Custom type winlink1000OduAdmHostsPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Winlink1000OduAdmHostsPort_Type.__name__ = "Integer32"
_Winlink1000OduAdmHostsPort_Object = MibTableColumn
winlink1000OduAdmHostsPort = _Winlink1000OduAdmHostsPort_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12, 1, 3),
    _Winlink1000OduAdmHostsPort_Type()
)
winlink1000OduAdmHostsPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmHostsPort.setStatus("mandatory")


class _Winlink1000OduAdmHostsSecurityModel_Type(Integer32):
    """Custom type winlink1000OduAdmHostsSecurityModel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("snmpv1", 1),
          ("snmpv3", 3))
    )


_Winlink1000OduAdmHostsSecurityModel_Type.__name__ = "Integer32"
_Winlink1000OduAdmHostsSecurityModel_Object = MibTableColumn
winlink1000OduAdmHostsSecurityModel = _Winlink1000OduAdmHostsSecurityModel_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12, 1, 4),
    _Winlink1000OduAdmHostsSecurityModel_Type()
)
winlink1000OduAdmHostsSecurityModel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmHostsSecurityModel.setStatus("mandatory")
_Winlink1000OduAdmHostsUserName_Type = DisplayString
_Winlink1000OduAdmHostsUserName_Object = MibTableColumn
winlink1000OduAdmHostsUserName = _Winlink1000OduAdmHostsUserName_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12, 1, 5),
    _Winlink1000OduAdmHostsUserName_Type()
)
winlink1000OduAdmHostsUserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmHostsUserName.setStatus("mandatory")
_Winlink1000OduAdmHostsPassword_Type = DisplayString
_Winlink1000OduAdmHostsPassword_Object = MibTableColumn
winlink1000OduAdmHostsPassword = _Winlink1000OduAdmHostsPassword_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12, 1, 6),
    _Winlink1000OduAdmHostsPassword_Type()
)
winlink1000OduAdmHostsPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmHostsPassword.setStatus("mandatory")
_Winlink1000OduAdmHostsIPv6_Type = DisplayString
_Winlink1000OduAdmHostsIPv6_Object = MibTableColumn
winlink1000OduAdmHostsIPv6 = _Winlink1000OduAdmHostsIPv6_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 12, 1, 7),
    _Winlink1000OduAdmHostsIPv6_Type()
)
winlink1000OduAdmHostsIPv6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmHostsIPv6.setStatus("mandatory")
_Winlink1000OduBuzzerAdminState_Type = Integer32
_Winlink1000OduBuzzerAdminState_Object = MibScalar
winlink1000OduBuzzerAdminState = _Winlink1000OduBuzzerAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 13),
    _Winlink1000OduBuzzerAdminState_Type()
)
winlink1000OduBuzzerAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduBuzzerAdminState.setStatus("mandatory")
_Winlink1000OduProductId_Type = DisplayString
_Winlink1000OduProductId_Object = MibScalar
winlink1000OduProductId = _Winlink1000OduProductId_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 14),
    _Winlink1000OduProductId_Type()
)
winlink1000OduProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduProductId.setStatus("mandatory")
_Winlink1000OduReadCommunity_Type = DisplayString
_Winlink1000OduReadCommunity_Object = MibScalar
winlink1000OduReadCommunity = _Winlink1000OduReadCommunity_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 15),
    _Winlink1000OduReadCommunity_Type()
)
winlink1000OduReadCommunity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduReadCommunity.setStatus("mandatory")
_Winlink1000OduReadWriteCommunity_Type = DisplayString
_Winlink1000OduReadWriteCommunity_Object = MibScalar
winlink1000OduReadWriteCommunity = _Winlink1000OduReadWriteCommunity_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 16),
    _Winlink1000OduReadWriteCommunity_Type()
)
winlink1000OduReadWriteCommunity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduReadWriteCommunity.setStatus("mandatory")
_Winlink1000OduTrapCommunity_Type = DisplayString
_Winlink1000OduTrapCommunity_Object = MibScalar
winlink1000OduTrapCommunity = _Winlink1000OduTrapCommunity_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 17),
    _Winlink1000OduTrapCommunity_Type()
)
winlink1000OduTrapCommunity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduTrapCommunity.setStatus("mandatory")
_Winlink1000OduAdmSnmpAgentVersion_Type = Integer32
_Winlink1000OduAdmSnmpAgentVersion_Object = MibScalar
winlink1000OduAdmSnmpAgentVersion = _Winlink1000OduAdmSnmpAgentVersion_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 18),
    _Winlink1000OduAdmSnmpAgentVersion_Type()
)
winlink1000OduAdmSnmpAgentVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmSnmpAgentVersion.setStatus("mandatory")
_Winlink1000OduAdmRemoteSiteName_Type = DisplayString
_Winlink1000OduAdmRemoteSiteName_Object = MibScalar
winlink1000OduAdmRemoteSiteName = _Winlink1000OduAdmRemoteSiteName_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 19),
    _Winlink1000OduAdmRemoteSiteName_Type()
)
winlink1000OduAdmRemoteSiteName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmRemoteSiteName.setStatus("mandatory")
_Winlink1000OduAdmSnmpAgentMinorVersion_Type = Integer32
_Winlink1000OduAdmSnmpAgentMinorVersion_Object = MibScalar
winlink1000OduAdmSnmpAgentMinorVersion = _Winlink1000OduAdmSnmpAgentMinorVersion_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 20),
    _Winlink1000OduAdmSnmpAgentMinorVersion_Type()
)
winlink1000OduAdmSnmpAgentMinorVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmSnmpAgentMinorVersion.setStatus("mandatory")
_Winlink1000OduAdmLinkPassword_Type = DisplayString
_Winlink1000OduAdmLinkPassword_Object = MibScalar
winlink1000OduAdmLinkPassword = _Winlink1000OduAdmLinkPassword_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 21),
    _Winlink1000OduAdmLinkPassword_Type()
)
winlink1000OduAdmLinkPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmLinkPassword.setStatus("mandatory")
_Winlink1000OduAdmSiteLinkPassword_Type = DisplayString
_Winlink1000OduAdmSiteLinkPassword_Object = MibScalar
winlink1000OduAdmSiteLinkPassword = _Winlink1000OduAdmSiteLinkPassword_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 22),
    _Winlink1000OduAdmSiteLinkPassword_Type()
)
winlink1000OduAdmSiteLinkPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmSiteLinkPassword.setStatus("mandatory")


class _Winlink1000OduAdmDefaultPassword_Type(Integer32):
    """Custom type winlink1000OduAdmDefaultPassword based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("default", 1),
          ("nonDefault", 2))
    )


_Winlink1000OduAdmDefaultPassword_Type.__name__ = "Integer32"
_Winlink1000OduAdmDefaultPassword_Object = MibScalar
winlink1000OduAdmDefaultPassword = _Winlink1000OduAdmDefaultPassword_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 23),
    _Winlink1000OduAdmDefaultPassword_Type()
)
winlink1000OduAdmDefaultPassword.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmDefaultPassword.setStatus("mandatory")


class _Winlink1000OduAdmConnectionType_Type(Integer32):
    """Custom type winlink1000OduAdmConnectionType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("directConnection", 1),
          ("indirectConnection", 2),
          ("unknown", 3))
    )


_Winlink1000OduAdmConnectionType_Type.__name__ = "Integer32"
_Winlink1000OduAdmConnectionType_Object = MibScalar
winlink1000OduAdmConnectionType = _Winlink1000OduAdmConnectionType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 24),
    _Winlink1000OduAdmConnectionType_Type()
)
winlink1000OduAdmConnectionType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmConnectionType.setStatus("mandatory")


class _Winlink1000OduAdmBackToFactorySettingsCmd_Type(Integer32):
    """Custom type winlink1000OduAdmBackToFactorySettingsCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("withIP", 1),
          ("withoutIP", 2))
    )


_Winlink1000OduAdmBackToFactorySettingsCmd_Type.__name__ = "Integer32"
_Winlink1000OduAdmBackToFactorySettingsCmd_Object = MibScalar
winlink1000OduAdmBackToFactorySettingsCmd = _Winlink1000OduAdmBackToFactorySettingsCmd_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 25),
    _Winlink1000OduAdmBackToFactorySettingsCmd_Type()
)
winlink1000OduAdmBackToFactorySettingsCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmBackToFactorySettingsCmd.setStatus("mandatory")
_Winlink1000OduAdmIpParamsCnfg_Type = DisplayString
_Winlink1000OduAdmIpParamsCnfg_Object = MibScalar
winlink1000OduAdmIpParamsCnfg = _Winlink1000OduAdmIpParamsCnfg_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 26),
    _Winlink1000OduAdmIpParamsCnfg_Type()
)
winlink1000OduAdmIpParamsCnfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmIpParamsCnfg.setStatus("mandatory")


class _Winlink1000OduAdmVlanID_Type(Integer32):
    """Custom type winlink1000OduAdmVlanID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4094),
    )


_Winlink1000OduAdmVlanID_Type.__name__ = "Integer32"
_Winlink1000OduAdmVlanID_Object = MibScalar
winlink1000OduAdmVlanID = _Winlink1000OduAdmVlanID_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 27),
    _Winlink1000OduAdmVlanID_Type()
)
winlink1000OduAdmVlanID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmVlanID.setStatus("mandatory")


class _Winlink1000OduAdmVlanPriority_Type(Integer32):
    """Custom type winlink1000OduAdmVlanPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Winlink1000OduAdmVlanPriority_Type.__name__ = "Integer32"
_Winlink1000OduAdmVlanPriority_Object = MibScalar
winlink1000OduAdmVlanPriority = _Winlink1000OduAdmVlanPriority_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 28),
    _Winlink1000OduAdmVlanPriority_Type()
)
winlink1000OduAdmVlanPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmVlanPriority.setStatus("mandatory")
_Winlink1000OduAdmSN_Type = DisplayString
_Winlink1000OduAdmSN_Object = MibScalar
winlink1000OduAdmSN = _Winlink1000OduAdmSN_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 29),
    _Winlink1000OduAdmSN_Type()
)
winlink1000OduAdmSN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmSN.setStatus("mandatory")
_Winlink1000OduAdmProductName_Type = DisplayString
_Winlink1000OduAdmProductName_Object = MibScalar
winlink1000OduAdmProductName = _Winlink1000OduAdmProductName_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 30),
    _Winlink1000OduAdmProductName_Type()
)
winlink1000OduAdmProductName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmProductName.setStatus("mandatory")
_Winlink1000OduAdmActivationKey_Type = DisplayString
_Winlink1000OduAdmActivationKey_Object = MibScalar
winlink1000OduAdmActivationKey = _Winlink1000OduAdmActivationKey_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 31),
    _Winlink1000OduAdmActivationKey_Type()
)
winlink1000OduAdmActivationKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmActivationKey.setStatus("mandatory")
_Winlink1000OduAdmRmtPermittedOduType_Type = DisplayString
_Winlink1000OduAdmRmtPermittedOduType_Object = MibScalar
winlink1000OduAdmRmtPermittedOduType = _Winlink1000OduAdmRmtPermittedOduType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 32),
    _Winlink1000OduAdmRmtPermittedOduType_Type()
)
winlink1000OduAdmRmtPermittedOduType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmRmtPermittedOduType.setStatus("mandatory")


class _Winlink1000OduAdmCpuID_Type(Integer32):
    """Custom type winlink1000OduAdmCpuID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 64),
    )


_Winlink1000OduAdmCpuID_Type.__name__ = "Integer32"
_Winlink1000OduAdmCpuID_Object = MibScalar
winlink1000OduAdmCpuID = _Winlink1000OduAdmCpuID_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 33),
    _Winlink1000OduAdmCpuID_Type()
)
winlink1000OduAdmCpuID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmCpuID.setStatus("mandatory")
_Winlink1000OduAdmOvrdCmd_Type = DisplayString
_Winlink1000OduAdmOvrdCmd_Object = MibScalar
winlink1000OduAdmOvrdCmd = _Winlink1000OduAdmOvrdCmd_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 34),
    _Winlink1000OduAdmOvrdCmd_Type()
)
winlink1000OduAdmOvrdCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmOvrdCmd.setStatus("mandatory")


class _Winlink1000OduAdmLinkMode_Type(Integer32):
    """Custom type winlink1000OduAdmLinkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("pmpHbs", 1),
          ("pmpHsu", 2),
          ("pmpHsuHyb", 3),
          ("pmpHbsHyb", 4))
    )


_Winlink1000OduAdmLinkMode_Type.__name__ = "Integer32"
_Winlink1000OduAdmLinkMode_Object = MibScalar
winlink1000OduAdmLinkMode = _Winlink1000OduAdmLinkMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 35),
    _Winlink1000OduAdmLinkMode_Type()
)
winlink1000OduAdmLinkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmLinkMode.setStatus("mandatory")


class _Winlink1000OduAdmActualConnectMode_Type(Integer32):
    """Custom type winlink1000OduAdmActualConnectMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("ptp", 2),
          ("ptmp", 3))
    )


_Winlink1000OduAdmActualConnectMode_Type.__name__ = "Integer32"
_Winlink1000OduAdmActualConnectMode_Object = MibScalar
winlink1000OduAdmActualConnectMode = _Winlink1000OduAdmActualConnectMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 36),
    _Winlink1000OduAdmActualConnectMode_Type()
)
winlink1000OduAdmActualConnectMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmActualConnectMode.setStatus("mandatory")


class _Winlink1000OduAdmAES256Support_Type(Integer32):
    """Custom type winlink1000OduAdmAES256Support based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notSupported", 1),
          ("supported", 2))
    )


_Winlink1000OduAdmAES256Support_Type.__name__ = "Integer32"
_Winlink1000OduAdmAES256Support_Object = MibScalar
winlink1000OduAdmAES256Support = _Winlink1000OduAdmAES256Support_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 37),
    _Winlink1000OduAdmAES256Support_Type()
)
winlink1000OduAdmAES256Support.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmAES256Support.setStatus("mandatory")


class _Winlink1000OduAdmAES256State_Type(Integer32):
    """Custom type winlink1000OduAdmAES256State based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_Winlink1000OduAdmAES256State_Type.__name__ = "Integer32"
_Winlink1000OduAdmAES256State_Object = MibScalar
winlink1000OduAdmAES256State = _Winlink1000OduAdmAES256State_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 38),
    _Winlink1000OduAdmAES256State_Type()
)
winlink1000OduAdmAES256State.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmAES256State.setStatus("mandatory")


class _Winlink1000OduAdmAES256Status_Type(Integer32):
    """Custom type winlink1000OduAdmAES256Status based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notOperating", 1),
          ("partiallyOperating", 2),
          ("operating", 3))
    )


_Winlink1000OduAdmAES256Status_Type.__name__ = "Integer32"
_Winlink1000OduAdmAES256Status_Object = MibScalar
winlink1000OduAdmAES256Status = _Winlink1000OduAdmAES256Status_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 39),
    _Winlink1000OduAdmAES256Status_Type()
)
winlink1000OduAdmAES256Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmAES256Status.setStatus("mandatory")


class _Winlink1000OduAdmBatterySavingShutdownTime_Type(Integer32):
    """Custom type winlink1000OduAdmBatterySavingShutdownTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_Winlink1000OduAdmBatterySavingShutdownTime_Type.__name__ = "Integer32"
_Winlink1000OduAdmBatterySavingShutdownTime_Object = MibScalar
winlink1000OduAdmBatterySavingShutdownTime = _Winlink1000OduAdmBatterySavingShutdownTime_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 40),
    _Winlink1000OduAdmBatterySavingShutdownTime_Type()
)
winlink1000OduAdmBatterySavingShutdownTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmBatterySavingShutdownTime.setStatus("mandatory")


class _Winlink1000OduAdmWiFiPowerMode_Type(Integer32):
    """Custom type winlink1000OduAdmWiFiPowerMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("undefined-ReadOnly", 1),
          ("powerON", 2),
          ("powerOFF", 3),
          ("alwaysON-ReadOnly", 4),
          ("powerAUTO", 5),
          ("limitedTime", 6))
    )


_Winlink1000OduAdmWiFiPowerMode_Type.__name__ = "Integer32"
_Winlink1000OduAdmWiFiPowerMode_Object = MibScalar
winlink1000OduAdmWiFiPowerMode = _Winlink1000OduAdmWiFiPowerMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 41),
    _Winlink1000OduAdmWiFiPowerMode_Type()
)
winlink1000OduAdmWiFiPowerMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmWiFiPowerMode.setStatus("mandatory")


class _Winlink1000OduAdmShutdownTimer_Type(Integer32):
    """Custom type winlink1000OduAdmShutdownTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000OduAdmShutdownTimer_Type.__name__ = "Integer32"
_Winlink1000OduAdmShutdownTimer_Object = MibScalar
winlink1000OduAdmShutdownTimer = _Winlink1000OduAdmShutdownTimer_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 42),
    _Winlink1000OduAdmShutdownTimer_Type()
)
winlink1000OduAdmShutdownTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmShutdownTimer.setStatus("mandatory")


class _Winlink1000OduAdmGPSState_Type(Integer32):
    """Custom type winlink1000OduAdmGPSState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("undefined", 1),
          ("notSynchronized", 2),
          ("fixed", 3),
          ("shortCircuit", 4),
          ("faulty", 5),
          ("synchronizedGPS", 6),
          ("synchronizedGlonassGPS", 7),
          ("sychnornizedBeidouGPS", 8))
    )


_Winlink1000OduAdmGPSState_Type.__name__ = "Integer32"
_Winlink1000OduAdmGPSState_Object = MibScalar
winlink1000OduAdmGPSState = _Winlink1000OduAdmGPSState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 43),
    _Winlink1000OduAdmGPSState_Type()
)
winlink1000OduAdmGPSState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmGPSState.setStatus("mandatory")
_Winlink1000OduAdmTemperatureC_Type = Integer32
_Winlink1000OduAdmTemperatureC_Object = MibScalar
winlink1000OduAdmTemperatureC = _Winlink1000OduAdmTemperatureC_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 44),
    _Winlink1000OduAdmTemperatureC_Type()
)
winlink1000OduAdmTemperatureC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmTemperatureC.setStatus("mandatory")


class _Winlink1000OduAdmIPStackMode_Type(Integer32):
    """Custom type winlink1000OduAdmIPStackMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("v4", 1),
          ("v6", 2),
          ("v4andv6", 3))
    )


_Winlink1000OduAdmIPStackMode_Type.__name__ = "Integer32"
_Winlink1000OduAdmIPStackMode_Object = MibScalar
winlink1000OduAdmIPStackMode = _Winlink1000OduAdmIPStackMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 45),
    _Winlink1000OduAdmIPStackMode_Type()
)
winlink1000OduAdmIPStackMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmIPStackMode.setStatus("mandatory")
_Winlink1000OduAdmIPv6ParamsCnfg_Type = DisplayString
_Winlink1000OduAdmIPv6ParamsCnfg_Object = MibScalar
winlink1000OduAdmIPv6ParamsCnfg = _Winlink1000OduAdmIPv6ParamsCnfg_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 46),
    _Winlink1000OduAdmIPv6ParamsCnfg_Type()
)
winlink1000OduAdmIPv6ParamsCnfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmIPv6ParamsCnfg.setStatus("mandatory")
_Winlink1000OduAdmIPv6Address_Type = DisplayString
_Winlink1000OduAdmIPv6Address_Object = MibScalar
winlink1000OduAdmIPv6Address = _Winlink1000OduAdmIPv6Address_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 47),
    _Winlink1000OduAdmIPv6Address_Type()
)
winlink1000OduAdmIPv6Address.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmIPv6Address.setStatus("mandatory")
_Winlink1000OduAdmIPv6Prefix_Type = Integer32
_Winlink1000OduAdmIPv6Prefix_Object = MibScalar
winlink1000OduAdmIPv6Prefix = _Winlink1000OduAdmIPv6Prefix_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 48),
    _Winlink1000OduAdmIPv6Prefix_Type()
)
winlink1000OduAdmIPv6Prefix.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmIPv6Prefix.setStatus("mandatory")
_Winlink1000OduAdmIPv6DefaultGateWay_Type = DisplayString
_Winlink1000OduAdmIPv6DefaultGateWay_Object = MibScalar
winlink1000OduAdmIPv6DefaultGateWay = _Winlink1000OduAdmIPv6DefaultGateWay_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 49),
    _Winlink1000OduAdmIPv6DefaultGateWay_Type()
)
winlink1000OduAdmIPv6DefaultGateWay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmIPv6DefaultGateWay.setStatus("mandatory")
_Winlink1000OduAdmPowerConsumption_Type = Integer32
_Winlink1000OduAdmPowerConsumption_Object = MibScalar
winlink1000OduAdmPowerConsumption = _Winlink1000OduAdmPowerConsumption_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 50),
    _Winlink1000OduAdmPowerConsumption_Type()
)
winlink1000OduAdmPowerConsumption.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmPowerConsumption.setStatus("mandatory")
_Winlink1000OduAdmWifi_ObjectIdentity = ObjectIdentity
winlink1000OduAdmWifi = _Winlink1000OduAdmWifi_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51)
)


class _Winlink1000OduAdmWifiChannel_Type(Integer32):
    """Custom type winlink1000OduAdmWifiChannel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 11),
    )


_Winlink1000OduAdmWifiChannel_Type.__name__ = "Integer32"
_Winlink1000OduAdmWifiChannel_Object = MibScalar
winlink1000OduAdmWifiChannel = _Winlink1000OduAdmWifiChannel_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 1),
    _Winlink1000OduAdmWifiChannel_Type()
)
winlink1000OduAdmWifiChannel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmWifiChannel.setStatus("mandatory")
_Winlink1000OduAdmWifiTxPower_Type = Integer32
_Winlink1000OduAdmWifiTxPower_Object = MibScalar
winlink1000OduAdmWifiTxPower = _Winlink1000OduAdmWifiTxPower_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 2),
    _Winlink1000OduAdmWifiTxPower_Type()
)
winlink1000OduAdmWifiTxPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmWifiTxPower.setStatus("mandatory")
_Winlink1000OduAdmWifiSSID_Type = DisplayString
_Winlink1000OduAdmWifiSSID_Object = MibScalar
winlink1000OduAdmWifiSSID = _Winlink1000OduAdmWifiSSID_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 3),
    _Winlink1000OduAdmWifiSSID_Type()
)
winlink1000OduAdmWifiSSID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmWifiSSID.setStatus("mandatory")


class _Winlink1000OduAdmWifiSecurityType_Type(Integer32):
    """Custom type winlink1000OduAdmWifiSecurityType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("open", 1),
          ("wep", 2),
          ("wpa2", 3))
    )


_Winlink1000OduAdmWifiSecurityType_Type.__name__ = "Integer32"
_Winlink1000OduAdmWifiSecurityType_Object = MibScalar
winlink1000OduAdmWifiSecurityType = _Winlink1000OduAdmWifiSecurityType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 4),
    _Winlink1000OduAdmWifiSecurityType_Type()
)
winlink1000OduAdmWifiSecurityType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmWifiSecurityType.setStatus("mandatory")
_Winlink1000OduAdmWifiPassword_Type = DisplayString
_Winlink1000OduAdmWifiPassword_Object = MibScalar
winlink1000OduAdmWifiPassword = _Winlink1000OduAdmWifiPassword_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 5),
    _Winlink1000OduAdmWifiPassword_Type()
)
winlink1000OduAdmWifiPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmWifiPassword.setStatus("mandatory")
_Winlink1000OduAdmWifiNetwork_Type = IpAddress
_Winlink1000OduAdmWifiNetwork_Object = MibScalar
winlink1000OduAdmWifiNetwork = _Winlink1000OduAdmWifiNetwork_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 6),
    _Winlink1000OduAdmWifiNetwork_Type()
)
winlink1000OduAdmWifiNetwork.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmWifiNetwork.setStatus("mandatory")
_Winlink1000OduAdmWifiRssi_Type = Integer32
_Winlink1000OduAdmWifiRssi_Object = MibScalar
winlink1000OduAdmWifiRssi = _Winlink1000OduAdmWifiRssi_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 7),
    _Winlink1000OduAdmWifiRssi_Type()
)
winlink1000OduAdmWifiRssi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmWifiRssi.setStatus("mandatory")
_Winlink1000OduAdmWifiStationMAC_Type = DisplayString
_Winlink1000OduAdmWifiStationMAC_Object = MibScalar
winlink1000OduAdmWifiStationMAC = _Winlink1000OduAdmWifiStationMAC_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 8),
    _Winlink1000OduAdmWifiStationMAC_Type()
)
winlink1000OduAdmWifiStationMAC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmWifiStationMAC.setStatus("mandatory")


class _Winlink1000OduAdmWifiRestart_Type(Integer32):
    """Custom type winlink1000OduAdmWifiRestart based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
    )


_Winlink1000OduAdmWifiRestart_Type.__name__ = "Integer32"
_Winlink1000OduAdmWifiRestart_Object = MibScalar
winlink1000OduAdmWifiRestart = _Winlink1000OduAdmWifiRestart_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 9),
    _Winlink1000OduAdmWifiRestart_Type()
)
winlink1000OduAdmWifiRestart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmWifiRestart.setStatus("mandatory")


class _Winlink1000OduAdmWifiApStatus_Type(Integer32):
    """Custom type winlink1000OduAdmWifiApStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2),
          ("connected", 3),
          ("limited", 4))
    )


_Winlink1000OduAdmWifiApStatus_Type.__name__ = "Integer32"
_Winlink1000OduAdmWifiApStatus_Object = MibScalar
winlink1000OduAdmWifiApStatus = _Winlink1000OduAdmWifiApStatus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 10),
    _Winlink1000OduAdmWifiApStatus_Type()
)
winlink1000OduAdmWifiApStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmWifiApStatus.setStatus("mandatory")
_Winlink1000OduAdmWifiMaxTxPower_Type = Integer32
_Winlink1000OduAdmWifiMaxTxPower_Object = MibScalar
winlink1000OduAdmWifiMaxTxPower = _Winlink1000OduAdmWifiMaxTxPower_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 11),
    _Winlink1000OduAdmWifiMaxTxPower_Type()
)
winlink1000OduAdmWifiMaxTxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmWifiMaxTxPower.setStatus("mandatory")
_Winlink1000OduAdmWiFiRssiTable_Object = MibTable
winlink1000OduAdmWiFiRssiTable = _Winlink1000OduAdmWiFiRssiTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 12)
)
if mibBuilder.loadTexts:
    winlink1000OduAdmWiFiRssiTable.setStatus("mandatory")
_Winlink1000OduAdmWiFiRssiAndMacEntry_Object = MibTableRow
winlink1000OduAdmWiFiRssiAndMacEntry = _Winlink1000OduAdmWiFiRssiAndMacEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 12, 1)
)
winlink1000OduAdmWiFiRssiAndMacEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAdmWiFiRssiAndMacIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduAdmWiFiRssiAndMacEntry.setStatus("mandatory")


class _Winlink1000OduAdmWiFiRssiAndMacIndex_Type(Integer32):
    """Custom type winlink1000OduAdmWiFiRssiAndMacIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000OduAdmWiFiRssiAndMacIndex_Type.__name__ = "Integer32"
_Winlink1000OduAdmWiFiRssiAndMacIndex_Object = MibTableColumn
winlink1000OduAdmWiFiRssiAndMacIndex = _Winlink1000OduAdmWiFiRssiAndMacIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 12, 1, 1),
    _Winlink1000OduAdmWiFiRssiAndMacIndex_Type()
)
winlink1000OduAdmWiFiRssiAndMacIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmWiFiRssiAndMacIndex.setStatus("mandatory")
_Winlink1000OduAdmWiFiRssiAndMac_Type = DisplayString
_Winlink1000OduAdmWiFiRssiAndMac_Object = MibTableColumn
winlink1000OduAdmWiFiRssiAndMac = _Winlink1000OduAdmWiFiRssiAndMac_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 51, 12, 1, 2),
    _Winlink1000OduAdmWiFiRssiAndMac_Type()
)
winlink1000OduAdmWiFiRssiAndMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmWiFiRssiAndMac.setStatus("mandatory")


class _Winlink1000OduAdmBsaOperationMode_Type(Integer32):
    """Custom type winlink1000OduAdmBsaOperationMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("inactive", 1),
          ("hbsTracking", 2),
          ("hsuAlignment", 3))
    )


_Winlink1000OduAdmBsaOperationMode_Type.__name__ = "Integer32"
_Winlink1000OduAdmBsaOperationMode_Object = MibScalar
winlink1000OduAdmBsaOperationMode = _Winlink1000OduAdmBsaOperationMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 52),
    _Winlink1000OduAdmBsaOperationMode_Type()
)
winlink1000OduAdmBsaOperationMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmBsaOperationMode.setStatus("mandatory")
_Winlink1000OduAdmMngConnection_Type = DisplayString
_Winlink1000OduAdmMngConnection_Object = MibScalar
winlink1000OduAdmMngConnection = _Winlink1000OduAdmMngConnection_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 53),
    _Winlink1000OduAdmMngConnection_Type()
)
winlink1000OduAdmMngConnection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmMngConnection.setStatus("mandatory")


class _Winlink1000OduAdm1588TCSupport_Type(Integer32):
    """Custom type winlink1000OduAdm1588TCSupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notSupported", 1),
          ("supported", 2))
    )


_Winlink1000OduAdm1588TCSupport_Type.__name__ = "Integer32"
_Winlink1000OduAdm1588TCSupport_Object = MibScalar
winlink1000OduAdm1588TCSupport = _Winlink1000OduAdm1588TCSupport_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 54),
    _Winlink1000OduAdm1588TCSupport_Type()
)
winlink1000OduAdm1588TCSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdm1588TCSupport.setStatus("mandatory")


class _Winlink1000OduAdmSyncESupport_Type(Integer32):
    """Custom type winlink1000OduAdmSyncESupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notSupported", 1),
          ("supported", 2))
    )


_Winlink1000OduAdmSyncESupport_Type.__name__ = "Integer32"
_Winlink1000OduAdmSyncESupport_Object = MibScalar
winlink1000OduAdmSyncESupport = _Winlink1000OduAdmSyncESupport_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 55),
    _Winlink1000OduAdmSyncESupport_Type()
)
winlink1000OduAdmSyncESupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmSyncESupport.setStatus("mandatory")
_Winlink1000OduAdmRadioRev_Type = DisplayString
_Winlink1000OduAdmRadioRev_Object = MibScalar
winlink1000OduAdmRadioRev = _Winlink1000OduAdmRadioRev_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 56),
    _Winlink1000OduAdmRadioRev_Type()
)
winlink1000OduAdmRadioRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmRadioRev.setStatus("mandatory")
_Winlink1000OduAdmProductRev_Type = DisplayString
_Winlink1000OduAdmProductRev_Object = MibScalar
winlink1000OduAdmProductRev = _Winlink1000OduAdmProductRev_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 57),
    _Winlink1000OduAdmProductRev_Type()
)
winlink1000OduAdmProductRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmProductRev.setStatus("mandatory")


class _Winlink1000OduAdmPMPSUSupport_Type(Integer32):
    """Custom type winlink1000OduAdmPMPSUSupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notSupported", 1),
          ("supported", 2))
    )


_Winlink1000OduAdmPMPSUSupport_Type.__name__ = "Integer32"
_Winlink1000OduAdmPMPSUSupport_Object = MibScalar
winlink1000OduAdmPMPSUSupport = _Winlink1000OduAdmPMPSUSupport_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 58),
    _Winlink1000OduAdmPMPSUSupport_Type()
)
winlink1000OduAdmPMPSUSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmPMPSUSupport.setStatus("mandatory")
_Winlink1000OduAdmManagerDownloadURL_Type = DisplayString
_Winlink1000OduAdmManagerDownloadURL_Object = MibScalar
winlink1000OduAdmManagerDownloadURL = _Winlink1000OduAdmManagerDownloadURL_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 59),
    _Winlink1000OduAdmManagerDownloadURL_Type()
)
winlink1000OduAdmManagerDownloadURL.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmManagerDownloadURL.setStatus("mandatory")
_Winlink1000OduAdmAntennaDescription_Type = DisplayString
_Winlink1000OduAdmAntennaDescription_Object = MibScalar
winlink1000OduAdmAntennaDescription = _Winlink1000OduAdmAntennaDescription_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 60),
    _Winlink1000OduAdmAntennaDescription_Type()
)
winlink1000OduAdmAntennaDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmAntennaDescription.setStatus("mandatory")
_Winlink1000OduAdmSwCapabilities_Type = DisplayString
_Winlink1000OduAdmSwCapabilities_Object = MibScalar
winlink1000OduAdmSwCapabilities = _Winlink1000OduAdmSwCapabilities_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 61),
    _Winlink1000OduAdmSwCapabilities_Type()
)
winlink1000OduAdmSwCapabilities.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmSwCapabilities.setStatus("mandatory")
_Winlink1000OduAdmSwChange_ObjectIdentity = ObjectIdentity
winlink1000OduAdmSwChange = _Winlink1000OduAdmSwChange_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 62)
)
_Winlink1000OduAdmSwChangeCommand_Type = DisplayString
_Winlink1000OduAdmSwChangeCommand_Object = MibScalar
winlink1000OduAdmSwChangeCommand = _Winlink1000OduAdmSwChangeCommand_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 62, 1),
    _Winlink1000OduAdmSwChangeCommand_Type()
)
winlink1000OduAdmSwChangeCommand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmSwChangeCommand.setStatus("mandatory")
_Winlink1000OduAdmSwChangeMetadata_Type = DisplayString
_Winlink1000OduAdmSwChangeMetadata_Object = MibScalar
winlink1000OduAdmSwChangeMetadata = _Winlink1000OduAdmSwChangeMetadata_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 62, 2),
    _Winlink1000OduAdmSwChangeMetadata_Type()
)
winlink1000OduAdmSwChangeMetadata.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmSwChangeMetadata.setStatus("mandatory")
_Winlink1000OduAdmSwChangeStatus_Type = Integer32
_Winlink1000OduAdmSwChangeStatus_Object = MibScalar
winlink1000OduAdmSwChangeStatus = _Winlink1000OduAdmSwChangeStatus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 62, 3),
    _Winlink1000OduAdmSwChangeStatus_Type()
)
winlink1000OduAdmSwChangeStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmSwChangeStatus.setStatus("mandatory")
_Winlink1000OduAdmSwChangeError_Type = DisplayString
_Winlink1000OduAdmSwChangeError_Object = MibScalar
winlink1000OduAdmSwChangeError = _Winlink1000OduAdmSwChangeError_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 62, 4),
    _Winlink1000OduAdmSwChangeError_Type()
)
winlink1000OduAdmSwChangeError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmSwChangeError.setStatus("mandatory")
_Winlink1000OduAdmRequesterSourceIp_Type = IpAddress
_Winlink1000OduAdmRequesterSourceIp_Object = MibScalar
winlink1000OduAdmRequesterSourceIp = _Winlink1000OduAdmRequesterSourceIp_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 63),
    _Winlink1000OduAdmRequesterSourceIp_Type()
)
winlink1000OduAdmRequesterSourceIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmRequesterSourceIp.setStatus("mandatory")


class _Winlink1000OduAdmSecurityMode_Type(Integer32):
    """Custom type winlink1000OduAdmSecurityMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("standard", 1),
          ("high", 2),
          ("veryHigh", 3))
    )


_Winlink1000OduAdmSecurityMode_Type.__name__ = "Integer32"
_Winlink1000OduAdmSecurityMode_Object = MibScalar
winlink1000OduAdmSecurityMode = _Winlink1000OduAdmSecurityMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 64),
    _Winlink1000OduAdmSecurityMode_Type()
)
winlink1000OduAdmSecurityMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmSecurityMode.setStatus("mandatory")
_Winlink1000OduAdmTemporarilyDisableSecurityMode_Type = Integer32
_Winlink1000OduAdmTemporarilyDisableSecurityMode_Object = MibScalar
winlink1000OduAdmTemporarilyDisableSecurityMode = _Winlink1000OduAdmTemporarilyDisableSecurityMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 65),
    _Winlink1000OduAdmTemporarilyDisableSecurityMode_Type()
)
winlink1000OduAdmTemporarilyDisableSecurityMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmTemporarilyDisableSecurityMode.setStatus("mandatory")
_Winlink1000OduAdmSyslogServerIp_Type = IpAddress
_Winlink1000OduAdmSyslogServerIp_Object = MibScalar
winlink1000OduAdmSyslogServerIp = _Winlink1000OduAdmSyslogServerIp_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 66),
    _Winlink1000OduAdmSyslogServerIp_Type()
)
winlink1000OduAdmSyslogServerIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmSyslogServerIp.setStatus("mandatory")
_Winlink1000OduAdmReportSwOperation_Type = DisplayString
_Winlink1000OduAdmReportSwOperation_Object = MibScalar
winlink1000OduAdmReportSwOperation = _Winlink1000OduAdmReportSwOperation_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 68),
    _Winlink1000OduAdmReportSwOperation_Type()
)
winlink1000OduAdmReportSwOperation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmReportSwOperation.setStatus("mandatory")
_Winlink1000OduAdmBootVersion_Type = DisplayString
_Winlink1000OduAdmBootVersion_Object = MibScalar
winlink1000OduAdmBootVersion = _Winlink1000OduAdmBootVersion_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 69),
    _Winlink1000OduAdmBootVersion_Type()
)
winlink1000OduAdmBootVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmBootVersion.setStatus("mandatory")
_Winlink1000OduAdmOneTimePassword_Type = DisplayString
_Winlink1000OduAdmOneTimePassword_Object = MibScalar
winlink1000OduAdmOneTimePassword = _Winlink1000OduAdmOneTimePassword_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 70),
    _Winlink1000OduAdmOneTimePassword_Type()
)
winlink1000OduAdmOneTimePassword.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmOneTimePassword.setStatus("mandatory")


class _Winlink1000OduAdmSupportExtendedImage_Type(Integer32):
    """Custom type winlink1000OduAdmSupportExtendedImage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("na", 1),
          ("supportedLoaded", 2),
          ("supportedNotLoaded", 3),
          ("notSupported", 4))
    )


_Winlink1000OduAdmSupportExtendedImage_Type.__name__ = "Integer32"
_Winlink1000OduAdmSupportExtendedImage_Object = MibScalar
winlink1000OduAdmSupportExtendedImage = _Winlink1000OduAdmSupportExtendedImage_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 71),
    _Winlink1000OduAdmSupportExtendedImage_Type()
)
winlink1000OduAdmSupportExtendedImage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmSupportExtendedImage.setStatus("mandatory")
_Winlink1000OduAdmFiM_ObjectIdentity = ObjectIdentity
winlink1000OduAdmFiM = _Winlink1000OduAdmFiM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72)
)
_Winlink1000OduAdmFiMBS_ObjectIdentity = ObjectIdentity
winlink1000OduAdmFiMBS = _Winlink1000OduAdmFiMBS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1)
)
_Winlink1000OduAdmFiMBSAir_ObjectIdentity = ObjectIdentity
winlink1000OduAdmFiMBSAir = _Winlink1000OduAdmFiMBSAir_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 1)
)
_Winlink1000OduAdminFiMBSAirRUF_Type = Integer32
_Winlink1000OduAdminFiMBSAirRUF_Object = MibScalar
winlink1000OduAdminFiMBSAirRUF = _Winlink1000OduAdminFiMBSAirRUF_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 1, 1),
    _Winlink1000OduAdminFiMBSAirRUF_Type()
)
winlink1000OduAdminFiMBSAirRUF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMBSAirRUF.setStatus("mandatory")


class _Winlink1000OduAdminFiMBSAirITHOType_Type(Integer32):
    """Custom type winlink1000OduAdminFiMBSAirITHOType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2),
          ("notSupported", 3))
    )


_Winlink1000OduAdminFiMBSAirITHOType_Type.__name__ = "Integer32"
_Winlink1000OduAdminFiMBSAirITHOType_Object = MibScalar
winlink1000OduAdminFiMBSAirITHOType = _Winlink1000OduAdminFiMBSAirITHOType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 1, 2),
    _Winlink1000OduAdminFiMBSAirITHOType_Type()
)
winlink1000OduAdminFiMBSAirITHOType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMBSAirITHOType.setStatus("mandatory")
_Winlink1000OduAdminFiMBSAirBIndex_Type = Integer32
_Winlink1000OduAdminFiMBSAirBIndex_Object = MibScalar
winlink1000OduAdminFiMBSAirBIndex = _Winlink1000OduAdminFiMBSAirBIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 1, 3),
    _Winlink1000OduAdminFiMBSAirBIndex_Type()
)
winlink1000OduAdminFiMBSAirBIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMBSAirBIndex.setStatus("mandatory")
_Winlink1000OduAdminFiMBSAirTSGIndex_Type = Integer32
_Winlink1000OduAdminFiMBSAirTSGIndex_Object = MibScalar
winlink1000OduAdminFiMBSAirTSGIndex = _Winlink1000OduAdminFiMBSAirTSGIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 1, 4),
    _Winlink1000OduAdminFiMBSAirTSGIndex_Type()
)
winlink1000OduAdminFiMBSAirTSGIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMBSAirTSGIndex.setStatus("mandatory")


class _Winlink1000OduAdminFiMBSAirITHOMode_Type(Integer32):
    """Custom type winlink1000OduAdminFiMBSAirITHOMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("basedTput", 1),
          ("basedRSS", 2))
    )


_Winlink1000OduAdminFiMBSAirITHOMode_Type.__name__ = "Integer32"
_Winlink1000OduAdminFiMBSAirITHOMode_Object = MibScalar
winlink1000OduAdminFiMBSAirITHOMode = _Winlink1000OduAdminFiMBSAirITHOMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 1, 5),
    _Winlink1000OduAdminFiMBSAirITHOMode_Type()
)
winlink1000OduAdminFiMBSAirITHOMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMBSAirITHOMode.setStatus("mandatory")
_Winlink1000OduAdminFiMBSAirHOTable_Object = MibTable
winlink1000OduAdminFiMBSAirHOTable = _Winlink1000OduAdminFiMBSAirHOTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 1, 6)
)
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMBSAirHOTable.setStatus("mandatory")
_Winlink1000OduAdminFiMBSAirHOEntry_Object = MibTableRow
winlink1000OduAdminFiMBSAirHOEntry = _Winlink1000OduAdminFiMBSAirHOEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 1, 6, 1)
)
winlink1000OduAdminFiMBSAirHOEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAdminFiMBSAirHOIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMBSAirHOEntry.setStatus("mandatory")


class _Winlink1000OduAdminFiMBSAirHOIndex_Type(Integer32):
    """Custom type winlink1000OduAdminFiMBSAirHOIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000OduAdminFiMBSAirHOIndex_Type.__name__ = "Integer32"
_Winlink1000OduAdminFiMBSAirHOIndex_Object = MibTableColumn
winlink1000OduAdminFiMBSAirHOIndex = _Winlink1000OduAdminFiMBSAirHOIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 1, 6, 1, 1),
    _Winlink1000OduAdminFiMBSAirHOIndex_Type()
)
winlink1000OduAdminFiMBSAirHOIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMBSAirHOIndex.setStatus("mandatory")
_Winlink1000OduAdminFiMBSAirHOFreq_Type = Integer32
_Winlink1000OduAdminFiMBSAirHOFreq_Object = MibTableColumn
winlink1000OduAdminFiMBSAirHOFreq = _Winlink1000OduAdminFiMBSAirHOFreq_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 1, 6, 1, 2),
    _Winlink1000OduAdminFiMBSAirHOFreq_Type()
)
winlink1000OduAdminFiMBSAirHOFreq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMBSAirHOFreq.setStatus("mandatory")
_Winlink1000OduAdminFiMBSAirHOIP_Type = IpAddress
_Winlink1000OduAdminFiMBSAirHOIP_Object = MibTableColumn
winlink1000OduAdminFiMBSAirHOIP = _Winlink1000OduAdminFiMBSAirHOIP_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 1, 6, 1, 3),
    _Winlink1000OduAdminFiMBSAirHOIP_Type()
)
winlink1000OduAdminFiMBSAirHOIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMBSAirHOIP.setStatus("mandatory")
_Winlink1000OduAdminFiMBSAirCoCHIPTable_Object = MibTable
winlink1000OduAdminFiMBSAirCoCHIPTable = _Winlink1000OduAdminFiMBSAirCoCHIPTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 1, 7)
)
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMBSAirCoCHIPTable.setStatus("mandatory")
_Winlink1000OduAdminFiMBSAirCoCHIPEntry_Object = MibTableRow
winlink1000OduAdminFiMBSAirCoCHIPEntry = _Winlink1000OduAdminFiMBSAirCoCHIPEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 1, 7, 1)
)
winlink1000OduAdminFiMBSAirCoCHIPEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAdminFiMBSAirCoCHIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMBSAirCoCHIPEntry.setStatus("mandatory")


class _Winlink1000OduAdminFiMBSAirCoCHIndex_Type(Integer32):
    """Custom type winlink1000OduAdminFiMBSAirCoCHIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000OduAdminFiMBSAirCoCHIndex_Type.__name__ = "Integer32"
_Winlink1000OduAdminFiMBSAirCoCHIndex_Object = MibTableColumn
winlink1000OduAdminFiMBSAirCoCHIndex = _Winlink1000OduAdminFiMBSAirCoCHIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 1, 7, 1, 1),
    _Winlink1000OduAdminFiMBSAirCoCHIndex_Type()
)
winlink1000OduAdminFiMBSAirCoCHIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMBSAirCoCHIndex.setStatus("mandatory")
_Winlink1000OduAdminFiMBSAirCoCHIP_Type = IpAddress
_Winlink1000OduAdminFiMBSAirCoCHIP_Object = MibTableColumn
winlink1000OduAdminFiMBSAirCoCHIP = _Winlink1000OduAdminFiMBSAirCoCHIP_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 1, 7, 1, 2),
    _Winlink1000OduAdminFiMBSAirCoCHIP_Type()
)
winlink1000OduAdminFiMBSAirCoCHIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMBSAirCoCHIP.setStatus("mandatory")


class _Winlink1000OduAdminFiMBSAirDepoTrackSegment_Type(Integer32):
    """Custom type winlink1000OduAdminFiMBSAirDepoTrackSegment based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("track", 1),
          ("depot", 2))
    )


_Winlink1000OduAdminFiMBSAirDepoTrackSegment_Type.__name__ = "Integer32"
_Winlink1000OduAdminFiMBSAirDepoTrackSegment_Object = MibScalar
winlink1000OduAdminFiMBSAirDepoTrackSegment = _Winlink1000OduAdminFiMBSAirDepoTrackSegment_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 1, 8),
    _Winlink1000OduAdminFiMBSAirDepoTrackSegment_Type()
)
winlink1000OduAdminFiMBSAirDepoTrackSegment.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMBSAirDepoTrackSegment.setStatus("mandatory")
_Winlink1000OduAdmFiMBSNet_ObjectIdentity = ObjectIdentity
winlink1000OduAdmFiMBSNet = _Winlink1000OduAdmFiMBSNet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 2)
)


class _Winlink1000OduAdminFiMBSNetType_Type(Integer32):
    """Custom type winlink1000OduAdminFiMBSNetType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("mdlEnabled", 1),
          ("mdlDisabled", 2),
          ("mdlNotSupported", 3),
          ("l3", 4),
          ("workModeAmount", 5))
    )


_Winlink1000OduAdminFiMBSNetType_Type.__name__ = "Integer32"
_Winlink1000OduAdminFiMBSNetType_Object = MibScalar
winlink1000OduAdminFiMBSNetType = _Winlink1000OduAdminFiMBSNetType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 2, 1),
    _Winlink1000OduAdminFiMBSNetType_Type()
)
winlink1000OduAdminFiMBSNetType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMBSNetType.setStatus("mandatory")
_Winlink1000OduAdminFiMBSNetCenterNetPort_Type = Integer32
_Winlink1000OduAdminFiMBSNetCenterNetPort_Object = MibScalar
winlink1000OduAdminFiMBSNetCenterNetPort = _Winlink1000OduAdminFiMBSNetCenterNetPort_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 2, 2),
    _Winlink1000OduAdminFiMBSNetCenterNetPort_Type()
)
winlink1000OduAdminFiMBSNetCenterNetPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMBSNetCenterNetPort.setStatus("mandatory")
_Winlink1000OduAdminFiMBSNetCenterNetTable_Object = MibTable
winlink1000OduAdminFiMBSNetCenterNetTable = _Winlink1000OduAdminFiMBSNetCenterNetTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 2, 3)
)
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMBSNetCenterNetTable.setStatus("mandatory")
_Winlink1000OduAdminFiMBSNetCenterNetEntry_Object = MibTableRow
winlink1000OduAdminFiMBSNetCenterNetEntry = _Winlink1000OduAdminFiMBSNetCenterNetEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 2, 3, 1)
)
winlink1000OduAdminFiMBSNetCenterNetEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAdminFiMBSNetCenterNetIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMBSNetCenterNetEntry.setStatus("mandatory")


class _Winlink1000OduAdminFiMBSNetCenterNetIndex_Type(Integer32):
    """Custom type winlink1000OduAdminFiMBSNetCenterNetIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000OduAdminFiMBSNetCenterNetIndex_Type.__name__ = "Integer32"
_Winlink1000OduAdminFiMBSNetCenterNetIndex_Object = MibTableColumn
winlink1000OduAdminFiMBSNetCenterNetIndex = _Winlink1000OduAdminFiMBSNetCenterNetIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 2, 3, 1, 1),
    _Winlink1000OduAdminFiMBSNetCenterNetIndex_Type()
)
winlink1000OduAdminFiMBSNetCenterNetIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMBSNetCenterNetIndex.setStatus("mandatory")
_Winlink1000OduAdminFiMBSNetCenterNetIP_Type = IpAddress
_Winlink1000OduAdminFiMBSNetCenterNetIP_Object = MibTableColumn
winlink1000OduAdminFiMBSNetCenterNetIP = _Winlink1000OduAdminFiMBSNetCenterNetIP_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 2, 3, 1, 2),
    _Winlink1000OduAdminFiMBSNetCenterNetIP_Type()
)
winlink1000OduAdminFiMBSNetCenterNetIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMBSNetCenterNetIP.setStatus("mandatory")
_Winlink1000OduAdmFiMBSSync_ObjectIdentity = ObjectIdentity
winlink1000OduAdmFiMBSSync = _Winlink1000OduAdmFiMBSSync_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 3)
)


class _Winlink1000OduAdminFiMBSSyncTC_Type(Integer32):
    """Custom type winlink1000OduAdminFiMBSSyncTC based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_Winlink1000OduAdminFiMBSSyncTC_Type.__name__ = "Integer32"
_Winlink1000OduAdminFiMBSSyncTC_Object = MibScalar
winlink1000OduAdminFiMBSSyncTC = _Winlink1000OduAdminFiMBSSyncTC_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 3, 1),
    _Winlink1000OduAdminFiMBSSyncTC_Type()
)
winlink1000OduAdminFiMBSSyncTC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMBSSyncTC.setStatus("mandatory")
_Winlink1000OduAdminFiMBSSyncJitter_Type = Integer32
_Winlink1000OduAdminFiMBSSyncJitter_Object = MibScalar
winlink1000OduAdminFiMBSSyncJitter = _Winlink1000OduAdminFiMBSSyncJitter_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 3, 2),
    _Winlink1000OduAdminFiMBSSyncJitter_Type()
)
winlink1000OduAdminFiMBSSyncJitter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMBSSyncJitter.setStatus("mandatory")
_Winlink1000OduAdmFiMBSEACS_ObjectIdentity = ObjectIdentity
winlink1000OduAdmFiMBSEACS = _Winlink1000OduAdmFiMBSEACS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 4)
)


class _Winlink1000OduAdminFiMEACSEN_Type(Integer32):
    """Custom type winlink1000OduAdminFiMEACSEN based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("eacsDisabled", 1),
          ("eacsEnabled", 2))
    )


_Winlink1000OduAdminFiMEACSEN_Type.__name__ = "Integer32"
_Winlink1000OduAdminFiMEACSEN_Object = MibScalar
winlink1000OduAdminFiMEACSEN = _Winlink1000OduAdminFiMEACSEN_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 4, 2),
    _Winlink1000OduAdminFiMEACSEN_Type()
)
winlink1000OduAdminFiMEACSEN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMEACSEN.setStatus("mandatory")


class _Winlink1000OduAdminFiMEACSCHPRIO_Type(Integer32):
    """Custom type winlink1000OduAdminFiMEACSCHPRIO based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_Winlink1000OduAdminFiMEACSCHPRIO_Type.__name__ = "Integer32"
_Winlink1000OduAdminFiMEACSCHPRIO_Object = MibScalar
winlink1000OduAdminFiMEACSCHPRIO = _Winlink1000OduAdminFiMEACSCHPRIO_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 4, 3),
    _Winlink1000OduAdminFiMEACSCHPRIO_Type()
)
winlink1000OduAdminFiMEACSCHPRIO.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMEACSCHPRIO.setStatus("mandatory")


class _Winlink1000OduAdminFiMEACSDFSTRIGGER_Type(Integer32):
    """Custom type winlink1000OduAdminFiMEACSDFSTRIGGER based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("regular", 1),
          ("immediateReturn", 2))
    )


_Winlink1000OduAdminFiMEACSDFSTRIGGER_Type.__name__ = "Integer32"
_Winlink1000OduAdminFiMEACSDFSTRIGGER_Object = MibScalar
winlink1000OduAdminFiMEACSDFSTRIGGER = _Winlink1000OduAdminFiMEACSDFSTRIGGER_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 4, 4),
    _Winlink1000OduAdminFiMEACSDFSTRIGGER_Type()
)
winlink1000OduAdminFiMEACSDFSTRIGGER.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMEACSDFSTRIGGER.setStatus("mandatory")
_Winlink1000OduAdminFiMEACSPMAN_Type = Integer32
_Winlink1000OduAdminFiMEACSPMAN_Object = MibScalar
winlink1000OduAdminFiMEACSPMAN = _Winlink1000OduAdminFiMEACSPMAN_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 4, 5),
    _Winlink1000OduAdminFiMEACSPMAN_Type()
)
winlink1000OduAdminFiMEACSPMAN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMEACSPMAN.setStatus("mandatory")


class _Winlink1000OduAdminFiBEACSSELFHEALING_Type(Integer32):
    """Custom type winlink1000OduAdminFiBEACSSELFHEALING based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("selfHealSupportDisabled", 1),
          ("selfHealSupportEnalbed", 2))
    )


_Winlink1000OduAdminFiBEACSSELFHEALING_Type.__name__ = "Integer32"
_Winlink1000OduAdminFiBEACSSELFHEALING_Object = MibScalar
winlink1000OduAdminFiBEACSSELFHEALING = _Winlink1000OduAdminFiBEACSSELFHEALING_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 4, 6),
    _Winlink1000OduAdminFiBEACSSELFHEALING_Type()
)
winlink1000OduAdminFiBEACSSELFHEALING.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiBEACSSELFHEALING.setStatus("mandatory")
_Winlink1000OduAdminFiBEacsSwitchStatus_Type = DisplayString
_Winlink1000OduAdminFiBEacsSwitchStatus_Object = MibScalar
winlink1000OduAdminFiBEacsSwitchStatus = _Winlink1000OduAdminFiBEacsSwitchStatus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 1, 4, 7),
    _Winlink1000OduAdminFiBEacsSwitchStatus_Type()
)
winlink1000OduAdminFiBEacsSwitchStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiBEacsSwitchStatus.setStatus("mandatory")
_Winlink1000OduAdmFiMMU_ObjectIdentity = ObjectIdentity
winlink1000OduAdmFiMMU = _Winlink1000OduAdmFiMMU_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 2)
)
_Winlink1000OduAdmFiMMUAir_ObjectIdentity = ObjectIdentity
winlink1000OduAdmFiMMUAir = _Winlink1000OduAdmFiMMUAir_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 2, 1)
)
_Winlink1000OduAdminFiMMUAirServBS_Type = IpAddress
_Winlink1000OduAdminFiMMUAirServBS_Object = MibScalar
winlink1000OduAdminFiMMUAirServBS = _Winlink1000OduAdminFiMMUAirServBS_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 2, 1, 1),
    _Winlink1000OduAdminFiMMUAirServBS_Type()
)
winlink1000OduAdminFiMMUAirServBS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMMUAirServBS.setStatus("mandatory")


class _Winlink1000OduAdminFiMMUAirRole_Type(Integer32):
    """Custom type winlink1000OduAdminFiMMUAirRole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("passive", 2))
    )


_Winlink1000OduAdminFiMMUAirRole_Type.__name__ = "Integer32"
_Winlink1000OduAdminFiMMUAirRole_Object = MibScalar
winlink1000OduAdminFiMMUAirRole = _Winlink1000OduAdminFiMMUAirRole_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 2, 1, 2),
    _Winlink1000OduAdminFiMMUAirRole_Type()
)
winlink1000OduAdminFiMMUAirRole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMMUAirRole.setStatus("mandatory")


class _Winlink1000OduAdminFiMMUAirHOMode_Type(Integer32):
    """Custom type winlink1000OduAdminFiMMUAirHOMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("upLink", 1),
          ("aggregate", 2),
          ("downLink", 3))
    )


_Winlink1000OduAdminFiMMUAirHOMode_Type.__name__ = "Integer32"
_Winlink1000OduAdminFiMMUAirHOMode_Object = MibScalar
winlink1000OduAdminFiMMUAirHOMode = _Winlink1000OduAdminFiMMUAirHOMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 2, 1, 3),
    _Winlink1000OduAdminFiMMUAirHOMode_Type()
)
winlink1000OduAdminFiMMUAirHOMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMMUAirHOMode.setStatus("mandatory")


class _Winlink1000OduAdminFiMMUAirIBHOType_Type(Integer32):
    """Custom type winlink1000OduAdminFiMMUAirIBHOType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_Winlink1000OduAdminFiMMUAirIBHOType_Type.__name__ = "Integer32"
_Winlink1000OduAdminFiMMUAirIBHOType_Object = MibScalar
winlink1000OduAdminFiMMUAirIBHOType = _Winlink1000OduAdminFiMMUAirIBHOType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 2, 1, 4),
    _Winlink1000OduAdminFiMMUAirIBHOType_Type()
)
winlink1000OduAdminFiMMUAirIBHOType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMMUAirIBHOType.setStatus("mandatory")
_Winlink1000OduAdmFiMMUNet_ObjectIdentity = ObjectIdentity
winlink1000OduAdmFiMMUNet = _Winlink1000OduAdmFiMMUNet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 2, 2)
)
_Winlink1000OduAdminFiMMUNetR1IP_Type = IpAddress
_Winlink1000OduAdminFiMMUNetR1IP_Object = MibScalar
winlink1000OduAdminFiMMUNetR1IP = _Winlink1000OduAdminFiMMUNetR1IP_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 2, 2, 1),
    _Winlink1000OduAdminFiMMUNetR1IP_Type()
)
winlink1000OduAdminFiMMUNetR1IP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMMUNetR1IP.setStatus("mandatory")
_Winlink1000OduAdminFiMMUNetLANTable_Object = MibTable
winlink1000OduAdminFiMMUNetLANTable = _Winlink1000OduAdminFiMMUNetLANTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 2, 2, 2)
)
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMMUNetLANTable.setStatus("mandatory")
_Winlink1000OduAdminFiMMUNetLANEntry_Object = MibTableRow
winlink1000OduAdminFiMMUNetLANEntry = _Winlink1000OduAdminFiMMUNetLANEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 2, 2, 2, 1)
)
winlink1000OduAdminFiMMUNetLANEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAdminFiMMUNetLANIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMMUNetLANEntry.setStatus("mandatory")


class _Winlink1000OduAdminFiMMUNetLANIndex_Type(Integer32):
    """Custom type winlink1000OduAdminFiMMUNetLANIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000OduAdminFiMMUNetLANIndex_Type.__name__ = "Integer32"
_Winlink1000OduAdminFiMMUNetLANIndex_Object = MibTableColumn
winlink1000OduAdminFiMMUNetLANIndex = _Winlink1000OduAdminFiMMUNetLANIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 2, 2, 2, 1, 1),
    _Winlink1000OduAdminFiMMUNetLANIndex_Type()
)
winlink1000OduAdminFiMMUNetLANIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMMUNetLANIndex.setStatus("mandatory")
_Winlink1000OduAdminFiMMUNetLAN_Type = IpAddress
_Winlink1000OduAdminFiMMUNetLAN_Object = MibTableColumn
winlink1000OduAdminFiMMUNetLAN = _Winlink1000OduAdminFiMMUNetLAN_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 2, 2, 2, 1, 2),
    _Winlink1000OduAdminFiMMUNetLAN_Type()
)
winlink1000OduAdminFiMMUNetLAN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMMUNetLAN.setStatus("mandatory")
_Winlink1000OduAdminFiMMUNetMaskLAN_Type = IpAddress
_Winlink1000OduAdminFiMMUNetMaskLAN_Object = MibTableColumn
winlink1000OduAdminFiMMUNetMaskLAN = _Winlink1000OduAdminFiMMUNetMaskLAN_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 2, 2, 2, 1, 3),
    _Winlink1000OduAdminFiMMUNetMaskLAN_Type()
)
winlink1000OduAdminFiMMUNetMaskLAN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMMUNetMaskLAN.setStatus("mandatory")
_Winlink1000OduAdminFiMMUNetL3VIP_Type = IpAddress
_Winlink1000OduAdminFiMMUNetL3VIP_Object = MibScalar
winlink1000OduAdminFiMMUNetL3VIP = _Winlink1000OduAdminFiMMUNetL3VIP_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 2, 2, 3),
    _Winlink1000OduAdminFiMMUNetL3VIP_Type()
)
winlink1000OduAdminFiMMUNetL3VIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMMUNetL3VIP.setStatus("mandatory")
_Winlink1000OduAdminFiMMUNetPeer_Type = IpAddress
_Winlink1000OduAdminFiMMUNetPeer_Object = MibScalar
winlink1000OduAdminFiMMUNetPeer = _Winlink1000OduAdminFiMMUNetPeer_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 2, 2, 4),
    _Winlink1000OduAdminFiMMUNetPeer_Type()
)
winlink1000OduAdminFiMMUNetPeer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMMUNetPeer.setStatus("mandatory")


class _Winlink1000OduAdminFiMMUNetType_Type(Integer32):
    """Custom type winlink1000OduAdminFiMMUNetType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("mdlEnabled", 1),
          ("mdlDisabled", 2),
          ("mdlNotSupported", 3),
          ("l3", 4),
          ("workModeAmount", 5))
    )


_Winlink1000OduAdminFiMMUNetType_Type.__name__ = "Integer32"
_Winlink1000OduAdminFiMMUNetType_Object = MibScalar
winlink1000OduAdminFiMMUNetType = _Winlink1000OduAdminFiMMUNetType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 2, 2, 5),
    _Winlink1000OduAdminFiMMUNetType_Type()
)
winlink1000OduAdminFiMMUNetType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMMUNetType.setStatus("mandatory")
_Winlink1000OduAdminFiMMUNetAddLearnVLANTable_Object = MibTable
winlink1000OduAdminFiMMUNetAddLearnVLANTable = _Winlink1000OduAdminFiMMUNetAddLearnVLANTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 2, 2, 6)
)
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMMUNetAddLearnVLANTable.setStatus("mandatory")
_Winlink1000OduAdminFiMMUNetAddLearnVLANEntry_Object = MibTableRow
winlink1000OduAdminFiMMUNetAddLearnVLANEntry = _Winlink1000OduAdminFiMMUNetAddLearnVLANEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 2, 2, 6, 1)
)
winlink1000OduAdminFiMMUNetAddLearnVLANEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAdminFiMMUNetAddLearnVLANIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMMUNetAddLearnVLANEntry.setStatus("mandatory")


class _Winlink1000OduAdminFiMMUNetAddLearnVLANIndex_Type(Integer32):
    """Custom type winlink1000OduAdminFiMMUNetAddLearnVLANIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000OduAdminFiMMUNetAddLearnVLANIndex_Type.__name__ = "Integer32"
_Winlink1000OduAdminFiMMUNetAddLearnVLANIndex_Object = MibTableColumn
winlink1000OduAdminFiMMUNetAddLearnVLANIndex = _Winlink1000OduAdminFiMMUNetAddLearnVLANIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 2, 2, 6, 1, 1),
    _Winlink1000OduAdminFiMMUNetAddLearnVLANIndex_Type()
)
winlink1000OduAdminFiMMUNetAddLearnVLANIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMMUNetAddLearnVLANIndex.setStatus("mandatory")
_Winlink1000OduAdminFiMMUNetAddLearnVLAN_Type = Integer32
_Winlink1000OduAdminFiMMUNetAddLearnVLAN_Object = MibTableColumn
winlink1000OduAdminFiMMUNetAddLearnVLAN = _Winlink1000OduAdminFiMMUNetAddLearnVLAN_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 2, 2, 6, 1, 2),
    _Winlink1000OduAdminFiMMUNetAddLearnVLAN_Type()
)
winlink1000OduAdminFiMMUNetAddLearnVLAN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMMUNetAddLearnVLAN.setStatus("mandatory")


class _Winlink1000OduAdminFiMMUIthoMuMode_Type(Integer32):
    """Custom type winlink1000OduAdminFiMMUIthoMuMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("singleMode", 1),
          ("dualMode", 2))
    )


_Winlink1000OduAdminFiMMUIthoMuMode_Type.__name__ = "Integer32"
_Winlink1000OduAdminFiMMUIthoMuMode_Object = MibScalar
winlink1000OduAdminFiMMUIthoMuMode = _Winlink1000OduAdminFiMMUIthoMuMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 72, 2, 2, 7),
    _Winlink1000OduAdminFiMMUIthoMuMode_Type()
)
winlink1000OduAdminFiMMUIthoMuMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdminFiMMUIthoMuMode.setStatus("mandatory")
_Winlink1000OduAdmDnsServerAddress_Type = DisplayString
_Winlink1000OduAdmDnsServerAddress_Object = MibScalar
winlink1000OduAdmDnsServerAddress = _Winlink1000OduAdmDnsServerAddress_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 73),
    _Winlink1000OduAdmDnsServerAddress_Type()
)
winlink1000OduAdmDnsServerAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmDnsServerAddress.setStatus("mandatory")
_Winlink1000OduAdmOwner_Type = DisplayString
_Winlink1000OduAdmOwner_Object = MibScalar
winlink1000OduAdmOwner = _Winlink1000OduAdmOwner_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 74),
    _Winlink1000OduAdmOwner_Type()
)
winlink1000OduAdmOwner.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmOwner.setStatus("mandatory")
_Winlink1000OduAdmContactDetails_Type = DisplayString
_Winlink1000OduAdmContactDetails_Object = MibScalar
winlink1000OduAdmContactDetails = _Winlink1000OduAdmContactDetails_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 75),
    _Winlink1000OduAdmContactDetails_Type()
)
winlink1000OduAdmContactDetails.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmContactDetails.setStatus("mandatory")
_Winlink1000OduAdmSDRRevision_Type = DisplayString
_Winlink1000OduAdmSDRRevision_Object = MibScalar
winlink1000OduAdmSDRRevision = _Winlink1000OduAdmSDRRevision_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 76),
    _Winlink1000OduAdmSDRRevision_Type()
)
winlink1000OduAdmSDRRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmSDRRevision.setStatus("mandatory")


class _Winlink1000OduAdmDyingGaspStatus_Type(Integer32):
    """Custom type winlink1000OduAdmDyingGaspStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("notSupportedHW", 1),
          ("supportedOnlyOnSu", 2),
          ("notActiveCheckPoe", 3),
          ("active", 4),
          ("testing", 5))
    )


_Winlink1000OduAdmDyingGaspStatus_Type.__name__ = "Integer32"
_Winlink1000OduAdmDyingGaspStatus_Object = MibScalar
winlink1000OduAdmDyingGaspStatus = _Winlink1000OduAdmDyingGaspStatus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 77),
    _Winlink1000OduAdmDyingGaspStatus_Type()
)
winlink1000OduAdmDyingGaspStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmDyingGaspStatus.setStatus("mandatory")
_Winlink1000OduAdmCurrentV4Address_ObjectIdentity = ObjectIdentity
winlink1000OduAdmCurrentV4Address = _Winlink1000OduAdmCurrentV4Address_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 78)
)


class _Winlink1000OduAdmCurrentV4Source_Type(Integer32):
    """Custom type winlink1000OduAdmCurrentV4Source based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("static", 1),
          ("dhcp", 2))
    )


_Winlink1000OduAdmCurrentV4Source_Type.__name__ = "Integer32"
_Winlink1000OduAdmCurrentV4Source_Object = MibScalar
winlink1000OduAdmCurrentV4Source = _Winlink1000OduAdmCurrentV4Source_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 78, 1),
    _Winlink1000OduAdmCurrentV4Source_Type()
)
winlink1000OduAdmCurrentV4Source.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmCurrentV4Source.setStatus("mandatory")
_Winlink1000OduAdmCurrentV4Addres_Type = IpAddress
_Winlink1000OduAdmCurrentV4Addres_Object = MibScalar
winlink1000OduAdmCurrentV4Addres = _Winlink1000OduAdmCurrentV4Addres_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 78, 2),
    _Winlink1000OduAdmCurrentV4Addres_Type()
)
winlink1000OduAdmCurrentV4Addres.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmCurrentV4Addres.setStatus("mandatory")
_Winlink1000OduAdmCurrentV4Mask_Type = IpAddress
_Winlink1000OduAdmCurrentV4Mask_Object = MibScalar
winlink1000OduAdmCurrentV4Mask = _Winlink1000OduAdmCurrentV4Mask_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 78, 3),
    _Winlink1000OduAdmCurrentV4Mask_Type()
)
winlink1000OduAdmCurrentV4Mask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmCurrentV4Mask.setStatus("mandatory")
_Winlink1000OduAdmCurrentV4Gateway_Type = IpAddress
_Winlink1000OduAdmCurrentV4Gateway_Object = MibScalar
winlink1000OduAdmCurrentV4Gateway = _Winlink1000OduAdmCurrentV4Gateway_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 78, 4),
    _Winlink1000OduAdmCurrentV4Gateway_Type()
)
winlink1000OduAdmCurrentV4Gateway.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmCurrentV4Gateway.setStatus("mandatory")
_Winlink1000OduAdmCurrentV4Params_Type = DisplayString
_Winlink1000OduAdmCurrentV4Params_Object = MibScalar
winlink1000OduAdmCurrentV4Params = _Winlink1000OduAdmCurrentV4Params_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 78, 5),
    _Winlink1000OduAdmCurrentV4Params_Type()
)
winlink1000OduAdmCurrentV4Params.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmCurrentV4Params.setStatus("mandatory")


class _Winlink1000OduAdmConfiguredV4Source_Type(Integer32):
    """Custom type winlink1000OduAdmConfiguredV4Source based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("static", 1),
          ("dhcp", 2))
    )


_Winlink1000OduAdmConfiguredV4Source_Type.__name__ = "Integer32"
_Winlink1000OduAdmConfiguredV4Source_Object = MibScalar
winlink1000OduAdmConfiguredV4Source = _Winlink1000OduAdmConfiguredV4Source_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 1, 78, 6),
    _Winlink1000OduAdmConfiguredV4Source_Type()
)
winlink1000OduAdmConfiguredV4Source.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmConfiguredV4Source.setStatus("mandatory")
_Winlink1000OduService_ObjectIdentity = ObjectIdentity
winlink1000OduService = _Winlink1000OduService_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2)
)


class _Winlink1000OduSrvMode_Type(Integer32):
    """Custom type winlink1000OduSrvMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("installMode", 1),
          ("normalMode", 2),
          ("slaveMode", 3),
          ("tempInstallMode", 4),
          ("inactiveMode", 5))
    )


_Winlink1000OduSrvMode_Type.__name__ = "Integer32"
_Winlink1000OduSrvMode_Object = MibScalar
winlink1000OduSrvMode = _Winlink1000OduSrvMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 1),
    _Winlink1000OduSrvMode_Type()
)
winlink1000OduSrvMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduSrvMode.setStatus("mandatory")
_Winlink1000OduSrvBridging_Type = Integer32
_Winlink1000OduSrvBridging_Object = MibScalar
winlink1000OduSrvBridging = _Winlink1000OduSrvBridging_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 3),
    _Winlink1000OduSrvBridging_Type()
)
winlink1000OduSrvBridging.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduSrvBridging.setStatus("mandatory")
_Winlink1000OduServiceRingTopology_ObjectIdentity = ObjectIdentity
winlink1000OduServiceRingTopology = _Winlink1000OduServiceRingTopology_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4)
)


class _Winlink1000OduSrvRingLinkMode_Type(Integer32):
    """Custom type winlink1000OduSrvRingLinkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("independentLink", 1),
          ("nonRpl", 2),
          ("rpl", 3))
    )


_Winlink1000OduSrvRingLinkMode_Type.__name__ = "Integer32"
_Winlink1000OduSrvRingLinkMode_Object = MibScalar
winlink1000OduSrvRingLinkMode = _Winlink1000OduSrvRingLinkMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 1),
    _Winlink1000OduSrvRingLinkMode_Type()
)
winlink1000OduSrvRingLinkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduSrvRingLinkMode.setStatus("mandatory")


class _Winlink1000OduSrvRingTopologySupported_Type(Integer32):
    """Custom type winlink1000OduSrvRingTopologySupported based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notSupported", 1),
          ("supported", 2))
    )


_Winlink1000OduSrvRingTopologySupported_Type.__name__ = "Integer32"
_Winlink1000OduSrvRingTopologySupported_Object = MibScalar
winlink1000OduSrvRingTopologySupported = _Winlink1000OduSrvRingTopologySupported_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 2),
    _Winlink1000OduSrvRingTopologySupported_Type()
)
winlink1000OduSrvRingTopologySupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduSrvRingTopologySupported.setStatus("mandatory")
_Winlink1000OduSrvRingVlanIdTable_Object = MibTable
winlink1000OduSrvRingVlanIdTable = _Winlink1000OduSrvRingVlanIdTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 3)
)
if mibBuilder.loadTexts:
    winlink1000OduSrvRingVlanIdTable.setStatus("mandatory")
_Winlink1000OduSrvRingVlanIdEntry_Object = MibTableRow
winlink1000OduSrvRingVlanIdEntry = _Winlink1000OduSrvRingVlanIdEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 3, 1)
)
winlink1000OduSrvRingVlanIdEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduSrvRingVlanIdIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduSrvRingVlanIdEntry.setStatus("mandatory")


class _Winlink1000OduSrvRingVlanIdIndex_Type(Integer32):
    """Custom type winlink1000OduSrvRingVlanIdIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_Winlink1000OduSrvRingVlanIdIndex_Type.__name__ = "Integer32"
_Winlink1000OduSrvRingVlanIdIndex_Object = MibTableColumn
winlink1000OduSrvRingVlanIdIndex = _Winlink1000OduSrvRingVlanIdIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 3, 1, 1),
    _Winlink1000OduSrvRingVlanIdIndex_Type()
)
winlink1000OduSrvRingVlanIdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduSrvRingVlanIdIndex.setStatus("mandatory")


class _Winlink1000OduSrvRingVlanId_Type(Integer32):
    """Custom type winlink1000OduSrvRingVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4094),
    )


_Winlink1000OduSrvRingVlanId_Type.__name__ = "Integer32"
_Winlink1000OduSrvRingVlanId_Object = MibTableColumn
winlink1000OduSrvRingVlanId = _Winlink1000OduSrvRingVlanId_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 3, 1, 2),
    _Winlink1000OduSrvRingVlanId_Type()
)
winlink1000OduSrvRingVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduSrvRingVlanId.setStatus("mandatory")


class _Winlink1000OduSrvRingEthStatus_Type(Integer32):
    """Custom type winlink1000OduSrvRingEthStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unblocked", 1),
          ("blocked", 2),
          ("notApplicable", 3))
    )


_Winlink1000OduSrvRingEthStatus_Type.__name__ = "Integer32"
_Winlink1000OduSrvRingEthStatus_Object = MibScalar
winlink1000OduSrvRingEthStatus = _Winlink1000OduSrvRingEthStatus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 4),
    _Winlink1000OduSrvRingEthStatus_Type()
)
winlink1000OduSrvRingEthStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduSrvRingEthStatus.setStatus("mandatory")
_Winlink1000OduSrvRingMaxAllowedTimeFromLastRpm_Type = Integer32
_Winlink1000OduSrvRingMaxAllowedTimeFromLastRpm_Object = MibScalar
winlink1000OduSrvRingMaxAllowedTimeFromLastRpm = _Winlink1000OduSrvRingMaxAllowedTimeFromLastRpm_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 5),
    _Winlink1000OduSrvRingMaxAllowedTimeFromLastRpm_Type()
)
winlink1000OduSrvRingMaxAllowedTimeFromLastRpm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduSrvRingMaxAllowedTimeFromLastRpm.setStatus("mandatory")
_Winlink1000OduSrvRingWTR_Type = Integer32
_Winlink1000OduSrvRingWTR_Object = MibScalar
winlink1000OduSrvRingWTR = _Winlink1000OduSrvRingWTR_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 4, 6),
    _Winlink1000OduSrvRingWTR_Type()
)
winlink1000OduSrvRingWTR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduSrvRingWTR.setStatus("mandatory")
_Winlink1000OduServiceQoS_ObjectIdentity = ObjectIdentity
winlink1000OduServiceQoS = _Winlink1000OduServiceQoS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5)
)


class _Winlink1000OduSrvQoSMode_Type(Integer32):
    """Custom type winlink1000OduSrvQoSMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notSupported", 1),
          ("notActive", 2),
          ("classVlan", 3),
          ("classDiffserv", 4))
    )


_Winlink1000OduSrvQoSMode_Type.__name__ = "Integer32"
_Winlink1000OduSrvQoSMode_Object = MibScalar
winlink1000OduSrvQoSMode = _Winlink1000OduSrvQoSMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 1),
    _Winlink1000OduSrvQoSMode_Type()
)
winlink1000OduSrvQoSMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduSrvQoSMode.setStatus("mandatory")
_Winlink1000OduSrvQoSConfTable_Object = MibTable
winlink1000OduSrvQoSConfTable = _Winlink1000OduSrvQoSConfTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 2)
)
if mibBuilder.loadTexts:
    winlink1000OduSrvQoSConfTable.setStatus("mandatory")
_Winlink1000OduSrvQoSConfEntry_Object = MibTableRow
winlink1000OduSrvQoSConfEntry = _Winlink1000OduSrvQoSConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 2, 1)
)
winlink1000OduSrvQoSConfEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduSrvQoSConfIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduSrvQoSConfEntry.setStatus("mandatory")


class _Winlink1000OduSrvQoSConfIndex_Type(Integer32):
    """Custom type winlink1000OduSrvQoSConfIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_Winlink1000OduSrvQoSConfIndex_Type.__name__ = "Integer32"
_Winlink1000OduSrvQoSConfIndex_Object = MibTableColumn
winlink1000OduSrvQoSConfIndex = _Winlink1000OduSrvQoSConfIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 2, 1, 1),
    _Winlink1000OduSrvQoSConfIndex_Type()
)
winlink1000OduSrvQoSConfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduSrvQoSConfIndex.setStatus("mandatory")


class _Winlink1000OduSrvConfVlanQGroups_Type(Integer32):
    """Custom type winlink1000OduSrvConfVlanQGroups based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Winlink1000OduSrvConfVlanQGroups_Type.__name__ = "Integer32"
_Winlink1000OduSrvConfVlanQGroups_Object = MibTableColumn
winlink1000OduSrvConfVlanQGroups = _Winlink1000OduSrvConfVlanQGroups_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 2, 1, 2),
    _Winlink1000OduSrvConfVlanQGroups_Type()
)
winlink1000OduSrvConfVlanQGroups.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduSrvConfVlanQGroups.setStatus("mandatory")


class _Winlink1000OduSrvConfDiffservQGroups_Type(Integer32):
    """Custom type winlink1000OduSrvConfDiffservQGroups based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 48),
    )


_Winlink1000OduSrvConfDiffservQGroups_Type.__name__ = "Integer32"
_Winlink1000OduSrvConfDiffservQGroups_Object = MibTableColumn
winlink1000OduSrvConfDiffservQGroups = _Winlink1000OduSrvConfDiffservQGroups_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 2, 1, 3),
    _Winlink1000OduSrvConfDiffservQGroups_Type()
)
winlink1000OduSrvConfDiffservQGroups.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduSrvConfDiffservQGroups.setStatus("mandatory")
_Winlink1000OduSrvConfQueMir_Type = Integer32
_Winlink1000OduSrvConfQueMir_Object = MibTableColumn
winlink1000OduSrvConfQueMir = _Winlink1000OduSrvConfQueMir_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 2, 1, 4),
    _Winlink1000OduSrvConfQueMir_Type()
)
winlink1000OduSrvConfQueMir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduSrvConfQueMir.setStatus("mandatory")


class _Winlink1000OduSrvConfQueWeight_Type(Integer32):
    """Custom type winlink1000OduSrvConfQueWeight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_Winlink1000OduSrvConfQueWeight_Type.__name__ = "Integer32"
_Winlink1000OduSrvConfQueWeight_Object = MibTableColumn
winlink1000OduSrvConfQueWeight = _Winlink1000OduSrvConfQueWeight_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 2, 1, 5),
    _Winlink1000OduSrvConfQueWeight_Type()
)
winlink1000OduSrvConfQueWeight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduSrvConfQueWeight.setStatus("mandatory")
_Winlink1000OduSrvQoSVlanQGroupsSetStr_Type = DisplayString
_Winlink1000OduSrvQoSVlanQGroupsSetStr_Object = MibScalar
winlink1000OduSrvQoSVlanQGroupsSetStr = _Winlink1000OduSrvQoSVlanQGroupsSetStr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 3),
    _Winlink1000OduSrvQoSVlanQGroupsSetStr_Type()
)
winlink1000OduSrvQoSVlanQGroupsSetStr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduSrvQoSVlanQGroupsSetStr.setStatus("mandatory")
_Winlink1000OduSrvQoSDiffservQGroupsSetStr_Type = DisplayString
_Winlink1000OduSrvQoSDiffservQGroupsSetStr_Object = MibScalar
winlink1000OduSrvQoSDiffservQGroupsSetStr = _Winlink1000OduSrvQoSDiffservQGroupsSetStr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 4),
    _Winlink1000OduSrvQoSDiffservQGroupsSetStr_Type()
)
winlink1000OduSrvQoSDiffservQGroupsSetStr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduSrvQoSDiffservQGroupsSetStr.setStatus("mandatory")


class _Winlink1000OduSrvQoSMaxRTQuePercent_Type(Integer32):
    """Custom type winlink1000OduSrvQoSMaxRTQuePercent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_Winlink1000OduSrvQoSMaxRTQuePercent_Type.__name__ = "Integer32"
_Winlink1000OduSrvQoSMaxRTQuePercent_Object = MibScalar
winlink1000OduSrvQoSMaxRTQuePercent = _Winlink1000OduSrvQoSMaxRTQuePercent_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 5, 5),
    _Winlink1000OduSrvQoSMaxRTQuePercent_Type()
)
winlink1000OduSrvQoSMaxRTQuePercent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduSrvQoSMaxRTQuePercent.setStatus("mandatory")
_Winlink1000OduServiceVlan_ObjectIdentity = ObjectIdentity
winlink1000OduServiceVlan = _Winlink1000OduServiceVlan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6)
)


class _Winlink1000OduSrvVlanSupport_Type(Integer32):
    """Custom type winlink1000OduSrvVlanSupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notSupported", 1),
          ("supported", 2),
          ("available", 3))
    )


_Winlink1000OduSrvVlanSupport_Type.__name__ = "Integer32"
_Winlink1000OduSrvVlanSupport_Object = MibScalar
winlink1000OduSrvVlanSupport = _Winlink1000OduSrvVlanSupport_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6, 1),
    _Winlink1000OduSrvVlanSupport_Type()
)
winlink1000OduSrvVlanSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduSrvVlanSupport.setStatus("mandatory")


class _Winlink1000OduSrvVlanIngressMode_Type(Integer32):
    """Custom type winlink1000OduSrvVlanIngressMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("transparent", 1),
          ("untagAll", 2),
          ("filter", 3))
    )


_Winlink1000OduSrvVlanIngressMode_Type.__name__ = "Integer32"
_Winlink1000OduSrvVlanIngressMode_Object = MibScalar
winlink1000OduSrvVlanIngressMode = _Winlink1000OduSrvVlanIngressMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6, 2),
    _Winlink1000OduSrvVlanIngressMode_Type()
)
winlink1000OduSrvVlanIngressMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduSrvVlanIngressMode.setStatus("mandatory")


class _Winlink1000OduSrvVlanEgressMode_Type(Integer32):
    """Custom type winlink1000OduSrvVlanEgressMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("transparent", 1),
          ("tag", 2),
          ("provider", 3))
    )


_Winlink1000OduSrvVlanEgressMode_Type.__name__ = "Integer32"
_Winlink1000OduSrvVlanEgressMode_Object = MibScalar
winlink1000OduSrvVlanEgressMode = _Winlink1000OduSrvVlanEgressMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6, 3),
    _Winlink1000OduSrvVlanEgressMode_Type()
)
winlink1000OduSrvVlanEgressMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduSrvVlanEgressMode.setStatus("mandatory")


class _Winlink1000OduSrvEgressTag_Type(Integer32):
    """Custom type winlink1000OduSrvEgressTag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 40947),
    )


_Winlink1000OduSrvEgressTag_Type.__name__ = "Integer32"
_Winlink1000OduSrvEgressTag_Object = MibScalar
winlink1000OduSrvEgressTag = _Winlink1000OduSrvEgressTag_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6, 4),
    _Winlink1000OduSrvEgressTag_Type()
)
winlink1000OduSrvEgressTag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduSrvEgressTag.setStatus("mandatory")


class _Winlink1000OduSrvEgressProviderTag_Type(Integer32):
    """Custom type winlink1000OduSrvEgressProviderTag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 40947),
    )


_Winlink1000OduSrvEgressProviderTag_Type.__name__ = "Integer32"
_Winlink1000OduSrvEgressProviderTag_Object = MibScalar
winlink1000OduSrvEgressProviderTag = _Winlink1000OduSrvEgressProviderTag_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6, 5),
    _Winlink1000OduSrvEgressProviderTag_Type()
)
winlink1000OduSrvEgressProviderTag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduSrvEgressProviderTag.setStatus("mandatory")
_Winlink1000OduSrvVlanIngressAllowedVIDs_Type = DisplayString
_Winlink1000OduSrvVlanIngressAllowedVIDs_Object = MibScalar
winlink1000OduSrvVlanIngressAllowedVIDs = _Winlink1000OduSrvVlanIngressAllowedVIDs_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6, 6),
    _Winlink1000OduSrvVlanIngressAllowedVIDs_Type()
)
winlink1000OduSrvVlanIngressAllowedVIDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduSrvVlanIngressAllowedVIDs.setStatus("mandatory")
_Winlink1000OduSrvVlanDisable_Type = Integer32
_Winlink1000OduSrvVlanDisable_Object = MibScalar
winlink1000OduSrvVlanDisable = _Winlink1000OduSrvVlanDisable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6, 7),
    _Winlink1000OduSrvVlanDisable_Type()
)
winlink1000OduSrvVlanDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduSrvVlanDisable.setStatus("mandatory")
_Winlink1000OduServiceVlanProviderListTPIDstr_Type = DisplayString
_Winlink1000OduServiceVlanProviderListTPIDstr_Object = MibScalar
winlink1000OduServiceVlanProviderListTPIDstr = _Winlink1000OduServiceVlanProviderListTPIDstr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 6, 8),
    _Winlink1000OduServiceVlanProviderListTPIDstr_Type()
)
winlink1000OduServiceVlanProviderListTPIDstr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduServiceVlanProviderListTPIDstr.setStatus("mandatory")


class _Winlink1000OduDhcpRelayAgent_Type(Integer32):
    """Custom type winlink1000OduDhcpRelayAgent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_Winlink1000OduDhcpRelayAgent_Type.__name__ = "Integer32"
_Winlink1000OduDhcpRelayAgent_Object = MibScalar
winlink1000OduDhcpRelayAgent = _Winlink1000OduDhcpRelayAgent_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 7),
    _Winlink1000OduDhcpRelayAgent_Type()
)
winlink1000OduDhcpRelayAgent.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduDhcpRelayAgent.setStatus("mandatory")
_Winlink1000OduServiceUserAuthentication_ObjectIdentity = ObjectIdentity
winlink1000OduServiceUserAuthentication = _Winlink1000OduServiceUserAuthentication_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 8)
)


class _Winlink1000OduServiceUserAuthenticationMode_Type(Integer32):
    """Custom type winlink1000OduServiceUserAuthenticationMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_Winlink1000OduServiceUserAuthenticationMode_Type.__name__ = "Integer32"
_Winlink1000OduServiceUserAuthenticationMode_Object = MibScalar
winlink1000OduServiceUserAuthenticationMode = _Winlink1000OduServiceUserAuthenticationMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 8, 1),
    _Winlink1000OduServiceUserAuthenticationMode_Type()
)
winlink1000OduServiceUserAuthenticationMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceUserAuthenticationMode.setStatus("mandatory")
_Winlink1000OduServiceUserAuthenticationBypassTable_Object = MibTable
winlink1000OduServiceUserAuthenticationBypassTable = _Winlink1000OduServiceUserAuthenticationBypassTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 8, 2)
)
if mibBuilder.loadTexts:
    winlink1000OduServiceUserAuthenticationBypassTable.setStatus("mandatory")
_Winlink1000OduServiceUserAuthenticationBypassEntry_Object = MibTableRow
winlink1000OduServiceUserAuthenticationBypassEntry = _Winlink1000OduServiceUserAuthenticationBypassEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 8, 2, 1)
)
winlink1000OduServiceUserAuthenticationBypassEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduServiceUserAuthenticationBypassIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduServiceUserAuthenticationBypassEntry.setStatus("mandatory")


class _Winlink1000OduServiceUserAuthenticationBypassIndex_Type(Integer32):
    """Custom type winlink1000OduServiceUserAuthenticationBypassIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000OduServiceUserAuthenticationBypassIndex_Type.__name__ = "Integer32"
_Winlink1000OduServiceUserAuthenticationBypassIndex_Object = MibTableColumn
winlink1000OduServiceUserAuthenticationBypassIndex = _Winlink1000OduServiceUserAuthenticationBypassIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 8, 2, 1, 1),
    _Winlink1000OduServiceUserAuthenticationBypassIndex_Type()
)
winlink1000OduServiceUserAuthenticationBypassIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduServiceUserAuthenticationBypassIndex.setStatus("mandatory")
_Winlink1000OduServiceUserAuthenticationBypassIp_Type = IpAddress
_Winlink1000OduServiceUserAuthenticationBypassIp_Object = MibTableColumn
winlink1000OduServiceUserAuthenticationBypassIp = _Winlink1000OduServiceUserAuthenticationBypassIp_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 8, 2, 1, 2),
    _Winlink1000OduServiceUserAuthenticationBypassIp_Type()
)
winlink1000OduServiceUserAuthenticationBypassIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceUserAuthenticationBypassIp.setStatus("mandatory")
_Winlink1000OduServiceUserAuthenticationBypassNetMask_Type = IpAddress
_Winlink1000OduServiceUserAuthenticationBypassNetMask_Object = MibTableColumn
winlink1000OduServiceUserAuthenticationBypassNetMask = _Winlink1000OduServiceUserAuthenticationBypassNetMask_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 8, 2, 1, 3),
    _Winlink1000OduServiceUserAuthenticationBypassNetMask_Type()
)
winlink1000OduServiceUserAuthenticationBypassNetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceUserAuthenticationBypassNetMask.setStatus("mandatory")
_Winlink1000OduServiceUserAuthenticationRadiusServerTable_Object = MibTable
winlink1000OduServiceUserAuthenticationRadiusServerTable = _Winlink1000OduServiceUserAuthenticationRadiusServerTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 8, 3)
)
if mibBuilder.loadTexts:
    winlink1000OduServiceUserAuthenticationRadiusServerTable.setStatus("mandatory")
_Winlink1000OduServiceUserAuthenticationRadiusServerEntry_Object = MibTableRow
winlink1000OduServiceUserAuthenticationRadiusServerEntry = _Winlink1000OduServiceUserAuthenticationRadiusServerEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 8, 3, 1)
)
winlink1000OduServiceUserAuthenticationRadiusServerEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduServiceUserAuthenticationRadiusServerIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduServiceUserAuthenticationRadiusServerEntry.setStatus("mandatory")


class _Winlink1000OduServiceUserAuthenticationRadiusServerIndex_Type(Integer32):
    """Custom type winlink1000OduServiceUserAuthenticationRadiusServerIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000OduServiceUserAuthenticationRadiusServerIndex_Type.__name__ = "Integer32"
_Winlink1000OduServiceUserAuthenticationRadiusServerIndex_Object = MibTableColumn
winlink1000OduServiceUserAuthenticationRadiusServerIndex = _Winlink1000OduServiceUserAuthenticationRadiusServerIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 8, 3, 1, 1),
    _Winlink1000OduServiceUserAuthenticationRadiusServerIndex_Type()
)
winlink1000OduServiceUserAuthenticationRadiusServerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduServiceUserAuthenticationRadiusServerIndex.setStatus("mandatory")
_Winlink1000OduServiceUserAuthenticationRadiusServerIpAddr_Type = IpAddress
_Winlink1000OduServiceUserAuthenticationRadiusServerIpAddr_Object = MibTableColumn
winlink1000OduServiceUserAuthenticationRadiusServerIpAddr = _Winlink1000OduServiceUserAuthenticationRadiusServerIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 8, 3, 1, 2),
    _Winlink1000OduServiceUserAuthenticationRadiusServerIpAddr_Type()
)
winlink1000OduServiceUserAuthenticationRadiusServerIpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceUserAuthenticationRadiusServerIpAddr.setStatus("mandatory")
_Winlink1000OduServiceUserAuthenticationRadiusServerPort_Type = Integer32
_Winlink1000OduServiceUserAuthenticationRadiusServerPort_Object = MibTableColumn
winlink1000OduServiceUserAuthenticationRadiusServerPort = _Winlink1000OduServiceUserAuthenticationRadiusServerPort_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 8, 3, 1, 3),
    _Winlink1000OduServiceUserAuthenticationRadiusServerPort_Type()
)
winlink1000OduServiceUserAuthenticationRadiusServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceUserAuthenticationRadiusServerPort.setStatus("mandatory")
_Winlink1000OduServiceUserAuthenticationRadiusServerSecret_Type = DisplayString
_Winlink1000OduServiceUserAuthenticationRadiusServerSecret_Object = MibTableColumn
winlink1000OduServiceUserAuthenticationRadiusServerSecret = _Winlink1000OduServiceUserAuthenticationRadiusServerSecret_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 8, 3, 1, 4),
    _Winlink1000OduServiceUserAuthenticationRadiusServerSecret_Type()
)
winlink1000OduServiceUserAuthenticationRadiusServerSecret.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceUserAuthenticationRadiusServerSecret.setStatus("mandatory")


class _Winlink1000OduServiceUserAuthenticationRadiusServerConnectivity_Type(Integer32):
    """Custom type winlink1000OduServiceUserAuthenticationRadiusServerConnectivity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("success", 1),
          ("noServerResponse", 2),
          ("noServer", 3),
          ("testing", 4),
          ("badSecret", 5),
          ("timeout", 6))
    )


_Winlink1000OduServiceUserAuthenticationRadiusServerConnectivity_Type.__name__ = "Integer32"
_Winlink1000OduServiceUserAuthenticationRadiusServerConnectivity_Object = MibTableColumn
winlink1000OduServiceUserAuthenticationRadiusServerConnectivity = _Winlink1000OduServiceUserAuthenticationRadiusServerConnectivity_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 8, 3, 1, 5),
    _Winlink1000OduServiceUserAuthenticationRadiusServerConnectivity_Type()
)
winlink1000OduServiceUserAuthenticationRadiusServerConnectivity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceUserAuthenticationRadiusServerConnectivity.setStatus("mandatory")
_Winlink1000OduServiceUserAuthenticationRadiusServerNumOfRetries_Type = Integer32
_Winlink1000OduServiceUserAuthenticationRadiusServerNumOfRetries_Object = MibTableColumn
winlink1000OduServiceUserAuthenticationRadiusServerNumOfRetries = _Winlink1000OduServiceUserAuthenticationRadiusServerNumOfRetries_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 8, 3, 1, 6),
    _Winlink1000OduServiceUserAuthenticationRadiusServerNumOfRetries_Type()
)
winlink1000OduServiceUserAuthenticationRadiusServerNumOfRetries.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceUserAuthenticationRadiusServerNumOfRetries.setStatus("mandatory")
_Winlink1000OduServiceUserAuthenticationRadiusServerTimeout_Type = Integer32
_Winlink1000OduServiceUserAuthenticationRadiusServerTimeout_Object = MibTableColumn
winlink1000OduServiceUserAuthenticationRadiusServerTimeout = _Winlink1000OduServiceUserAuthenticationRadiusServerTimeout_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 8, 3, 1, 7),
    _Winlink1000OduServiceUserAuthenticationRadiusServerTimeout_Type()
)
winlink1000OduServiceUserAuthenticationRadiusServerTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceUserAuthenticationRadiusServerTimeout.setStatus("mandatory")
_Winlink1000OduServiceUserAuthenticationRadiusAccess_Type = DisplayString
_Winlink1000OduServiceUserAuthenticationRadiusAccess_Object = MibScalar
winlink1000OduServiceUserAuthenticationRadiusAccess = _Winlink1000OduServiceUserAuthenticationRadiusAccess_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 8, 4),
    _Winlink1000OduServiceUserAuthenticationRadiusAccess_Type()
)
winlink1000OduServiceUserAuthenticationRadiusAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceUserAuthenticationRadiusAccess.setStatus("mandatory")
_Winlink1000OduServiceUserAuthenticationToken_Type = DisplayString
_Winlink1000OduServiceUserAuthenticationToken_Object = MibScalar
winlink1000OduServiceUserAuthenticationToken = _Winlink1000OduServiceUserAuthenticationToken_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 8, 5),
    _Winlink1000OduServiceUserAuthenticationToken_Type()
)
winlink1000OduServiceUserAuthenticationToken.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceUserAuthenticationToken.setStatus("mandatory")
_Winlink1000OduServiceAcl_ObjectIdentity = ObjectIdentity
winlink1000OduServiceAcl = _Winlink1000OduServiceAcl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 9)
)


class _Winlink1000OduServiceAclMode_Type(Integer32):
    """Custom type winlink1000OduServiceAclMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_Winlink1000OduServiceAclMode_Type.__name__ = "Integer32"
_Winlink1000OduServiceAclMode_Object = MibScalar
winlink1000OduServiceAclMode = _Winlink1000OduServiceAclMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 9, 1),
    _Winlink1000OduServiceAclMode_Type()
)
winlink1000OduServiceAclMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceAclMode.setStatus("mandatory")
_Winlink1000OduServiceAclTable_Object = MibTable
winlink1000OduServiceAclTable = _Winlink1000OduServiceAclTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 9, 2)
)
if mibBuilder.loadTexts:
    winlink1000OduServiceAclTable.setStatus("mandatory")
_Winlink1000OduServiceAclEntry_Object = MibTableRow
winlink1000OduServiceAclEntry = _Winlink1000OduServiceAclEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 9, 2, 1)
)
winlink1000OduServiceAclEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduServiceAclIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduServiceAclEntry.setStatus("mandatory")


class _Winlink1000OduServiceAclIndex_Type(Integer32):
    """Custom type winlink1000OduServiceAclIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000OduServiceAclIndex_Type.__name__ = "Integer32"
_Winlink1000OduServiceAclIndex_Object = MibTableColumn
winlink1000OduServiceAclIndex = _Winlink1000OduServiceAclIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 9, 2, 1, 1),
    _Winlink1000OduServiceAclIndex_Type()
)
winlink1000OduServiceAclIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduServiceAclIndex.setStatus("mandatory")
_Winlink1000OduServiceAclIp_Type = IpAddress
_Winlink1000OduServiceAclIp_Object = MibTableColumn
winlink1000OduServiceAclIp = _Winlink1000OduServiceAclIp_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 9, 2, 1, 2),
    _Winlink1000OduServiceAclIp_Type()
)
winlink1000OduServiceAclIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceAclIp.setStatus("mandatory")
_Winlink1000OduServiceAclNetMask_Type = IpAddress
_Winlink1000OduServiceAclNetMask_Object = MibTableColumn
winlink1000OduServiceAclNetMask = _Winlink1000OduServiceAclNetMask_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 9, 2, 1, 3),
    _Winlink1000OduServiceAclNetMask_Type()
)
winlink1000OduServiceAclNetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceAclNetMask.setStatus("mandatory")


class _Winlink1000OduDhcpRelayAgentCircuitIdSource_Type(Integer32):
    """Custom type winlink1000OduDhcpRelayAgentCircuitIdSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("hbsMacAaddress", 1),
          ("hbsName", 2),
          ("hbsSerial", 3))
    )


_Winlink1000OduDhcpRelayAgentCircuitIdSource_Type.__name__ = "Integer32"
_Winlink1000OduDhcpRelayAgentCircuitIdSource_Object = MibScalar
winlink1000OduDhcpRelayAgentCircuitIdSource = _Winlink1000OduDhcpRelayAgentCircuitIdSource_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 10),
    _Winlink1000OduDhcpRelayAgentCircuitIdSource_Type()
)
winlink1000OduDhcpRelayAgentCircuitIdSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduDhcpRelayAgentCircuitIdSource.setStatus("mandatory")


class _Winlink1000OduDhcpRelayAgentRemoteIdSource_Type(Integer32):
    """Custom type winlink1000OduDhcpRelayAgentRemoteIdSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("hsuMacAddress", 1),
          ("hsuName", 2),
          ("hsuSerial", 3))
    )


_Winlink1000OduDhcpRelayAgentRemoteIdSource_Type.__name__ = "Integer32"
_Winlink1000OduDhcpRelayAgentRemoteIdSource_Object = MibScalar
winlink1000OduDhcpRelayAgentRemoteIdSource = _Winlink1000OduDhcpRelayAgentRemoteIdSource_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 11),
    _Winlink1000OduDhcpRelayAgentRemoteIdSource_Type()
)
winlink1000OduDhcpRelayAgentRemoteIdSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduDhcpRelayAgentRemoteIdSource.setStatus("mandatory")


class _Winlink1000OduDhcpRelayAgentConcatenatedCircuitIdMode_Type(Integer32):
    """Custom type winlink1000OduDhcpRelayAgentConcatenatedCircuitIdMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_Winlink1000OduDhcpRelayAgentConcatenatedCircuitIdMode_Type.__name__ = "Integer32"
_Winlink1000OduDhcpRelayAgentConcatenatedCircuitIdMode_Object = MibScalar
winlink1000OduDhcpRelayAgentConcatenatedCircuitIdMode = _Winlink1000OduDhcpRelayAgentConcatenatedCircuitIdMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 12),
    _Winlink1000OduDhcpRelayAgentConcatenatedCircuitIdMode_Type()
)
winlink1000OduDhcpRelayAgentConcatenatedCircuitIdMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduDhcpRelayAgentConcatenatedCircuitIdMode.setStatus("mandatory")
_Winlink1000OduServiceRedundancy_ObjectIdentity = ObjectIdentity
winlink1000OduServiceRedundancy = _Winlink1000OduServiceRedundancy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 13)
)


class _Winlink1000OduSrvRedundancyRole_Type(Integer32):
    """Custom type winlink1000OduSrvRedundancyRole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("primary", 1),
          ("secondary", 2),
          ("none", 3))
    )


_Winlink1000OduSrvRedundancyRole_Type.__name__ = "Integer32"
_Winlink1000OduSrvRedundancyRole_Object = MibScalar
winlink1000OduSrvRedundancyRole = _Winlink1000OduSrvRedundancyRole_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 13, 1),
    _Winlink1000OduSrvRedundancyRole_Type()
)
winlink1000OduSrvRedundancyRole.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduSrvRedundancyRole.setStatus("mandatory")
_Winlink1000OduSrvRedundancyPeerIP_Type = IpAddress
_Winlink1000OduSrvRedundancyPeerIP_Object = MibScalar
winlink1000OduSrvRedundancyPeerIP = _Winlink1000OduSrvRedundancyPeerIP_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 13, 2),
    _Winlink1000OduSrvRedundancyPeerIP_Type()
)
winlink1000OduSrvRedundancyPeerIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduSrvRedundancyPeerIP.setStatus("mandatory")
_Winlink1000OduSrvRedundancyCheckPointIP_Type = IpAddress
_Winlink1000OduSrvRedundancyCheckPointIP_Object = MibScalar
winlink1000OduSrvRedundancyCheckPointIP = _Winlink1000OduSrvRedundancyCheckPointIP_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 13, 3),
    _Winlink1000OduSrvRedundancyCheckPointIP_Type()
)
winlink1000OduSrvRedundancyCheckPointIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduSrvRedundancyCheckPointIP.setStatus("mandatory")
_Winlink1000OduSrvRedundancyFailureReason_Type = OctetString
_Winlink1000OduSrvRedundancyFailureReason_Object = MibScalar
winlink1000OduSrvRedundancyFailureReason = _Winlink1000OduSrvRedundancyFailureReason_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 13, 4),
    _Winlink1000OduSrvRedundancyFailureReason_Type()
)
winlink1000OduSrvRedundancyFailureReason.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduSrvRedundancyFailureReason.setStatus("mandatory")
_Winlink1000OduSrvRedundancyCpeWirelessConnectionTO_Type = IpAddress
_Winlink1000OduSrvRedundancyCpeWirelessConnectionTO_Object = MibScalar
winlink1000OduSrvRedundancyCpeWirelessConnectionTO = _Winlink1000OduSrvRedundancyCpeWirelessConnectionTO_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 2, 13, 5),
    _Winlink1000OduSrvRedundancyCpeWirelessConnectionTO_Type()
)
winlink1000OduSrvRedundancyCpeWirelessConnectionTO.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduSrvRedundancyCpeWirelessConnectionTO.setStatus("mandatory")
_Winlink1000OduEthernet_ObjectIdentity = ObjectIdentity
winlink1000OduEthernet = _Winlink1000OduEthernet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3)
)
_Winlink1000OduEthernetRemainingRate_Type = Integer32
_Winlink1000OduEthernetRemainingRate_Object = MibScalar
winlink1000OduEthernetRemainingRate = _Winlink1000OduEthernetRemainingRate_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 1),
    _Winlink1000OduEthernetRemainingRate_Type()
)
winlink1000OduEthernetRemainingRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduEthernetRemainingRate.setStatus("mandatory")
_Winlink1000OduEthernetIfTable_Object = MibTable
winlink1000OduEthernetIfTable = _Winlink1000OduEthernetIfTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2)
)
if mibBuilder.loadTexts:
    winlink1000OduEthernetIfTable.setStatus("mandatory")
_Winlink1000OduEthernetIfEntry_Object = MibTableRow
winlink1000OduEthernetIfEntry = _Winlink1000OduEthernetIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2, 1)
)
winlink1000OduEthernetIfEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduEthernetIfIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduEthernetIfEntry.setStatus("mandatory")


class _Winlink1000OduEthernetIfIndex_Type(Integer32):
    """Custom type winlink1000OduEthernetIfIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000OduEthernetIfIndex_Type.__name__ = "Integer32"
_Winlink1000OduEthernetIfIndex_Object = MibTableColumn
winlink1000OduEthernetIfIndex = _Winlink1000OduEthernetIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2, 1, 1),
    _Winlink1000OduEthernetIfIndex_Type()
)
winlink1000OduEthernetIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduEthernetIfIndex.setStatus("mandatory")
_Winlink1000OduEthernetIfAddress_Type = DisplayString
_Winlink1000OduEthernetIfAddress_Object = MibTableColumn
winlink1000OduEthernetIfAddress = _Winlink1000OduEthernetIfAddress_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2, 1, 5),
    _Winlink1000OduEthernetIfAddress_Type()
)
winlink1000OduEthernetIfAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduEthernetIfAddress.setStatus("mandatory")


class _Winlink1000OduEthernetIfAdminStatus_Type(Integer32):
    """Custom type winlink1000OduEthernetIfAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              5,
              10,
              11,
              15,
              16,
              21,
              254,
              255)
        )
    )
    namedValues = NamedValues(
        *(("portAutoSense", 1),
          ("portAutoSense100Mbps", 5),
          ("forceHalfDuplex10Mbps", 10),
          ("forceFullDuplex10Mbps", 11),
          ("forceHalfDuplex100Mbps", 15),
          ("forceFullDuplex100Mbps", 16),
          ("forceFullDuplex1000Mbps", 21),
          ("disablePoePort", 254),
          ("disablePort", 255))
    )


_Winlink1000OduEthernetIfAdminStatus_Type.__name__ = "Integer32"
_Winlink1000OduEthernetIfAdminStatus_Object = MibTableColumn
winlink1000OduEthernetIfAdminStatus = _Winlink1000OduEthernetIfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2, 1, 6),
    _Winlink1000OduEthernetIfAdminStatus_Type()
)
winlink1000OduEthernetIfAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduEthernetIfAdminStatus.setStatus("mandatory")


class _Winlink1000OduEthernetIfOperStatus_Type(Integer32):
    """Custom type winlink1000OduEthernetIfOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              10,
              11,
              15,
              16,
              20,
              21,
              65535)
        )
    )
    namedValues = NamedValues(
        *(("notConnected", 1),
          ("connectedHalfDuplex10Mbps", 10),
          ("connectedFullDuplex10Mbps", 11),
          ("connectedHalfDuplex100Mbps", 15),
          ("connectedFullDuplex100Mbps", 16),
          ("connectedHalfDuplex1000Mbps", 20),
          ("connectedFullDuplex1000Mbps", 21),
          ("unknown", 65535))
    )


_Winlink1000OduEthernetIfOperStatus_Type.__name__ = "Integer32"
_Winlink1000OduEthernetIfOperStatus_Object = MibTableColumn
winlink1000OduEthernetIfOperStatus = _Winlink1000OduEthernetIfOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2, 1, 7),
    _Winlink1000OduEthernetIfOperStatus_Type()
)
winlink1000OduEthernetIfOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduEthernetIfOperStatus.setStatus("mandatory")


class _Winlink1000OduEthernetIfFailAction_Type(Integer32):
    """Custom type winlink1000OduEthernetIfFailAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              10,
              11,
              255)
        )
    )
    namedValues = NamedValues(
        *(("faNoAction", 1),
          ("faForceHalfDuplex10Mbps", 10),
          ("faForceFullDuplex10Mbps", 11),
          ("faDisablePort", 255))
    )


_Winlink1000OduEthernetIfFailAction_Type.__name__ = "Integer32"
_Winlink1000OduEthernetIfFailAction_Object = MibTableColumn
winlink1000OduEthernetIfFailAction = _Winlink1000OduEthernetIfFailAction_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2, 1, 8),
    _Winlink1000OduEthernetIfFailAction_Type()
)
winlink1000OduEthernetIfFailAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduEthernetIfFailAction.setStatus("mandatory")
_Winlink1000OduEthernetIf1588v2PTPEventRXRate_Type = Integer32
_Winlink1000OduEthernetIf1588v2PTPEventRXRate_Object = MibTableColumn
winlink1000OduEthernetIf1588v2PTPEventRXRate = _Winlink1000OduEthernetIf1588v2PTPEventRXRate_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2, 1, 9),
    _Winlink1000OduEthernetIf1588v2PTPEventRXRate_Type()
)
winlink1000OduEthernetIf1588v2PTPEventRXRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduEthernetIf1588v2PTPEventRXRate.setStatus("mandatory")
_Winlink1000OduEthernetIf1588v2PTPEventTXRate_Type = Integer32
_Winlink1000OduEthernetIf1588v2PTPEventTXRate_Object = MibTableColumn
winlink1000OduEthernetIf1588v2PTPEventTXRate = _Winlink1000OduEthernetIf1588v2PTPEventTXRate_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 2, 1, 10),
    _Winlink1000OduEthernetIf1588v2PTPEventTXRate_Type()
)
winlink1000OduEthernetIf1588v2PTPEventTXRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduEthernetIf1588v2PTPEventTXRate.setStatus("mandatory")
_Winlink1000OduEthernetNumOfPorts_Type = Integer32
_Winlink1000OduEthernetNumOfPorts_Object = MibScalar
winlink1000OduEthernetNumOfPorts = _Winlink1000OduEthernetNumOfPorts_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 3),
    _Winlink1000OduEthernetNumOfPorts_Type()
)
winlink1000OduEthernetNumOfPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduEthernetNumOfPorts.setStatus("mandatory")


class _Winlink1000OduEthernetGbeSupported_Type(Integer32):
    """Custom type winlink1000OduEthernetGbeSupported based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notSupported", 1),
          ("supported", 2))
    )


_Winlink1000OduEthernetGbeSupported_Type.__name__ = "Integer32"
_Winlink1000OduEthernetGbeSupported_Object = MibScalar
winlink1000OduEthernetGbeSupported = _Winlink1000OduEthernetGbeSupported_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 4),
    _Winlink1000OduEthernetGbeSupported_Type()
)
winlink1000OduEthernetGbeSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduEthernetGbeSupported.setStatus("mandatory")
_Winlink1000OduEthernetSfpProperties_Type = DisplayString
_Winlink1000OduEthernetSfpProperties_Object = MibScalar
winlink1000OduEthernetSfpProperties = _Winlink1000OduEthernetSfpProperties_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 5),
    _Winlink1000OduEthernetSfpProperties_Type()
)
winlink1000OduEthernetSfpProperties.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduEthernetSfpProperties.setStatus("mandatory")


class _Winlink1000OduEthernetMainTrafficPort_Type(Integer32):
    """Custom type winlink1000OduEthernetMainTrafficPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("lan1", 1),
          ("lan2", 2))
    )


_Winlink1000OduEthernetMainTrafficPort_Type.__name__ = "Integer32"
_Winlink1000OduEthernetMainTrafficPort_Object = MibScalar
winlink1000OduEthernetMainTrafficPort = _Winlink1000OduEthernetMainTrafficPort_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 6),
    _Winlink1000OduEthernetMainTrafficPort_Type()
)
winlink1000OduEthernetMainTrafficPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduEthernetMainTrafficPort.setStatus("mandatory")
_Winlink1000OduEthernetRestartCounter_Type = Integer32
_Winlink1000OduEthernetRestartCounter_Object = MibScalar
winlink1000OduEthernetRestartCounter = _Winlink1000OduEthernetRestartCounter_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 7),
    _Winlink1000OduEthernetRestartCounter_Type()
)
winlink1000OduEthernetRestartCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduEthernetRestartCounter.setStatus("mandatory")


class _Winlink1000OduEthernetSmart100M_Type(Integer32):
    """Custom type winlink1000OduEthernetSmart100M based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_Winlink1000OduEthernetSmart100M_Type.__name__ = "Integer32"
_Winlink1000OduEthernetSmart100M_Object = MibScalar
winlink1000OduEthernetSmart100M = _Winlink1000OduEthernetSmart100M_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 3, 8),
    _Winlink1000OduEthernetSmart100M_Type()
)
winlink1000OduEthernetSmart100M.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduEthernetSmart100M.setStatus("mandatory")
_Winlink1000OduBridge_ObjectIdentity = ObjectIdentity
winlink1000OduBridge = _Winlink1000OduBridge_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4)
)
_Winlink1000OduBridgeBase_ObjectIdentity = ObjectIdentity
winlink1000OduBridgeBase = _Winlink1000OduBridgeBase_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 1)
)
_Winlink1000OduBridgeBasePortTable_Object = MibTable
winlink1000OduBridgeBasePortTable = _Winlink1000OduBridgeBasePortTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 1, 4)
)
if mibBuilder.loadTexts:
    winlink1000OduBridgeBasePortTable.setStatus("mandatory")
_Winlink1000OduBridgeBasePortEntry_Object = MibTableRow
winlink1000OduBridgeBasePortEntry = _Winlink1000OduBridgeBasePortEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 1, 4, 1)
)
winlink1000OduBridgeBasePortEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduBridgeBasePortIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduBridgeBasePortEntry.setStatus("mandatory")


class _Winlink1000OduBridgeBasePortIndex_Type(Integer32):
    """Custom type winlink1000OduBridgeBasePortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000OduBridgeBasePortIndex_Type.__name__ = "Integer32"
_Winlink1000OduBridgeBasePortIndex_Object = MibTableColumn
winlink1000OduBridgeBasePortIndex = _Winlink1000OduBridgeBasePortIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 1, 4, 1, 1),
    _Winlink1000OduBridgeBasePortIndex_Type()
)
winlink1000OduBridgeBasePortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduBridgeBasePortIndex.setStatus("mandatory")
_Winlink1000OduBridgeBaseIfIndex_Type = Integer32
_Winlink1000OduBridgeBaseIfIndex_Object = MibTableColumn
winlink1000OduBridgeBaseIfIndex = _Winlink1000OduBridgeBaseIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 1, 4, 1, 2),
    _Winlink1000OduBridgeBaseIfIndex_Type()
)
winlink1000OduBridgeBaseIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduBridgeBaseIfIndex.setStatus("mandatory")
_Winlink1000OduBridgeTp_ObjectIdentity = ObjectIdentity
winlink1000OduBridgeTp = _Winlink1000OduBridgeTp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4)
)
_Winlink1000OduBridgeTpPortTable_Object = MibTable
winlink1000OduBridgeTpPortTable = _Winlink1000OduBridgeTpPortTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 3)
)
if mibBuilder.loadTexts:
    winlink1000OduBridgeTpPortTable.setStatus("mandatory")
_Winlink1000OduBridgeTpPortEntry_Object = MibTableRow
winlink1000OduBridgeTpPortEntry = _Winlink1000OduBridgeTpPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 3, 1)
)
winlink1000OduBridgeTpPortEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduBridgeTpPortIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduBridgeTpPortEntry.setStatus("mandatory")


class _Winlink1000OduBridgeTpPortIndex_Type(Integer32):
    """Custom type winlink1000OduBridgeTpPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000OduBridgeTpPortIndex_Type.__name__ = "Integer32"
_Winlink1000OduBridgeTpPortIndex_Object = MibTableColumn
winlink1000OduBridgeTpPortIndex = _Winlink1000OduBridgeTpPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 3, 1, 1),
    _Winlink1000OduBridgeTpPortIndex_Type()
)
winlink1000OduBridgeTpPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduBridgeTpPortIndex.setStatus("mandatory")
_Winlink1000OduBridgeTpPortInFrames_Type = Counter32
_Winlink1000OduBridgeTpPortInFrames_Object = MibTableColumn
winlink1000OduBridgeTpPortInFrames = _Winlink1000OduBridgeTpPortInFrames_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 3, 1, 3),
    _Winlink1000OduBridgeTpPortInFrames_Type()
)
winlink1000OduBridgeTpPortInFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduBridgeTpPortInFrames.setStatus("mandatory")
_Winlink1000OduBridgeTpPortOutFrames_Type = Counter32
_Winlink1000OduBridgeTpPortOutFrames_Object = MibTableColumn
winlink1000OduBridgeTpPortOutFrames = _Winlink1000OduBridgeTpPortOutFrames_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 3, 1, 4),
    _Winlink1000OduBridgeTpPortOutFrames_Type()
)
winlink1000OduBridgeTpPortOutFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduBridgeTpPortOutFrames.setStatus("mandatory")
_Winlink1000OduBridgeTpPortInBytes_Type = Counter32
_Winlink1000OduBridgeTpPortInBytes_Object = MibTableColumn
winlink1000OduBridgeTpPortInBytes = _Winlink1000OduBridgeTpPortInBytes_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 3, 1, 101),
    _Winlink1000OduBridgeTpPortInBytes_Type()
)
winlink1000OduBridgeTpPortInBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduBridgeTpPortInBytes.setStatus("mandatory")
_Winlink1000OduBridgeTpPortOutBytes_Type = Counter32
_Winlink1000OduBridgeTpPortOutBytes_Object = MibTableColumn
winlink1000OduBridgeTpPortOutBytes = _Winlink1000OduBridgeTpPortOutBytes_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 3, 1, 102),
    _Winlink1000OduBridgeTpPortOutBytes_Type()
)
winlink1000OduBridgeTpPortOutBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduBridgeTpPortOutBytes.setStatus("mandatory")
_Winlink1000OduBridgeTpMode_Type = Integer32
_Winlink1000OduBridgeTpMode_Object = MibScalar
winlink1000OduBridgeTpMode = _Winlink1000OduBridgeTpMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 101),
    _Winlink1000OduBridgeTpMode_Type()
)
winlink1000OduBridgeTpMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduBridgeTpMode.setStatus("mandatory")


class _Winlink1000OduBridgeConfigMode_Type(Integer32):
    """Custom type winlink1000OduBridgeConfigMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_Winlink1000OduBridgeConfigMode_Type.__name__ = "Integer32"
_Winlink1000OduBridgeConfigMode_Object = MibScalar
winlink1000OduBridgeConfigMode = _Winlink1000OduBridgeConfigMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 4, 4, 102),
    _Winlink1000OduBridgeConfigMode_Type()
)
winlink1000OduBridgeConfigMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduBridgeConfigMode.setStatus("mandatory")
_Winlink1000OduAir_ObjectIdentity = ObjectIdentity
winlink1000OduAir = _Winlink1000OduAir_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5)
)
_Winlink1000OduAirFreq_Type = Integer32
_Winlink1000OduAirFreq_Object = MibScalar
winlink1000OduAirFreq = _Winlink1000OduAirFreq_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 1),
    _Winlink1000OduAirFreq_Type()
)
winlink1000OduAirFreq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirFreq.setStatus("mandatory")
_Winlink1000OduAirDesiredRate_Type = Integer32
_Winlink1000OduAirDesiredRate_Object = MibScalar
winlink1000OduAirDesiredRate = _Winlink1000OduAirDesiredRate_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 2),
    _Winlink1000OduAirDesiredRate_Type()
)
winlink1000OduAirDesiredRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirDesiredRate.setStatus("deprecated")
_Winlink1000OduAirSSID_Type = DisplayString
_Winlink1000OduAirSSID_Object = MibScalar
winlink1000OduAirSSID = _Winlink1000OduAirSSID_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 3),
    _Winlink1000OduAirSSID_Type()
)
winlink1000OduAirSSID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirSSID.setStatus("mandatory")
_Winlink1000OduAirTxPower_Type = Integer32
_Winlink1000OduAirTxPower_Object = MibScalar
winlink1000OduAirTxPower = _Winlink1000OduAirTxPower_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 4),
    _Winlink1000OduAirTxPower_Type()
)
winlink1000OduAirTxPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirTxPower.setStatus("mandatory")


class _Winlink1000OduAirSesState_Type(Integer32):
    """Custom type winlink1000OduAirSesState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("sessionDown", 1),
          ("basicRate", 2),
          ("active", 3),
          ("installation", 4),
          ("scanning", 5),
          ("probing", 6),
          ("transmitting", 7),
          ("activeWithDefaultEncryptionKey", 8),
          ("installationWithDefaultEncryptionKey", 9),
          ("bitFailed", 10),
          ("activeWithVersionsMismatch", 11),
          ("installationWithVersionsMismatch", 12),
          ("inactive", 13),
          ("iduIncompatible", 14),
          ("spectrumAnalysis", 15))
    )


_Winlink1000OduAirSesState_Type.__name__ = "Integer32"
_Winlink1000OduAirSesState_Object = MibScalar
winlink1000OduAirSesState = _Winlink1000OduAirSesState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 5),
    _Winlink1000OduAirSesState_Type()
)
winlink1000OduAirSesState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirSesState.setStatus("mandatory")
_Winlink1000OduAirMstrSlv_Type = Integer32
_Winlink1000OduAirMstrSlv_Object = MibScalar
winlink1000OduAirMstrSlv = _Winlink1000OduAirMstrSlv_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 6),
    _Winlink1000OduAirMstrSlv_Type()
)
winlink1000OduAirMstrSlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirMstrSlv.setStatus("mandatory")
_Winlink1000OduAirResync_Type = Integer32
_Winlink1000OduAirResync_Object = MibScalar
winlink1000OduAirResync = _Winlink1000OduAirResync_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 8),
    _Winlink1000OduAirResync_Type()
)
winlink1000OduAirResync.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirResync.setStatus("mandatory")
_Winlink1000OduAirPerf_ObjectIdentity = ObjectIdentity
winlink1000OduAirPerf = _Winlink1000OduAirPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9)
)
_Winlink1000OduAirRxPower_Type = Integer32
_Winlink1000OduAirRxPower_Object = MibScalar
winlink1000OduAirRxPower = _Winlink1000OduAirRxPower_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9, 1),
    _Winlink1000OduAirRxPower_Type()
)
winlink1000OduAirRxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirRxPower.setStatus("mandatory")
_Winlink1000OduAirTotalFrames_Type = Counter32
_Winlink1000OduAirTotalFrames_Object = MibScalar
winlink1000OduAirTotalFrames = _Winlink1000OduAirTotalFrames_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9, 2),
    _Winlink1000OduAirTotalFrames_Type()
)
winlink1000OduAirTotalFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirTotalFrames.setStatus("mandatory")
_Winlink1000OduAirBadFrames_Type = Counter32
_Winlink1000OduAirBadFrames_Object = MibScalar
winlink1000OduAirBadFrames = _Winlink1000OduAirBadFrames_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9, 3),
    _Winlink1000OduAirBadFrames_Type()
)
winlink1000OduAirBadFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirBadFrames.setStatus("mandatory")
_Winlink1000OduAirCurrentRate_Type = Integer32
_Winlink1000OduAirCurrentRate_Object = MibScalar
winlink1000OduAirCurrentRate = _Winlink1000OduAirCurrentRate_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9, 4),
    _Winlink1000OduAirCurrentRate_Type()
)
winlink1000OduAirCurrentRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirCurrentRate.setStatus("deprecated")
_Winlink1000OduAirCurrentRateIdx_Type = Integer32
_Winlink1000OduAirCurrentRateIdx_Object = MibScalar
winlink1000OduAirCurrentRateIdx = _Winlink1000OduAirCurrentRateIdx_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9, 5),
    _Winlink1000OduAirCurrentRateIdx_Type()
)
winlink1000OduAirCurrentRateIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirCurrentRateIdx.setStatus("mandatory")
_Winlink1000OduAirChainsRxPower_Type = OctetString
_Winlink1000OduAirChainsRxPower_Object = MibScalar
winlink1000OduAirChainsRxPower = _Winlink1000OduAirChainsRxPower_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9, 6),
    _Winlink1000OduAirChainsRxPower_Type()
)
winlink1000OduAirChainsRxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirChainsRxPower.setStatus("mandatory")
_Winlink1000OduAirCurrentRateCBW_Type = Integer32
_Winlink1000OduAirCurrentRateCBW_Object = MibScalar
winlink1000OduAirCurrentRateCBW = _Winlink1000OduAirCurrentRateCBW_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9, 7),
    _Winlink1000OduAirCurrentRateCBW_Type()
)
winlink1000OduAirCurrentRateCBW.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirCurrentRateCBW.setStatus("mandatory")
_Winlink1000OduAirCurrentRateGI_Type = Integer32
_Winlink1000OduAirCurrentRateGI_Object = MibScalar
winlink1000OduAirCurrentRateGI = _Winlink1000OduAirCurrentRateGI_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 9, 8),
    _Winlink1000OduAirCurrentRateGI_Type()
)
winlink1000OduAirCurrentRateGI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirCurrentRateGI.setStatus("mandatory")
_Winlink1000OduAirTxPower36_Type = Integer32
_Winlink1000OduAirTxPower36_Object = MibScalar
winlink1000OduAirTxPower36 = _Winlink1000OduAirTxPower36_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 10),
    _Winlink1000OduAirTxPower36_Type()
)
winlink1000OduAirTxPower36.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirTxPower36.setStatus("deprecated")
_Winlink1000OduAirTxPower48_Type = Integer32
_Winlink1000OduAirTxPower48_Object = MibScalar
winlink1000OduAirTxPower48 = _Winlink1000OduAirTxPower48_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 11),
    _Winlink1000OduAirTxPower48_Type()
)
winlink1000OduAirTxPower48.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirTxPower48.setStatus("deprecated")
_Winlink1000OduAirCurrentTxPower_Type = Integer32
_Winlink1000OduAirCurrentTxPower_Object = MibScalar
winlink1000OduAirCurrentTxPower = _Winlink1000OduAirCurrentTxPower_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 12),
    _Winlink1000OduAirCurrentTxPower_Type()
)
winlink1000OduAirCurrentTxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirCurrentTxPower.setStatus("mandatory")
_Winlink1000OduAirMinFrequency_Type = Integer32
_Winlink1000OduAirMinFrequency_Object = MibScalar
winlink1000OduAirMinFrequency = _Winlink1000OduAirMinFrequency_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 13),
    _Winlink1000OduAirMinFrequency_Type()
)
winlink1000OduAirMinFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirMinFrequency.setStatus("mandatory")
_Winlink1000OduAirMaxFrequency_Type = Integer32
_Winlink1000OduAirMaxFrequency_Object = MibScalar
winlink1000OduAirMaxFrequency = _Winlink1000OduAirMaxFrequency_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 14),
    _Winlink1000OduAirMaxFrequency_Type()
)
winlink1000OduAirMaxFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirMaxFrequency.setStatus("mandatory")
_Winlink1000OduAirFreqResolution_Type = Integer32
_Winlink1000OduAirFreqResolution_Object = MibScalar
winlink1000OduAirFreqResolution = _Winlink1000OduAirFreqResolution_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 15),
    _Winlink1000OduAirFreqResolution_Type()
)
winlink1000OduAirFreqResolution.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirFreqResolution.setStatus("mandatory")
_Winlink1000OduAirCurrentFreq_Type = Integer32
_Winlink1000OduAirCurrentFreq_Object = MibScalar
winlink1000OduAirCurrentFreq = _Winlink1000OduAirCurrentFreq_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 16),
    _Winlink1000OduAirCurrentFreq_Type()
)
winlink1000OduAirCurrentFreq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirCurrentFreq.setStatus("mandatory")
_Winlink1000OduAirNumberOfChannels_Type = Integer32
_Winlink1000OduAirNumberOfChannels_Object = MibScalar
winlink1000OduAirNumberOfChannels = _Winlink1000OduAirNumberOfChannels_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 17),
    _Winlink1000OduAirNumberOfChannels_Type()
)
winlink1000OduAirNumberOfChannels.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirNumberOfChannels.setStatus("mandatory")
_Winlink1000OduAirChannelsTable_Object = MibTable
winlink1000OduAirChannelsTable = _Winlink1000OduAirChannelsTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 18)
)
if mibBuilder.loadTexts:
    winlink1000OduAirChannelsTable.setStatus("mandatory")
_Winlink1000OduAirChannelsEntry_Object = MibTableRow
winlink1000OduAirChannelsEntry = _Winlink1000OduAirChannelsEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 18, 1)
)
winlink1000OduAirChannelsEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirChannelsIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduAirChannelsEntry.setStatus("mandatory")


class _Winlink1000OduAirChannelsIndex_Type(Integer32):
    """Custom type winlink1000OduAirChannelsIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000OduAirChannelsIndex_Type.__name__ = "Integer32"
_Winlink1000OduAirChannelsIndex_Object = MibTableColumn
winlink1000OduAirChannelsIndex = _Winlink1000OduAirChannelsIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 18, 1, 1),
    _Winlink1000OduAirChannelsIndex_Type()
)
winlink1000OduAirChannelsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirChannelsIndex.setStatus("mandatory")
_Winlink1000OduAirChannelsFrequency_Type = Integer32
_Winlink1000OduAirChannelsFrequency_Object = MibTableColumn
winlink1000OduAirChannelsFrequency = _Winlink1000OduAirChannelsFrequency_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 18, 1, 2),
    _Winlink1000OduAirChannelsFrequency_Type()
)
winlink1000OduAirChannelsFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirChannelsFrequency.setStatus("mandatory")
_Winlink1000OduAirChannelsOperState_Type = Integer32
_Winlink1000OduAirChannelsOperState_Object = MibTableColumn
winlink1000OduAirChannelsOperState = _Winlink1000OduAirChannelsOperState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 18, 1, 3),
    _Winlink1000OduAirChannelsOperState_Type()
)
winlink1000OduAirChannelsOperState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirChannelsOperState.setStatus("mandatory")
_Winlink1000OduAirChannelsAvail_Type = Integer32
_Winlink1000OduAirChannelsAvail_Object = MibTableColumn
winlink1000OduAirChannelsAvail = _Winlink1000OduAirChannelsAvail_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 18, 1, 4),
    _Winlink1000OduAirChannelsAvail_Type()
)
winlink1000OduAirChannelsAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirChannelsAvail.setStatus("mandatory")
_Winlink1000OduAirChannelsDefaultFreq_Type = Integer32
_Winlink1000OduAirChannelsDefaultFreq_Object = MibTableColumn
winlink1000OduAirChannelsDefaultFreq = _Winlink1000OduAirChannelsDefaultFreq_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 18, 1, 5),
    _Winlink1000OduAirChannelsDefaultFreq_Type()
)
winlink1000OduAirChannelsDefaultFreq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirChannelsDefaultFreq.setStatus("mandatory")
_Winlink1000OduAirDfsState_Type = Integer32
_Winlink1000OduAirDfsState_Object = MibScalar
winlink1000OduAirDfsState = _Winlink1000OduAirDfsState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 19),
    _Winlink1000OduAirDfsState_Type()
)
winlink1000OduAirDfsState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirDfsState.setStatus("mandatory")
_Winlink1000OduAirAutoChannelSelectionState_Type = Integer32
_Winlink1000OduAirAutoChannelSelectionState_Object = MibScalar
winlink1000OduAirAutoChannelSelectionState = _Winlink1000OduAirAutoChannelSelectionState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 20),
    _Winlink1000OduAirAutoChannelSelectionState_Type()
)
winlink1000OduAirAutoChannelSelectionState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirAutoChannelSelectionState.setStatus("deprecated")


class _Winlink1000OduAirEnableTxPower_Type(Integer32):
    """Custom type winlink1000OduAirEnableTxPower based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_Winlink1000OduAirEnableTxPower_Type.__name__ = "Integer32"
_Winlink1000OduAirEnableTxPower_Object = MibScalar
winlink1000OduAirEnableTxPower = _Winlink1000OduAirEnableTxPower_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 21),
    _Winlink1000OduAirEnableTxPower_Type()
)
winlink1000OduAirEnableTxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirEnableTxPower.setStatus("mandatory")
_Winlink1000OduAirMinTxPower_Type = Integer32
_Winlink1000OduAirMinTxPower_Object = MibScalar
winlink1000OduAirMinTxPower = _Winlink1000OduAirMinTxPower_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 22),
    _Winlink1000OduAirMinTxPower_Type()
)
winlink1000OduAirMinTxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirMinTxPower.setStatus("mandatory")
_Winlink1000OduAirMaxTxPowerTable_Object = MibTable
winlink1000OduAirMaxTxPowerTable = _Winlink1000OduAirMaxTxPowerTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 23)
)
if mibBuilder.loadTexts:
    winlink1000OduAirMaxTxPowerTable.setStatus("mandatory")
_Winlink1000OduAirMaxTxPowerEntry_Object = MibTableRow
winlink1000OduAirMaxTxPowerEntry = _Winlink1000OduAirMaxTxPowerEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 23, 1)
)
winlink1000OduAirMaxTxPowerEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirMaxTxPowerIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduAirMaxTxPowerEntry.setStatus("mandatory")


class _Winlink1000OduAirMaxTxPowerIndex_Type(Integer32):
    """Custom type winlink1000OduAirMaxTxPowerIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000OduAirMaxTxPowerIndex_Type.__name__ = "Integer32"
_Winlink1000OduAirMaxTxPowerIndex_Object = MibTableColumn
winlink1000OduAirMaxTxPowerIndex = _Winlink1000OduAirMaxTxPowerIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 23, 1, 1),
    _Winlink1000OduAirMaxTxPowerIndex_Type()
)
winlink1000OduAirMaxTxPowerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirMaxTxPowerIndex.setStatus("mandatory")
_Winlink1000OduAirMaxTxPower_Type = Integer32
_Winlink1000OduAirMaxTxPower_Object = MibTableColumn
winlink1000OduAirMaxTxPower = _Winlink1000OduAirMaxTxPower_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 23, 1, 2),
    _Winlink1000OduAirMaxTxPower_Type()
)
winlink1000OduAirMaxTxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirMaxTxPower.setStatus("mandatory")
_Winlink1000OduAirChannelBandwidth_Type = Integer32
_Winlink1000OduAirChannelBandwidth_Object = MibScalar
winlink1000OduAirChannelBandwidth = _Winlink1000OduAirChannelBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 24),
    _Winlink1000OduAirChannelBandwidth_Type()
)
winlink1000OduAirChannelBandwidth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirChannelBandwidth.setStatus("mandatory")
_Winlink1000OduAirChannelBWTable_Object = MibTable
winlink1000OduAirChannelBWTable = _Winlink1000OduAirChannelBWTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 25)
)
if mibBuilder.loadTexts:
    winlink1000OduAirChannelBWTable.setStatus("mandatory")
_Winlink1000OduAirChannelBWEntry_Object = MibTableRow
winlink1000OduAirChannelBWEntry = _Winlink1000OduAirChannelBWEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 25, 1)
)
winlink1000OduAirChannelBWEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirChannelBWIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduAirChannelBWEntry.setStatus("mandatory")


class _Winlink1000OduAirChannelBWIndex_Type(Integer32):
    """Custom type winlink1000OduAirChannelBWIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("channelBW5MHz", 1),
          ("channelBW10MHz", 2),
          ("channelBW20MHz", 3),
          ("channelBW40MHz", 4),
          ("channelBW80MHz", 5),
          ("channelBW7MHz", 6),
          ("channelBW14MHz", 7))
    )


_Winlink1000OduAirChannelBWIndex_Type.__name__ = "Integer32"
_Winlink1000OduAirChannelBWIndex_Object = MibTableColumn
winlink1000OduAirChannelBWIndex = _Winlink1000OduAirChannelBWIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 25, 1, 1),
    _Winlink1000OduAirChannelBWIndex_Type()
)
winlink1000OduAirChannelBWIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirChannelBWIndex.setStatus("mandatory")


class _Winlink1000OduAirChannelBWAvail_Type(Integer32):
    """Custom type winlink1000OduAirChannelBWAvail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notSupported", 1),
          ("supportedManual", 2),
          ("supportedWithACS", 3))
    )


_Winlink1000OduAirChannelBWAvail_Type.__name__ = "Integer32"
_Winlink1000OduAirChannelBWAvail_Object = MibTableColumn
winlink1000OduAirChannelBWAvail = _Winlink1000OduAirChannelBWAvail_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 25, 1, 2),
    _Winlink1000OduAirChannelBWAvail_Type()
)
winlink1000OduAirChannelBWAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirChannelBWAvail.setStatus("mandatory")
_Winlink1000OduAirChannelsAdminState_Type = DisplayString
_Winlink1000OduAirChannelsAdminState_Object = MibTableColumn
winlink1000OduAirChannelsAdminState = _Winlink1000OduAirChannelsAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 25, 1, 3),
    _Winlink1000OduAirChannelsAdminState_Type()
)
winlink1000OduAirChannelsAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirChannelsAdminState.setStatus("mandatory")


class _Winlink1000OduAirChannelBWHSSATDDConflictPerCBW_Type(Integer32):
    """Custom type winlink1000OduAirChannelBWHSSATDDConflictPerCBW based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noConflict", 1),
          ("conflictSingle", 2),
          ("conflictDual", 3))
    )


_Winlink1000OduAirChannelBWHSSATDDConflictPerCBW_Type.__name__ = "Integer32"
_Winlink1000OduAirChannelBWHSSATDDConflictPerCBW_Object = MibTableColumn
winlink1000OduAirChannelBWHSSATDDConflictPerCBW = _Winlink1000OduAirChannelBWHSSATDDConflictPerCBW_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 25, 1, 4),
    _Winlink1000OduAirChannelBWHSSATDDConflictPerCBW_Type()
)
winlink1000OduAirChannelBWHSSATDDConflictPerCBW.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirChannelBWHSSATDDConflictPerCBW.setStatus("mandatory")
_Winlink1000OduAirChannelBWMinRatioForSupporting_Type = Integer32
_Winlink1000OduAirChannelBWMinRatioForSupporting_Object = MibTableColumn
winlink1000OduAirChannelBWMinRatioForSupporting = _Winlink1000OduAirChannelBWMinRatioForSupporting_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 25, 1, 5),
    _Winlink1000OduAirChannelBWMinRatioForSupporting_Type()
)
winlink1000OduAirChannelBWMinRatioForSupporting.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirChannelBWMinRatioForSupporting.setStatus("mandatory")
_Winlink1000OduAirChannelBWMaxRatioForSupporting_Type = Integer32
_Winlink1000OduAirChannelBWMaxRatioForSupporting_Object = MibTableColumn
winlink1000OduAirChannelBWMaxRatioForSupporting = _Winlink1000OduAirChannelBWMaxRatioForSupporting_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 25, 1, 6),
    _Winlink1000OduAirChannelBWMaxRatioForSupporting_Type()
)
winlink1000OduAirChannelBWMaxRatioForSupporting.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirChannelBWMaxRatioForSupporting.setStatus("mandatory")
_Winlink1000OduAirRFD_Type = Integer32
_Winlink1000OduAirRFD_Object = MibScalar
winlink1000OduAirRFD = _Winlink1000OduAirRFD_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 26),
    _Winlink1000OduAirRFD_Type()
)
winlink1000OduAirRFD.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirRFD.setStatus("mandatory")
_Winlink1000OduAirRatesTable_Object = MibTable
winlink1000OduAirRatesTable = _Winlink1000OduAirRatesTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 27)
)
if mibBuilder.loadTexts:
    winlink1000OduAirRatesTable.setStatus("mandatory")
_Winlink1000OduAirRatesEntry_Object = MibTableRow
winlink1000OduAirRatesEntry = _Winlink1000OduAirRatesEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 27, 1)
)
winlink1000OduAirRatesEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirRatesIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduAirRatesEntry.setStatus("mandatory")


class _Winlink1000OduAirRatesIndex_Type(Integer32):
    """Custom type winlink1000OduAirRatesIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000OduAirRatesIndex_Type.__name__ = "Integer32"
_Winlink1000OduAirRatesIndex_Object = MibTableColumn
winlink1000OduAirRatesIndex = _Winlink1000OduAirRatesIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 27, 1, 1),
    _Winlink1000OduAirRatesIndex_Type()
)
winlink1000OduAirRatesIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirRatesIndex.setStatus("mandatory")


class _Winlink1000OduAirRatesAvail_Type(Integer32):
    """Custom type winlink1000OduAirRatesAvail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("rateNotAvailable", 1),
          ("rateAvailable", 2))
    )


_Winlink1000OduAirRatesAvail_Type.__name__ = "Integer32"
_Winlink1000OduAirRatesAvail_Object = MibTableColumn
winlink1000OduAirRatesAvail = _Winlink1000OduAirRatesAvail_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 27, 1, 2),
    _Winlink1000OduAirRatesAvail_Type()
)
winlink1000OduAirRatesAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirRatesAvail.setStatus("mandatory")
_Winlink1000OduAirDesiredRateIdx_Type = Integer32
_Winlink1000OduAirDesiredRateIdx_Object = MibScalar
winlink1000OduAirDesiredRateIdx = _Winlink1000OduAirDesiredRateIdx_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 28),
    _Winlink1000OduAirDesiredRateIdx_Type()
)
winlink1000OduAirDesiredRateIdx.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirDesiredRateIdx.setStatus("mandatory")
_Winlink1000OduAirLinkDistance_Type = Integer32
_Winlink1000OduAirLinkDistance_Object = MibScalar
winlink1000OduAirLinkDistance = _Winlink1000OduAirLinkDistance_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 29),
    _Winlink1000OduAirLinkDistance_Type()
)
winlink1000OduAirLinkDistance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirLinkDistance.setStatus("mandatory")


class _Winlink1000OduAirLinkWorkingMode_Type(Integer32):
    """Custom type winlink1000OduAirLinkWorkingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 1),
          ("normal", 2),
          ("fullCompatibilityRemoteUpgradeAvailable", 3),
          ("fullCompatibilityLocalUpgradeAvailable", 4),
          ("restrictedCompatibilityRemoteUpgradeRecomended", 5),
          ("restrictedCompatibilityLocalUpgradeRecomended", 6),
          ("softwareUpgradeRemoteUpgradeRequired", 7),
          ("softwareUpgradeLocalUpgradeRequired", 8),
          ("versionsIncompatibilityRemoteUpgradeRequired", 9),
          ("versionsIncompatibilityLocalUpgradeRequired", 10))
    )


_Winlink1000OduAirLinkWorkingMode_Type.__name__ = "Integer32"
_Winlink1000OduAirLinkWorkingMode_Object = MibScalar
winlink1000OduAirLinkWorkingMode = _Winlink1000OduAirLinkWorkingMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 30),
    _Winlink1000OduAirLinkWorkingMode_Type()
)
winlink1000OduAirLinkWorkingMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirLinkWorkingMode.setStatus("mandatory")
_Winlink1000OduAirMajorLinkIfVersion_Type = Integer32
_Winlink1000OduAirMajorLinkIfVersion_Object = MibScalar
winlink1000OduAirMajorLinkIfVersion = _Winlink1000OduAirMajorLinkIfVersion_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 31),
    _Winlink1000OduAirMajorLinkIfVersion_Type()
)
winlink1000OduAirMajorLinkIfVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirMajorLinkIfVersion.setStatus("mandatory")
_Winlink1000OduAirMinorLinkIfVersion_Type = Integer32
_Winlink1000OduAirMinorLinkIfVersion_Object = MibScalar
winlink1000OduAirMinorLinkIfVersion = _Winlink1000OduAirMinorLinkIfVersion_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 32),
    _Winlink1000OduAirMinorLinkIfVersion_Type()
)
winlink1000OduAirMinorLinkIfVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirMinorLinkIfVersion.setStatus("mandatory")
_Winlink1000OduAirHss_ObjectIdentity = ObjectIdentity
winlink1000OduAirHss = _Winlink1000OduAirHss_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40)
)


class _Winlink1000OduAirHssDesiredOpState_Type(Integer32):
    """Custom type winlink1000OduAirHssDesiredOpState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("notSupported", 1),
          ("independentUnit", 2),
          ("hubSyncMaster", 3),
          ("hubSyncClientContinueTx", 4),
          ("hubSyncClientDisableTx", 5),
          ("gpsSync", 6),
          ("independentSyncUnit-ISU", 7))
    )


_Winlink1000OduAirHssDesiredOpState_Type.__name__ = "Integer32"
_Winlink1000OduAirHssDesiredOpState_Object = MibScalar
winlink1000OduAirHssDesiredOpState = _Winlink1000OduAirHssDesiredOpState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 1),
    _Winlink1000OduAirHssDesiredOpState_Type()
)
winlink1000OduAirHssDesiredOpState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirHssDesiredOpState.setStatus("mandatory")


class _Winlink1000OduAirHssCurrentOpState_Type(Integer32):
    """Custom type winlink1000OduAirHssCurrentOpState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("notSupported", 1),
          ("independentUnit", 2),
          ("hubSyncMaster", 3),
          ("hubSyncClientContinueTx", 4),
          ("hubSyncClientDisableTx", 5),
          ("gpsSync", 6),
          ("independentSyncUnit-ISU", 7))
    )


_Winlink1000OduAirHssCurrentOpState_Type.__name__ = "Integer32"
_Winlink1000OduAirHssCurrentOpState_Object = MibScalar
winlink1000OduAirHssCurrentOpState = _Winlink1000OduAirHssCurrentOpState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 2),
    _Winlink1000OduAirHssCurrentOpState_Type()
)
winlink1000OduAirHssCurrentOpState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssCurrentOpState.setStatus("mandatory")


class _Winlink1000OduAirHssSyncStatus_Type(Integer32):
    """Custom type winlink1000OduAirHssSyncStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("notSynchronized", 2),
          ("synchronized", 3))
    )


_Winlink1000OduAirHssSyncStatus_Type.__name__ = "Integer32"
_Winlink1000OduAirHssSyncStatus_Object = MibScalar
winlink1000OduAirHssSyncStatus = _Winlink1000OduAirHssSyncStatus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 3),
    _Winlink1000OduAirHssSyncStatus_Type()
)
winlink1000OduAirHssSyncStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssSyncStatus.setStatus("mandatory")


class _Winlink1000OduAirHssExtPulseStatus_Type(Integer32):
    """Custom type winlink1000OduAirHssExtPulseStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("notDetected", 1),
          ("generating", 2),
          ("generatingAndDetected", 3),
          ("generatingAndImproperDetected", 4),
          ("detected", 5),
          ("improperDetected", 6),
          ("multipleSourcesDetected", 7))
    )


_Winlink1000OduAirHssExtPulseStatus_Type.__name__ = "Integer32"
_Winlink1000OduAirHssExtPulseStatus_Object = MibScalar
winlink1000OduAirHssExtPulseStatus = _Winlink1000OduAirHssExtPulseStatus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 4),
    _Winlink1000OduAirHssExtPulseStatus_Type()
)
winlink1000OduAirHssExtPulseStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssExtPulseStatus.setStatus("mandatory")


class _Winlink1000OduAirHssExtPulseType_Type(Integer32):
    """Custom type winlink1000OduAirHssExtPulseType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("typeA", 2),
          ("typeB", 3),
          ("typeC", 4),
          ("typeD", 5),
          ("typeE", 6),
          ("typeF", 7))
    )


_Winlink1000OduAirHssExtPulseType_Type.__name__ = "Integer32"
_Winlink1000OduAirHssExtPulseType_Object = MibScalar
winlink1000OduAirHssExtPulseType = _Winlink1000OduAirHssExtPulseType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 5),
    _Winlink1000OduAirHssExtPulseType_Type()
)
winlink1000OduAirHssExtPulseType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssExtPulseType.setStatus("mandatory")


class _Winlink1000OduAirHssDesiredExtPulseType_Type(Integer32):
    """Custom type winlink1000OduAirHssDesiredExtPulseType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("typeA", 2),
          ("typeB", 3),
          ("typeC", 4),
          ("typeD", 5),
          ("typeE", 6),
          ("typeF", 7))
    )


_Winlink1000OduAirHssDesiredExtPulseType_Type.__name__ = "Integer32"
_Winlink1000OduAirHssDesiredExtPulseType_Object = MibScalar
winlink1000OduAirHssDesiredExtPulseType = _Winlink1000OduAirHssDesiredExtPulseType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 6),
    _Winlink1000OduAirHssDesiredExtPulseType_Type()
)
winlink1000OduAirHssDesiredExtPulseType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirHssDesiredExtPulseType.setStatus("mandatory")
_Winlink1000OduAirHssRfpTable_Object = MibTable
winlink1000OduAirHssRfpTable = _Winlink1000OduAirHssRfpTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7)
)
if mibBuilder.loadTexts:
    winlink1000OduAirHssRfpTable.setStatus("mandatory")
_Winlink1000OduAirHssRfpEntry_Object = MibTableRow
winlink1000OduAirHssRfpEntry = _Winlink1000OduAirHssRfpEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1)
)
winlink1000OduAirHssRfpEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirHssRfpIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduAirHssRfpEntry.setStatus("mandatory")


class _Winlink1000OduAirHssRfpIndex_Type(Integer32):
    """Custom type winlink1000OduAirHssRfpIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 7),
    )


_Winlink1000OduAirHssRfpIndex_Type.__name__ = "Integer32"
_Winlink1000OduAirHssRfpIndex_Object = MibTableColumn
winlink1000OduAirHssRfpIndex = _Winlink1000OduAirHssRfpIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 1),
    _Winlink1000OduAirHssRfpIndex_Type()
)
winlink1000OduAirHssRfpIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssRfpIndex.setStatus("mandatory")


class _Winlink1000OduAirHssRfpEthChannelBW5MHz_Type(Integer32):
    """Custom type winlink1000OduAirHssRfpEthChannelBW5MHz based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bestFit", 1),
          ("nonOptimal", 2),
          ("notAvailable", 3))
    )


_Winlink1000OduAirHssRfpEthChannelBW5MHz_Type.__name__ = "Integer32"
_Winlink1000OduAirHssRfpEthChannelBW5MHz_Object = MibTableColumn
winlink1000OduAirHssRfpEthChannelBW5MHz = _Winlink1000OduAirHssRfpEthChannelBW5MHz_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 2),
    _Winlink1000OduAirHssRfpEthChannelBW5MHz_Type()
)
winlink1000OduAirHssRfpEthChannelBW5MHz.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssRfpEthChannelBW5MHz.setStatus("mandatory")


class _Winlink1000OduAirHssRfpTdmChannelBW5MHz_Type(Integer32):
    """Custom type winlink1000OduAirHssRfpTdmChannelBW5MHz based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bestFit", 1),
          ("nonOptimal", 2),
          ("notAvailable", 3))
    )


_Winlink1000OduAirHssRfpTdmChannelBW5MHz_Type.__name__ = "Integer32"
_Winlink1000OduAirHssRfpTdmChannelBW5MHz_Object = MibTableColumn
winlink1000OduAirHssRfpTdmChannelBW5MHz = _Winlink1000OduAirHssRfpTdmChannelBW5MHz_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 3),
    _Winlink1000OduAirHssRfpTdmChannelBW5MHz_Type()
)
winlink1000OduAirHssRfpTdmChannelBW5MHz.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssRfpTdmChannelBW5MHz.setStatus("mandatory")


class _Winlink1000OduAirHssRfpEthChannelBW10MHz_Type(Integer32):
    """Custom type winlink1000OduAirHssRfpEthChannelBW10MHz based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bestFit", 1),
          ("nonOptimal", 2),
          ("notAvailable", 3))
    )


_Winlink1000OduAirHssRfpEthChannelBW10MHz_Type.__name__ = "Integer32"
_Winlink1000OduAirHssRfpEthChannelBW10MHz_Object = MibTableColumn
winlink1000OduAirHssRfpEthChannelBW10MHz = _Winlink1000OduAirHssRfpEthChannelBW10MHz_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 4),
    _Winlink1000OduAirHssRfpEthChannelBW10MHz_Type()
)
winlink1000OduAirHssRfpEthChannelBW10MHz.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssRfpEthChannelBW10MHz.setStatus("mandatory")


class _Winlink1000OduAirHssRfpTdmChannelBW10MHz_Type(Integer32):
    """Custom type winlink1000OduAirHssRfpTdmChannelBW10MHz based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bestFit", 1),
          ("nonOptimal", 2),
          ("notAvailable", 3))
    )


_Winlink1000OduAirHssRfpTdmChannelBW10MHz_Type.__name__ = "Integer32"
_Winlink1000OduAirHssRfpTdmChannelBW10MHz_Object = MibTableColumn
winlink1000OduAirHssRfpTdmChannelBW10MHz = _Winlink1000OduAirHssRfpTdmChannelBW10MHz_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 5),
    _Winlink1000OduAirHssRfpTdmChannelBW10MHz_Type()
)
winlink1000OduAirHssRfpTdmChannelBW10MHz.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssRfpTdmChannelBW10MHz.setStatus("mandatory")


class _Winlink1000OduAirHssRfpEthChannelBW20MHz_Type(Integer32):
    """Custom type winlink1000OduAirHssRfpEthChannelBW20MHz based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bestFit", 1),
          ("nonOptimal", 2),
          ("notAvailable", 3))
    )


_Winlink1000OduAirHssRfpEthChannelBW20MHz_Type.__name__ = "Integer32"
_Winlink1000OduAirHssRfpEthChannelBW20MHz_Object = MibTableColumn
winlink1000OduAirHssRfpEthChannelBW20MHz = _Winlink1000OduAirHssRfpEthChannelBW20MHz_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 6),
    _Winlink1000OduAirHssRfpEthChannelBW20MHz_Type()
)
winlink1000OduAirHssRfpEthChannelBW20MHz.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssRfpEthChannelBW20MHz.setStatus("mandatory")


class _Winlink1000OduAirHssRfpTdmChannelBW20MHz_Type(Integer32):
    """Custom type winlink1000OduAirHssRfpTdmChannelBW20MHz based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bestFit", 1),
          ("nonOptimal", 2),
          ("notAvailable", 3))
    )


_Winlink1000OduAirHssRfpTdmChannelBW20MHz_Type.__name__ = "Integer32"
_Winlink1000OduAirHssRfpTdmChannelBW20MHz_Object = MibTableColumn
winlink1000OduAirHssRfpTdmChannelBW20MHz = _Winlink1000OduAirHssRfpTdmChannelBW20MHz_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 7),
    _Winlink1000OduAirHssRfpTdmChannelBW20MHz_Type()
)
winlink1000OduAirHssRfpTdmChannelBW20MHz.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssRfpTdmChannelBW20MHz.setStatus("mandatory")


class _Winlink1000OduAirHssRfpEthChannelBW40MHz_Type(Integer32):
    """Custom type winlink1000OduAirHssRfpEthChannelBW40MHz based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bestFit", 1),
          ("nonOptimal", 2),
          ("notAvailable", 3))
    )


_Winlink1000OduAirHssRfpEthChannelBW40MHz_Type.__name__ = "Integer32"
_Winlink1000OduAirHssRfpEthChannelBW40MHz_Object = MibTableColumn
winlink1000OduAirHssRfpEthChannelBW40MHz = _Winlink1000OduAirHssRfpEthChannelBW40MHz_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 8),
    _Winlink1000OduAirHssRfpEthChannelBW40MHz_Type()
)
winlink1000OduAirHssRfpEthChannelBW40MHz.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssRfpEthChannelBW40MHz.setStatus("mandatory")


class _Winlink1000OduAirHssRfpTdmChannelBW40MHz_Type(Integer32):
    """Custom type winlink1000OduAirHssRfpTdmChannelBW40MHz based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bestFit", 1),
          ("nonOptimal", 2),
          ("notAvailable", 3))
    )


_Winlink1000OduAirHssRfpTdmChannelBW40MHz_Type.__name__ = "Integer32"
_Winlink1000OduAirHssRfpTdmChannelBW40MHz_Object = MibTableColumn
winlink1000OduAirHssRfpTdmChannelBW40MHz = _Winlink1000OduAirHssRfpTdmChannelBW40MHz_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 9),
    _Winlink1000OduAirHssRfpTdmChannelBW40MHz_Type()
)
winlink1000OduAirHssRfpTdmChannelBW40MHz.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssRfpTdmChannelBW40MHz.setStatus("mandatory")


class _Winlink1000OduAirHssRfpEthChannelBW80MHz_Type(Integer32):
    """Custom type winlink1000OduAirHssRfpEthChannelBW80MHz based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bestFit", 1),
          ("nonOptimal", 2),
          ("notAvailable", 3))
    )


_Winlink1000OduAirHssRfpEthChannelBW80MHz_Type.__name__ = "Integer32"
_Winlink1000OduAirHssRfpEthChannelBW80MHz_Object = MibTableColumn
winlink1000OduAirHssRfpEthChannelBW80MHz = _Winlink1000OduAirHssRfpEthChannelBW80MHz_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 10),
    _Winlink1000OduAirHssRfpEthChannelBW80MHz_Type()
)
winlink1000OduAirHssRfpEthChannelBW80MHz.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssRfpEthChannelBW80MHz.setStatus("mandatory")


class _Winlink1000OduAirHssRfpEthChannelBW7MHz_Type(Integer32):
    """Custom type winlink1000OduAirHssRfpEthChannelBW7MHz based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bestFit", 1),
          ("nonOptimal", 2),
          ("notAvailable", 3))
    )


_Winlink1000OduAirHssRfpEthChannelBW7MHz_Type.__name__ = "Integer32"
_Winlink1000OduAirHssRfpEthChannelBW7MHz_Object = MibTableColumn
winlink1000OduAirHssRfpEthChannelBW7MHz = _Winlink1000OduAirHssRfpEthChannelBW7MHz_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 11),
    _Winlink1000OduAirHssRfpEthChannelBW7MHz_Type()
)
winlink1000OduAirHssRfpEthChannelBW7MHz.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssRfpEthChannelBW7MHz.setStatus("mandatory")


class _Winlink1000OduAirHssRfpEthChannelBW14MHz_Type(Integer32):
    """Custom type winlink1000OduAirHssRfpEthChannelBW14MHz based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bestFit", 1),
          ("nonOptimal", 2),
          ("notAvailable", 3))
    )


_Winlink1000OduAirHssRfpEthChannelBW14MHz_Type.__name__ = "Integer32"
_Winlink1000OduAirHssRfpEthChannelBW14MHz_Object = MibTableColumn
winlink1000OduAirHssRfpEthChannelBW14MHz = _Winlink1000OduAirHssRfpEthChannelBW14MHz_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 7, 1, 12),
    _Winlink1000OduAirHssRfpEthChannelBW14MHz_Type()
)
winlink1000OduAirHssRfpEthChannelBW14MHz.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssRfpEthChannelBW14MHz.setStatus("mandatory")
_Winlink1000OduAirHssRfpStr_Type = DisplayString
_Winlink1000OduAirHssRfpStr_Object = MibScalar
winlink1000OduAirHssRfpStr = _Winlink1000OduAirHssRfpStr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 8),
    _Winlink1000OduAirHssRfpStr_Type()
)
winlink1000OduAirHssRfpStr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssRfpStr.setStatus("mandatory")
_Winlink1000OduAirHssHsmID_Type = Integer32
_Winlink1000OduAirHssHsmID_Object = MibScalar
winlink1000OduAirHssHsmID = _Winlink1000OduAirHssHsmID_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 9),
    _Winlink1000OduAirHssHsmID_Type()
)
winlink1000OduAirHssHsmID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssHsmID.setStatus("mandatory")
_Winlink1000OduAirHssTime_Type = DisplayString
_Winlink1000OduAirHssTime_Object = MibScalar
winlink1000OduAirHssTime = _Winlink1000OduAirHssTime_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 10),
    _Winlink1000OduAirHssTime_Type()
)
winlink1000OduAirHssTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssTime.setStatus("mandatory")
_Winlink1000OduAirHssLatitude_Type = DisplayString
_Winlink1000OduAirHssLatitude_Object = MibScalar
winlink1000OduAirHssLatitude = _Winlink1000OduAirHssLatitude_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 11),
    _Winlink1000OduAirHssLatitude_Type()
)
winlink1000OduAirHssLatitude.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssLatitude.setStatus("mandatory")
_Winlink1000OduAirHssNSIndicator_Type = DisplayString
_Winlink1000OduAirHssNSIndicator_Object = MibScalar
winlink1000OduAirHssNSIndicator = _Winlink1000OduAirHssNSIndicator_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 12),
    _Winlink1000OduAirHssNSIndicator_Type()
)
winlink1000OduAirHssNSIndicator.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssNSIndicator.setStatus("mandatory")
_Winlink1000OduAirHssLongitude_Type = DisplayString
_Winlink1000OduAirHssLongitude_Object = MibScalar
winlink1000OduAirHssLongitude = _Winlink1000OduAirHssLongitude_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 13),
    _Winlink1000OduAirHssLongitude_Type()
)
winlink1000OduAirHssLongitude.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssLongitude.setStatus("mandatory")
_Winlink1000OduAirHssEWIndicator_Type = DisplayString
_Winlink1000OduAirHssEWIndicator_Object = MibScalar
winlink1000OduAirHssEWIndicator = _Winlink1000OduAirHssEWIndicator_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 14),
    _Winlink1000OduAirHssEWIndicator_Type()
)
winlink1000OduAirHssEWIndicator.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssEWIndicator.setStatus("mandatory")
_Winlink1000OduAirHssNumSatellites_Type = DisplayString
_Winlink1000OduAirHssNumSatellites_Object = MibScalar
winlink1000OduAirHssNumSatellites = _Winlink1000OduAirHssNumSatellites_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 15),
    _Winlink1000OduAirHssNumSatellites_Type()
)
winlink1000OduAirHssNumSatellites.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssNumSatellites.setStatus("mandatory")
_Winlink1000OduAirHssAltitude_Type = DisplayString
_Winlink1000OduAirHssAltitude_Object = MibScalar
winlink1000OduAirHssAltitude = _Winlink1000OduAirHssAltitude_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 16),
    _Winlink1000OduAirHssAltitude_Type()
)
winlink1000OduAirHssAltitude.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssAltitude.setStatus("mandatory")


class _Winlink1000OduAirHssRfpPhase_Type(Integer32):
    """Custom type winlink1000OduAirHssRfpPhase based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("rfpNormalPhase", 1),
          ("rfpShiftedPhase", 2))
    )


_Winlink1000OduAirHssRfpPhase_Type.__name__ = "Integer32"
_Winlink1000OduAirHssRfpPhase_Object = MibScalar
winlink1000OduAirHssRfpPhase = _Winlink1000OduAirHssRfpPhase_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 17),
    _Winlink1000OduAirHssRfpPhase_Type()
)
winlink1000OduAirHssRfpPhase.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirHssRfpPhase.setStatus("mandatory")


class _Winlink1000OduAirHssInterSiteSynchronizationMode_Type(Integer32):
    """Custom type winlink1000OduAirHssInterSiteSynchronizationMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("independent", 1),
          ("synchronized", 2))
    )


_Winlink1000OduAirHssInterSiteSynchronizationMode_Type.__name__ = "Integer32"
_Winlink1000OduAirHssInterSiteSynchronizationMode_Object = MibScalar
winlink1000OduAirHssInterSiteSynchronizationMode = _Winlink1000OduAirHssInterSiteSynchronizationMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 18),
    _Winlink1000OduAirHssInterSiteSynchronizationMode_Type()
)
winlink1000OduAirHssInterSiteSynchronizationMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirHssInterSiteSynchronizationMode.setStatus("mandatory")


class _Winlink1000OduAirHssInterSiteSynchronizationAvailability_Type(Integer32):
    """Custom type winlink1000OduAirHssInterSiteSynchronizationAvailability based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notAvailable", 1),
          ("available", 2))
    )


_Winlink1000OduAirHssInterSiteSynchronizationAvailability_Type.__name__ = "Integer32"
_Winlink1000OduAirHssInterSiteSynchronizationAvailability_Object = MibScalar
winlink1000OduAirHssInterSiteSynchronizationAvailability = _Winlink1000OduAirHssInterSiteSynchronizationAvailability_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 19),
    _Winlink1000OduAirHssInterSiteSynchronizationAvailability_Type()
)
winlink1000OduAirHssInterSiteSynchronizationAvailability.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssInterSiteSynchronizationAvailability.setStatus("mandatory")


class _Winlink1000OduAirHssSatellitesSatSyncRequired_Type(Integer32):
    """Custom type winlink1000OduAirHssSatellitesSatSyncRequired based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notRequired", 1),
          ("required", 2))
    )


_Winlink1000OduAirHssSatellitesSatSyncRequired_Type.__name__ = "Integer32"
_Winlink1000OduAirHssSatellitesSatSyncRequired_Object = MibScalar
winlink1000OduAirHssSatellitesSatSyncRequired = _Winlink1000OduAirHssSatellitesSatSyncRequired_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 20),
    _Winlink1000OduAirHssSatellitesSatSyncRequired_Type()
)
winlink1000OduAirHssSatellitesSatSyncRequired.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirHssSatellitesSatSyncRequired.setStatus("mandatory")
_Winlink1000OduAirHssDomainID_Type = DisplayString
_Winlink1000OduAirHssDomainID_Object = MibScalar
winlink1000OduAirHssDomainID = _Winlink1000OduAirHssDomainID_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 21),
    _Winlink1000OduAirHssDomainID_Type()
)
winlink1000OduAirHssDomainID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirHssDomainID.setStatus("mandatory")


class _Winlink1000OduAirHssSupportedSynchronizationProtocol_Type(Integer32):
    """Custom type winlink1000OduAirHssSupportedSynchronizationProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("serialOnly", 1),
          ("ethOnly", 2),
          ("both", 3),
          ("ghssAndEth", 4),
          ("ghssEthSerial", 5),
          ("ghssOnly", 6))
    )


_Winlink1000OduAirHssSupportedSynchronizationProtocol_Type.__name__ = "Integer32"
_Winlink1000OduAirHssSupportedSynchronizationProtocol_Object = MibScalar
winlink1000OduAirHssSupportedSynchronizationProtocol = _Winlink1000OduAirHssSupportedSynchronizationProtocol_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 22),
    _Winlink1000OduAirHssSupportedSynchronizationProtocol_Type()
)
winlink1000OduAirHssSupportedSynchronizationProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssSupportedSynchronizationProtocol.setStatus("mandatory")


class _Winlink1000OduAirHssDesiredSynchronizationProtocol_Type(Integer32):
    """Custom type winlink1000OduAirHssDesiredSynchronizationProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("serialOnly", 1),
          ("ethOnly", 2),
          ("both", 3),
          ("ghssOnly", 4))
    )


_Winlink1000OduAirHssDesiredSynchronizationProtocol_Type.__name__ = "Integer32"
_Winlink1000OduAirHssDesiredSynchronizationProtocol_Object = MibScalar
winlink1000OduAirHssDesiredSynchronizationProtocol = _Winlink1000OduAirHssDesiredSynchronizationProtocol_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 23),
    _Winlink1000OduAirHssDesiredSynchronizationProtocol_Type()
)
winlink1000OduAirHssDesiredSynchronizationProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirHssDesiredSynchronizationProtocol.setStatus("mandatory")


class _Winlink1000OduAirHssDiscover_Type(Integer32):
    """Custom type winlink1000OduAirHssDiscover based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("startAll", 1),
          ("startAllMstr", 2),
          ("startMyDmn", 3),
          ("startMyMstr", 4))
    )


_Winlink1000OduAirHssDiscover_Type.__name__ = "Integer32"
_Winlink1000OduAirHssDiscover_Object = MibScalar
winlink1000OduAirHssDiscover = _Winlink1000OduAirHssDiscover_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 24),
    _Winlink1000OduAirHssDiscover_Type()
)
winlink1000OduAirHssDiscover.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirHssDiscover.setStatus("mandatory")


class _Winlink1000OduAirHssNumberOfDiscoveredODUs_Type(Integer32):
    """Custom type winlink1000OduAirHssNumberOfDiscoveredODUs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_Winlink1000OduAirHssNumberOfDiscoveredODUs_Type.__name__ = "Integer32"
_Winlink1000OduAirHssNumberOfDiscoveredODUs_Object = MibScalar
winlink1000OduAirHssNumberOfDiscoveredODUs = _Winlink1000OduAirHssNumberOfDiscoveredODUs_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 25),
    _Winlink1000OduAirHssNumberOfDiscoveredODUs_Type()
)
winlink1000OduAirHssNumberOfDiscoveredODUs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssNumberOfDiscoveredODUs.setStatus("mandatory")
_Winlink1000OduAirHssDiscoverTable_Object = MibTable
winlink1000OduAirHssDiscoverTable = _Winlink1000OduAirHssDiscoverTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 26)
)
if mibBuilder.loadTexts:
    winlink1000OduAirHssDiscoverTable.setStatus("mandatory")
_Winlink1000OduAirHssDiscoverEntry_Object = MibTableRow
winlink1000OduAirHssDiscoverEntry = _Winlink1000OduAirHssDiscoverEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 26, 1)
)
winlink1000OduAirHssDiscoverEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirHssDiscoverIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduAirHssDiscoverEntry.setStatus("mandatory")


class _Winlink1000OduAirHssDiscoverIndex_Type(Integer32):
    """Custom type winlink1000OduAirHssDiscoverIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 256),
    )


_Winlink1000OduAirHssDiscoverIndex_Type.__name__ = "Integer32"
_Winlink1000OduAirHssDiscoverIndex_Object = MibTableColumn
winlink1000OduAirHssDiscoverIndex = _Winlink1000OduAirHssDiscoverIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 26, 1, 1),
    _Winlink1000OduAirHssDiscoverIndex_Type()
)
winlink1000OduAirHssDiscoverIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssDiscoverIndex.setStatus("mandatory")
_Winlink1000OduAirHssDiscoverODUDescription_Type = DisplayString
_Winlink1000OduAirHssDiscoverODUDescription_Object = MibTableColumn
winlink1000OduAirHssDiscoverODUDescription = _Winlink1000OduAirHssDiscoverODUDescription_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 26, 1, 2),
    _Winlink1000OduAirHssDiscoverODUDescription_Type()
)
winlink1000OduAirHssDiscoverODUDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssDiscoverODUDescription.setStatus("mandatory")


class _Winlink1000OduAirHssMasterSlaveCompatibility_Type(Integer32):
    """Custom type winlink1000OduAirHssMasterSlaveCompatibility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("compatible", 1),
          ("notCompatible", 2))
    )


_Winlink1000OduAirHssMasterSlaveCompatibility_Type.__name__ = "Integer32"
_Winlink1000OduAirHssMasterSlaveCompatibility_Object = MibScalar
winlink1000OduAirHssMasterSlaveCompatibility = _Winlink1000OduAirHssMasterSlaveCompatibility_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 27),
    _Winlink1000OduAirHssMasterSlaveCompatibility_Type()
)
winlink1000OduAirHssMasterSlaveCompatibility.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssMasterSlaveCompatibility.setStatus("mandatory")


class _Winlink1000OduAirHssNumberOfAssociatedCU_Type(Integer32):
    """Custom type winlink1000OduAirHssNumberOfAssociatedCU based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 256),
    )


_Winlink1000OduAirHssNumberOfAssociatedCU_Type.__name__ = "Integer32"
_Winlink1000OduAirHssNumberOfAssociatedCU_Object = MibScalar
winlink1000OduAirHssNumberOfAssociatedCU = _Winlink1000OduAirHssNumberOfAssociatedCU_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 28),
    _Winlink1000OduAirHssNumberOfAssociatedCU_Type()
)
winlink1000OduAirHssNumberOfAssociatedCU.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssNumberOfAssociatedCU.setStatus("mandatory")
_Winlink1000OduAirHssAssociatedCUTable_Object = MibTable
winlink1000OduAirHssAssociatedCUTable = _Winlink1000OduAirHssAssociatedCUTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 29)
)
if mibBuilder.loadTexts:
    winlink1000OduAirHssAssociatedCUTable.setStatus("mandatory")
_Winlink1000OduAirHssAssociatedCUTableEntry_Object = MibTableRow
winlink1000OduAirHssAssociatedCUTableEntry = _Winlink1000OduAirHssAssociatedCUTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 29, 1)
)
winlink1000OduAirHssAssociatedCUTableEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirHssAssociatedCUIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduAirHssAssociatedCUTableEntry.setStatus("mandatory")


class _Winlink1000OduAirHssAssociatedCUIndex_Type(Integer32):
    """Custom type winlink1000OduAirHssAssociatedCUIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 256),
    )


_Winlink1000OduAirHssAssociatedCUIndex_Type.__name__ = "Integer32"
_Winlink1000OduAirHssAssociatedCUIndex_Object = MibTableColumn
winlink1000OduAirHssAssociatedCUIndex = _Winlink1000OduAirHssAssociatedCUIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 29, 1, 1),
    _Winlink1000OduAirHssAssociatedCUIndex_Type()
)
winlink1000OduAirHssAssociatedCUIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssAssociatedCUIndex.setStatus("mandatory")
_Winlink1000OduAirHssAssociatedCUDescription_Type = DisplayString
_Winlink1000OduAirHssAssociatedCUDescription_Object = MibTableColumn
winlink1000OduAirHssAssociatedCUDescription = _Winlink1000OduAirHssAssociatedCUDescription_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 29, 1, 2),
    _Winlink1000OduAirHssAssociatedCUDescription_Type()
)
winlink1000OduAirHssAssociatedCUDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssAssociatedCUDescription.setStatus("mandatory")


class _Winlink1000OduAirHssSyncStatusEth_Type(Integer32):
    """Custom type winlink1000OduAirHssSyncStatusEth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("notSynchronized", 2),
          ("goodSynchronizationLevel", 3),
          ("mediumSynchronizationLevel", 4),
          ("badSynchronizationLevel", 5),
          ("startSynchronization", 6))
    )


_Winlink1000OduAirHssSyncStatusEth_Type.__name__ = "Integer32"
_Winlink1000OduAirHssSyncStatusEth_Object = MibScalar
winlink1000OduAirHssSyncStatusEth = _Winlink1000OduAirHssSyncStatusEth_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 30),
    _Winlink1000OduAirHssSyncStatusEth_Type()
)
winlink1000OduAirHssSyncStatusEth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssSyncStatusEth.setStatus("mandatory")


class _Winlink1000OduAirHssEthVLANTag_Type(Integer32):
    """Custom type winlink1000OduAirHssEthVLANTag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 40947),
    )


_Winlink1000OduAirHssEthVLANTag_Type.__name__ = "Integer32"
_Winlink1000OduAirHssEthVLANTag_Object = MibScalar
winlink1000OduAirHssEthVLANTag = _Winlink1000OduAirHssEthVLANTag_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 31),
    _Winlink1000OduAirHssEthVLANTag_Type()
)
winlink1000OduAirHssEthVLANTag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirHssEthVLANTag.setStatus("mandatory")
_Winlink1000OduAirHssHSMIPAddress_Type = IpAddress
_Winlink1000OduAirHssHSMIPAddress_Object = MibScalar
winlink1000OduAirHssHSMIPAddress = _Winlink1000OduAirHssHSMIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 32),
    _Winlink1000OduAirHssHSMIPAddress_Type()
)
winlink1000OduAirHssHSMIPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssHSMIPAddress.setStatus("mandatory")


class _Winlink1000OduAirHssDelayToHSM_Type(Integer32):
    """Custom type winlink1000OduAirHssDelayToHSM based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000000),
    )


_Winlink1000OduAirHssDelayToHSM_Type.__name__ = "Integer32"
_Winlink1000OduAirHssDelayToHSM_Object = MibScalar
winlink1000OduAirHssDelayToHSM = _Winlink1000OduAirHssDelayToHSM_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 33),
    _Winlink1000OduAirHssDelayToHSM_Type()
)
winlink1000OduAirHssDelayToHSM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssDelayToHSM.setStatus("mandatory")
_Winlink1000OduAirHssSyncAcquisitionSeconds_Type = Integer32
_Winlink1000OduAirHssSyncAcquisitionSeconds_Object = MibScalar
winlink1000OduAirHssSyncAcquisitionSeconds = _Winlink1000OduAirHssSyncAcquisitionSeconds_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 34),
    _Winlink1000OduAirHssSyncAcquisitionSeconds_Type()
)
winlink1000OduAirHssSyncAcquisitionSeconds.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirHssSyncAcquisitionSeconds.setStatus("mandatory")
_Winlink1000OduAirHssHSMIPv6Address_Type = DisplayString
_Winlink1000OduAirHssHSMIPv6Address_Object = MibScalar
winlink1000OduAirHssHSMIPv6Address = _Winlink1000OduAirHssHSMIPv6Address_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 35),
    _Winlink1000OduAirHssHSMIPv6Address_Type()
)
winlink1000OduAirHssHSMIPv6Address.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssHSMIPv6Address.setStatus("mandatory")


class _Winlink1000OduAirHssTcMode_Type(Integer32):
    """Custom type winlink1000OduAirHssTcMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_Winlink1000OduAirHssTcMode_Type.__name__ = "Integer32"
_Winlink1000OduAirHssTcMode_Object = MibScalar
winlink1000OduAirHssTcMode = _Winlink1000OduAirHssTcMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 36),
    _Winlink1000OduAirHssTcMode_Type()
)
winlink1000OduAirHssTcMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirHssTcMode.setStatus("mandatory")
_Winlink1000OduAirHssGpsUncertainty_Type = DisplayString
_Winlink1000OduAirHssGpsUncertainty_Object = MibScalar
winlink1000OduAirHssGpsUncertainty = _Winlink1000OduAirHssGpsUncertainty_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 37),
    _Winlink1000OduAirHssGpsUncertainty_Type()
)
winlink1000OduAirHssGpsUncertainty.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirHssGpsUncertainty.setStatus("mandatory")


class _Winlink1000OduAirHssDelayAdaptationEnable_Type(Integer32):
    """Custom type winlink1000OduAirHssDelayAdaptationEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_Winlink1000OduAirHssDelayAdaptationEnable_Type.__name__ = "Integer32"
_Winlink1000OduAirHssDelayAdaptationEnable_Object = MibScalar
winlink1000OduAirHssDelayAdaptationEnable = _Winlink1000OduAirHssDelayAdaptationEnable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 40, 38),
    _Winlink1000OduAirHssDelayAdaptationEnable_Type()
)
winlink1000OduAirHssDelayAdaptationEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirHssDelayAdaptationEnable.setStatus("mandatory")


class _Winlink1000OduAirLockRemote_Type(Integer32):
    """Custom type winlink1000OduAirLockRemote based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unlock", 1),
          ("lock", 2))
    )


_Winlink1000OduAirLockRemote_Type.__name__ = "Integer32"
_Winlink1000OduAirLockRemote_Object = MibScalar
winlink1000OduAirLockRemote = _Winlink1000OduAirLockRemote_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 41),
    _Winlink1000OduAirLockRemote_Type()
)
winlink1000OduAirLockRemote.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirLockRemote.setStatus("mandatory")
_Winlink1000OduAirAntennaGain_Type = Integer32
_Winlink1000OduAirAntennaGain_Object = MibScalar
winlink1000OduAirAntennaGain = _Winlink1000OduAirAntennaGain_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 42),
    _Winlink1000OduAirAntennaGain_Type()
)
winlink1000OduAirAntennaGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirAntennaGain.setStatus("mandatory")
_Winlink1000OduAirFeederLoss_Type = Integer32
_Winlink1000OduAirFeederLoss_Object = MibScalar
winlink1000OduAirFeederLoss = _Winlink1000OduAirFeederLoss_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 43),
    _Winlink1000OduAirFeederLoss_Type()
)
winlink1000OduAirFeederLoss.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirFeederLoss.setStatus("mandatory")
_Winlink1000OduAirMaxAntennaGain_Type = Integer32
_Winlink1000OduAirMaxAntennaGain_Object = MibScalar
winlink1000OduAirMaxAntennaGain = _Winlink1000OduAirMaxAntennaGain_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 44),
    _Winlink1000OduAirMaxAntennaGain_Type()
)
winlink1000OduAirMaxAntennaGain.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirMaxAntennaGain.setStatus("mandatory")
_Winlink1000OduAirMinAntennaGain_Type = Integer32
_Winlink1000OduAirMinAntennaGain_Object = MibScalar
winlink1000OduAirMinAntennaGain = _Winlink1000OduAirMinAntennaGain_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 45),
    _Winlink1000OduAirMinAntennaGain_Type()
)
winlink1000OduAirMinAntennaGain.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirMinAntennaGain.setStatus("mandatory")
_Winlink1000OduAirMaxEIRP_Type = Integer32
_Winlink1000OduAirMaxEIRP_Object = MibScalar
winlink1000OduAirMaxEIRP = _Winlink1000OduAirMaxEIRP_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 46),
    _Winlink1000OduAirMaxEIRP_Type()
)
winlink1000OduAirMaxEIRP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirMaxEIRP.setStatus("mandatory")


class _Winlink1000OduAirAntennaGainConfigSupport_Type(Integer32):
    """Custom type winlink1000OduAirAntennaGainConfigSupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("supported", 1),
          ("notSupported", 2))
    )


_Winlink1000OduAirAntennaGainConfigSupport_Type.__name__ = "Integer32"
_Winlink1000OduAirAntennaGainConfigSupport_Object = MibScalar
winlink1000OduAirAntennaGainConfigSupport = _Winlink1000OduAirAntennaGainConfigSupport_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 47),
    _Winlink1000OduAirAntennaGainConfigSupport_Type()
)
winlink1000OduAirAntennaGainConfigSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirAntennaGainConfigSupport.setStatus("mandatory")


class _Winlink1000OduAirAntennaType_Type(Integer32):
    """Custom type winlink1000OduAirAntennaType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("single", 1),
          ("dual", 2),
          ("unDefined", 3),
          ("triple", 4))
    )


_Winlink1000OduAirAntennaType_Type.__name__ = "Integer32"
_Winlink1000OduAirAntennaType_Object = MibScalar
winlink1000OduAirAntennaType = _Winlink1000OduAirAntennaType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 48),
    _Winlink1000OduAirAntennaType_Type()
)
winlink1000OduAirAntennaType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirAntennaType.setStatus("mandatory")


class _Winlink1000OduAirRssBalance_Type(Integer32):
    """Custom type winlink1000OduAirRssBalance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-2, 2),
    )


_Winlink1000OduAirRssBalance_Type.__name__ = "Integer32"
_Winlink1000OduAirRssBalance_Object = MibScalar
winlink1000OduAirRssBalance = _Winlink1000OduAirRssBalance_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 49),
    _Winlink1000OduAirRssBalance_Type()
)
winlink1000OduAirRssBalance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirRssBalance.setStatus("mandatory")
_Winlink1000OduAirTotalTxPower_Type = Integer32
_Winlink1000OduAirTotalTxPower_Object = MibScalar
winlink1000OduAirTotalTxPower = _Winlink1000OduAirTotalTxPower_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 50),
    _Winlink1000OduAirTotalTxPower_Type()
)
winlink1000OduAirTotalTxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirTotalTxPower.setStatus("mandatory")
_Winlink1000OduAirInstallFreqAndCBW_Type = DisplayString
_Winlink1000OduAirInstallFreqAndCBW_Object = MibScalar
winlink1000OduAirInstallFreqAndCBW = _Winlink1000OduAirInstallFreqAndCBW_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 51),
    _Winlink1000OduAirInstallFreqAndCBW_Type()
)
winlink1000OduAirInstallFreqAndCBW.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirInstallFreqAndCBW.setStatus("mandatory")


class _Winlink1000OduAirDFStype_Type(Integer32):
    """Custom type winlink1000OduAirDFStype based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              40,
              50,
              51)
        )
    )
    namedValues = NamedValues(
        *(("dfs01", 1),
          ("dfs02", 2),
          ("dfs04", 4),
          ("dfs40", 40),
          ("dfs50", 50),
          ("dfs51", 51))
    )


_Winlink1000OduAirDFStype_Type.__name__ = "Integer32"
_Winlink1000OduAirDFStype_Object = MibScalar
winlink1000OduAirDFStype = _Winlink1000OduAirDFStype_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 52),
    _Winlink1000OduAirDFStype_Type()
)
winlink1000OduAirDFStype.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirDFStype.setStatus("mandatory")
_Winlink1000OduAirCombo_ObjectIdentity = ObjectIdentity
winlink1000OduAirCombo = _Winlink1000OduAirCombo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53)
)
_Winlink1000OduAirComboSubBandTable_Object = MibTable
winlink1000OduAirComboSubBandTable = _Winlink1000OduAirComboSubBandTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1)
)
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandTable.setStatus("mandatory")
_Winlink1000OduAirComboSubBandEntry_Object = MibTableRow
winlink1000OduAirComboSubBandEntry = _Winlink1000OduAirComboSubBandEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1)
)
winlink1000OduAirComboSubBandEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirComboSubBandIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandEntry.setStatus("mandatory")


class _Winlink1000OduAirComboSubBandIndex_Type(Integer32):
    """Custom type winlink1000OduAirComboSubBandIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000OduAirComboSubBandIndex_Type.__name__ = "Integer32"
_Winlink1000OduAirComboSubBandIndex_Object = MibTableColumn
winlink1000OduAirComboSubBandIndex = _Winlink1000OduAirComboSubBandIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 1),
    _Winlink1000OduAirComboSubBandIndex_Type()
)
winlink1000OduAirComboSubBandIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandIndex.setStatus("mandatory")
_Winlink1000OduAirComboSubBandId_Type = DisplayString
_Winlink1000OduAirComboSubBandId_Object = MibTableColumn
winlink1000OduAirComboSubBandId = _Winlink1000OduAirComboSubBandId_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 2),
    _Winlink1000OduAirComboSubBandId_Type()
)
winlink1000OduAirComboSubBandId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandId.setStatus("mandatory")
_Winlink1000OduAirComboSubBandDescription_Type = DisplayString
_Winlink1000OduAirComboSubBandDescription_Object = MibTableColumn
winlink1000OduAirComboSubBandDescription = _Winlink1000OduAirComboSubBandDescription_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 3),
    _Winlink1000OduAirComboSubBandDescription_Type()
)
winlink1000OduAirComboSubBandDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandDescription.setStatus("mandatory")
_Winlink1000OduAirComboSubBandInstallFreq_Type = Integer32
_Winlink1000OduAirComboSubBandInstallFreq_Object = MibTableColumn
winlink1000OduAirComboSubBandInstallFreq = _Winlink1000OduAirComboSubBandInstallFreq_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 4),
    _Winlink1000OduAirComboSubBandInstallFreq_Type()
)
winlink1000OduAirComboSubBandInstallFreq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandInstallFreq.setStatus("mandatory")


class _Winlink1000OduAirComboSubBandAdminState_Type(Integer32):
    """Custom type winlink1000OduAirComboSubBandAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_Winlink1000OduAirComboSubBandAdminState_Type.__name__ = "Integer32"
_Winlink1000OduAirComboSubBandAdminState_Object = MibTableColumn
winlink1000OduAirComboSubBandAdminState = _Winlink1000OduAirComboSubBandAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 5),
    _Winlink1000OduAirComboSubBandAdminState_Type()
)
winlink1000OduAirComboSubBandAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandAdminState.setStatus("mandatory")


class _Winlink1000OduAirComboSubBandInstallationAllowed_Type(Integer32):
    """Custom type winlink1000OduAirComboSubBandInstallationAllowed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("yes", 1),
          ("no", 2),
          ("inactive", 3))
    )


_Winlink1000OduAirComboSubBandInstallationAllowed_Type.__name__ = "Integer32"
_Winlink1000OduAirComboSubBandInstallationAllowed_Object = MibTableColumn
winlink1000OduAirComboSubBandInstallationAllowed = _Winlink1000OduAirComboSubBandInstallationAllowed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 6),
    _Winlink1000OduAirComboSubBandInstallationAllowed_Type()
)
winlink1000OduAirComboSubBandInstallationAllowed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandInstallationAllowed.setStatus("mandatory")
_Winlink1000OduAirComboFrequencyBandId_Type = Integer32
_Winlink1000OduAirComboFrequencyBandId_Object = MibTableColumn
winlink1000OduAirComboFrequencyBandId = _Winlink1000OduAirComboFrequencyBandId_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 7),
    _Winlink1000OduAirComboFrequencyBandId_Type()
)
winlink1000OduAirComboFrequencyBandId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboFrequencyBandId.setStatus("mandatory")
_Winlink1000OduAirComboSubBandChannelBW5AdminState_Type = DisplayString
_Winlink1000OduAirComboSubBandChannelBW5AdminState_Object = MibTableColumn
winlink1000OduAirComboSubBandChannelBW5AdminState = _Winlink1000OduAirComboSubBandChannelBW5AdminState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 8),
    _Winlink1000OduAirComboSubBandChannelBW5AdminState_Type()
)
winlink1000OduAirComboSubBandChannelBW5AdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandChannelBW5AdminState.setStatus("mandatory")
_Winlink1000OduAirComboSubBandChannelBW10AdminState_Type = DisplayString
_Winlink1000OduAirComboSubBandChannelBW10AdminState_Object = MibTableColumn
winlink1000OduAirComboSubBandChannelBW10AdminState = _Winlink1000OduAirComboSubBandChannelBW10AdminState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 9),
    _Winlink1000OduAirComboSubBandChannelBW10AdminState_Type()
)
winlink1000OduAirComboSubBandChannelBW10AdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandChannelBW10AdminState.setStatus("mandatory")
_Winlink1000OduAirComboSubBandChannelBW20AdminState_Type = DisplayString
_Winlink1000OduAirComboSubBandChannelBW20AdminState_Object = MibTableColumn
winlink1000OduAirComboSubBandChannelBW20AdminState = _Winlink1000OduAirComboSubBandChannelBW20AdminState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 10),
    _Winlink1000OduAirComboSubBandChannelBW20AdminState_Type()
)
winlink1000OduAirComboSubBandChannelBW20AdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandChannelBW20AdminState.setStatus("mandatory")
_Winlink1000OduAirComboSubBandChannelBW40AdminState_Type = DisplayString
_Winlink1000OduAirComboSubBandChannelBW40AdminState_Object = MibTableColumn
winlink1000OduAirComboSubBandChannelBW40AdminState = _Winlink1000OduAirComboSubBandChannelBW40AdminState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 11),
    _Winlink1000OduAirComboSubBandChannelBW40AdminState_Type()
)
winlink1000OduAirComboSubBandChannelBW40AdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandChannelBW40AdminState.setStatus("mandatory")
_Winlink1000OduAirComboSubBandAllowableChannels_Type = DisplayString
_Winlink1000OduAirComboSubBandAllowableChannels_Object = MibTableColumn
winlink1000OduAirComboSubBandAllowableChannels = _Winlink1000OduAirComboSubBandAllowableChannels_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 12),
    _Winlink1000OduAirComboSubBandAllowableChannels_Type()
)
winlink1000OduAirComboSubBandAllowableChannels.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandAllowableChannels.setStatus("mandatory")
_Winlink1000OduAirComboSubBandChannelBWAvail_Type = DisplayString
_Winlink1000OduAirComboSubBandChannelBWAvail_Object = MibTableColumn
winlink1000OduAirComboSubBandChannelBWAvail = _Winlink1000OduAirComboSubBandChannelBWAvail_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 13),
    _Winlink1000OduAirComboSubBandChannelBWAvail_Type()
)
winlink1000OduAirComboSubBandChannelBWAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandChannelBWAvail.setStatus("mandatory")
_Winlink1000OduAirComboSubBandChannelBandwidth_Type = Integer32
_Winlink1000OduAirComboSubBandChannelBandwidth_Object = MibTableColumn
winlink1000OduAirComboSubBandChannelBandwidth = _Winlink1000OduAirComboSubBandChannelBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 14),
    _Winlink1000OduAirComboSubBandChannelBandwidth_Type()
)
winlink1000OduAirComboSubBandChannelBandwidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandChannelBandwidth.setStatus("mandatory")
_Winlink1000OduAirComboSubBandMinFreq_Type = Integer32
_Winlink1000OduAirComboSubBandMinFreq_Object = MibTableColumn
winlink1000OduAirComboSubBandMinFreq = _Winlink1000OduAirComboSubBandMinFreq_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 15),
    _Winlink1000OduAirComboSubBandMinFreq_Type()
)
winlink1000OduAirComboSubBandMinFreq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandMinFreq.setStatus("mandatory")
_Winlink1000OduAirComboSubBandMaxFreq_Type = Integer32
_Winlink1000OduAirComboSubBandMaxFreq_Object = MibTableColumn
winlink1000OduAirComboSubBandMaxFreq = _Winlink1000OduAirComboSubBandMaxFreq_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 16),
    _Winlink1000OduAirComboSubBandMaxFreq_Type()
)
winlink1000OduAirComboSubBandMaxFreq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandMaxFreq.setStatus("mandatory")
_Winlink1000OduAirComboSubBandFrequencyResolution_Type = Integer32
_Winlink1000OduAirComboSubBandFrequencyResolution_Object = MibTableColumn
winlink1000OduAirComboSubBandFrequencyResolution = _Winlink1000OduAirComboSubBandFrequencyResolution_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 17),
    _Winlink1000OduAirComboSubBandFrequencyResolution_Type()
)
winlink1000OduAirComboSubBandFrequencyResolution.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandFrequencyResolution.setStatus("mandatory")
_Winlink1000OduAirComboSubBandDefaultChannelList_Type = DisplayString
_Winlink1000OduAirComboSubBandDefaultChannelList_Object = MibTableColumn
winlink1000OduAirComboSubBandDefaultChannelList = _Winlink1000OduAirComboSubBandDefaultChannelList_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 18),
    _Winlink1000OduAirComboSubBandDefaultChannelList_Type()
)
winlink1000OduAirComboSubBandDefaultChannelList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandDefaultChannelList.setStatus("mandatory")
_Winlink1000OduAirComboSubBandDfsState_Type = Integer32
_Winlink1000OduAirComboSubBandDfsState_Object = MibTableColumn
winlink1000OduAirComboSubBandDfsState = _Winlink1000OduAirComboSubBandDfsState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 19),
    _Winlink1000OduAirComboSubBandDfsState_Type()
)
winlink1000OduAirComboSubBandDfsState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandDfsState.setStatus("mandatory")
_Winlink1000OduAirComboSubBandChannelBW80AdminState_Type = DisplayString
_Winlink1000OduAirComboSubBandChannelBW80AdminState_Object = MibTableColumn
winlink1000OduAirComboSubBandChannelBW80AdminState = _Winlink1000OduAirComboSubBandChannelBW80AdminState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 20),
    _Winlink1000OduAirComboSubBandChannelBW80AdminState_Type()
)
winlink1000OduAirComboSubBandChannelBW80AdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandChannelBW80AdminState.setStatus("mandatory")
_Winlink1000OduAirComboSubBandChannelBW7AdminState_Type = DisplayString
_Winlink1000OduAirComboSubBandChannelBW7AdminState_Object = MibTableColumn
winlink1000OduAirComboSubBandChannelBW7AdminState = _Winlink1000OduAirComboSubBandChannelBW7AdminState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 21),
    _Winlink1000OduAirComboSubBandChannelBW7AdminState_Type()
)
winlink1000OduAirComboSubBandChannelBW7AdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandChannelBW7AdminState.setStatus("mandatory")
_Winlink1000OduAirComboSubBandChannelBW14AdminState_Type = DisplayString
_Winlink1000OduAirComboSubBandChannelBW14AdminState_Object = MibTableColumn
winlink1000OduAirComboSubBandChannelBW14AdminState = _Winlink1000OduAirComboSubBandChannelBW14AdminState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 22),
    _Winlink1000OduAirComboSubBandChannelBW14AdminState_Type()
)
winlink1000OduAirComboSubBandChannelBW14AdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandChannelBW14AdminState.setStatus("mandatory")
_Winlink1000OduAirComboSubBandMinTxPower_Type = Integer32
_Winlink1000OduAirComboSubBandMinTxPower_Object = MibTableColumn
winlink1000OduAirComboSubBandMinTxPower = _Winlink1000OduAirComboSubBandMinTxPower_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 23),
    _Winlink1000OduAirComboSubBandMinTxPower_Type()
)
winlink1000OduAirComboSubBandMinTxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandMinTxPower.setStatus("mandatory")
_Winlink1000OduAirComboSubBandMaxTxPower_Type = Integer32
_Winlink1000OduAirComboSubBandMaxTxPower_Object = MibTableColumn
winlink1000OduAirComboSubBandMaxTxPower = _Winlink1000OduAirComboSubBandMaxTxPower_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 24),
    _Winlink1000OduAirComboSubBandMaxTxPower_Type()
)
winlink1000OduAirComboSubBandMaxTxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandMaxTxPower.setStatus("mandatory")
_Winlink1000OduAirComboSubBandDefaultAntennaGain_Type = Integer32
_Winlink1000OduAirComboSubBandDefaultAntennaGain_Object = MibTableColumn
winlink1000OduAirComboSubBandDefaultAntennaGain = _Winlink1000OduAirComboSubBandDefaultAntennaGain_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 25),
    _Winlink1000OduAirComboSubBandDefaultAntennaGain_Type()
)
winlink1000OduAirComboSubBandDefaultAntennaGain.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandDefaultAntennaGain.setStatus("mandatory")
_Winlink1000OduAirComboSubBandDefaultFeederLoss_Type = Integer32
_Winlink1000OduAirComboSubBandDefaultFeederLoss_Object = MibTableColumn
winlink1000OduAirComboSubBandDefaultFeederLoss = _Winlink1000OduAirComboSubBandDefaultFeederLoss_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 26),
    _Winlink1000OduAirComboSubBandDefaultFeederLoss_Type()
)
winlink1000OduAirComboSubBandDefaultFeederLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandDefaultFeederLoss.setStatus("mandatory")
_Winlink1000OduAirComboSubBandMaxAntennaGain_Type = Integer32
_Winlink1000OduAirComboSubBandMaxAntennaGain_Object = MibTableColumn
winlink1000OduAirComboSubBandMaxAntennaGain = _Winlink1000OduAirComboSubBandMaxAntennaGain_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 27),
    _Winlink1000OduAirComboSubBandMaxAntennaGain_Type()
)
winlink1000OduAirComboSubBandMaxAntennaGain.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandMaxAntennaGain.setStatus("mandatory")
_Winlink1000OduAirComboSubBandMinAntennaGain_Type = Integer32
_Winlink1000OduAirComboSubBandMinAntennaGain_Object = MibTableColumn
winlink1000OduAirComboSubBandMinAntennaGain = _Winlink1000OduAirComboSubBandMinAntennaGain_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 28),
    _Winlink1000OduAirComboSubBandMinAntennaGain_Type()
)
winlink1000OduAirComboSubBandMinAntennaGain.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandMinAntennaGain.setStatus("mandatory")


class _Winlink1000OduAirComboSubBandDfsType_Type(Integer32):
    """Custom type winlink1000OduAirComboSubBandDfsType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              40,
              50,
              51)
        )
    )
    namedValues = NamedValues(
        *(("dfs01", 1),
          ("dfs02", 2),
          ("dfs04", 4),
          ("dfs40", 40),
          ("dfs50", 50),
          ("dfs51", 51))
    )


_Winlink1000OduAirComboSubBandDfsType_Type.__name__ = "Integer32"
_Winlink1000OduAirComboSubBandDfsType_Object = MibTableColumn
winlink1000OduAirComboSubBandDfsType = _Winlink1000OduAirComboSubBandDfsType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 29),
    _Winlink1000OduAirComboSubBandDfsType_Type()
)
winlink1000OduAirComboSubBandDfsType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandDfsType.setStatus("mandatory")
_Winlink1000OduAirComboSubBandAtpcTargetRSSPerRate_Type = DisplayString
_Winlink1000OduAirComboSubBandAtpcTargetRSSPerRate_Object = MibTableColumn
winlink1000OduAirComboSubBandAtpcTargetRSSPerRate = _Winlink1000OduAirComboSubBandAtpcTargetRSSPerRate_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 1, 1, 30),
    _Winlink1000OduAirComboSubBandAtpcTargetRSSPerRate_Type()
)
winlink1000OduAirComboSubBandAtpcTargetRSSPerRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSubBandAtpcTargetRSSPerRate.setStatus("mandatory")
_Winlink1000OduAirComboNumberOfSubBands_Type = Integer32
_Winlink1000OduAirComboNumberOfSubBands_Object = MibScalar
winlink1000OduAirComboNumberOfSubBands = _Winlink1000OduAirComboNumberOfSubBands_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 2),
    _Winlink1000OduAirComboNumberOfSubBands_Type()
)
winlink1000OduAirComboNumberOfSubBands.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboNumberOfSubBands.setStatus("mandatory")
_Winlink1000OduAirComboSwitchSubBand_Type = DisplayString
_Winlink1000OduAirComboSwitchSubBand_Object = MibScalar
winlink1000OduAirComboSwitchSubBand = _Winlink1000OduAirComboSwitchSubBand_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 3),
    _Winlink1000OduAirComboSwitchSubBand_Type()
)
winlink1000OduAirComboSwitchSubBand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirComboSwitchSubBand.setStatus("mandatory")
_Winlink1000OduAirComboCurrentSubBandDesc_Type = DisplayString
_Winlink1000OduAirComboCurrentSubBandDesc_Object = MibScalar
winlink1000OduAirComboCurrentSubBandDesc = _Winlink1000OduAirComboCurrentSubBandDesc_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 4),
    _Winlink1000OduAirComboCurrentSubBandDesc_Type()
)
winlink1000OduAirComboCurrentSubBandDesc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboCurrentSubBandDesc.setStatus("mandatory")
_Winlink1000OduAirComboCurrentFrequencyBandID_Type = Integer32
_Winlink1000OduAirComboCurrentFrequencyBandID_Object = MibScalar
winlink1000OduAirComboCurrentFrequencyBandID = _Winlink1000OduAirComboCurrentFrequencyBandID_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 5),
    _Winlink1000OduAirComboCurrentFrequencyBandID_Type()
)
winlink1000OduAirComboCurrentFrequencyBandID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboCurrentFrequencyBandID.setStatus("mandatory")
_Winlink1000OduAirComboBandsCompressedTable_Object = MibTable
winlink1000OduAirComboBandsCompressedTable = _Winlink1000OduAirComboBandsCompressedTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 6)
)
if mibBuilder.loadTexts:
    winlink1000OduAirComboBandsCompressedTable.setStatus("mandatory")
_Winlink1000OduAirComboBandsCompressedEntry_Object = MibTableRow
winlink1000OduAirComboBandsCompressedEntry = _Winlink1000OduAirComboBandsCompressedEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 6, 1)
)
winlink1000OduAirComboBandsCompressedEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirComboBandsCompressedIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduAirComboBandsCompressedEntry.setStatus("mandatory")


class _Winlink1000OduAirComboBandsCompressedIndex_Type(Integer32):
    """Custom type winlink1000OduAirComboBandsCompressedIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000OduAirComboBandsCompressedIndex_Type.__name__ = "Integer32"
_Winlink1000OduAirComboBandsCompressedIndex_Object = MibTableColumn
winlink1000OduAirComboBandsCompressedIndex = _Winlink1000OduAirComboBandsCompressedIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 6, 1, 1),
    _Winlink1000OduAirComboBandsCompressedIndex_Type()
)
winlink1000OduAirComboBandsCompressedIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboBandsCompressedIndex.setStatus("mandatory")
_Winlink1000OduAirComboBandsCompressed_Type = OctetString
_Winlink1000OduAirComboBandsCompressed_Object = MibTableColumn
winlink1000OduAirComboBandsCompressed = _Winlink1000OduAirComboBandsCompressed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 53, 6, 1, 2),
    _Winlink1000OduAirComboBandsCompressed_Type()
)
winlink1000OduAirComboBandsCompressed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirComboBandsCompressed.setStatus("mandatory")
_Winlink1000OduAirInternalMaxRate_Type = Integer32
_Winlink1000OduAirInternalMaxRate_Object = MibScalar
winlink1000OduAirInternalMaxRate = _Winlink1000OduAirInternalMaxRate_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 54),
    _Winlink1000OduAirInternalMaxRate_Type()
)
winlink1000OduAirInternalMaxRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirInternalMaxRate.setStatus("mandatory")


class _Winlink1000OduAirCapacityDirection_Type(Integer32):
    """Custom type winlink1000OduAirCapacityDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("undefined", 1),
          ("low", 2),
          ("high", 3))
    )


_Winlink1000OduAirCapacityDirection_Type.__name__ = "Integer32"
_Winlink1000OduAirCapacityDirection_Object = MibScalar
winlink1000OduAirCapacityDirection = _Winlink1000OduAirCapacityDirection_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 55),
    _Winlink1000OduAirCapacityDirection_Type()
)
winlink1000OduAirCapacityDirection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirCapacityDirection.setStatus("mandatory")
_Winlink1000OduAirSpectrumAnalysis_ObjectIdentity = ObjectIdentity
winlink1000OduAirSpectrumAnalysis = _Winlink1000OduAirSpectrumAnalysis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56)
)


class _Winlink1000OduAirSpectrumAnalysisOperState_Type(Integer32):
    """Custom type winlink1000OduAirSpectrumAnalysisOperState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notSupported", 1),
          ("stopSpectrumAnalysis", 2),
          ("startSpectrumAnalysis", 3),
          ("restartSpectrumAnalysis", 4))
    )


_Winlink1000OduAirSpectrumAnalysisOperState_Type.__name__ = "Integer32"
_Winlink1000OduAirSpectrumAnalysisOperState_Object = MibScalar
winlink1000OduAirSpectrumAnalysisOperState = _Winlink1000OduAirSpectrumAnalysisOperState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 1),
    _Winlink1000OduAirSpectrumAnalysisOperState_Type()
)
winlink1000OduAirSpectrumAnalysisOperState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirSpectrumAnalysisOperState.setStatus("mandatory")
_Winlink1000OduAirRxPowerAntennaA_Type = Integer32
_Winlink1000OduAirRxPowerAntennaA_Object = MibScalar
winlink1000OduAirRxPowerAntennaA = _Winlink1000OduAirRxPowerAntennaA_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 2),
    _Winlink1000OduAirRxPowerAntennaA_Type()
)
winlink1000OduAirRxPowerAntennaA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirRxPowerAntennaA.setStatus("mandatory")
_Winlink1000OduAirRxPowerAntennaB_Type = Integer32
_Winlink1000OduAirRxPowerAntennaB_Object = MibScalar
winlink1000OduAirRxPowerAntennaB = _Winlink1000OduAirRxPowerAntennaB_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 3),
    _Winlink1000OduAirRxPowerAntennaB_Type()
)
winlink1000OduAirRxPowerAntennaB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirRxPowerAntennaB.setStatus("mandatory")
_Winlink1000OduAirNumberOfSpectrumChannels_Type = Integer32
_Winlink1000OduAirNumberOfSpectrumChannels_Object = MibScalar
winlink1000OduAirNumberOfSpectrumChannels = _Winlink1000OduAirNumberOfSpectrumChannels_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 4),
    _Winlink1000OduAirNumberOfSpectrumChannels_Type()
)
winlink1000OduAirNumberOfSpectrumChannels.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirNumberOfSpectrumChannels.setStatus("mandatory")
_Winlink1000OduAirSpectrumChannelTable_Object = MibTable
winlink1000OduAirSpectrumChannelTable = _Winlink1000OduAirSpectrumChannelTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 5)
)
if mibBuilder.loadTexts:
    winlink1000OduAirSpectrumChannelTable.setStatus("mandatory")
_Winlink1000OduAirSpectrumChannelTableEntry_Object = MibTableRow
winlink1000OduAirSpectrumChannelTableEntry = _Winlink1000OduAirSpectrumChannelTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 5, 1)
)
winlink1000OduAirSpectrumChannelTableEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirSpectrumChannelIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduAirSpectrumChannelTableEntry.setStatus("mandatory")


class _Winlink1000OduAirSpectrumChannelIndex_Type(Integer32):
    """Custom type winlink1000OduAirSpectrumChannelIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000000),
    )


_Winlink1000OduAirSpectrumChannelIndex_Type.__name__ = "Integer32"
_Winlink1000OduAirSpectrumChannelIndex_Object = MibTableColumn
winlink1000OduAirSpectrumChannelIndex = _Winlink1000OduAirSpectrumChannelIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 5, 1, 1),
    _Winlink1000OduAirSpectrumChannelIndex_Type()
)
winlink1000OduAirSpectrumChannelIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirSpectrumChannelIndex.setStatus("mandatory")
_Winlink1000OduAirSpectrumChannelFrequency_Type = Integer32
_Winlink1000OduAirSpectrumChannelFrequency_Object = MibTableColumn
winlink1000OduAirSpectrumChannelFrequency = _Winlink1000OduAirSpectrumChannelFrequency_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 5, 1, 2),
    _Winlink1000OduAirSpectrumChannelFrequency_Type()
)
winlink1000OduAirSpectrumChannelFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirSpectrumChannelFrequency.setStatus("mandatory")


class _Winlink1000OduAirSpectrumChannelScanned_Type(Integer32):
    """Custom type winlink1000OduAirSpectrumChannelScanned based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notScanned", 1),
          ("scanned", 2))
    )


_Winlink1000OduAirSpectrumChannelScanned_Type.__name__ = "Integer32"
_Winlink1000OduAirSpectrumChannelScanned_Object = MibTableColumn
winlink1000OduAirSpectrumChannelScanned = _Winlink1000OduAirSpectrumChannelScanned_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 5, 1, 3),
    _Winlink1000OduAirSpectrumChannelScanned_Type()
)
winlink1000OduAirSpectrumChannelScanned.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirSpectrumChannelScanned.setStatus("mandatory")
_Winlink1000OduAirSpectrumChannelScanningTimestamp_Type = TimeTicks
_Winlink1000OduAirSpectrumChannelScanningTimestamp_Object = MibTableColumn
winlink1000OduAirSpectrumChannelScanningTimestamp = _Winlink1000OduAirSpectrumChannelScanningTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 5, 1, 4),
    _Winlink1000OduAirSpectrumChannelScanningTimestamp_Type()
)
winlink1000OduAirSpectrumChannelScanningTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirSpectrumChannelScanningTimestamp.setStatus("mandatory")
_Winlink1000OduAirSpectrumChannelLastNFAntennaA_Type = Integer32
_Winlink1000OduAirSpectrumChannelLastNFAntennaA_Object = MibTableColumn
winlink1000OduAirSpectrumChannelLastNFAntennaA = _Winlink1000OduAirSpectrumChannelLastNFAntennaA_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 5, 1, 5),
    _Winlink1000OduAirSpectrumChannelLastNFAntennaA_Type()
)
winlink1000OduAirSpectrumChannelLastNFAntennaA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirSpectrumChannelLastNFAntennaA.setStatus("mandatory")
_Winlink1000OduAirSpectrumChannelLastNFAntennaB_Type = Integer32
_Winlink1000OduAirSpectrumChannelLastNFAntennaB_Object = MibTableColumn
winlink1000OduAirSpectrumChannelLastNFAntennaB = _Winlink1000OduAirSpectrumChannelLastNFAntennaB_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 5, 1, 6),
    _Winlink1000OduAirSpectrumChannelLastNFAntennaB_Type()
)
winlink1000OduAirSpectrumChannelLastNFAntennaB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirSpectrumChannelLastNFAntennaB.setStatus("mandatory")
_Winlink1000OduAirSpectrumChannelAverageNFAntennaA_Type = Integer32
_Winlink1000OduAirSpectrumChannelAverageNFAntennaA_Object = MibTableColumn
winlink1000OduAirSpectrumChannelAverageNFAntennaA = _Winlink1000OduAirSpectrumChannelAverageNFAntennaA_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 5, 1, 7),
    _Winlink1000OduAirSpectrumChannelAverageNFAntennaA_Type()
)
winlink1000OduAirSpectrumChannelAverageNFAntennaA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirSpectrumChannelAverageNFAntennaA.setStatus("mandatory")
_Winlink1000OduAirSpectrumChannelAverageNFAntennaB_Type = Integer32
_Winlink1000OduAirSpectrumChannelAverageNFAntennaB_Object = MibTableColumn
winlink1000OduAirSpectrumChannelAverageNFAntennaB = _Winlink1000OduAirSpectrumChannelAverageNFAntennaB_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 5, 1, 8),
    _Winlink1000OduAirSpectrumChannelAverageNFAntennaB_Type()
)
winlink1000OduAirSpectrumChannelAverageNFAntennaB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirSpectrumChannelAverageNFAntennaB.setStatus("mandatory")
_Winlink1000OduAirSpectrumChannelMaxNFAntennaA_Type = Integer32
_Winlink1000OduAirSpectrumChannelMaxNFAntennaA_Object = MibTableColumn
winlink1000OduAirSpectrumChannelMaxNFAntennaA = _Winlink1000OduAirSpectrumChannelMaxNFAntennaA_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 5, 1, 9),
    _Winlink1000OduAirSpectrumChannelMaxNFAntennaA_Type()
)
winlink1000OduAirSpectrumChannelMaxNFAntennaA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirSpectrumChannelMaxNFAntennaA.setStatus("mandatory")
_Winlink1000OduAirSpectrumChannelMaxNFAntennaB_Type = Integer32
_Winlink1000OduAirSpectrumChannelMaxNFAntennaB_Object = MibTableColumn
winlink1000OduAirSpectrumChannelMaxNFAntennaB = _Winlink1000OduAirSpectrumChannelMaxNFAntennaB_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 5, 1, 10),
    _Winlink1000OduAirSpectrumChannelMaxNFAntennaB_Type()
)
winlink1000OduAirSpectrumChannelMaxNFAntennaB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirSpectrumChannelMaxNFAntennaB.setStatus("mandatory")


class _Winlink1000OduAirSpectrumChannelCACPerformed_Type(Integer32):
    """Custom type winlink1000OduAirSpectrumChannelCACPerformed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notPerformed", 1),
          ("performed", 2))
    )


_Winlink1000OduAirSpectrumChannelCACPerformed_Type.__name__ = "Integer32"
_Winlink1000OduAirSpectrumChannelCACPerformed_Object = MibTableColumn
winlink1000OduAirSpectrumChannelCACPerformed = _Winlink1000OduAirSpectrumChannelCACPerformed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 5, 1, 11),
    _Winlink1000OduAirSpectrumChannelCACPerformed_Type()
)
winlink1000OduAirSpectrumChannelCACPerformed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirSpectrumChannelCACPerformed.setStatus("mandatory")
_Winlink1000OduAirSpectrumChannelLastCACTimestamp_Type = TimeTicks
_Winlink1000OduAirSpectrumChannelLastCACTimestamp_Object = MibTableColumn
winlink1000OduAirSpectrumChannelLastCACTimestamp = _Winlink1000OduAirSpectrumChannelLastCACTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 5, 1, 12),
    _Winlink1000OduAirSpectrumChannelLastCACTimestamp_Type()
)
winlink1000OduAirSpectrumChannelLastCACTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirSpectrumChannelLastCACTimestamp.setStatus("mandatory")


class _Winlink1000OduAirSpectrumChannelRadarDetected_Type(Integer32):
    """Custom type winlink1000OduAirSpectrumChannelRadarDetected based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notDetected", 1),
          ("detected", 2))
    )


_Winlink1000OduAirSpectrumChannelRadarDetected_Type.__name__ = "Integer32"
_Winlink1000OduAirSpectrumChannelRadarDetected_Object = MibTableColumn
winlink1000OduAirSpectrumChannelRadarDetected = _Winlink1000OduAirSpectrumChannelRadarDetected_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 5, 1, 13),
    _Winlink1000OduAirSpectrumChannelRadarDetected_Type()
)
winlink1000OduAirSpectrumChannelRadarDetected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirSpectrumChannelRadarDetected.setStatus("mandatory")
_Winlink1000OduAirSpectrumChannelRadarDetectionTimestamp_Type = TimeTicks
_Winlink1000OduAirSpectrumChannelRadarDetectionTimestamp_Object = MibTableColumn
winlink1000OduAirSpectrumChannelRadarDetectionTimestamp = _Winlink1000OduAirSpectrumChannelRadarDetectionTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 5, 1, 14),
    _Winlink1000OduAirSpectrumChannelRadarDetectionTimestamp_Type()
)
winlink1000OduAirSpectrumChannelRadarDetectionTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirSpectrumChannelRadarDetectionTimestamp.setStatus("mandatory")


class _Winlink1000OduAirSpectrumChannelAvailable_Type(Integer32):
    """Custom type winlink1000OduAirSpectrumChannelAvailable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notAvailable", 1),
          ("available", 2))
    )


_Winlink1000OduAirSpectrumChannelAvailable_Type.__name__ = "Integer32"
_Winlink1000OduAirSpectrumChannelAvailable_Object = MibTableColumn
winlink1000OduAirSpectrumChannelAvailable = _Winlink1000OduAirSpectrumChannelAvailable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 5, 1, 15),
    _Winlink1000OduAirSpectrumChannelAvailable_Type()
)
winlink1000OduAirSpectrumChannelAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirSpectrumChannelAvailable.setStatus("mandatory")
_Winlink1000OduAirSpectrumChannelMaxBeaconRss_Type = Integer32
_Winlink1000OduAirSpectrumChannelMaxBeaconRss_Object = MibTableColumn
winlink1000OduAirSpectrumChannelMaxBeaconRss = _Winlink1000OduAirSpectrumChannelMaxBeaconRss_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 5, 1, 16),
    _Winlink1000OduAirSpectrumChannelMaxBeaconRss_Type()
)
winlink1000OduAirSpectrumChannelMaxBeaconRss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirSpectrumChannelMaxBeaconRss.setStatus("mandatory")
_Winlink1000OduAirSpectrumChannelCompressed_Type = OctetString
_Winlink1000OduAirSpectrumChannelCompressed_Object = MibTableColumn
winlink1000OduAirSpectrumChannelCompressed = _Winlink1000OduAirSpectrumChannelCompressed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 5, 1, 17),
    _Winlink1000OduAirSpectrumChannelCompressed_Type()
)
winlink1000OduAirSpectrumChannelCompressed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirSpectrumChannelCompressed.setStatus("mandatory")
_Winlink1000OduAirChipMinMaxFreq_Type = DisplayString
_Winlink1000OduAirChipMinMaxFreq_Object = MibScalar
winlink1000OduAirChipMinMaxFreq = _Winlink1000OduAirChipMinMaxFreq_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 6),
    _Winlink1000OduAirChipMinMaxFreq_Type()
)
winlink1000OduAirChipMinMaxFreq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirChipMinMaxFreq.setStatus("mandatory")
_Winlink1000OduAirSpectrumAnalysisTimeout_Type = Integer32
_Winlink1000OduAirSpectrumAnalysisTimeout_Object = MibScalar
winlink1000OduAirSpectrumAnalysisTimeout = _Winlink1000OduAirSpectrumAnalysisTimeout_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 56, 7),
    _Winlink1000OduAirSpectrumAnalysisTimeout_Type()
)
winlink1000OduAirSpectrumAnalysisTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirSpectrumAnalysisTimeout.setStatus("mandatory")


class _Winlink1000OduAirAntConfAndRatesStatus_Type(Integer32):
    """Custom type winlink1000OduAirAntConfAndRatesStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("srsr", 1),
          ("drdr", 2),
          ("drsr", 3))
    )


_Winlink1000OduAirAntConfAndRatesStatus_Type.__name__ = "Integer32"
_Winlink1000OduAirAntConfAndRatesStatus_Object = MibScalar
winlink1000OduAirAntConfAndRatesStatus = _Winlink1000OduAirAntConfAndRatesStatus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 57),
    _Winlink1000OduAirAntConfAndRatesStatus_Type()
)
winlink1000OduAirAntConfAndRatesStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirAntConfAndRatesStatus.setStatus("mandatory")


class _Winlink1000OduAirDualAntTxMode_Type(Integer32):
    """Custom type winlink1000OduAirDualAntTxMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("mimo", 1),
          ("diversity", 2))
    )


_Winlink1000OduAirDualAntTxMode_Type.__name__ = "Integer32"
_Winlink1000OduAirDualAntTxMode_Object = MibScalar
winlink1000OduAirDualAntTxMode = _Winlink1000OduAirDualAntTxMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 58),
    _Winlink1000OduAirDualAntTxMode_Type()
)
winlink1000OduAirDualAntTxMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirDualAntTxMode.setStatus("mandatory")


class _Winlink1000OduAirTxOperationMode_Type(Integer32):
    """Custom type winlink1000OduAirTxOperationMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("regularMode", 1),
          ("measurementMode", 2))
    )


_Winlink1000OduAirTxOperationMode_Type.__name__ = "Integer32"
_Winlink1000OduAirTxOperationMode_Object = MibScalar
winlink1000OduAirTxOperationMode = _Winlink1000OduAirTxOperationMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 59),
    _Winlink1000OduAirTxOperationMode_Type()
)
winlink1000OduAirTxOperationMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirTxOperationMode.setStatus("mandatory")
_Winlink1000OduAirAsymmetricTdd_ObjectIdentity = ObjectIdentity
winlink1000OduAirAsymmetricTdd = _Winlink1000OduAirAsymmetricTdd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 60)
)


class _Winlink1000OduAirDesiredNetMasterTxRatio_Type(Integer32):
    """Custom type winlink1000OduAirDesiredNetMasterTxRatio based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_Winlink1000OduAirDesiredNetMasterTxRatio_Type.__name__ = "Integer32"
_Winlink1000OduAirDesiredNetMasterTxRatio_Object = MibScalar
winlink1000OduAirDesiredNetMasterTxRatio = _Winlink1000OduAirDesiredNetMasterTxRatio_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 60, 1),
    _Winlink1000OduAirDesiredNetMasterTxRatio_Type()
)
winlink1000OduAirDesiredNetMasterTxRatio.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirDesiredNetMasterTxRatio.setStatus("mandatory")
_Winlink1000OduAirCurrentNetMasterTxRatio_Type = Integer32
_Winlink1000OduAirCurrentNetMasterTxRatio_Object = MibScalar
winlink1000OduAirCurrentNetMasterTxRatio = _Winlink1000OduAirCurrentNetMasterTxRatio_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 60, 2),
    _Winlink1000OduAirCurrentNetMasterTxRatio_Type()
)
winlink1000OduAirCurrentNetMasterTxRatio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirCurrentNetMasterTxRatio.setStatus("mandatory")
_Winlink1000OduAirMinUsableMasterTxRatio_Type = Integer32
_Winlink1000OduAirMinUsableMasterTxRatio_Object = MibScalar
winlink1000OduAirMinUsableMasterTxRatio = _Winlink1000OduAirMinUsableMasterTxRatio_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 60, 3),
    _Winlink1000OduAirMinUsableMasterTxRatio_Type()
)
winlink1000OduAirMinUsableMasterTxRatio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirMinUsableMasterTxRatio.setStatus("mandatory")
_Winlink1000OduAirMaxUsableMasterTxRatio_Type = Integer32
_Winlink1000OduAirMaxUsableMasterTxRatio_Object = MibScalar
winlink1000OduAirMaxUsableMasterTxRatio = _Winlink1000OduAirMaxUsableMasterTxRatio_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 60, 4),
    _Winlink1000OduAirMaxUsableMasterTxRatio_Type()
)
winlink1000OduAirMaxUsableMasterTxRatio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirMaxUsableMasterTxRatio.setStatus("mandatory")
_Winlink1000OduAirAccumulatedUAS_Type = Integer32
_Winlink1000OduAirAccumulatedUAS_Object = MibScalar
winlink1000OduAirAccumulatedUAS = _Winlink1000OduAirAccumulatedUAS_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 61),
    _Winlink1000OduAirAccumulatedUAS_Type()
)
winlink1000OduAirAccumulatedUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirAccumulatedUAS.setStatus("mandatory")
_Winlink1000OduAirDistStr_Type = DisplayString
_Winlink1000OduAirDistStr_Object = MibScalar
winlink1000OduAirDistStr = _Winlink1000OduAirDistStr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 62),
    _Winlink1000OduAirDistStr_Type()
)
winlink1000OduAirDistStr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirDistStr.setStatus("mandatory")
_Winlink1000OduAirChannelsDefaultFreqStr_Type = DisplayString
_Winlink1000OduAirChannelsDefaultFreqStr_Object = MibScalar
winlink1000OduAirChannelsDefaultFreqStr = _Winlink1000OduAirChannelsDefaultFreqStr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 63),
    _Winlink1000OduAirChannelsDefaultFreqStr_Type()
)
winlink1000OduAirChannelsDefaultFreqStr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirChannelsDefaultFreqStr.setStatus("mandatory")


class _Winlink1000OduAirAntConnectionType_Type(Integer32):
    """Custom type winlink1000OduAirAntConnectionType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("external", 1),
          ("integrated", 2),
          ("embeddedExternal", 3),
          ("embeddedIntegrated", 4),
          ("integratedBSA", 5))
    )


_Winlink1000OduAirAntConnectionType_Type.__name__ = "Integer32"
_Winlink1000OduAirAntConnectionType_Object = MibScalar
winlink1000OduAirAntConnectionType = _Winlink1000OduAirAntConnectionType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 64),
    _Winlink1000OduAirAntConnectionType_Type()
)
winlink1000OduAirAntConnectionType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirAntConnectionType.setStatus("mandatory")
_Winlink1000OduAirAllowableChannelsStr_Type = DisplayString
_Winlink1000OduAirAllowableChannelsStr_Object = MibScalar
winlink1000OduAirAllowableChannelsStr = _Winlink1000OduAirAllowableChannelsStr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 65),
    _Winlink1000OduAirAllowableChannelsStr_Type()
)
winlink1000OduAirAllowableChannelsStr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirAllowableChannelsStr.setStatus("mandatory")
_Winlink1000OduAirDfs_ObjectIdentity = ObjectIdentity
winlink1000OduAirDfs = _Winlink1000OduAirDfs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 66)
)
_Winlink1000OduAirDfsAlgorithmTypeState_Type = Integer32
_Winlink1000OduAirDfsAlgorithmTypeState_Object = MibScalar
winlink1000OduAirDfsAlgorithmTypeState = _Winlink1000OduAirDfsAlgorithmTypeState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 66, 1),
    _Winlink1000OduAirDfsAlgorithmTypeState_Type()
)
winlink1000OduAirDfsAlgorithmTypeState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirDfsAlgorithmTypeState.setStatus("mandatory")
_Winlink1000OduAirDfsLastDetectedTbl_Object = MibTable
winlink1000OduAirDfsLastDetectedTbl = _Winlink1000OduAirDfsLastDetectedTbl_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 66, 2)
)
if mibBuilder.loadTexts:
    winlink1000OduAirDfsLastDetectedTbl.setStatus("mandatory")
_Winlink1000OduAirDfsLastDetectedEntry_Object = MibTableRow
winlink1000OduAirDfsLastDetectedEntry = _Winlink1000OduAirDfsLastDetectedEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 66, 2, 1)
)
winlink1000OduAirDfsLastDetectedEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirDfsLastDetectedIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduAirDfsLastDetectedEntry.setStatus("mandatory")


class _Winlink1000OduAirDfsLastDetectedIndex_Type(Integer32):
    """Custom type winlink1000OduAirDfsLastDetectedIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000OduAirDfsLastDetectedIndex_Type.__name__ = "Integer32"
_Winlink1000OduAirDfsLastDetectedIndex_Object = MibTableColumn
winlink1000OduAirDfsLastDetectedIndex = _Winlink1000OduAirDfsLastDetectedIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 66, 2, 1, 1),
    _Winlink1000OduAirDfsLastDetectedIndex_Type()
)
winlink1000OduAirDfsLastDetectedIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirDfsLastDetectedIndex.setStatus("mandatory")
_Winlink1000OduAirDfsLastDetectedTime_Type = TimeTicks
_Winlink1000OduAirDfsLastDetectedTime_Object = MibTableColumn
winlink1000OduAirDfsLastDetectedTime = _Winlink1000OduAirDfsLastDetectedTime_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 66, 2, 1, 2),
    _Winlink1000OduAirDfsLastDetectedTime_Type()
)
winlink1000OduAirDfsLastDetectedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirDfsLastDetectedTime.setStatus("mandatory")
_Winlink1000OduAirDfsLastDetectedAlgorithmType_Type = Integer32
_Winlink1000OduAirDfsLastDetectedAlgorithmType_Object = MibTableColumn
winlink1000OduAirDfsLastDetectedAlgorithmType = _Winlink1000OduAirDfsLastDetectedAlgorithmType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 66, 2, 1, 3),
    _Winlink1000OduAirDfsLastDetectedAlgorithmType_Type()
)
winlink1000OduAirDfsLastDetectedAlgorithmType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirDfsLastDetectedAlgorithmType.setStatus("mandatory")
_Winlink1000OduAirDfsLastDetectedFrequency_Type = Integer32
_Winlink1000OduAirDfsLastDetectedFrequency_Object = MibTableColumn
winlink1000OduAirDfsLastDetectedFrequency = _Winlink1000OduAirDfsLastDetectedFrequency_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 66, 2, 1, 4),
    _Winlink1000OduAirDfsLastDetectedFrequency_Type()
)
winlink1000OduAirDfsLastDetectedFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirDfsLastDetectedFrequency.setStatus("mandatory")
_Winlink1000OduAirPreferredChannelsStr_Type = DisplayString
_Winlink1000OduAirPreferredChannelsStr_Object = MibScalar
winlink1000OduAirPreferredChannelsStr = _Winlink1000OduAirPreferredChannelsStr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 67),
    _Winlink1000OduAirPreferredChannelsStr_Type()
)
winlink1000OduAirPreferredChannelsStr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirPreferredChannelsStr.setStatus("mandatory")
_Winlink1000OduAirSyncLossThreshold_Type = Integer32
_Winlink1000OduAirSyncLossThreshold_Object = MibScalar
winlink1000OduAirSyncLossThreshold = _Winlink1000OduAirSyncLossThreshold_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 68),
    _Winlink1000OduAirSyncLossThreshold_Type()
)
winlink1000OduAirSyncLossThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirSyncLossThreshold.setStatus("mandatory")
_Winlink1000OduAirGeoLocation_Type = DisplayString
_Winlink1000OduAirGeoLocation_Object = MibScalar
winlink1000OduAirGeoLocation = _Winlink1000OduAirGeoLocation_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 69),
    _Winlink1000OduAirGeoLocation_Type()
)
winlink1000OduAirGeoLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirGeoLocation.setStatus("mandatory")
_Winlink1000OduAirAggregateCapacity_Type = Integer32
_Winlink1000OduAirAggregateCapacity_Object = MibScalar
winlink1000OduAirAggregateCapacity = _Winlink1000OduAirAggregateCapacity_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 70),
    _Winlink1000OduAirAggregateCapacity_Type()
)
winlink1000OduAirAggregateCapacity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirAggregateCapacity.setStatus("mandatory")
_Winlink1000OduAirALPM_ObjectIdentity = ObjectIdentity
winlink1000OduAirALPM = _Winlink1000OduAirALPM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 71)
)
_Winlink1000OduAirALPMDataBufferStr_Type = OctetString
_Winlink1000OduAirALPMDataBufferStr_Object = MibScalar
winlink1000OduAirALPMDataBufferStr = _Winlink1000OduAirALPMDataBufferStr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 71, 1),
    _Winlink1000OduAirALPMDataBufferStr_Type()
)
winlink1000OduAirALPMDataBufferStr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirALPMDataBufferStr.setStatus("mandatory")
_Winlink1000OduAirCurrentManualAngle_Type = Integer32
_Winlink1000OduAirCurrentManualAngle_Object = MibScalar
winlink1000OduAirCurrentManualAngle = _Winlink1000OduAirCurrentManualAngle_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 72),
    _Winlink1000OduAirCurrentManualAngle_Type()
)
winlink1000OduAirCurrentManualAngle.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirCurrentManualAngle.setStatus("mandatory")
_Winlink1000OduAirCurrentManualElevAngle_Type = Integer32
_Winlink1000OduAirCurrentManualElevAngle_Object = MibScalar
winlink1000OduAirCurrentManualElevAngle = _Winlink1000OduAirCurrentManualElevAngle_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 73),
    _Winlink1000OduAirCurrentManualElevAngle_Type()
)
winlink1000OduAirCurrentManualElevAngle.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirCurrentManualElevAngle.setStatus("mandatory")
_Winlink1000OduAirAntennaTemperatureC_Type = Integer32
_Winlink1000OduAirAntennaTemperatureC_Object = MibScalar
winlink1000OduAirAntennaTemperatureC = _Winlink1000OduAirAntennaTemperatureC_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 74),
    _Winlink1000OduAirAntennaTemperatureC_Type()
)
winlink1000OduAirAntennaTemperatureC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirAntennaTemperatureC.setStatus("mandatory")


class _Winlink1000OduAirGPSAntennaType_Type(Integer32):
    """Custom type winlink1000OduAirGPSAntennaType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("configurableIntegrated", 1),
          ("configurableExternal", 2),
          ("integrated", 3),
          ("external", 4),
          ("none", 5))
    )


_Winlink1000OduAirGPSAntennaType_Type.__name__ = "Integer32"
_Winlink1000OduAirGPSAntennaType_Object = MibScalar
winlink1000OduAirGPSAntennaType = _Winlink1000OduAirGPSAntennaType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 75),
    _Winlink1000OduAirGPSAntennaType_Type()
)
winlink1000OduAirGPSAntennaType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirGPSAntennaType.setStatus("mandatory")


class _Winlink1000OduAirAttachedAntennaIndication_Type(Integer32):
    """Custom type winlink1000OduAirAttachedAntennaIndication based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("undefined", 1),
          ("integrated", 2),
          ("attached", 3),
          ("external", 4))
    )


_Winlink1000OduAirAttachedAntennaIndication_Type.__name__ = "Integer32"
_Winlink1000OduAirAttachedAntennaIndication_Object = MibScalar
winlink1000OduAirAttachedAntennaIndication = _Winlink1000OduAirAttachedAntennaIndication_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 76),
    _Winlink1000OduAirAttachedAntennaIndication_Type()
)
winlink1000OduAirAttachedAntennaIndication.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirAttachedAntennaIndication.setStatus("mandatory")
_Winlink1000OduAirFreqShortList_Type = OctetString
_Winlink1000OduAirFreqShortList_Object = MibScalar
winlink1000OduAirFreqShortList = _Winlink1000OduAirFreqShortList_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 77),
    _Winlink1000OduAirFreqShortList_Type()
)
winlink1000OduAirFreqShortList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirFreqShortList.setStatus("mandatory")


class _Winlink1000OduAirInterfaceUtilizationSupport_Type(Integer32):
    """Custom type winlink1000OduAirInterfaceUtilizationSupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fullSupport", 1),
          ("partialSupport", 2))
    )


_Winlink1000OduAirInterfaceUtilizationSupport_Type.__name__ = "Integer32"
_Winlink1000OduAirInterfaceUtilizationSupport_Object = MibScalar
winlink1000OduAirInterfaceUtilizationSupport = _Winlink1000OduAirInterfaceUtilizationSupport_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 78),
    _Winlink1000OduAirInterfaceUtilizationSupport_Type()
)
winlink1000OduAirInterfaceUtilizationSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirInterfaceUtilizationSupport.setStatus("mandatory")
_Winlink1000OduAirCarrierTable_Object = MibTable
winlink1000OduAirCarrierTable = _Winlink1000OduAirCarrierTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 79)
)
if mibBuilder.loadTexts:
    winlink1000OduAirCarrierTable.setStatus("mandatory")
_Winlink1000OduAirCarrierEntry_Object = MibTableRow
winlink1000OduAirCarrierEntry = _Winlink1000OduAirCarrierEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 79, 1)
)
winlink1000OduAirCarrierEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAirCarrierIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduAirCarrierEntry.setStatus("mandatory")


class _Winlink1000OduAirCarrierIndex_Type(Integer32):
    """Custom type winlink1000OduAirCarrierIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("carrier1", 1),
          ("carrier2", 2))
    )


_Winlink1000OduAirCarrierIndex_Type.__name__ = "Integer32"
_Winlink1000OduAirCarrierIndex_Object = MibTableColumn
winlink1000OduAirCarrierIndex = _Winlink1000OduAirCarrierIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 79, 1, 1),
    _Winlink1000OduAirCarrierIndex_Type()
)
winlink1000OduAirCarrierIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirCarrierIndex.setStatus("mandatory")
_Winlink1000OduAirCarrierAntennaDescription_Type = DisplayString
_Winlink1000OduAirCarrierAntennaDescription_Object = MibTableColumn
winlink1000OduAirCarrierAntennaDescription = _Winlink1000OduAirCarrierAntennaDescription_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 79, 1, 2),
    _Winlink1000OduAirCarrierAntennaDescription_Type()
)
winlink1000OduAirCarrierAntennaDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirCarrierAntennaDescription.setStatus("mandatory")
_Winlink1000OduAirCarrierDesiredTxPower_Type = Integer32
_Winlink1000OduAirCarrierDesiredTxPower_Object = MibTableColumn
winlink1000OduAirCarrierDesiredTxPower = _Winlink1000OduAirCarrierDesiredTxPower_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 79, 1, 3),
    _Winlink1000OduAirCarrierDesiredTxPower_Type()
)
winlink1000OduAirCarrierDesiredTxPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirCarrierDesiredTxPower.setStatus("mandatory")
_Winlink1000OduAirCarrierResync_Type = Integer32
_Winlink1000OduAirCarrierResync_Object = MibTableColumn
winlink1000OduAirCarrierResync = _Winlink1000OduAirCarrierResync_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 79, 1, 4),
    _Winlink1000OduAirCarrierResync_Type()
)
winlink1000OduAirCarrierResync.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirCarrierResync.setStatus("mandatory")
_Winlink1000OduAirCarrierCurrentTxPower_Type = Integer32
_Winlink1000OduAirCarrierCurrentTxPower_Object = MibTableColumn
winlink1000OduAirCarrierCurrentTxPower = _Winlink1000OduAirCarrierCurrentTxPower_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 79, 1, 5),
    _Winlink1000OduAirCarrierCurrentTxPower_Type()
)
winlink1000OduAirCarrierCurrentTxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirCarrierCurrentTxPower.setStatus("mandatory")
_Winlink1000OduAirCarrierCurrentFreq_Type = Integer32
_Winlink1000OduAirCarrierCurrentFreq_Object = MibTableColumn
winlink1000OduAirCarrierCurrentFreq = _Winlink1000OduAirCarrierCurrentFreq_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 79, 1, 6),
    _Winlink1000OduAirCarrierCurrentFreq_Type()
)
winlink1000OduAirCarrierCurrentFreq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirCarrierCurrentFreq.setStatus("mandatory")
_Winlink1000OduAirCarrierChannelBandwidth_Type = Integer32
_Winlink1000OduAirCarrierChannelBandwidth_Object = MibTableColumn
winlink1000OduAirCarrierChannelBandwidth = _Winlink1000OduAirCarrierChannelBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 79, 1, 7),
    _Winlink1000OduAirCarrierChannelBandwidth_Type()
)
winlink1000OduAirCarrierChannelBandwidth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirCarrierChannelBandwidth.setStatus("mandatory")
_Winlink1000OduAirCarrierTotalTxPower_Type = Integer32
_Winlink1000OduAirCarrierTotalTxPower_Object = MibTableColumn
winlink1000OduAirCarrierTotalTxPower = _Winlink1000OduAirCarrierTotalTxPower_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 79, 1, 8),
    _Winlink1000OduAirCarrierTotalTxPower_Type()
)
winlink1000OduAirCarrierTotalTxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirCarrierTotalTxPower.setStatus("mandatory")
_Winlink1000OduAirCarrierSubBand_Type = Integer32
_Winlink1000OduAirCarrierSubBand_Object = MibTableColumn
winlink1000OduAirCarrierSubBand = _Winlink1000OduAirCarrierSubBand_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 79, 1, 9),
    _Winlink1000OduAirCarrierSubBand_Type()
)
winlink1000OduAirCarrierSubBand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirCarrierSubBand.setStatus("mandatory")
_Winlink1000OduAirCarrierComboSubBandTableIndex_Type = Integer32
_Winlink1000OduAirCarrierComboSubBandTableIndex_Object = MibTableColumn
winlink1000OduAirCarrierComboSubBandTableIndex = _Winlink1000OduAirCarrierComboSubBandTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 79, 1, 10),
    _Winlink1000OduAirCarrierComboSubBandTableIndex_Type()
)
winlink1000OduAirCarrierComboSubBandTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirCarrierComboSubBandTableIndex.setStatus("mandatory")
_Winlink1000OduAirCarrierAntennaGain_Type = Integer32
_Winlink1000OduAirCarrierAntennaGain_Object = MibTableColumn
winlink1000OduAirCarrierAntennaGain = _Winlink1000OduAirCarrierAntennaGain_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 79, 1, 11),
    _Winlink1000OduAirCarrierAntennaGain_Type()
)
winlink1000OduAirCarrierAntennaGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirCarrierAntennaGain.setStatus("mandatory")
_Winlink1000OduAirCarrierFeederLoss_Type = Integer32
_Winlink1000OduAirCarrierFeederLoss_Object = MibTableColumn
winlink1000OduAirCarrierFeederLoss = _Winlink1000OduAirCarrierFeederLoss_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 79, 1, 12),
    _Winlink1000OduAirCarrierFeederLoss_Type()
)
winlink1000OduAirCarrierFeederLoss.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirCarrierFeederLoss.setStatus("mandatory")
_Winlink1000OduAirCarrierMaxEirp_Type = Integer32
_Winlink1000OduAirCarrierMaxEirp_Object = MibTableColumn
winlink1000OduAirCarrierMaxEirp = _Winlink1000OduAirCarrierMaxEirp_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 79, 1, 13),
    _Winlink1000OduAirCarrierMaxEirp_Type()
)
winlink1000OduAirCarrierMaxEirp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirCarrierMaxEirp.setStatus("mandatory")
_Winlink1000OduAirCarrierAllowableChannelsStr_Type = DisplayString
_Winlink1000OduAirCarrierAllowableChannelsStr_Object = MibTableColumn
winlink1000OduAirCarrierAllowableChannelsStr = _Winlink1000OduAirCarrierAllowableChannelsStr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 79, 1, 14),
    _Winlink1000OduAirCarrierAllowableChannelsStr_Type()
)
winlink1000OduAirCarrierAllowableChannelsStr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirCarrierAllowableChannelsStr.setStatus("mandatory")
_Winlink1000OduAirCarrierUCBPSharingPercentage_Type = Integer32
_Winlink1000OduAirCarrierUCBPSharingPercentage_Object = MibTableColumn
winlink1000OduAirCarrierUCBPSharingPercentage = _Winlink1000OduAirCarrierUCBPSharingPercentage_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 79, 1, 15),
    _Winlink1000OduAirCarrierUCBPSharingPercentage_Type()
)
winlink1000OduAirCarrierUCBPSharingPercentage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirCarrierUCBPSharingPercentage.setStatus("mandatory")
_Winlink1000OduAirCarrierUCBPMinCS_Type = Integer32
_Winlink1000OduAirCarrierUCBPMinCS_Object = MibTableColumn
winlink1000OduAirCarrierUCBPMinCS = _Winlink1000OduAirCarrierUCBPMinCS_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 79, 1, 16),
    _Winlink1000OduAirCarrierUCBPMinCS_Type()
)
winlink1000OduAirCarrierUCBPMinCS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirCarrierUCBPMinCS.setStatus("mandatory")
_Winlink1000OduAirCarrierTvwsOccupiedTvChannels_Type = DisplayString
_Winlink1000OduAirCarrierTvwsOccupiedTvChannels_Object = MibTableColumn
winlink1000OduAirCarrierTvwsOccupiedTvChannels = _Winlink1000OduAirCarrierTvwsOccupiedTvChannels_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 79, 1, 17),
    _Winlink1000OduAirCarrierTvwsOccupiedTvChannels_Type()
)
winlink1000OduAirCarrierTvwsOccupiedTvChannels.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirCarrierTvwsOccupiedTvChannels.setStatus("mandatory")
_Winlink1000OduAirCarrierFrequencyHoppingSequence_Type = Integer32
_Winlink1000OduAirCarrierFrequencyHoppingSequence_Object = MibTableColumn
winlink1000OduAirCarrierFrequencyHoppingSequence = _Winlink1000OduAirCarrierFrequencyHoppingSequence_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 79, 1, 18),
    _Winlink1000OduAirCarrierFrequencyHoppingSequence_Type()
)
winlink1000OduAirCarrierFrequencyHoppingSequence.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirCarrierFrequencyHoppingSequence.setStatus("mandatory")
_Winlink1000OduAirAntennaHeight_Type = Integer32
_Winlink1000OduAirAntennaHeight_Object = MibScalar
winlink1000OduAirAntennaHeight = _Winlink1000OduAirAntennaHeight_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 80),
    _Winlink1000OduAirAntennaHeight_Type()
)
winlink1000OduAirAntennaHeight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirAntennaHeight.setStatus("mandatory")
_Winlink1000OduAirAntennaHeightUncertainty_Type = Integer32
_Winlink1000OduAirAntennaHeightUncertainty_Object = MibScalar
winlink1000OduAirAntennaHeightUncertainty = _Winlink1000OduAirAntennaHeightUncertainty_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 81),
    _Winlink1000OduAirAntennaHeightUncertainty_Type()
)
winlink1000OduAirAntennaHeightUncertainty.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirAntennaHeightUncertainty.setStatus("mandatory")
_Winlink1000OduAirTvwsMinTvChannelIndex_Type = Integer32
_Winlink1000OduAirTvwsMinTvChannelIndex_Object = MibScalar
winlink1000OduAirTvwsMinTvChannelIndex = _Winlink1000OduAirTvwsMinTvChannelIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 82),
    _Winlink1000OduAirTvwsMinTvChannelIndex_Type()
)
winlink1000OduAirTvwsMinTvChannelIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirTvwsMinTvChannelIndex.setStatus("mandatory")
_Winlink1000OduAirTvwsOpTable_Type = DisplayString
_Winlink1000OduAirTvwsOpTable_Object = MibScalar
winlink1000OduAirTvwsOpTable = _Winlink1000OduAirTvwsOpTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 83),
    _Winlink1000OduAirTvwsOpTable_Type()
)
winlink1000OduAirTvwsOpTable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirTvwsOpTable.setStatus("mandatory")
_Winlink1000OduAirTvwsRulesetParams_Type = DisplayString
_Winlink1000OduAirTvwsRulesetParams_Object = MibScalar
winlink1000OduAirTvwsRulesetParams = _Winlink1000OduAirTvwsRulesetParams_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 84),
    _Winlink1000OduAirTvwsRulesetParams_Type()
)
winlink1000OduAirTvwsRulesetParams.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAirTvwsRulesetParams.setStatus("mandatory")
_Winlink1000OduAirFrequrencyHoppingPassword_Type = DisplayString
_Winlink1000OduAirFrequrencyHoppingPassword_Object = MibScalar
winlink1000OduAirFrequrencyHoppingPassword = _Winlink1000OduAirFrequrencyHoppingPassword_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 5, 85),
    _Winlink1000OduAirFrequrencyHoppingPassword_Type()
)
winlink1000OduAirFrequrencyHoppingPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAirFrequrencyHoppingPassword.setStatus("mandatory")
_Winlink1000OduPerfMon_ObjectIdentity = ObjectIdentity
winlink1000OduPerfMon = _Winlink1000OduPerfMon_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6)
)
_Winlink1000OduPerfMonCurrTable_Object = MibTable
winlink1000OduPerfMonCurrTable = _Winlink1000OduPerfMonCurrTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 1)
)
if mibBuilder.loadTexts:
    winlink1000OduPerfMonCurrTable.setStatus("mandatory")
_Winlink1000OduPerfMonCurrEntry_Object = MibTableRow
winlink1000OduPerfMonCurrEntry = _Winlink1000OduPerfMonCurrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 1, 1)
)
winlink1000OduPerfMonCurrEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduPerfMonCurrEntry.setStatus("mandatory")


class _Winlink1000OduPerfMonCurrUAS_Type(Gauge32):
    """Custom type winlink1000OduPerfMonCurrUAS based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000OduPerfMonCurrUAS_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonCurrUAS_Object = MibTableColumn
winlink1000OduPerfMonCurrUAS = _Winlink1000OduPerfMonCurrUAS_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 1, 1, 1),
    _Winlink1000OduPerfMonCurrUAS_Type()
)
winlink1000OduPerfMonCurrUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonCurrUAS.setStatus("mandatory")


class _Winlink1000OduPerfMonCurrES_Type(Gauge32):
    """Custom type winlink1000OduPerfMonCurrES based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000OduPerfMonCurrES_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonCurrES_Object = MibTableColumn
winlink1000OduPerfMonCurrES = _Winlink1000OduPerfMonCurrES_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 1, 1, 2),
    _Winlink1000OduPerfMonCurrES_Type()
)
winlink1000OduPerfMonCurrES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonCurrES.setStatus("mandatory")


class _Winlink1000OduPerfMonCurrSES_Type(Gauge32):
    """Custom type winlink1000OduPerfMonCurrSES based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000OduPerfMonCurrSES_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonCurrSES_Object = MibTableColumn
winlink1000OduPerfMonCurrSES = _Winlink1000OduPerfMonCurrSES_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 1, 1, 3),
    _Winlink1000OduPerfMonCurrSES_Type()
)
winlink1000OduPerfMonCurrSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonCurrSES.setStatus("mandatory")


class _Winlink1000OduPerfMonCurrBBE_Type(Gauge32):
    """Custom type winlink1000OduPerfMonCurrBBE based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1800000),
    )


_Winlink1000OduPerfMonCurrBBE_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonCurrBBE_Object = MibTableColumn
winlink1000OduPerfMonCurrBBE = _Winlink1000OduPerfMonCurrBBE_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 1, 1, 4),
    _Winlink1000OduPerfMonCurrBBE_Type()
)
winlink1000OduPerfMonCurrBBE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonCurrBBE.setStatus("mandatory")


class _Winlink1000OduPerfMonCurrIntegrity_Type(Integer32):
    """Custom type winlink1000OduPerfMonCurrIntegrity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_Winlink1000OduPerfMonCurrIntegrity_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonCurrIntegrity_Object = MibTableColumn
winlink1000OduPerfMonCurrIntegrity = _Winlink1000OduPerfMonCurrIntegrity_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 1, 1, 5),
    _Winlink1000OduPerfMonCurrIntegrity_Type()
)
winlink1000OduPerfMonCurrIntegrity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonCurrIntegrity.setStatus("mandatory")
_Winlink1000OduPerfMonCurrCompressed_Type = OctetString
_Winlink1000OduPerfMonCurrCompressed_Object = MibTableColumn
winlink1000OduPerfMonCurrCompressed = _Winlink1000OduPerfMonCurrCompressed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 1, 1, 6),
    _Winlink1000OduPerfMonCurrCompressed_Type()
)
winlink1000OduPerfMonCurrCompressed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonCurrCompressed.setStatus("mandatory")
_Winlink1000OduPerfMonIntervalTable_Object = MibTable
winlink1000OduPerfMonIntervalTable = _Winlink1000OduPerfMonIntervalTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 2)
)
if mibBuilder.loadTexts:
    winlink1000OduPerfMonIntervalTable.setStatus("mandatory")
_Winlink1000OduPerfMonIntervalEntry_Object = MibTableRow
winlink1000OduPerfMonIntervalEntry = _Winlink1000OduPerfMonIntervalEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 2, 1)
)
winlink1000OduPerfMonIntervalEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduPerfMonIntervalIdx"),
)
if mibBuilder.loadTexts:
    winlink1000OduPerfMonIntervalEntry.setStatus("mandatory")


class _Winlink1000OduPerfMonIntervalIdx_Type(Integer32):
    """Custom type winlink1000OduPerfMonIntervalIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_Winlink1000OduPerfMonIntervalIdx_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonIntervalIdx_Object = MibTableColumn
winlink1000OduPerfMonIntervalIdx = _Winlink1000OduPerfMonIntervalIdx_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 2, 1, 1),
    _Winlink1000OduPerfMonIntervalIdx_Type()
)
winlink1000OduPerfMonIntervalIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonIntervalIdx.setStatus("mandatory")


class _Winlink1000OduPerfMonIntervalUAS_Type(Gauge32):
    """Custom type winlink1000OduPerfMonIntervalUAS based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000OduPerfMonIntervalUAS_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonIntervalUAS_Object = MibTableColumn
winlink1000OduPerfMonIntervalUAS = _Winlink1000OduPerfMonIntervalUAS_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 2, 1, 2),
    _Winlink1000OduPerfMonIntervalUAS_Type()
)
winlink1000OduPerfMonIntervalUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonIntervalUAS.setStatus("mandatory")


class _Winlink1000OduPerfMonIntervalES_Type(Gauge32):
    """Custom type winlink1000OduPerfMonIntervalES based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000OduPerfMonIntervalES_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonIntervalES_Object = MibTableColumn
winlink1000OduPerfMonIntervalES = _Winlink1000OduPerfMonIntervalES_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 2, 1, 3),
    _Winlink1000OduPerfMonIntervalES_Type()
)
winlink1000OduPerfMonIntervalES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonIntervalES.setStatus("mandatory")


class _Winlink1000OduPerfMonIntervalSES_Type(Gauge32):
    """Custom type winlink1000OduPerfMonIntervalSES based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000OduPerfMonIntervalSES_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonIntervalSES_Object = MibTableColumn
winlink1000OduPerfMonIntervalSES = _Winlink1000OduPerfMonIntervalSES_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 2, 1, 4),
    _Winlink1000OduPerfMonIntervalSES_Type()
)
winlink1000OduPerfMonIntervalSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonIntervalSES.setStatus("mandatory")


class _Winlink1000OduPerfMonIntervalBBE_Type(Gauge32):
    """Custom type winlink1000OduPerfMonIntervalBBE based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1800000),
    )


_Winlink1000OduPerfMonIntervalBBE_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonIntervalBBE_Object = MibTableColumn
winlink1000OduPerfMonIntervalBBE = _Winlink1000OduPerfMonIntervalBBE_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 2, 1, 5),
    _Winlink1000OduPerfMonIntervalBBE_Type()
)
winlink1000OduPerfMonIntervalBBE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonIntervalBBE.setStatus("mandatory")


class _Winlink1000OduPerfMonIntervalIntegrity_Type(Integer32):
    """Custom type winlink1000OduPerfMonIntervalIntegrity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_Winlink1000OduPerfMonIntervalIntegrity_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonIntervalIntegrity_Object = MibTableColumn
winlink1000OduPerfMonIntervalIntegrity = _Winlink1000OduPerfMonIntervalIntegrity_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 2, 1, 6),
    _Winlink1000OduPerfMonIntervalIntegrity_Type()
)
winlink1000OduPerfMonIntervalIntegrity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonIntervalIntegrity.setStatus("mandatory")
_Winlink1000OduPerfMonIntervalCompressed_Type = OctetString
_Winlink1000OduPerfMonIntervalCompressed_Object = MibTableColumn
winlink1000OduPerfMonIntervalCompressed = _Winlink1000OduPerfMonIntervalCompressed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 2, 1, 7),
    _Winlink1000OduPerfMonIntervalCompressed_Type()
)
winlink1000OduPerfMonIntervalCompressed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonIntervalCompressed.setStatus("mandatory")
_Winlink1000OduPerfMonDayTable_Object = MibTable
winlink1000OduPerfMonDayTable = _Winlink1000OduPerfMonDayTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 3)
)
if mibBuilder.loadTexts:
    winlink1000OduPerfMonDayTable.setStatus("mandatory")
_Winlink1000OduPerfMonDayEntry_Object = MibTableRow
winlink1000OduPerfMonDayEntry = _Winlink1000OduPerfMonDayEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 3, 1)
)
winlink1000OduPerfMonDayEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduPerfMonDayIdx"),
)
if mibBuilder.loadTexts:
    winlink1000OduPerfMonDayEntry.setStatus("mandatory")


class _Winlink1000OduPerfMonDayIdx_Type(Integer32):
    """Custom type winlink1000OduPerfMonDayIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30),
    )


_Winlink1000OduPerfMonDayIdx_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonDayIdx_Object = MibTableColumn
winlink1000OduPerfMonDayIdx = _Winlink1000OduPerfMonDayIdx_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 3, 1, 1),
    _Winlink1000OduPerfMonDayIdx_Type()
)
winlink1000OduPerfMonDayIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonDayIdx.setStatus("mandatory")


class _Winlink1000OduPerfMonDayUAS_Type(Gauge32):
    """Custom type winlink1000OduPerfMonDayUAS based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 86400),
    )


_Winlink1000OduPerfMonDayUAS_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonDayUAS_Object = MibTableColumn
winlink1000OduPerfMonDayUAS = _Winlink1000OduPerfMonDayUAS_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 3, 1, 2),
    _Winlink1000OduPerfMonDayUAS_Type()
)
winlink1000OduPerfMonDayUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonDayUAS.setStatus("mandatory")


class _Winlink1000OduPerfMonDayES_Type(Gauge32):
    """Custom type winlink1000OduPerfMonDayES based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 86400),
    )


_Winlink1000OduPerfMonDayES_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonDayES_Object = MibTableColumn
winlink1000OduPerfMonDayES = _Winlink1000OduPerfMonDayES_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 3, 1, 3),
    _Winlink1000OduPerfMonDayES_Type()
)
winlink1000OduPerfMonDayES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonDayES.setStatus("mandatory")


class _Winlink1000OduPerfMonDaySES_Type(Gauge32):
    """Custom type winlink1000OduPerfMonDaySES based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 86400),
    )


_Winlink1000OduPerfMonDaySES_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonDaySES_Object = MibTableColumn
winlink1000OduPerfMonDaySES = _Winlink1000OduPerfMonDaySES_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 3, 1, 4),
    _Winlink1000OduPerfMonDaySES_Type()
)
winlink1000OduPerfMonDaySES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonDaySES.setStatus("mandatory")


class _Winlink1000OduPerfMonDayBBE_Type(Gauge32):
    """Custom type winlink1000OduPerfMonDayBBE based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 172800000),
    )


_Winlink1000OduPerfMonDayBBE_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonDayBBE_Object = MibTableColumn
winlink1000OduPerfMonDayBBE = _Winlink1000OduPerfMonDayBBE_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 3, 1, 5),
    _Winlink1000OduPerfMonDayBBE_Type()
)
winlink1000OduPerfMonDayBBE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonDayBBE.setStatus("mandatory")


class _Winlink1000OduPerfMonDayIntegrity_Type(Integer32):
    """Custom type winlink1000OduPerfMonDayIntegrity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_Winlink1000OduPerfMonDayIntegrity_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonDayIntegrity_Object = MibTableColumn
winlink1000OduPerfMonDayIntegrity = _Winlink1000OduPerfMonDayIntegrity_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 3, 1, 6),
    _Winlink1000OduPerfMonDayIntegrity_Type()
)
winlink1000OduPerfMonDayIntegrity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonDayIntegrity.setStatus("mandatory")
_Winlink1000OduPerfMonDayCompressed_Type = OctetString
_Winlink1000OduPerfMonDayCompressed_Object = MibTableColumn
winlink1000OduPerfMonDayCompressed = _Winlink1000OduPerfMonDayCompressed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 3, 1, 7),
    _Winlink1000OduPerfMonDayCompressed_Type()
)
winlink1000OduPerfMonDayCompressed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonDayCompressed.setStatus("mandatory")
_Winlink1000OduPerfMonAirCurrTable_Object = MibTable
winlink1000OduPerfMonAirCurrTable = _Winlink1000OduPerfMonAirCurrTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 4)
)
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirCurrTable.setStatus("mandatory")
_Winlink1000OduPerfMonAirCurrEntry_Object = MibTableRow
winlink1000OduPerfMonAirCurrEntry = _Winlink1000OduPerfMonAirCurrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 4, 1)
)
winlink1000OduPerfMonAirCurrEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirCurrEntry.setStatus("mandatory")


class _Winlink1000OduPerfMonAirCurrMinRSL_Type(Integer32):
    """Custom type winlink1000OduPerfMonAirCurrMinRSL based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-100, 0),
    )


_Winlink1000OduPerfMonAirCurrMinRSL_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonAirCurrMinRSL_Object = MibTableColumn
winlink1000OduPerfMonAirCurrMinRSL = _Winlink1000OduPerfMonAirCurrMinRSL_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 4, 1, 1),
    _Winlink1000OduPerfMonAirCurrMinRSL_Type()
)
winlink1000OduPerfMonAirCurrMinRSL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirCurrMinRSL.setStatus("mandatory")


class _Winlink1000OduPerfMonAirCurrMaxRSL_Type(Integer32):
    """Custom type winlink1000OduPerfMonAirCurrMaxRSL based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-100, 0),
    )


_Winlink1000OduPerfMonAirCurrMaxRSL_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonAirCurrMaxRSL_Object = MibTableColumn
winlink1000OduPerfMonAirCurrMaxRSL = _Winlink1000OduPerfMonAirCurrMaxRSL_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 4, 1, 2),
    _Winlink1000OduPerfMonAirCurrMaxRSL_Type()
)
winlink1000OduPerfMonAirCurrMaxRSL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirCurrMaxRSL.setStatus("mandatory")


class _Winlink1000OduPerfMonAirCurrRSLThresh1Exceed_Type(Gauge32):
    """Custom type winlink1000OduPerfMonAirCurrRSLThresh1Exceed based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000OduPerfMonAirCurrRSLThresh1Exceed_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonAirCurrRSLThresh1Exceed_Object = MibTableColumn
winlink1000OduPerfMonAirCurrRSLThresh1Exceed = _Winlink1000OduPerfMonAirCurrRSLThresh1Exceed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 4, 1, 3),
    _Winlink1000OduPerfMonAirCurrRSLThresh1Exceed_Type()
)
winlink1000OduPerfMonAirCurrRSLThresh1Exceed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirCurrRSLThresh1Exceed.setStatus("mandatory")


class _Winlink1000OduPerfMonAirCurrRSLThresh2Exceed_Type(Gauge32):
    """Custom type winlink1000OduPerfMonAirCurrRSLThresh2Exceed based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000OduPerfMonAirCurrRSLThresh2Exceed_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonAirCurrRSLThresh2Exceed_Object = MibTableColumn
winlink1000OduPerfMonAirCurrRSLThresh2Exceed = _Winlink1000OduPerfMonAirCurrRSLThresh2Exceed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 4, 1, 4),
    _Winlink1000OduPerfMonAirCurrRSLThresh2Exceed_Type()
)
winlink1000OduPerfMonAirCurrRSLThresh2Exceed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirCurrRSLThresh2Exceed.setStatus("mandatory")


class _Winlink1000OduPerfMonAirCurrMinTSL_Type(Integer32):
    """Custom type winlink1000OduPerfMonAirCurrMinTSL based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-10, 25),
    )


_Winlink1000OduPerfMonAirCurrMinTSL_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonAirCurrMinTSL_Object = MibTableColumn
winlink1000OduPerfMonAirCurrMinTSL = _Winlink1000OduPerfMonAirCurrMinTSL_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 4, 1, 5),
    _Winlink1000OduPerfMonAirCurrMinTSL_Type()
)
winlink1000OduPerfMonAirCurrMinTSL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirCurrMinTSL.setStatus("mandatory")


class _Winlink1000OduPerfMonAirCurrMaxTSL_Type(Integer32):
    """Custom type winlink1000OduPerfMonAirCurrMaxTSL based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-10, 25),
    )


_Winlink1000OduPerfMonAirCurrMaxTSL_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonAirCurrMaxTSL_Object = MibTableColumn
winlink1000OduPerfMonAirCurrMaxTSL = _Winlink1000OduPerfMonAirCurrMaxTSL_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 4, 1, 6),
    _Winlink1000OduPerfMonAirCurrMaxTSL_Type()
)
winlink1000OduPerfMonAirCurrMaxTSL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirCurrMaxTSL.setStatus("mandatory")


class _Winlink1000OduPerfMonAirCurrTSLThresh1Exceed_Type(Gauge32):
    """Custom type winlink1000OduPerfMonAirCurrTSLThresh1Exceed based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000OduPerfMonAirCurrTSLThresh1Exceed_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonAirCurrTSLThresh1Exceed_Object = MibTableColumn
winlink1000OduPerfMonAirCurrTSLThresh1Exceed = _Winlink1000OduPerfMonAirCurrTSLThresh1Exceed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 4, 1, 7),
    _Winlink1000OduPerfMonAirCurrTSLThresh1Exceed_Type()
)
winlink1000OduPerfMonAirCurrTSLThresh1Exceed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirCurrTSLThresh1Exceed.setStatus("mandatory")


class _Winlink1000OduPerfMonAirCurrBBERThresh1Exceed_Type(Gauge32):
    """Custom type winlink1000OduPerfMonAirCurrBBERThresh1Exceed based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000OduPerfMonAirCurrBBERThresh1Exceed_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonAirCurrBBERThresh1Exceed_Object = MibTableColumn
winlink1000OduPerfMonAirCurrBBERThresh1Exceed = _Winlink1000OduPerfMonAirCurrBBERThresh1Exceed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 4, 1, 8),
    _Winlink1000OduPerfMonAirCurrBBERThresh1Exceed_Type()
)
winlink1000OduPerfMonAirCurrBBERThresh1Exceed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirCurrBBERThresh1Exceed.setStatus("mandatory")
_Winlink1000OduPerfMonAirIntervalTable_Object = MibTable
winlink1000OduPerfMonAirIntervalTable = _Winlink1000OduPerfMonAirIntervalTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 5)
)
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirIntervalTable.setStatus("mandatory")
_Winlink1000OduPerfMonAirIntervalEntry_Object = MibTableRow
winlink1000OduPerfMonAirIntervalEntry = _Winlink1000OduPerfMonAirIntervalEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 5, 1)
)
winlink1000OduPerfMonAirIntervalEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduPerfMonAirIntervalIdx"),
)
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirIntervalEntry.setStatus("mandatory")


class _Winlink1000OduPerfMonAirIntervalIdx_Type(Integer32):
    """Custom type winlink1000OduPerfMonAirIntervalIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_Winlink1000OduPerfMonAirIntervalIdx_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonAirIntervalIdx_Object = MibTableColumn
winlink1000OduPerfMonAirIntervalIdx = _Winlink1000OduPerfMonAirIntervalIdx_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 5, 1, 1),
    _Winlink1000OduPerfMonAirIntervalIdx_Type()
)
winlink1000OduPerfMonAirIntervalIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirIntervalIdx.setStatus("mandatory")


class _Winlink1000OduPerfMonAirIntervalMinRSL_Type(Integer32):
    """Custom type winlink1000OduPerfMonAirIntervalMinRSL based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-100, 0),
    )


_Winlink1000OduPerfMonAirIntervalMinRSL_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonAirIntervalMinRSL_Object = MibTableColumn
winlink1000OduPerfMonAirIntervalMinRSL = _Winlink1000OduPerfMonAirIntervalMinRSL_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 5, 1, 2),
    _Winlink1000OduPerfMonAirIntervalMinRSL_Type()
)
winlink1000OduPerfMonAirIntervalMinRSL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirIntervalMinRSL.setStatus("mandatory")


class _Winlink1000OduPerfMonAirIntervalMaxRSL_Type(Integer32):
    """Custom type winlink1000OduPerfMonAirIntervalMaxRSL based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-100, 0),
    )


_Winlink1000OduPerfMonAirIntervalMaxRSL_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonAirIntervalMaxRSL_Object = MibTableColumn
winlink1000OduPerfMonAirIntervalMaxRSL = _Winlink1000OduPerfMonAirIntervalMaxRSL_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 5, 1, 3),
    _Winlink1000OduPerfMonAirIntervalMaxRSL_Type()
)
winlink1000OduPerfMonAirIntervalMaxRSL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirIntervalMaxRSL.setStatus("mandatory")


class _Winlink1000OduPerfMonAirIntervalRSLThresh1Exceed_Type(Gauge32):
    """Custom type winlink1000OduPerfMonAirIntervalRSLThresh1Exceed based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000OduPerfMonAirIntervalRSLThresh1Exceed_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonAirIntervalRSLThresh1Exceed_Object = MibTableColumn
winlink1000OduPerfMonAirIntervalRSLThresh1Exceed = _Winlink1000OduPerfMonAirIntervalRSLThresh1Exceed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 5, 1, 4),
    _Winlink1000OduPerfMonAirIntervalRSLThresh1Exceed_Type()
)
winlink1000OduPerfMonAirIntervalRSLThresh1Exceed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirIntervalRSLThresh1Exceed.setStatus("mandatory")


class _Winlink1000OduPerfMonAirIntervalRSLThresh2Exceed_Type(Gauge32):
    """Custom type winlink1000OduPerfMonAirIntervalRSLThresh2Exceed based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000OduPerfMonAirIntervalRSLThresh2Exceed_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonAirIntervalRSLThresh2Exceed_Object = MibTableColumn
winlink1000OduPerfMonAirIntervalRSLThresh2Exceed = _Winlink1000OduPerfMonAirIntervalRSLThresh2Exceed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 5, 1, 5),
    _Winlink1000OduPerfMonAirIntervalRSLThresh2Exceed_Type()
)
winlink1000OduPerfMonAirIntervalRSLThresh2Exceed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirIntervalRSLThresh2Exceed.setStatus("mandatory")


class _Winlink1000OduPerfMonAirIntervalMinTSL_Type(Integer32):
    """Custom type winlink1000OduPerfMonAirIntervalMinTSL based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-10, 25),
    )


_Winlink1000OduPerfMonAirIntervalMinTSL_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonAirIntervalMinTSL_Object = MibTableColumn
winlink1000OduPerfMonAirIntervalMinTSL = _Winlink1000OduPerfMonAirIntervalMinTSL_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 5, 1, 6),
    _Winlink1000OduPerfMonAirIntervalMinTSL_Type()
)
winlink1000OduPerfMonAirIntervalMinTSL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirIntervalMinTSL.setStatus("mandatory")


class _Winlink1000OduPerfMonAirIntervalMaxTSL_Type(Integer32):
    """Custom type winlink1000OduPerfMonAirIntervalMaxTSL based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-10, 25),
    )


_Winlink1000OduPerfMonAirIntervalMaxTSL_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonAirIntervalMaxTSL_Object = MibTableColumn
winlink1000OduPerfMonAirIntervalMaxTSL = _Winlink1000OduPerfMonAirIntervalMaxTSL_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 5, 1, 7),
    _Winlink1000OduPerfMonAirIntervalMaxTSL_Type()
)
winlink1000OduPerfMonAirIntervalMaxTSL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirIntervalMaxTSL.setStatus("mandatory")


class _Winlink1000OduPerfMonAirIntervalTSLThresh1Exceed_Type(Gauge32):
    """Custom type winlink1000OduPerfMonAirIntervalTSLThresh1Exceed based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000OduPerfMonAirIntervalTSLThresh1Exceed_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonAirIntervalTSLThresh1Exceed_Object = MibTableColumn
winlink1000OduPerfMonAirIntervalTSLThresh1Exceed = _Winlink1000OduPerfMonAirIntervalTSLThresh1Exceed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 5, 1, 8),
    _Winlink1000OduPerfMonAirIntervalTSLThresh1Exceed_Type()
)
winlink1000OduPerfMonAirIntervalTSLThresh1Exceed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirIntervalTSLThresh1Exceed.setStatus("mandatory")


class _Winlink1000OduPerfMonAirIntervalBBERThresh1Exceed_Type(Gauge32):
    """Custom type winlink1000OduPerfMonAirIntervalBBERThresh1Exceed based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000OduPerfMonAirIntervalBBERThresh1Exceed_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonAirIntervalBBERThresh1Exceed_Object = MibTableColumn
winlink1000OduPerfMonAirIntervalBBERThresh1Exceed = _Winlink1000OduPerfMonAirIntervalBBERThresh1Exceed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 5, 1, 9),
    _Winlink1000OduPerfMonAirIntervalBBERThresh1Exceed_Type()
)
winlink1000OduPerfMonAirIntervalBBERThresh1Exceed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirIntervalBBERThresh1Exceed.setStatus("mandatory")
_Winlink1000OduPerfMonAirDayTable_Object = MibTable
winlink1000OduPerfMonAirDayTable = _Winlink1000OduPerfMonAirDayTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 6)
)
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirDayTable.setStatus("mandatory")
_Winlink1000OduPerfMonAirDayEntry_Object = MibTableRow
winlink1000OduPerfMonAirDayEntry = _Winlink1000OduPerfMonAirDayEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 6, 1)
)
winlink1000OduPerfMonAirDayEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduPerfMonAirDayIdx"),
)
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirDayEntry.setStatus("mandatory")


class _Winlink1000OduPerfMonAirDayIdx_Type(Integer32):
    """Custom type winlink1000OduPerfMonAirDayIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_Winlink1000OduPerfMonAirDayIdx_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonAirDayIdx_Object = MibTableColumn
winlink1000OduPerfMonAirDayIdx = _Winlink1000OduPerfMonAirDayIdx_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 6, 1, 1),
    _Winlink1000OduPerfMonAirDayIdx_Type()
)
winlink1000OduPerfMonAirDayIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirDayIdx.setStatus("mandatory")


class _Winlink1000OduPerfMonAirDayMinRSL_Type(Integer32):
    """Custom type winlink1000OduPerfMonAirDayMinRSL based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-100, 0),
    )


_Winlink1000OduPerfMonAirDayMinRSL_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonAirDayMinRSL_Object = MibTableColumn
winlink1000OduPerfMonAirDayMinRSL = _Winlink1000OduPerfMonAirDayMinRSL_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 6, 1, 2),
    _Winlink1000OduPerfMonAirDayMinRSL_Type()
)
winlink1000OduPerfMonAirDayMinRSL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirDayMinRSL.setStatus("mandatory")


class _Winlink1000OduPerfMonAirDayMaxRSL_Type(Integer32):
    """Custom type winlink1000OduPerfMonAirDayMaxRSL based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-100, 0),
    )


_Winlink1000OduPerfMonAirDayMaxRSL_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonAirDayMaxRSL_Object = MibTableColumn
winlink1000OduPerfMonAirDayMaxRSL = _Winlink1000OduPerfMonAirDayMaxRSL_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 6, 1, 3),
    _Winlink1000OduPerfMonAirDayMaxRSL_Type()
)
winlink1000OduPerfMonAirDayMaxRSL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirDayMaxRSL.setStatus("mandatory")


class _Winlink1000OduPerfMonAirDayRSLThresh1Exceed_Type(Gauge32):
    """Custom type winlink1000OduPerfMonAirDayRSLThresh1Exceed based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 86400),
    )


_Winlink1000OduPerfMonAirDayRSLThresh1Exceed_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonAirDayRSLThresh1Exceed_Object = MibTableColumn
winlink1000OduPerfMonAirDayRSLThresh1Exceed = _Winlink1000OduPerfMonAirDayRSLThresh1Exceed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 6, 1, 4),
    _Winlink1000OduPerfMonAirDayRSLThresh1Exceed_Type()
)
winlink1000OduPerfMonAirDayRSLThresh1Exceed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirDayRSLThresh1Exceed.setStatus("mandatory")


class _Winlink1000OduPerfMonAirDayRSLThresh2Exceed_Type(Gauge32):
    """Custom type winlink1000OduPerfMonAirDayRSLThresh2Exceed based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 86400),
    )


_Winlink1000OduPerfMonAirDayRSLThresh2Exceed_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonAirDayRSLThresh2Exceed_Object = MibTableColumn
winlink1000OduPerfMonAirDayRSLThresh2Exceed = _Winlink1000OduPerfMonAirDayRSLThresh2Exceed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 6, 1, 5),
    _Winlink1000OduPerfMonAirDayRSLThresh2Exceed_Type()
)
winlink1000OduPerfMonAirDayRSLThresh2Exceed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirDayRSLThresh2Exceed.setStatus("mandatory")


class _Winlink1000OduPerfMonAirDayMinTSL_Type(Integer32):
    """Custom type winlink1000OduPerfMonAirDayMinTSL based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-10, 25),
    )


_Winlink1000OduPerfMonAirDayMinTSL_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonAirDayMinTSL_Object = MibTableColumn
winlink1000OduPerfMonAirDayMinTSL = _Winlink1000OduPerfMonAirDayMinTSL_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 6, 1, 6),
    _Winlink1000OduPerfMonAirDayMinTSL_Type()
)
winlink1000OduPerfMonAirDayMinTSL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirDayMinTSL.setStatus("mandatory")


class _Winlink1000OduPerfMonAirDayMaxTSL_Type(Integer32):
    """Custom type winlink1000OduPerfMonAirDayMaxTSL based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-10, 25),
    )


_Winlink1000OduPerfMonAirDayMaxTSL_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonAirDayMaxTSL_Object = MibTableColumn
winlink1000OduPerfMonAirDayMaxTSL = _Winlink1000OduPerfMonAirDayMaxTSL_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 6, 1, 7),
    _Winlink1000OduPerfMonAirDayMaxTSL_Type()
)
winlink1000OduPerfMonAirDayMaxTSL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirDayMaxTSL.setStatus("mandatory")


class _Winlink1000OduPerfMonAirDayTSLThresh1Exceed_Type(Gauge32):
    """Custom type winlink1000OduPerfMonAirDayTSLThresh1Exceed based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 86400),
    )


_Winlink1000OduPerfMonAirDayTSLThresh1Exceed_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonAirDayTSLThresh1Exceed_Object = MibTableColumn
winlink1000OduPerfMonAirDayTSLThresh1Exceed = _Winlink1000OduPerfMonAirDayTSLThresh1Exceed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 6, 1, 8),
    _Winlink1000OduPerfMonAirDayTSLThresh1Exceed_Type()
)
winlink1000OduPerfMonAirDayTSLThresh1Exceed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirDayTSLThresh1Exceed.setStatus("mandatory")


class _Winlink1000OduPerfMonAirDayBBERThresh1Exceed_Type(Gauge32):
    """Custom type winlink1000OduPerfMonAirDayBBERThresh1Exceed based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 86400),
    )


_Winlink1000OduPerfMonAirDayBBERThresh1Exceed_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonAirDayBBERThresh1Exceed_Object = MibTableColumn
winlink1000OduPerfMonAirDayBBERThresh1Exceed = _Winlink1000OduPerfMonAirDayBBERThresh1Exceed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 6, 1, 9),
    _Winlink1000OduPerfMonAirDayBBERThresh1Exceed_Type()
)
winlink1000OduPerfMonAirDayBBERThresh1Exceed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonAirDayBBERThresh1Exceed.setStatus("mandatory")
_Winlink1000OduPerfMonEthCurrTable_Object = MibTable
winlink1000OduPerfMonEthCurrTable = _Winlink1000OduPerfMonEthCurrTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 7)
)
if mibBuilder.loadTexts:
    winlink1000OduPerfMonEthCurrTable.setStatus("mandatory")
_Winlink1000OduPerfMonEthCurrEntry_Object = MibTableRow
winlink1000OduPerfMonEthCurrEntry = _Winlink1000OduPerfMonEthCurrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 7, 1)
)
winlink1000OduPerfMonEthCurrEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduPerfMonEthCurrEntry.setStatus("mandatory")


class _Winlink1000OduPerfMonEthCurrRxMBytes_Type(Gauge32):
    """Custom type winlink1000OduPerfMonEthCurrRxMBytes based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11250),
    )


_Winlink1000OduPerfMonEthCurrRxMBytes_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonEthCurrRxMBytes_Object = MibTableColumn
winlink1000OduPerfMonEthCurrRxMBytes = _Winlink1000OduPerfMonEthCurrRxMBytes_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 7, 1, 1),
    _Winlink1000OduPerfMonEthCurrRxMBytes_Type()
)
winlink1000OduPerfMonEthCurrRxMBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonEthCurrRxMBytes.setStatus("mandatory")


class _Winlink1000OduPerfMonEthCurrTxMBytes_Type(Gauge32):
    """Custom type winlink1000OduPerfMonEthCurrTxMBytes based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11250),
    )


_Winlink1000OduPerfMonEthCurrTxMBytes_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonEthCurrTxMBytes_Object = MibTableColumn
winlink1000OduPerfMonEthCurrTxMBytes = _Winlink1000OduPerfMonEthCurrTxMBytes_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 7, 1, 2),
    _Winlink1000OduPerfMonEthCurrTxMBytes_Type()
)
winlink1000OduPerfMonEthCurrTxMBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonEthCurrTxMBytes.setStatus("mandatory")


class _Winlink1000OduPerfMonEthCurrEthCapacityThreshUnder_Type(Gauge32):
    """Custom type winlink1000OduPerfMonEthCurrEthCapacityThreshUnder based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000OduPerfMonEthCurrEthCapacityThreshUnder_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonEthCurrEthCapacityThreshUnder_Object = MibTableColumn
winlink1000OduPerfMonEthCurrEthCapacityThreshUnder = _Winlink1000OduPerfMonEthCurrEthCapacityThreshUnder_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 7, 1, 3),
    _Winlink1000OduPerfMonEthCurrEthCapacityThreshUnder_Type()
)
winlink1000OduPerfMonEthCurrEthCapacityThreshUnder.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonEthCurrEthCapacityThreshUnder.setStatus("mandatory")


class _Winlink1000OduPerfMonEthCurrHighTrafficThreshExceed_Type(Gauge32):
    """Custom type winlink1000OduPerfMonEthCurrHighTrafficThreshExceed based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000OduPerfMonEthCurrHighTrafficThreshExceed_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonEthCurrHighTrafficThreshExceed_Object = MibTableColumn
winlink1000OduPerfMonEthCurrHighTrafficThreshExceed = _Winlink1000OduPerfMonEthCurrHighTrafficThreshExceed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 7, 1, 4),
    _Winlink1000OduPerfMonEthCurrHighTrafficThreshExceed_Type()
)
winlink1000OduPerfMonEthCurrHighTrafficThreshExceed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonEthCurrHighTrafficThreshExceed.setStatus("mandatory")


class _Winlink1000OduPerfMonEthCurrActiveSeconds_Type(Gauge32):
    """Custom type winlink1000OduPerfMonEthCurrActiveSeconds based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000OduPerfMonEthCurrActiveSeconds_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonEthCurrActiveSeconds_Object = MibTableColumn
winlink1000OduPerfMonEthCurrActiveSeconds = _Winlink1000OduPerfMonEthCurrActiveSeconds_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 7, 1, 5),
    _Winlink1000OduPerfMonEthCurrActiveSeconds_Type()
)
winlink1000OduPerfMonEthCurrActiveSeconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonEthCurrActiveSeconds.setStatus("mandatory")
_Winlink1000OduPerfMonEthIntervalTable_Object = MibTable
winlink1000OduPerfMonEthIntervalTable = _Winlink1000OduPerfMonEthIntervalTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 8)
)
if mibBuilder.loadTexts:
    winlink1000OduPerfMonEthIntervalTable.setStatus("mandatory")
_Winlink1000OduPerfMonEthIntervalEntry_Object = MibTableRow
winlink1000OduPerfMonEthIntervalEntry = _Winlink1000OduPerfMonEthIntervalEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 8, 1)
)
winlink1000OduPerfMonEthIntervalEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduPerfMonEthIntervalIdx"),
)
if mibBuilder.loadTexts:
    winlink1000OduPerfMonEthIntervalEntry.setStatus("mandatory")


class _Winlink1000OduPerfMonEthIntervalIdx_Type(Integer32):
    """Custom type winlink1000OduPerfMonEthIntervalIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_Winlink1000OduPerfMonEthIntervalIdx_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonEthIntervalIdx_Object = MibTableColumn
winlink1000OduPerfMonEthIntervalIdx = _Winlink1000OduPerfMonEthIntervalIdx_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 8, 1, 1),
    _Winlink1000OduPerfMonEthIntervalIdx_Type()
)
winlink1000OduPerfMonEthIntervalIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonEthIntervalIdx.setStatus("mandatory")


class _Winlink1000OduPerfMonEthIntervalRxMBytes_Type(Gauge32):
    """Custom type winlink1000OduPerfMonEthIntervalRxMBytes based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11250),
    )


_Winlink1000OduPerfMonEthIntervalRxMBytes_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonEthIntervalRxMBytes_Object = MibTableColumn
winlink1000OduPerfMonEthIntervalRxMBytes = _Winlink1000OduPerfMonEthIntervalRxMBytes_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 8, 1, 2),
    _Winlink1000OduPerfMonEthIntervalRxMBytes_Type()
)
winlink1000OduPerfMonEthIntervalRxMBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonEthIntervalRxMBytes.setStatus("mandatory")


class _Winlink1000OduPerfMonEthIntervalTxMBytes_Type(Gauge32):
    """Custom type winlink1000OduPerfMonEthIntervalTxMBytes based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11250),
    )


_Winlink1000OduPerfMonEthIntervalTxMBytes_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonEthIntervalTxMBytes_Object = MibTableColumn
winlink1000OduPerfMonEthIntervalTxMBytes = _Winlink1000OduPerfMonEthIntervalTxMBytes_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 8, 1, 3),
    _Winlink1000OduPerfMonEthIntervalTxMBytes_Type()
)
winlink1000OduPerfMonEthIntervalTxMBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonEthIntervalTxMBytes.setStatus("mandatory")


class _Winlink1000OduPerfMonEthIntervalEthCapacityThreshUnder_Type(Gauge32):
    """Custom type winlink1000OduPerfMonEthIntervalEthCapacityThreshUnder based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000OduPerfMonEthIntervalEthCapacityThreshUnder_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonEthIntervalEthCapacityThreshUnder_Object = MibTableColumn
winlink1000OduPerfMonEthIntervalEthCapacityThreshUnder = _Winlink1000OduPerfMonEthIntervalEthCapacityThreshUnder_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 8, 1, 4),
    _Winlink1000OduPerfMonEthIntervalEthCapacityThreshUnder_Type()
)
winlink1000OduPerfMonEthIntervalEthCapacityThreshUnder.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonEthIntervalEthCapacityThreshUnder.setStatus("mandatory")


class _Winlink1000OduPerfMonEthIntervalHighTrafficThreshExceed_Type(Gauge32):
    """Custom type winlink1000OduPerfMonEthIntervalHighTrafficThreshExceed based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000OduPerfMonEthIntervalHighTrafficThreshExceed_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonEthIntervalHighTrafficThreshExceed_Object = MibTableColumn
winlink1000OduPerfMonEthIntervalHighTrafficThreshExceed = _Winlink1000OduPerfMonEthIntervalHighTrafficThreshExceed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 8, 1, 5),
    _Winlink1000OduPerfMonEthIntervalHighTrafficThreshExceed_Type()
)
winlink1000OduPerfMonEthIntervalHighTrafficThreshExceed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonEthIntervalHighTrafficThreshExceed.setStatus("mandatory")


class _Winlink1000OduPerfMonEthIntervalActiveSeconds_Type(Gauge32):
    """Custom type winlink1000OduPerfMonEthIntervalActiveSeconds based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000OduPerfMonEthIntervalActiveSeconds_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonEthIntervalActiveSeconds_Object = MibTableColumn
winlink1000OduPerfMonEthIntervalActiveSeconds = _Winlink1000OduPerfMonEthIntervalActiveSeconds_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 8, 1, 6),
    _Winlink1000OduPerfMonEthIntervalActiveSeconds_Type()
)
winlink1000OduPerfMonEthIntervalActiveSeconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonEthIntervalActiveSeconds.setStatus("mandatory")
_Winlink1000OduPerfMonEthDayTable_Object = MibTable
winlink1000OduPerfMonEthDayTable = _Winlink1000OduPerfMonEthDayTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 9)
)
if mibBuilder.loadTexts:
    winlink1000OduPerfMonEthDayTable.setStatus("mandatory")
_Winlink1000OduPerfMonEthDayEntry_Object = MibTableRow
winlink1000OduPerfMonEthDayEntry = _Winlink1000OduPerfMonEthDayEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 9, 1)
)
winlink1000OduPerfMonEthDayEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduPerfMonEthDayIdx"),
)
if mibBuilder.loadTexts:
    winlink1000OduPerfMonEthDayEntry.setStatus("mandatory")


class _Winlink1000OduPerfMonEthDayIdx_Type(Integer32):
    """Custom type winlink1000OduPerfMonEthDayIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_Winlink1000OduPerfMonEthDayIdx_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonEthDayIdx_Object = MibTableColumn
winlink1000OduPerfMonEthDayIdx = _Winlink1000OduPerfMonEthDayIdx_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 9, 1, 1),
    _Winlink1000OduPerfMonEthDayIdx_Type()
)
winlink1000OduPerfMonEthDayIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonEthDayIdx.setStatus("mandatory")


class _Winlink1000OduPerfMonEthDayRxMBytes_Type(Gauge32):
    """Custom type winlink1000OduPerfMonEthDayRxMBytes based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1080000),
    )


_Winlink1000OduPerfMonEthDayRxMBytes_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonEthDayRxMBytes_Object = MibTableColumn
winlink1000OduPerfMonEthDayRxMBytes = _Winlink1000OduPerfMonEthDayRxMBytes_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 9, 1, 2),
    _Winlink1000OduPerfMonEthDayRxMBytes_Type()
)
winlink1000OduPerfMonEthDayRxMBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonEthDayRxMBytes.setStatus("mandatory")


class _Winlink1000OduPerfMonEthDayTxMBytes_Type(Gauge32):
    """Custom type winlink1000OduPerfMonEthDayTxMBytes based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1080000),
    )


_Winlink1000OduPerfMonEthDayTxMBytes_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonEthDayTxMBytes_Object = MibTableColumn
winlink1000OduPerfMonEthDayTxMBytes = _Winlink1000OduPerfMonEthDayTxMBytes_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 9, 1, 3),
    _Winlink1000OduPerfMonEthDayTxMBytes_Type()
)
winlink1000OduPerfMonEthDayTxMBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonEthDayTxMBytes.setStatus("mandatory")


class _Winlink1000OduPerfMonEthDayEthCapacityThreshUnder_Type(Gauge32):
    """Custom type winlink1000OduPerfMonEthDayEthCapacityThreshUnder based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 86400),
    )


_Winlink1000OduPerfMonEthDayEthCapacityThreshUnder_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonEthDayEthCapacityThreshUnder_Object = MibTableColumn
winlink1000OduPerfMonEthDayEthCapacityThreshUnder = _Winlink1000OduPerfMonEthDayEthCapacityThreshUnder_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 9, 1, 4),
    _Winlink1000OduPerfMonEthDayEthCapacityThreshUnder_Type()
)
winlink1000OduPerfMonEthDayEthCapacityThreshUnder.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonEthDayEthCapacityThreshUnder.setStatus("mandatory")


class _Winlink1000OduPerfMonEthDayHighTrafficThreshExceed_Type(Gauge32):
    """Custom type winlink1000OduPerfMonEthDayHighTrafficThreshExceed based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 86400),
    )


_Winlink1000OduPerfMonEthDayHighTrafficThreshExceed_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonEthDayHighTrafficThreshExceed_Object = MibTableColumn
winlink1000OduPerfMonEthDayHighTrafficThreshExceed = _Winlink1000OduPerfMonEthDayHighTrafficThreshExceed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 9, 1, 5),
    _Winlink1000OduPerfMonEthDayHighTrafficThreshExceed_Type()
)
winlink1000OduPerfMonEthDayHighTrafficThreshExceed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonEthDayHighTrafficThreshExceed.setStatus("mandatory")


class _Winlink1000OduPerfMonEthDayActiveSeconds_Type(Gauge32):
    """Custom type winlink1000OduPerfMonEthDayActiveSeconds based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 86400),
    )


_Winlink1000OduPerfMonEthDayActiveSeconds_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonEthDayActiveSeconds_Object = MibTableColumn
winlink1000OduPerfMonEthDayActiveSeconds = _Winlink1000OduPerfMonEthDayActiveSeconds_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 9, 1, 6),
    _Winlink1000OduPerfMonEthDayActiveSeconds_Type()
)
winlink1000OduPerfMonEthDayActiveSeconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonEthDayActiveSeconds.setStatus("mandatory")
_Winlink1000OduPerfMonTdmCurrTable_Object = MibTable
winlink1000OduPerfMonTdmCurrTable = _Winlink1000OduPerfMonTdmCurrTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 10)
)
if mibBuilder.loadTexts:
    winlink1000OduPerfMonTdmCurrTable.setStatus("mandatory")
_Winlink1000OduPerfMonTdmCurrEntry_Object = MibTableRow
winlink1000OduPerfMonTdmCurrEntry = _Winlink1000OduPerfMonTdmCurrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 10, 1)
)
winlink1000OduPerfMonTdmCurrEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduPerfMonTdmCurrEntry.setStatus("mandatory")


class _Winlink1000OduPerfMonTdmCurrActiveSeconds_Type(Gauge32):
    """Custom type winlink1000OduPerfMonTdmCurrActiveSeconds based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000OduPerfMonTdmCurrActiveSeconds_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonTdmCurrActiveSeconds_Object = MibTableColumn
winlink1000OduPerfMonTdmCurrActiveSeconds = _Winlink1000OduPerfMonTdmCurrActiveSeconds_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 10, 1, 1),
    _Winlink1000OduPerfMonTdmCurrActiveSeconds_Type()
)
winlink1000OduPerfMonTdmCurrActiveSeconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonTdmCurrActiveSeconds.setStatus("mandatory")
_Winlink1000OduPerfMonTdmIntervalTable_Object = MibTable
winlink1000OduPerfMonTdmIntervalTable = _Winlink1000OduPerfMonTdmIntervalTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 11)
)
if mibBuilder.loadTexts:
    winlink1000OduPerfMonTdmIntervalTable.setStatus("mandatory")
_Winlink1000OduPerfMonTdmIntervalEntry_Object = MibTableRow
winlink1000OduPerfMonTdmIntervalEntry = _Winlink1000OduPerfMonTdmIntervalEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 11, 1)
)
winlink1000OduPerfMonTdmIntervalEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduPerfMonTdmIntervalIdx"),
)
if mibBuilder.loadTexts:
    winlink1000OduPerfMonTdmIntervalEntry.setStatus("mandatory")


class _Winlink1000OduPerfMonTdmIntervalIdx_Type(Integer32):
    """Custom type winlink1000OduPerfMonTdmIntervalIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_Winlink1000OduPerfMonTdmIntervalIdx_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonTdmIntervalIdx_Object = MibTableColumn
winlink1000OduPerfMonTdmIntervalIdx = _Winlink1000OduPerfMonTdmIntervalIdx_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 11, 1, 1),
    _Winlink1000OduPerfMonTdmIntervalIdx_Type()
)
winlink1000OduPerfMonTdmIntervalIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonTdmIntervalIdx.setStatus("mandatory")


class _Winlink1000OduPerfMonTdmIntervalActiveSeconds_Type(Gauge32):
    """Custom type winlink1000OduPerfMonTdmIntervalActiveSeconds based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000OduPerfMonTdmIntervalActiveSeconds_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonTdmIntervalActiveSeconds_Object = MibTableColumn
winlink1000OduPerfMonTdmIntervalActiveSeconds = _Winlink1000OduPerfMonTdmIntervalActiveSeconds_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 11, 1, 2),
    _Winlink1000OduPerfMonTdmIntervalActiveSeconds_Type()
)
winlink1000OduPerfMonTdmIntervalActiveSeconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonTdmIntervalActiveSeconds.setStatus("mandatory")
_Winlink1000OduPerfMonTdmDayTable_Object = MibTable
winlink1000OduPerfMonTdmDayTable = _Winlink1000OduPerfMonTdmDayTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 12)
)
if mibBuilder.loadTexts:
    winlink1000OduPerfMonTdmDayTable.setStatus("mandatory")
_Winlink1000OduPerfMonTdmDayEntry_Object = MibTableRow
winlink1000OduPerfMonTdmDayEntry = _Winlink1000OduPerfMonTdmDayEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 12, 1)
)
winlink1000OduPerfMonTdmDayEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduPerfMonTdmDayIdx"),
)
if mibBuilder.loadTexts:
    winlink1000OduPerfMonTdmDayEntry.setStatus("mandatory")


class _Winlink1000OduPerfMonTdmDayIdx_Type(Integer32):
    """Custom type winlink1000OduPerfMonTdmDayIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_Winlink1000OduPerfMonTdmDayIdx_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonTdmDayIdx_Object = MibTableColumn
winlink1000OduPerfMonTdmDayIdx = _Winlink1000OduPerfMonTdmDayIdx_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 12, 1, 1),
    _Winlink1000OduPerfMonTdmDayIdx_Type()
)
winlink1000OduPerfMonTdmDayIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonTdmDayIdx.setStatus("mandatory")


class _Winlink1000OduPerfMonTdmDayActiveSeconds_Type(Gauge32):
    """Custom type winlink1000OduPerfMonTdmDayActiveSeconds based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 86400),
    )


_Winlink1000OduPerfMonTdmDayActiveSeconds_Type.__name__ = "Gauge32"
_Winlink1000OduPerfMonTdmDayActiveSeconds_Object = MibTableColumn
winlink1000OduPerfMonTdmDayActiveSeconds = _Winlink1000OduPerfMonTdmDayActiveSeconds_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 12, 1, 2),
    _Winlink1000OduPerfMonTdmDayActiveSeconds_Type()
)
winlink1000OduPerfMonTdmDayActiveSeconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonTdmDayActiveSeconds.setStatus("mandatory")


class _Winlink1000OduPerfMonTxThresh1_Type(Integer32):
    """Custom type winlink1000OduPerfMonTxThresh1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-10, 25),
    )


_Winlink1000OduPerfMonTxThresh1_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonTxThresh1_Object = MibScalar
winlink1000OduPerfMonTxThresh1 = _Winlink1000OduPerfMonTxThresh1_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 20),
    _Winlink1000OduPerfMonTxThresh1_Type()
)
winlink1000OduPerfMonTxThresh1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonTxThresh1.setStatus("mandatory")


class _Winlink1000OduPerfMonRxThresh1_Type(Integer32):
    """Custom type winlink1000OduPerfMonRxThresh1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-100, 0),
    )


_Winlink1000OduPerfMonRxThresh1_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonRxThresh1_Object = MibScalar
winlink1000OduPerfMonRxThresh1 = _Winlink1000OduPerfMonRxThresh1_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 21),
    _Winlink1000OduPerfMonRxThresh1_Type()
)
winlink1000OduPerfMonRxThresh1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonRxThresh1.setStatus("mandatory")


class _Winlink1000OduPerfMonRxThresh2_Type(Integer32):
    """Custom type winlink1000OduPerfMonRxThresh2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-100, 0),
    )


_Winlink1000OduPerfMonRxThresh2_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonRxThresh2_Object = MibScalar
winlink1000OduPerfMonRxThresh2 = _Winlink1000OduPerfMonRxThresh2_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 22),
    _Winlink1000OduPerfMonRxThresh2_Type()
)
winlink1000OduPerfMonRxThresh2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonRxThresh2.setStatus("mandatory")


class _Winlink1000OduPerfMonBBERThresh1_Type(Integer32):
    """Custom type winlink1000OduPerfMonBBERThresh1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 500),
    )


_Winlink1000OduPerfMonBBERThresh1_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonBBERThresh1_Object = MibScalar
winlink1000OduPerfMonBBERThresh1 = _Winlink1000OduPerfMonBBERThresh1_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 23),
    _Winlink1000OduPerfMonBBERThresh1_Type()
)
winlink1000OduPerfMonBBERThresh1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonBBERThresh1.setStatus("mandatory")


class _Winlink1000OduPerfMonEthCapacityThreshKbps_Type(Integer32):
    """Custom type winlink1000OduPerfMonEthCapacityThreshKbps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100000),
    )


_Winlink1000OduPerfMonEthCapacityThreshKbps_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonEthCapacityThreshKbps_Object = MibScalar
winlink1000OduPerfMonEthCapacityThreshKbps = _Winlink1000OduPerfMonEthCapacityThreshKbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 24),
    _Winlink1000OduPerfMonEthCapacityThreshKbps_Type()
)
winlink1000OduPerfMonEthCapacityThreshKbps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonEthCapacityThreshKbps.setStatus("mandatory")


class _Winlink1000OduPerfMonHighTrafficThreshKbps_Type(Integer32):
    """Custom type winlink1000OduPerfMonHighTrafficThreshKbps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100000),
    )


_Winlink1000OduPerfMonHighTrafficThreshKbps_Type.__name__ = "Integer32"
_Winlink1000OduPerfMonHighTrafficThreshKbps_Object = MibScalar
winlink1000OduPerfMonHighTrafficThreshKbps = _Winlink1000OduPerfMonHighTrafficThreshKbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 6, 25),
    _Winlink1000OduPerfMonHighTrafficThreshKbps_Type()
)
winlink1000OduPerfMonHighTrafficThreshKbps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduPerfMonHighTrafficThreshKbps.setStatus("mandatory")
_Winlink1000OduAgent_ObjectIdentity = ObjectIdentity
winlink1000OduAgent = _Winlink1000OduAgent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7)
)
_Winlink1000OduAgnGeneral_ObjectIdentity = ObjectIdentity
winlink1000OduAgnGeneral = _Winlink1000OduAgnGeneral_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 1)
)


class _Winlink1000OduAgnGenAddTrapExt_Type(Integer32):
    """Custom type winlink1000OduAgnGenAddTrapExt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Winlink1000OduAgnGenAddTrapExt_Type.__name__ = "Integer32"
_Winlink1000OduAgnGenAddTrapExt_Object = MibScalar
winlink1000OduAgnGenAddTrapExt = _Winlink1000OduAgnGenAddTrapExt_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 1, 1),
    _Winlink1000OduAgnGenAddTrapExt_Type()
)
winlink1000OduAgnGenAddTrapExt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAgnGenAddTrapExt.setStatus("mandatory")


class _Winlink1000OduAgnGenSetMode_Type(Integer32):
    """Custom type winlink1000OduAgnGenSetMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabledSWU", 2),
          ("disabledSpectrumAnalysis", 3),
          ("disabledBeforeResetAfterSWU", 4),
          ("disabledUpdateConfigurationFiles", 5),
          ("disabledSWK", 6))
    )


_Winlink1000OduAgnGenSetMode_Type.__name__ = "Integer32"
_Winlink1000OduAgnGenSetMode_Object = MibScalar
winlink1000OduAgnGenSetMode = _Winlink1000OduAgnGenSetMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 1, 2),
    _Winlink1000OduAgnGenSetMode_Type()
)
winlink1000OduAgnGenSetMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAgnGenSetMode.setStatus("mandatory")


class _Winlink1000OduAgnGenLocalConnectionMode_Type(Integer32):
    """Custom type winlink1000OduAgnGenLocalConnectionMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("readWrite", 1),
          ("readOnly", 2))
    )


_Winlink1000OduAgnGenLocalConnectionMode_Type.__name__ = "Integer32"
_Winlink1000OduAgnGenLocalConnectionMode_Object = MibScalar
winlink1000OduAgnGenLocalConnectionMode = _Winlink1000OduAgnGenLocalConnectionMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 1, 3),
    _Winlink1000OduAgnGenLocalConnectionMode_Type()
)
winlink1000OduAgnGenLocalConnectionMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAgnGenLocalConnectionMode.setStatus("mandatory")
_Winlink1000OduAgnNTPCfg_ObjectIdentity = ObjectIdentity
winlink1000OduAgnNTPCfg = _Winlink1000OduAgnNTPCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 2)
)
_Winlink1000OduAgnNTPCfgTimeServerIP_Type = IpAddress
_Winlink1000OduAgnNTPCfgTimeServerIP_Object = MibScalar
winlink1000OduAgnNTPCfgTimeServerIP = _Winlink1000OduAgnNTPCfgTimeServerIP_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 2, 1),
    _Winlink1000OduAgnNTPCfgTimeServerIP_Type()
)
winlink1000OduAgnNTPCfgTimeServerIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAgnNTPCfgTimeServerIP.setStatus("mandatory")


class _Winlink1000OduAgnNTPCfgTimeOffsetFromUTC_Type(Integer32):
    """Custom type winlink1000OduAgnNTPCfgTimeOffsetFromUTC based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1440, 1440),
    )


_Winlink1000OduAgnNTPCfgTimeOffsetFromUTC_Type.__name__ = "Integer32"
_Winlink1000OduAgnNTPCfgTimeOffsetFromUTC_Object = MibScalar
winlink1000OduAgnNTPCfgTimeOffsetFromUTC = _Winlink1000OduAgnNTPCfgTimeOffsetFromUTC_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 2, 2),
    _Winlink1000OduAgnNTPCfgTimeOffsetFromUTC_Type()
)
winlink1000OduAgnNTPCfgTimeOffsetFromUTC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAgnNTPCfgTimeOffsetFromUTC.setStatus("mandatory")


class _Winlink1000OduAgnRealTimeAndDate_Type(OctetString):
    """Custom type winlink1000OduAgnRealTimeAndDate based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )
    fixed_length = 8


_Winlink1000OduAgnRealTimeAndDate_Type.__name__ = "OctetString"
_Winlink1000OduAgnRealTimeAndDate_Object = MibScalar
winlink1000OduAgnRealTimeAndDate = _Winlink1000OduAgnRealTimeAndDate_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 2, 3),
    _Winlink1000OduAgnRealTimeAndDate_Type()
)
winlink1000OduAgnRealTimeAndDate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAgnRealTimeAndDate.setStatus("mandatory")
_Winlink1000OduAdmNTPCfgTimeServerIPv6_Type = DisplayString
_Winlink1000OduAdmNTPCfgTimeServerIPv6_Object = MibScalar
winlink1000OduAdmNTPCfgTimeServerIPv6 = _Winlink1000OduAdmNTPCfgTimeServerIPv6_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 2, 4),
    _Winlink1000OduAdmNTPCfgTimeServerIPv6_Type()
)
winlink1000OduAdmNTPCfgTimeServerIPv6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmNTPCfgTimeServerIPv6.setStatus("mandatory")
_Winlink1000OduAgnCurrAlarm_ObjectIdentity = ObjectIdentity
winlink1000OduAgnCurrAlarm = _Winlink1000OduAgnCurrAlarm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 3)
)
_Winlink1000OduAgnCurrAlarmLastChange_Type = Integer32
_Winlink1000OduAgnCurrAlarmLastChange_Object = MibScalar
winlink1000OduAgnCurrAlarmLastChange = _Winlink1000OduAgnCurrAlarmLastChange_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 3, 1),
    _Winlink1000OduAgnCurrAlarmLastChange_Type()
)
winlink1000OduAgnCurrAlarmLastChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAgnCurrAlarmLastChange.setStatus("mandatory")
_Winlink1000OduAgnCurrAlarmTable_Object = MibTable
winlink1000OduAgnCurrAlarmTable = _Winlink1000OduAgnCurrAlarmTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 3, 2)
)
if mibBuilder.loadTexts:
    winlink1000OduAgnCurrAlarmTable.setStatus("mandatory")
_Winlink1000OduAgnCurrAlarmEntry_Object = MibTableRow
winlink1000OduAgnCurrAlarmEntry = _Winlink1000OduAgnCurrAlarmEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 3, 2, 1)
)
winlink1000OduAgnCurrAlarmEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmCounter"),
)
if mibBuilder.loadTexts:
    winlink1000OduAgnCurrAlarmEntry.setStatus("mandatory")


class _Winlink1000OduAgnCurrAlarmCounter_Type(Integer32):
    """Custom type winlink1000OduAgnCurrAlarmCounter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000OduAgnCurrAlarmCounter_Type.__name__ = "Integer32"
_Winlink1000OduAgnCurrAlarmCounter_Object = MibTableColumn
winlink1000OduAgnCurrAlarmCounter = _Winlink1000OduAgnCurrAlarmCounter_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 3, 2, 1, 1),
    _Winlink1000OduAgnCurrAlarmCounter_Type()
)
winlink1000OduAgnCurrAlarmCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAgnCurrAlarmCounter.setStatus("mandatory")


class _Winlink1000OduAgnCurrAlarmSeverity_Type(Integer32):
    """Custom type winlink1000OduAgnCurrAlarmSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              8,
              16,
              32)
        )
    )
    namedValues = NamedValues(
        *(("event", 1),
          ("normal", 2),
          ("warning", 4),
          ("minor", 8),
          ("major", 16),
          ("critical", 32))
    )


_Winlink1000OduAgnCurrAlarmSeverity_Type.__name__ = "Integer32"
_Winlink1000OduAgnCurrAlarmSeverity_Object = MibTableColumn
winlink1000OduAgnCurrAlarmSeverity = _Winlink1000OduAgnCurrAlarmSeverity_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 3, 2, 1, 2),
    _Winlink1000OduAgnCurrAlarmSeverity_Type()
)
winlink1000OduAgnCurrAlarmSeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAgnCurrAlarmSeverity.setStatus("mandatory")
_Winlink1000OduAgnCurrAlarmId_Type = Integer32
_Winlink1000OduAgnCurrAlarmId_Object = MibTableColumn
winlink1000OduAgnCurrAlarmId = _Winlink1000OduAgnCurrAlarmId_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 3, 2, 1, 3),
    _Winlink1000OduAgnCurrAlarmId_Type()
)
winlink1000OduAgnCurrAlarmId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAgnCurrAlarmId.setStatus("mandatory")
_Winlink1000OduAgnCurrAlarmIfIndex_Type = Integer32
_Winlink1000OduAgnCurrAlarmIfIndex_Object = MibTableColumn
winlink1000OduAgnCurrAlarmIfIndex = _Winlink1000OduAgnCurrAlarmIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 3, 2, 1, 4),
    _Winlink1000OduAgnCurrAlarmIfIndex_Type()
)
winlink1000OduAgnCurrAlarmIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAgnCurrAlarmIfIndex.setStatus("mandatory")


class _Winlink1000OduAgnCurrAlarmUnit_Type(Integer32):
    """Custom type winlink1000OduAgnCurrAlarmUnit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("idu", 1),
          ("odu", 2))
    )


_Winlink1000OduAgnCurrAlarmUnit_Type.__name__ = "Integer32"
_Winlink1000OduAgnCurrAlarmUnit_Object = MibTableColumn
winlink1000OduAgnCurrAlarmUnit = _Winlink1000OduAgnCurrAlarmUnit_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 3, 2, 1, 5),
    _Winlink1000OduAgnCurrAlarmUnit_Type()
)
winlink1000OduAgnCurrAlarmUnit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAgnCurrAlarmUnit.setStatus("mandatory")
_Winlink1000OduAgnCurrAlarmTrapID_Type = Integer32
_Winlink1000OduAgnCurrAlarmTrapID_Object = MibTableColumn
winlink1000OduAgnCurrAlarmTrapID = _Winlink1000OduAgnCurrAlarmTrapID_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 3, 2, 1, 6),
    _Winlink1000OduAgnCurrAlarmTrapID_Type()
)
winlink1000OduAgnCurrAlarmTrapID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAgnCurrAlarmTrapID.setStatus("mandatory")
_Winlink1000OduAgnCurrAlarmTimeT_Type = Integer32
_Winlink1000OduAgnCurrAlarmTimeT_Object = MibTableColumn
winlink1000OduAgnCurrAlarmTimeT = _Winlink1000OduAgnCurrAlarmTimeT_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 3, 2, 1, 7),
    _Winlink1000OduAgnCurrAlarmTimeT_Type()
)
winlink1000OduAgnCurrAlarmTimeT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAgnCurrAlarmTimeT.setStatus("mandatory")
_Winlink1000OduAgnCurrAlarmText_Type = DisplayString
_Winlink1000OduAgnCurrAlarmText_Object = MibTableColumn
winlink1000OduAgnCurrAlarmText = _Winlink1000OduAgnCurrAlarmText_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 3, 2, 1, 8),
    _Winlink1000OduAgnCurrAlarmText_Type()
)
winlink1000OduAgnCurrAlarmText.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAgnCurrAlarmText.setStatus("mandatory")
_Winlink1000OduAgnLastEvents_ObjectIdentity = ObjectIdentity
winlink1000OduAgnLastEvents = _Winlink1000OduAgnLastEvents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 4)
)
_Winlink1000OduAgnLastEventsNumber_Type = Integer32
_Winlink1000OduAgnLastEventsNumber_Object = MibScalar
winlink1000OduAgnLastEventsNumber = _Winlink1000OduAgnLastEventsNumber_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 4, 1),
    _Winlink1000OduAgnLastEventsNumber_Type()
)
winlink1000OduAgnLastEventsNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAgnLastEventsNumber.setStatus("mandatory")
_Winlink1000OduAgnLastEventsTable_Object = MibTable
winlink1000OduAgnLastEventsTable = _Winlink1000OduAgnLastEventsTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 4, 2)
)
if mibBuilder.loadTexts:
    winlink1000OduAgnLastEventsTable.setStatus("mandatory")
_Winlink1000OduAgnLastEventsEntry_Object = MibTableRow
winlink1000OduAgnLastEventsEntry = _Winlink1000OduAgnLastEventsEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 4, 2, 1)
)
winlink1000OduAgnLastEventsEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAgnLastEventsIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduAgnLastEventsEntry.setStatus("mandatory")


class _Winlink1000OduAgnLastEventsIndex_Type(Integer32):
    """Custom type winlink1000OduAgnLastEventsIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000OduAgnLastEventsIndex_Type.__name__ = "Integer32"
_Winlink1000OduAgnLastEventsIndex_Object = MibTableColumn
winlink1000OduAgnLastEventsIndex = _Winlink1000OduAgnLastEventsIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 4, 2, 1, 1),
    _Winlink1000OduAgnLastEventsIndex_Type()
)
winlink1000OduAgnLastEventsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAgnLastEventsIndex.setStatus("mandatory")


class _Winlink1000OduAgnLastEventsSeverity_Type(Integer32):
    """Custom type winlink1000OduAgnLastEventsSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              8,
              16,
              32)
        )
    )
    namedValues = NamedValues(
        *(("event", 1),
          ("normal", 2),
          ("warning", 4),
          ("minor", 8),
          ("major", 16),
          ("critical", 32))
    )


_Winlink1000OduAgnLastEventsSeverity_Type.__name__ = "Integer32"
_Winlink1000OduAgnLastEventsSeverity_Object = MibTableColumn
winlink1000OduAgnLastEventsSeverity = _Winlink1000OduAgnLastEventsSeverity_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 4, 2, 1, 2),
    _Winlink1000OduAgnLastEventsSeverity_Type()
)
winlink1000OduAgnLastEventsSeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAgnLastEventsSeverity.setStatus("mandatory")
_Winlink1000OduAgnLastEventsIfIndex_Type = Integer32
_Winlink1000OduAgnLastEventsIfIndex_Object = MibTableColumn
winlink1000OduAgnLastEventsIfIndex = _Winlink1000OduAgnLastEventsIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 4, 2, 1, 3),
    _Winlink1000OduAgnLastEventsIfIndex_Type()
)
winlink1000OduAgnLastEventsIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAgnLastEventsIfIndex.setStatus("mandatory")
_Winlink1000OduAgnLastEventsTimeT_Type = Integer32
_Winlink1000OduAgnLastEventsTimeT_Object = MibTableColumn
winlink1000OduAgnLastEventsTimeT = _Winlink1000OduAgnLastEventsTimeT_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 4, 2, 1, 4),
    _Winlink1000OduAgnLastEventsTimeT_Type()
)
winlink1000OduAgnLastEventsTimeT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAgnLastEventsTimeT.setStatus("mandatory")
_Winlink1000OduAgnLastEventsText_Type = DisplayString
_Winlink1000OduAgnLastEventsText_Object = MibTableColumn
winlink1000OduAgnLastEventsText = _Winlink1000OduAgnLastEventsText_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 4, 2, 1, 5),
    _Winlink1000OduAgnLastEventsText_Type()
)
winlink1000OduAgnLastEventsText.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAgnLastEventsText.setStatus("mandatory")


class _Winlink1000OduAgnLastEventsUnit_Type(Integer32):
    """Custom type winlink1000OduAgnLastEventsUnit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              65535)
        )
    )
    namedValues = NamedValues(
        *(("idu", 1),
          ("odu", 2),
          ("carrier1", 3),
          ("carrier2", 4),
          ("undefined", 65535))
    )


_Winlink1000OduAgnLastEventsUnit_Type.__name__ = "Integer32"
_Winlink1000OduAgnLastEventsUnit_Object = MibTableColumn
winlink1000OduAgnLastEventsUnit = _Winlink1000OduAgnLastEventsUnit_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 4, 2, 1, 6),
    _Winlink1000OduAgnLastEventsUnit_Type()
)
winlink1000OduAgnLastEventsUnit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAgnLastEventsUnit.setStatus("mandatory")
_Winlink1000OduAgnUsersTable_Object = MibTable
winlink1000OduAgnUsersTable = _Winlink1000OduAgnUsersTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 5)
)
if mibBuilder.loadTexts:
    winlink1000OduAgnUsersTable.setStatus("mandatory")
_Winlink1000OduAgnUsersEntry_Object = MibTableRow
winlink1000OduAgnUsersEntry = _Winlink1000OduAgnUsersEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 5, 1)
)
winlink1000OduAgnUsersEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAgnUsersIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduAgnUsersEntry.setStatus("mandatory")


class _Winlink1000OduAgnUsersIndex_Type(Integer32):
    """Custom type winlink1000OduAgnUsersIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000OduAgnUsersIndex_Type.__name__ = "Integer32"
_Winlink1000OduAgnUsersIndex_Object = MibTableColumn
winlink1000OduAgnUsersIndex = _Winlink1000OduAgnUsersIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 5, 1, 1),
    _Winlink1000OduAgnUsersIndex_Type()
)
winlink1000OduAgnUsersIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAgnUsersIndex.setStatus("mandatory")
_Winlink1000OduAgnUsersUserName_Type = DisplayString
_Winlink1000OduAgnUsersUserName_Object = MibTableColumn
winlink1000OduAgnUsersUserName = _Winlink1000OduAgnUsersUserName_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 5, 1, 2),
    _Winlink1000OduAgnUsersUserName_Type()
)
winlink1000OduAgnUsersUserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAgnUsersUserName.setStatus("mandatory")
_Winlink1000OduAgnUsersPassword_Type = DisplayString
_Winlink1000OduAgnUsersPassword_Object = MibTableColumn
winlink1000OduAgnUsersPassword = _Winlink1000OduAgnUsersPassword_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 5, 1, 3),
    _Winlink1000OduAgnUsersPassword_Type()
)
winlink1000OduAgnUsersPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAgnUsersPassword.setStatus("mandatory")


class _Winlink1000OduAgnUsersProfile_Type(Integer32):
    """Custom type winlink1000OduAgnUsersProfile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("observer", 2),
          ("admin", 3),
          ("installer", 4),
          ("operator", 5))
    )


_Winlink1000OduAgnUsersProfile_Type.__name__ = "Integer32"
_Winlink1000OduAgnUsersProfile_Object = MibTableColumn
winlink1000OduAgnUsersProfile = _Winlink1000OduAgnUsersProfile_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 5, 1, 4),
    _Winlink1000OduAgnUsersProfile_Type()
)
winlink1000OduAgnUsersProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAgnUsersProfile.setStatus("mandatory")
_Winlink1000OduAgnUsersLastAccessTime_Type = Integer32
_Winlink1000OduAgnUsersLastAccessTime_Object = MibTableColumn
winlink1000OduAgnUsersLastAccessTime = _Winlink1000OduAgnUsersLastAccessTime_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 5, 1, 5),
    _Winlink1000OduAgnUsersLastAccessTime_Type()
)
winlink1000OduAgnUsersLastAccessTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAgnUsersLastAccessTime.setStatus("mandatory")


class _Winlink1000OduAgnSNMPV3AuthenticationMode_Type(Integer32):
    """Custom type winlink1000OduAgnSNMPV3AuthenticationMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("md5", 1),
          ("sha1", 2))
    )


_Winlink1000OduAgnSNMPV3AuthenticationMode_Type.__name__ = "Integer32"
_Winlink1000OduAgnSNMPV3AuthenticationMode_Object = MibScalar
winlink1000OduAgnSNMPV3AuthenticationMode = _Winlink1000OduAgnSNMPV3AuthenticationMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 1, 7, 6),
    _Winlink1000OduAgnSNMPV3AuthenticationMode_Type()
)
winlink1000OduAgnSNMPV3AuthenticationMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAgnSNMPV3AuthenticationMode.setStatus("mandatory")
_Winlink1000Idu_ObjectIdentity = ObjectIdentity
winlink1000Idu = _Winlink1000Idu_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2)
)
_Winlink1000IduAdmin_ObjectIdentity = ObjectIdentity
winlink1000IduAdmin = _Winlink1000IduAdmin_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1)
)
_Winlink1000IduAdmProductType_Type = DisplayString
_Winlink1000IduAdmProductType_Object = MibScalar
winlink1000IduAdmProductType = _Winlink1000IduAdmProductType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 1),
    _Winlink1000IduAdmProductType_Type()
)
winlink1000IduAdmProductType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduAdmProductType.setStatus("mandatory")
_Winlink1000IduAdmHwRev_Type = DisplayString
_Winlink1000IduAdmHwRev_Object = MibScalar
winlink1000IduAdmHwRev = _Winlink1000IduAdmHwRev_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 2),
    _Winlink1000IduAdmHwRev_Type()
)
winlink1000IduAdmHwRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduAdmHwRev.setStatus("mandatory")
_Winlink1000IduAdmSwRev_Type = DisplayString
_Winlink1000IduAdmSwRev_Object = MibScalar
winlink1000IduAdmSwRev = _Winlink1000IduAdmSwRev_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 3),
    _Winlink1000IduAdmSwRev_Type()
)
winlink1000IduAdmSwRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduAdmSwRev.setStatus("mandatory")
_Winlink1000OduAdmNumOfExternalAlarmIn_Type = Integer32
_Winlink1000OduAdmNumOfExternalAlarmIn_Object = MibScalar
winlink1000OduAdmNumOfExternalAlarmIn = _Winlink1000OduAdmNumOfExternalAlarmIn_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 4),
    _Winlink1000OduAdmNumOfExternalAlarmIn_Type()
)
winlink1000OduAdmNumOfExternalAlarmIn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmNumOfExternalAlarmIn.setStatus("mandatory")
_Winlink1000OduAdmExternAlarmInTable_Object = MibTable
winlink1000OduAdmExternAlarmInTable = _Winlink1000OduAdmExternAlarmInTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 5)
)
if mibBuilder.loadTexts:
    winlink1000OduAdmExternAlarmInTable.setStatus("mandatory")
_Winlink1000OduAdmExternAlarmInEntry_Object = MibTableRow
winlink1000OduAdmExternAlarmInEntry = _Winlink1000OduAdmExternAlarmInEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 5, 1)
)
winlink1000OduAdmExternAlarmInEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000OduAdmExternAlarmInIndex"),
)
if mibBuilder.loadTexts:
    winlink1000OduAdmExternAlarmInEntry.setStatus("mandatory")


class _Winlink1000OduAdmExternAlarmInIndex_Type(Integer32):
    """Custom type winlink1000OduAdmExternAlarmInIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_Winlink1000OduAdmExternAlarmInIndex_Type.__name__ = "Integer32"
_Winlink1000OduAdmExternAlarmInIndex_Object = MibTableColumn
winlink1000OduAdmExternAlarmInIndex = _Winlink1000OduAdmExternAlarmInIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 5, 1, 1),
    _Winlink1000OduAdmExternAlarmInIndex_Type()
)
winlink1000OduAdmExternAlarmInIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmExternAlarmInIndex.setStatus("mandatory")


class _Winlink1000OduAdmExternAlarmInText_Type(DisplayString):
    """Custom type winlink1000OduAdmExternAlarmInText based on DisplayString"""
    defaultValue = OctetString("Alarm Description")


_Winlink1000OduAdmExternAlarmInText_Type.__name__ = "DisplayString"
_Winlink1000OduAdmExternAlarmInText_Object = MibTableColumn
winlink1000OduAdmExternAlarmInText = _Winlink1000OduAdmExternAlarmInText_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 5, 1, 2),
    _Winlink1000OduAdmExternAlarmInText_Type()
)
winlink1000OduAdmExternAlarmInText.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmExternAlarmInText.setStatus("mandatory")


class _Winlink1000OduAdmExternAlarmInAdminState_Type(Integer32):
    """Custom type winlink1000OduAdmExternAlarmInAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_Winlink1000OduAdmExternAlarmInAdminState_Type.__name__ = "Integer32"
_Winlink1000OduAdmExternAlarmInAdminState_Object = MibTableColumn
winlink1000OduAdmExternAlarmInAdminState = _Winlink1000OduAdmExternAlarmInAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 5, 1, 3),
    _Winlink1000OduAdmExternAlarmInAdminState_Type()
)
winlink1000OduAdmExternAlarmInAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduAdmExternAlarmInAdminState.setStatus("mandatory")


class _Winlink1000OduAdmExternAlarmInStatus_Type(Integer32):
    """Custom type winlink1000OduAdmExternAlarmInStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("alarm", 2),
          ("unknown", 3))
    )


_Winlink1000OduAdmExternAlarmInStatus_Type.__name__ = "Integer32"
_Winlink1000OduAdmExternAlarmInStatus_Object = MibTableColumn
winlink1000OduAdmExternAlarmInStatus = _Winlink1000OduAdmExternAlarmInStatus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 5, 1, 4),
    _Winlink1000OduAdmExternAlarmInStatus_Type()
)
winlink1000OduAdmExternAlarmInStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000OduAdmExternAlarmInStatus.setStatus("mandatory")
_Winlink1000IduAdmSN_Type = DisplayString
_Winlink1000IduAdmSN_Object = MibScalar
winlink1000IduAdmSN = _Winlink1000IduAdmSN_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 6),
    _Winlink1000IduAdmSN_Type()
)
winlink1000IduAdmSN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduAdmSN.setStatus("mandatory")


class _Winlink1000IduAdmIduDetectionMode_Type(Integer32):
    """Custom type winlink1000IduAdmIduDetectionMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("mandatoryDisabled", 1),
          ("mandatoryEnabled", 2),
          ("userDisabled", 3),
          ("userEnabled", 4))
    )


_Winlink1000IduAdmIduDetectionMode_Type.__name__ = "Integer32"
_Winlink1000IduAdmIduDetectionMode_Object = MibScalar
winlink1000IduAdmIduDetectionMode = _Winlink1000IduAdmIduDetectionMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 7),
    _Winlink1000IduAdmIduDetectionMode_Type()
)
winlink1000IduAdmIduDetectionMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduAdmIduDetectionMode.setStatus("mandatory")
_Winlink1000IduAdmMountedTrunks_Type = Integer32
_Winlink1000IduAdmMountedTrunks_Object = MibScalar
winlink1000IduAdmMountedTrunks = _Winlink1000IduAdmMountedTrunks_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 8),
    _Winlink1000IduAdmMountedTrunks_Type()
)
winlink1000IduAdmMountedTrunks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduAdmMountedTrunks.setStatus("mandatory")
_Winlink1000IduAdmLicensedTrunks_Type = Integer32
_Winlink1000IduAdmLicensedTrunks_Object = MibScalar
winlink1000IduAdmLicensedTrunks = _Winlink1000IduAdmLicensedTrunks_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 9),
    _Winlink1000IduAdmLicensedTrunks_Type()
)
winlink1000IduAdmLicensedTrunks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduAdmLicensedTrunks.setStatus("mandatory")


class _Winlink1000IduAdmVlanSupported_Type(Integer32):
    """Custom type winlink1000IduAdmVlanSupported based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notSupported", 1),
          ("supported", 2),
          ("supportedLimited", 3))
    )


_Winlink1000IduAdmVlanSupported_Type.__name__ = "Integer32"
_Winlink1000IduAdmVlanSupported_Object = MibScalar
winlink1000IduAdmVlanSupported = _Winlink1000IduAdmVlanSupported_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 10),
    _Winlink1000IduAdmVlanSupported_Type()
)
winlink1000IduAdmVlanSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduAdmVlanSupported.setStatus("mandatory")
_Winlink1000IduAdmVlanEgressMode_Type = DisplayString
_Winlink1000IduAdmVlanEgressMode_Object = MibScalar
winlink1000IduAdmVlanEgressMode = _Winlink1000IduAdmVlanEgressMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 11),
    _Winlink1000IduAdmVlanEgressMode_Type()
)
winlink1000IduAdmVlanEgressMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduAdmVlanEgressMode.setStatus("mandatory")
_Winlink1000IduAdmVlanIngressMode_Type = DisplayString
_Winlink1000IduAdmVlanIngressMode_Object = MibScalar
winlink1000IduAdmVlanIngressMode = _Winlink1000IduAdmVlanIngressMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 12),
    _Winlink1000IduAdmVlanIngressMode_Type()
)
winlink1000IduAdmVlanIngressMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduAdmVlanIngressMode.setStatus("mandatory")
_Winlink1000IduAdmVlanDefaultPortVIDs_Type = DisplayString
_Winlink1000IduAdmVlanDefaultPortVIDs_Object = MibScalar
winlink1000IduAdmVlanDefaultPortVIDs = _Winlink1000IduAdmVlanDefaultPortVIDs_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 13),
    _Winlink1000IduAdmVlanDefaultPortVIDs_Type()
)
winlink1000IduAdmVlanDefaultPortVIDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduAdmVlanDefaultPortVIDs.setStatus("mandatory")
_Winlink1000IduAdmVlanLan1UntaggedVIDs_Type = DisplayString
_Winlink1000IduAdmVlanLan1UntaggedVIDs_Object = MibScalar
winlink1000IduAdmVlanLan1UntaggedVIDs = _Winlink1000IduAdmVlanLan1UntaggedVIDs_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 14),
    _Winlink1000IduAdmVlanLan1UntaggedVIDs_Type()
)
winlink1000IduAdmVlanLan1UntaggedVIDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduAdmVlanLan1UntaggedVIDs.setStatus("mandatory")
_Winlink1000IduAdmVlanLan2UntaggedVIDs_Type = DisplayString
_Winlink1000IduAdmVlanLan2UntaggedVIDs_Object = MibScalar
winlink1000IduAdmVlanLan2UntaggedVIDs = _Winlink1000IduAdmVlanLan2UntaggedVIDs_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 15),
    _Winlink1000IduAdmVlanLan2UntaggedVIDs_Type()
)
winlink1000IduAdmVlanLan2UntaggedVIDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduAdmVlanLan2UntaggedVIDs.setStatus("mandatory")
_Winlink1000IduAdmVlanSfpUntaggedVIDs_Type = DisplayString
_Winlink1000IduAdmVlanSfpUntaggedVIDs_Object = MibScalar
winlink1000IduAdmVlanSfpUntaggedVIDs = _Winlink1000IduAdmVlanSfpUntaggedVIDs_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 16),
    _Winlink1000IduAdmVlanSfpUntaggedVIDs_Type()
)
winlink1000IduAdmVlanSfpUntaggedVIDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduAdmVlanSfpUntaggedVIDs.setStatus("mandatory")
_Winlink1000IduAdmVlanLan1FilteredVIDs_Type = DisplayString
_Winlink1000IduAdmVlanLan1FilteredVIDs_Object = MibScalar
winlink1000IduAdmVlanLan1FilteredVIDs = _Winlink1000IduAdmVlanLan1FilteredVIDs_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 17),
    _Winlink1000IduAdmVlanLan1FilteredVIDs_Type()
)
winlink1000IduAdmVlanLan1FilteredVIDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduAdmVlanLan1FilteredVIDs.setStatus("mandatory")
_Winlink1000IduAdmVlanLan2FilteredVIDs_Type = DisplayString
_Winlink1000IduAdmVlanLan2FilteredVIDs_Object = MibScalar
winlink1000IduAdmVlanLan2FilteredVIDs = _Winlink1000IduAdmVlanLan2FilteredVIDs_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 18),
    _Winlink1000IduAdmVlanLan2FilteredVIDs_Type()
)
winlink1000IduAdmVlanLan2FilteredVIDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduAdmVlanLan2FilteredVIDs.setStatus("mandatory")
_Winlink1000IduAdmVlanSfpFilteredVIDs_Type = DisplayString
_Winlink1000IduAdmVlanSfpFilteredVIDs_Object = MibScalar
winlink1000IduAdmVlanSfpFilteredVIDs = _Winlink1000IduAdmVlanSfpFilteredVIDs_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 19),
    _Winlink1000IduAdmVlanSfpFilteredVIDs_Type()
)
winlink1000IduAdmVlanSfpFilteredVIDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduAdmVlanSfpFilteredVIDs.setStatus("mandatory")
_Winlink1000IduAdmPortsConnection_Type = Integer32
_Winlink1000IduAdmPortsConnection_Object = MibScalar
winlink1000IduAdmPortsConnection = _Winlink1000IduAdmPortsConnection_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 20),
    _Winlink1000IduAdmPortsConnection_Type()
)
winlink1000IduAdmPortsConnection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduAdmPortsConnection.setStatus("mandatory")


class _Winlink1000IduAdmVlanMode_Type(Integer32):
    """Custom type winlink1000IduAdmVlanMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("normal", 1),
          ("membership", 2))
    )


_Winlink1000IduAdmVlanMode_Type.__name__ = "Integer32"
_Winlink1000IduAdmVlanMode_Object = MibScalar
winlink1000IduAdmVlanMode = _Winlink1000IduAdmVlanMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 21),
    _Winlink1000IduAdmVlanMode_Type()
)
winlink1000IduAdmVlanMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduAdmVlanMode.setStatus("mandatory")
_Winlink1000IduAdmVlanMembershipVIDs_Type = OctetString
_Winlink1000IduAdmVlanMembershipVIDs_Object = MibScalar
winlink1000IduAdmVlanMembershipVIDs = _Winlink1000IduAdmVlanMembershipVIDs_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 22),
    _Winlink1000IduAdmVlanMembershipVIDs_Type()
)
winlink1000IduAdmVlanMembershipVIDs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduAdmVlanMembershipVIDs.setStatus("mandatory")
_Winlink1000IduAdmVlanMembershipPortsCode_Type = OctetString
_Winlink1000IduAdmVlanMembershipPortsCode_Object = MibScalar
winlink1000IduAdmVlanMembershipPortsCode = _Winlink1000IduAdmVlanMembershipPortsCode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 23),
    _Winlink1000IduAdmVlanMembershipPortsCode_Type()
)
winlink1000IduAdmVlanMembershipPortsCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduAdmVlanMembershipPortsCode.setStatus("mandatory")
_Winlink1000IduAdmVlanMembershipUntaggedHandle_Type = DisplayString
_Winlink1000IduAdmVlanMembershipUntaggedHandle_Object = MibScalar
winlink1000IduAdmVlanMembershipUntaggedHandle = _Winlink1000IduAdmVlanMembershipUntaggedHandle_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 24),
    _Winlink1000IduAdmVlanMembershipUntaggedHandle_Type()
)
winlink1000IduAdmVlanMembershipUntaggedHandle.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduAdmVlanMembershipUntaggedHandle.setStatus("mandatory")
_Winlink1000IduAdmVlanMembershipTagUntagged_Type = DisplayString
_Winlink1000IduAdmVlanMembershipTagUntagged_Object = MibScalar
winlink1000IduAdmVlanMembershipTagUntagged = _Winlink1000IduAdmVlanMembershipTagUntagged_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 1, 25),
    _Winlink1000IduAdmVlanMembershipTagUntagged_Type()
)
winlink1000IduAdmVlanMembershipTagUntagged.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduAdmVlanMembershipTagUntagged.setStatus("mandatory")
_Winlink1000IduService_ObjectIdentity = ObjectIdentity
winlink1000IduService = _Winlink1000IduService_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 2)
)
_Winlink1000IduSrvDesiredTrunks_Type = Integer32
_Winlink1000IduSrvDesiredTrunks_Object = MibScalar
winlink1000IduSrvDesiredTrunks = _Winlink1000IduSrvDesiredTrunks_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 2, 2),
    _Winlink1000IduSrvDesiredTrunks_Type()
)
winlink1000IduSrvDesiredTrunks.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduSrvDesiredTrunks.setStatus("mandatory")
_Winlink1000IduSrvServices_Type = ObjectIdentifier
_Winlink1000IduSrvServices_Object = MibScalar
winlink1000IduSrvServices = _Winlink1000IduSrvServices_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 2, 4),
    _Winlink1000IduSrvServices_Type()
)
winlink1000IduSrvServices.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduSrvServices.setStatus("mandatory")
_Winlink1000IduSrvActiveTrunks_Type = Integer32
_Winlink1000IduSrvActiveTrunks_Object = MibScalar
winlink1000IduSrvActiveTrunks = _Winlink1000IduSrvActiveTrunks_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 2, 6),
    _Winlink1000IduSrvActiveTrunks_Type()
)
winlink1000IduSrvActiveTrunks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduSrvActiveTrunks.setStatus("mandatory")
_Winlink1000IduSrvAvailableTrunks_Type = Integer32
_Winlink1000IduSrvAvailableTrunks_Object = MibScalar
winlink1000IduSrvAvailableTrunks = _Winlink1000IduSrvAvailableTrunks_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 2, 8),
    _Winlink1000IduSrvAvailableTrunks_Type()
)
winlink1000IduSrvAvailableTrunks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduSrvAvailableTrunks.setStatus("mandatory")
_Winlink1000IduSrvPossibleServicesTable_Object = MibTable
winlink1000IduSrvPossibleServicesTable = _Winlink1000IduSrvPossibleServicesTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 2, 10)
)
if mibBuilder.loadTexts:
    winlink1000IduSrvPossibleServicesTable.setStatus("mandatory")
_Winlink1000IduSrvPossibleServicesEntry_Object = MibTableRow
winlink1000IduSrvPossibleServicesEntry = _Winlink1000IduSrvPossibleServicesEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 2, 10, 1)
)
winlink1000IduSrvPossibleServicesEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000IduSrvPossibleServicesIndex"),
)
if mibBuilder.loadTexts:
    winlink1000IduSrvPossibleServicesEntry.setStatus("mandatory")


class _Winlink1000IduSrvPossibleServicesIndex_Type(Integer32):
    """Custom type winlink1000IduSrvPossibleServicesIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000IduSrvPossibleServicesIndex_Type.__name__ = "Integer32"
_Winlink1000IduSrvPossibleServicesIndex_Object = MibTableColumn
winlink1000IduSrvPossibleServicesIndex = _Winlink1000IduSrvPossibleServicesIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 2, 10, 1, 1),
    _Winlink1000IduSrvPossibleServicesIndex_Type()
)
winlink1000IduSrvPossibleServicesIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduSrvPossibleServicesIndex.setStatus("mandatory")
_Winlink1000IduSrvPossibleTdmServices_Type = Integer32
_Winlink1000IduSrvPossibleTdmServices_Object = MibTableColumn
winlink1000IduSrvPossibleTdmServices = _Winlink1000IduSrvPossibleTdmServices_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 2, 10, 1, 2),
    _Winlink1000IduSrvPossibleTdmServices_Type()
)
winlink1000IduSrvPossibleTdmServices.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduSrvPossibleTdmServices.setStatus("deprecated")
_Winlink1000IduSrvPossibleEthServices_Type = Integer32
_Winlink1000IduSrvPossibleEthServices_Object = MibTableColumn
winlink1000IduSrvPossibleEthServices = _Winlink1000IduSrvPossibleEthServices_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 2, 10, 1, 3),
    _Winlink1000IduSrvPossibleEthServices_Type()
)
winlink1000IduSrvPossibleEthServices.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduSrvPossibleEthServices.setStatus("deprecated")
_Winlink1000IduSrvRemainingRate_Type = Integer32
_Winlink1000IduSrvRemainingRate_Object = MibTableColumn
winlink1000IduSrvRemainingRate = _Winlink1000IduSrvRemainingRate_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 2, 10, 1, 4),
    _Winlink1000IduSrvRemainingRate_Type()
)
winlink1000IduSrvRemainingRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduSrvRemainingRate.setStatus("mandatory")
_Winlink1000IduSrvTrunkCost_Type = Integer32
_Winlink1000IduSrvTrunkCost_Object = MibTableColumn
winlink1000IduSrvTrunkCost = _Winlink1000IduSrvTrunkCost_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 2, 10, 1, 5),
    _Winlink1000IduSrvTrunkCost_Type()
)
winlink1000IduSrvTrunkCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduSrvTrunkCost.setStatus("mandatory")
_Winlink1000IduSrvAvailServicesTable_Object = MibTable
winlink1000IduSrvAvailServicesTable = _Winlink1000IduSrvAvailServicesTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 2, 11)
)
if mibBuilder.loadTexts:
    winlink1000IduSrvAvailServicesTable.setStatus("mandatory")
_Winlink1000IduSrvAvailServicesEntry_Object = MibTableRow
winlink1000IduSrvAvailServicesEntry = _Winlink1000IduSrvAvailServicesEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 2, 11, 1)
)
winlink1000IduSrvAvailServicesEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000IduSrvAvailServicesIndex"),
)
if mibBuilder.loadTexts:
    winlink1000IduSrvAvailServicesEntry.setStatus("mandatory")


class _Winlink1000IduSrvAvailServicesIndex_Type(Integer32):
    """Custom type winlink1000IduSrvAvailServicesIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000IduSrvAvailServicesIndex_Type.__name__ = "Integer32"
_Winlink1000IduSrvAvailServicesIndex_Object = MibTableColumn
winlink1000IduSrvAvailServicesIndex = _Winlink1000IduSrvAvailServicesIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 2, 11, 1, 1),
    _Winlink1000IduSrvAvailServicesIndex_Type()
)
winlink1000IduSrvAvailServicesIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduSrvAvailServicesIndex.setStatus("mandatory")


class _Winlink1000IduSrvAvailServicesState_Type(Integer32):
    """Custom type winlink1000IduSrvAvailServicesState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unavailable", 1),
          ("available", 2))
    )


_Winlink1000IduSrvAvailServicesState_Type.__name__ = "Integer32"
_Winlink1000IduSrvAvailServicesState_Object = MibTableColumn
winlink1000IduSrvAvailServicesState = _Winlink1000IduSrvAvailServicesState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 2, 11, 1, 2),
    _Winlink1000IduSrvAvailServicesState_Type()
)
winlink1000IduSrvAvailServicesState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduSrvAvailServicesState.setStatus("mandatory")
_Winlink1000IduSrvAvailServicesMinRateIdx_Type = Integer32
_Winlink1000IduSrvAvailServicesMinRateIdx_Object = MibTableColumn
winlink1000IduSrvAvailServicesMinRateIdx = _Winlink1000IduSrvAvailServicesMinRateIdx_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 2, 11, 1, 3),
    _Winlink1000IduSrvAvailServicesMinRateIdx_Type()
)
winlink1000IduSrvAvailServicesMinRateIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduSrvAvailServicesMinRateIdx.setStatus("mandatory")
_Winlink1000IduSrvAvailServicesMaxRateIdx_Type = Integer32
_Winlink1000IduSrvAvailServicesMaxRateIdx_Object = MibTableColumn
winlink1000IduSrvAvailServicesMaxRateIdx = _Winlink1000IduSrvAvailServicesMaxRateIdx_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 2, 11, 1, 4),
    _Winlink1000IduSrvAvailServicesMaxRateIdx_Type()
)
winlink1000IduSrvAvailServicesMaxRateIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduSrvAvailServicesMaxRateIdx.setStatus("mandatory")


class _Winlink1000IduSrvAvailServicesReason_Type(Integer32):
    """Custom type winlink1000IduSrvAvailServicesReason based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("insufficientThroughput", 2),
          ("notSupportedIDUHw", 3),
          ("inconsistentLinkParams", 4),
          ("improperExtPulseType", 5),
          ("incompatibleSWVersion", 6),
          ("asymmetricTDD", 7))
    )


_Winlink1000IduSrvAvailServicesReason_Type.__name__ = "Integer32"
_Winlink1000IduSrvAvailServicesReason_Object = MibTableColumn
winlink1000IduSrvAvailServicesReason = _Winlink1000IduSrvAvailServicesReason_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 2, 11, 1, 5),
    _Winlink1000IduSrvAvailServicesReason_Type()
)
winlink1000IduSrvAvailServicesReason.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduSrvAvailServicesReason.setStatus("mandatory")


class _Winlink1000IduSrvEthActive_Type(Integer32):
    """Custom type winlink1000IduSrvEthActive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("inactive", 1),
          ("active", 2))
    )


_Winlink1000IduSrvEthActive_Type.__name__ = "Integer32"
_Winlink1000IduSrvEthActive_Object = MibScalar
winlink1000IduSrvEthActive = _Winlink1000IduSrvEthActive_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 2, 12),
    _Winlink1000IduSrvEthActive_Type()
)
winlink1000IduSrvEthActive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduSrvEthActive.setStatus("mandatory")


class _Winlink1000IduSrvEthAvailable_Type(Integer32):
    """Custom type winlink1000IduSrvEthAvailable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unavailable", 1),
          ("available", 2))
    )


_Winlink1000IduSrvEthAvailable_Type.__name__ = "Integer32"
_Winlink1000IduSrvEthAvailable_Object = MibScalar
winlink1000IduSrvEthAvailable = _Winlink1000IduSrvEthAvailable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 2, 13),
    _Winlink1000IduSrvEthAvailable_Type()
)
winlink1000IduSrvEthAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduSrvEthAvailable.setStatus("mandatory")
_Winlink1000IduSrvEthThroughput_Type = Gauge32
_Winlink1000IduSrvEthThroughput_Object = MibScalar
winlink1000IduSrvEthThroughput = _Winlink1000IduSrvEthThroughput_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 2, 14),
    _Winlink1000IduSrvEthThroughput_Type()
)
winlink1000IduSrvEthThroughput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduSrvEthThroughput.setStatus("mandatory")


class _Winlink1000IduSrvEthMaxInfoRate_Type(Integer32):
    """Custom type winlink1000IduSrvEthMaxInfoRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 122880),
    )


_Winlink1000IduSrvEthMaxInfoRate_Type.__name__ = "Integer32"
_Winlink1000IduSrvEthMaxInfoRate_Object = MibScalar
winlink1000IduSrvEthMaxInfoRate = _Winlink1000IduSrvEthMaxInfoRate_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 2, 15),
    _Winlink1000IduSrvEthMaxInfoRate_Type()
)
winlink1000IduSrvEthMaxInfoRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduSrvEthMaxInfoRate.setStatus("mandatory")
_Winlink1000IduSrvAvailableTrunksT1_Type = Integer32
_Winlink1000IduSrvAvailableTrunksT1_Object = MibScalar
winlink1000IduSrvAvailableTrunksT1 = _Winlink1000IduSrvAvailableTrunksT1_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 2, 16),
    _Winlink1000IduSrvAvailableTrunksT1_Type()
)
winlink1000IduSrvAvailableTrunksT1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduSrvAvailableTrunksT1.setStatus("mandatory")
_Winlink1000IduEthernet_ObjectIdentity = ObjectIdentity
winlink1000IduEthernet = _Winlink1000IduEthernet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 3)
)
_Winlink1000IduEthernetIfTable_Object = MibTable
winlink1000IduEthernetIfTable = _Winlink1000IduEthernetIfTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 3, 1)
)
if mibBuilder.loadTexts:
    winlink1000IduEthernetIfTable.setStatus("mandatory")
_Winlink1000IduEthernetIfEntry_Object = MibTableRow
winlink1000IduEthernetIfEntry = _Winlink1000IduEthernetIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 3, 1, 1)
)
winlink1000IduEthernetIfEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000IduEthernetIfIndex"),
)
if mibBuilder.loadTexts:
    winlink1000IduEthernetIfEntry.setStatus("mandatory")


class _Winlink1000IduEthernetIfIndex_Type(Integer32):
    """Custom type winlink1000IduEthernetIfIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000IduEthernetIfIndex_Type.__name__ = "Integer32"
_Winlink1000IduEthernetIfIndex_Object = MibTableColumn
winlink1000IduEthernetIfIndex = _Winlink1000IduEthernetIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 3, 1, 1, 1),
    _Winlink1000IduEthernetIfIndex_Type()
)
winlink1000IduEthernetIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduEthernetIfIndex.setStatus("mandatory")
_Winlink1000IduEthernetIfAddress_Type = DisplayString
_Winlink1000IduEthernetIfAddress_Object = MibTableColumn
winlink1000IduEthernetIfAddress = _Winlink1000IduEthernetIfAddress_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 3, 1, 1, 5),
    _Winlink1000IduEthernetIfAddress_Type()
)
winlink1000IduEthernetIfAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduEthernetIfAddress.setStatus("mandatory")
_Winlink1000IduEthernetNumOfLanPorts_Type = Integer32
_Winlink1000IduEthernetNumOfLanPorts_Object = MibScalar
winlink1000IduEthernetNumOfLanPorts = _Winlink1000IduEthernetNumOfLanPorts_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 3, 3),
    _Winlink1000IduEthernetNumOfLanPorts_Type()
)
winlink1000IduEthernetNumOfLanPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduEthernetNumOfLanPorts.setStatus("mandatory")
_Winlink1000IduEthernetNumOfSfpPorts_Type = Integer32
_Winlink1000IduEthernetNumOfSfpPorts_Object = MibScalar
winlink1000IduEthernetNumOfSfpPorts = _Winlink1000IduEthernetNumOfSfpPorts_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 3, 4),
    _Winlink1000IduEthernetNumOfSfpPorts_Type()
)
winlink1000IduEthernetNumOfSfpPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduEthernetNumOfSfpPorts.setStatus("mandatory")
_Winlink1000IduEthernetSfpProperties_Type = DisplayString
_Winlink1000IduEthernetSfpProperties_Object = MibScalar
winlink1000IduEthernetSfpProperties = _Winlink1000IduEthernetSfpProperties_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 3, 5),
    _Winlink1000IduEthernetSfpProperties_Type()
)
winlink1000IduEthernetSfpProperties.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduEthernetSfpProperties.setStatus("mandatory")


class _Winlink1000IduEthernetGbeSupported_Type(Integer32):
    """Custom type winlink1000IduEthernetGbeSupported based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notSupported", 1),
          ("supported", 2))
    )


_Winlink1000IduEthernetGbeSupported_Type.__name__ = "Integer32"
_Winlink1000IduEthernetGbeSupported_Object = MibScalar
winlink1000IduEthernetGbeSupported = _Winlink1000IduEthernetGbeSupported_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 3, 6),
    _Winlink1000IduEthernetGbeSupported_Type()
)
winlink1000IduEthernetGbeSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduEthernetGbeSupported.setStatus("mandatory")
_Winlink1000IduEthernetOduInErrors_Type = Counter32
_Winlink1000IduEthernetOduInErrors_Object = MibScalar
winlink1000IduEthernetOduInErrors = _Winlink1000IduEthernetOduInErrors_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 3, 7),
    _Winlink1000IduEthernetOduInErrors_Type()
)
winlink1000IduEthernetOduInErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduEthernetOduInErrors.setStatus("mandatory")
_Winlink1000IduBridge_ObjectIdentity = ObjectIdentity
winlink1000IduBridge = _Winlink1000IduBridge_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 4)
)
_Winlink1000IduBridgeTp_ObjectIdentity = ObjectIdentity
winlink1000IduBridgeTp = _Winlink1000IduBridgeTp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 4, 4)
)


class _Winlink1000IduBridgeTpAging_Type(Integer32):
    """Custom type winlink1000IduBridgeTpAging based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1048575),
    )


_Winlink1000IduBridgeTpAging_Type.__name__ = "Integer32"
_Winlink1000IduBridgeTpAging_Object = MibScalar
winlink1000IduBridgeTpAging = _Winlink1000IduBridgeTpAging_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 4, 4, 2),
    _Winlink1000IduBridgeTpAging_Type()
)
winlink1000IduBridgeTpAging.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduBridgeTpAging.setStatus("mandatory")
_Winlink1000IduTdm_ObjectIdentity = ObjectIdentity
winlink1000IduTdm = _Winlink1000IduTdm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6)
)
_Winlink1000IduTdmTxClock_ObjectIdentity = ObjectIdentity
winlink1000IduTdmTxClock = _Winlink1000IduTdmTxClock_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 1)
)


class _Winlink1000IduTdmTxClockAvailStates_Type(Integer32):
    """Custom type winlink1000IduTdmTxClockAvailStates based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 62),
    )


_Winlink1000IduTdmTxClockAvailStates_Type.__name__ = "Integer32"
_Winlink1000IduTdmTxClockAvailStates_Object = MibScalar
winlink1000IduTdmTxClockAvailStates = _Winlink1000IduTdmTxClockAvailStates_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 1, 1),
    _Winlink1000IduTdmTxClockAvailStates_Type()
)
winlink1000IduTdmTxClockAvailStates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduTdmTxClockAvailStates.setStatus("mandatory")


class _Winlink1000IduTdmTxClockDesiredState_Type(Integer32):
    """Custom type winlink1000IduTdmTxClockDesiredState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              4,
              8,
              16,
              32,
              64)
        )
    )
    namedValues = NamedValues(
        *(("transparent", 2),
          ("localLT", 4),
          ("remoteLT", 8),
          ("localInternal", 16),
          ("remoteInternal", 32),
          ("multipleClock", 64))
    )


_Winlink1000IduTdmTxClockDesiredState_Type.__name__ = "Integer32"
_Winlink1000IduTdmTxClockDesiredState_Object = MibScalar
winlink1000IduTdmTxClockDesiredState = _Winlink1000IduTdmTxClockDesiredState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 1, 2),
    _Winlink1000IduTdmTxClockDesiredState_Type()
)
winlink1000IduTdmTxClockDesiredState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduTdmTxClockDesiredState.setStatus("mandatory")


class _Winlink1000IduTdmTxClockActualState_Type(Integer32):
    """Custom type winlink1000IduTdmTxClockActualState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              8,
              16,
              32,
              64)
        )
    )
    namedValues = NamedValues(
        *(("notAvailable", 1),
          ("transparent", 2),
          ("localLT", 4),
          ("remoteLT", 8),
          ("localInternal", 16),
          ("remoteInternal", 32),
          ("multipleClock", 64))
    )


_Winlink1000IduTdmTxClockActualState_Type.__name__ = "Integer32"
_Winlink1000IduTdmTxClockActualState_Object = MibScalar
winlink1000IduTdmTxClockActualState = _Winlink1000IduTdmTxClockActualState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 1, 3),
    _Winlink1000IduTdmTxClockActualState_Type()
)
winlink1000IduTdmTxClockActualState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduTdmTxClockActualState.setStatus("mandatory")
_Winlink1000IduTdmMasterClock_ObjectIdentity = ObjectIdentity
winlink1000IduTdmMasterClock = _Winlink1000IduTdmMasterClock_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 2)
)


class _Winlink1000IduTdmMasterClockAvailOptions_Type(Integer32):
    """Custom type winlink1000IduTdmMasterClockAvailOptions based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 62),
    )


_Winlink1000IduTdmMasterClockAvailOptions_Type.__name__ = "Integer32"
_Winlink1000IduTdmMasterClockAvailOptions_Object = MibScalar
winlink1000IduTdmMasterClockAvailOptions = _Winlink1000IduTdmMasterClockAvailOptions_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 2, 1),
    _Winlink1000IduTdmMasterClockAvailOptions_Type()
)
winlink1000IduTdmMasterClockAvailOptions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduTdmMasterClockAvailOptions.setStatus("mandatory")


class _Winlink1000IduTdmMasterClockDesired_Type(Integer32):
    """Custom type winlink1000IduTdmMasterClockDesired based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              4,
              8,
              16,
              32,
              64)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 2),
          ("trunk1", 4),
          ("trunk2", 8),
          ("trunk3", 16),
          ("trunk4", 32),
          ("multipleClocks", 64))
    )


_Winlink1000IduTdmMasterClockDesired_Type.__name__ = "Integer32"
_Winlink1000IduTdmMasterClockDesired_Object = MibScalar
winlink1000IduTdmMasterClockDesired = _Winlink1000IduTdmMasterClockDesired_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 2, 2),
    _Winlink1000IduTdmMasterClockDesired_Type()
)
winlink1000IduTdmMasterClockDesired.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduTdmMasterClockDesired.setStatus("mandatory")


class _Winlink1000IduTdmMasterClockActual_Type(Integer32):
    """Custom type winlink1000IduTdmMasterClockActual based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              4,
              8,
              16,
              32,
              64)
        )
    )
    namedValues = NamedValues(
        *(("notAvailable", 1),
          ("trunk1", 4),
          ("trunk2", 8),
          ("trunk3", 16),
          ("trunk4", 32),
          ("multipleClocks", 64))
    )


_Winlink1000IduTdmMasterClockActual_Type.__name__ = "Integer32"
_Winlink1000IduTdmMasterClockActual_Object = MibScalar
winlink1000IduTdmMasterClockActual = _Winlink1000IduTdmMasterClockActual_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 2, 3),
    _Winlink1000IduTdmMasterClockActual_Type()
)
winlink1000IduTdmMasterClockActual.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduTdmMasterClockActual.setStatus("mandatory")
_Winlink1000IduTdmConfigTable_Object = MibTable
winlink1000IduTdmConfigTable = _Winlink1000IduTdmConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 6)
)
if mibBuilder.loadTexts:
    winlink1000IduTdmConfigTable.setStatus("mandatory")
_Winlink1000IduTdmConfigEntry_Object = MibTableRow
winlink1000IduTdmConfigEntry = _Winlink1000IduTdmConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 6, 1)
)
winlink1000IduTdmConfigEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000IduTdmConfigIndex"),
)
if mibBuilder.loadTexts:
    winlink1000IduTdmConfigEntry.setStatus("mandatory")


class _Winlink1000IduTdmConfigIndex_Type(Integer32):
    """Custom type winlink1000IduTdmConfigIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000IduTdmConfigIndex_Type.__name__ = "Integer32"
_Winlink1000IduTdmConfigIndex_Object = MibTableColumn
winlink1000IduTdmConfigIndex = _Winlink1000IduTdmConfigIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 6, 1, 1),
    _Winlink1000IduTdmConfigIndex_Type()
)
winlink1000IduTdmConfigIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduTdmConfigIndex.setStatus("mandatory")
_Winlink1000IduTdmIfIndex_Type = Integer32
_Winlink1000IduTdmIfIndex_Object = MibTableColumn
winlink1000IduTdmIfIndex = _Winlink1000IduTdmIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 6, 1, 2),
    _Winlink1000IduTdmIfIndex_Type()
)
winlink1000IduTdmIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduTdmIfIndex.setStatus("mandatory")


class _Winlink1000IduTdmLineCoding_Type(Integer32):
    """Custom type winlink1000IduTdmLineCoding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              5)
        )
    )
    namedValues = NamedValues(
        *(("b8zs", 2),
          ("ami", 5))
    )


_Winlink1000IduTdmLineCoding_Type.__name__ = "Integer32"
_Winlink1000IduTdmLineCoding_Object = MibTableColumn
winlink1000IduTdmLineCoding = _Winlink1000IduTdmLineCoding_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 6, 1, 6),
    _Winlink1000IduTdmLineCoding_Type()
)
winlink1000IduTdmLineCoding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduTdmLineCoding.setStatus("mandatory")


class _Winlink1000IduTdmLoopbackConfig_Type(Integer32):
    """Custom type winlink1000IduTdmLoopbackConfig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("normal", 1),
          ("lineLoopBack", 3),
          ("revereseLineLoopBack", 4))
    )


_Winlink1000IduTdmLoopbackConfig_Type.__name__ = "Integer32"
_Winlink1000IduTdmLoopbackConfig_Object = MibTableColumn
winlink1000IduTdmLoopbackConfig = _Winlink1000IduTdmLoopbackConfig_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 6, 1, 9),
    _Winlink1000IduTdmLoopbackConfig_Type()
)
winlink1000IduTdmLoopbackConfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduTdmLoopbackConfig.setStatus("mandatory")


class _Winlink1000IduTdmLineStatus_Type(Integer32):
    """Custom type winlink1000IduTdmLineStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              8,
              64,
              128)
        )
    )
    namedValues = NamedValues(
        *(("normal", 1),
          ("ais", 8),
          ("los", 64),
          ("loopback", 128))
    )


_Winlink1000IduTdmLineStatus_Type.__name__ = "Integer32"
_Winlink1000IduTdmLineStatus_Object = MibTableColumn
winlink1000IduTdmLineStatus = _Winlink1000IduTdmLineStatus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 6, 1, 10),
    _Winlink1000IduTdmLineStatus_Type()
)
winlink1000IduTdmLineStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduTdmLineStatus.setStatus("mandatory")
_Winlink1000IduTdmCurrentTable_Object = MibTable
winlink1000IduTdmCurrentTable = _Winlink1000IduTdmCurrentTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 7)
)
if mibBuilder.loadTexts:
    winlink1000IduTdmCurrentTable.setStatus("mandatory")
_Winlink1000IduTdmCurrentEntry_Object = MibTableRow
winlink1000IduTdmCurrentEntry = _Winlink1000IduTdmCurrentEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 7, 1)
)
winlink1000IduTdmCurrentEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000IduTdmCurrentIndex"),
)
if mibBuilder.loadTexts:
    winlink1000IduTdmCurrentEntry.setStatus("mandatory")


class _Winlink1000IduTdmCurrentIndex_Type(Integer32):
    """Custom type winlink1000IduTdmCurrentIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000IduTdmCurrentIndex_Type.__name__ = "Integer32"
_Winlink1000IduTdmCurrentIndex_Object = MibTableColumn
winlink1000IduTdmCurrentIndex = _Winlink1000IduTdmCurrentIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 7, 1, 1),
    _Winlink1000IduTdmCurrentIndex_Type()
)
winlink1000IduTdmCurrentIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduTdmCurrentIndex.setStatus("mandatory")
_Winlink1000IduTdmCurrentBlocks_Type = Counter32
_Winlink1000IduTdmCurrentBlocks_Object = MibTableColumn
winlink1000IduTdmCurrentBlocks = _Winlink1000IduTdmCurrentBlocks_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 7, 1, 101),
    _Winlink1000IduTdmCurrentBlocks_Type()
)
winlink1000IduTdmCurrentBlocks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduTdmCurrentBlocks.setStatus("mandatory")
_Winlink1000IduTdmCurrentDrops_Type = Counter32
_Winlink1000IduTdmCurrentDrops_Object = MibTableColumn
winlink1000IduTdmCurrentDrops = _Winlink1000IduTdmCurrentDrops_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 7, 1, 102),
    _Winlink1000IduTdmCurrentDrops_Type()
)
winlink1000IduTdmCurrentDrops.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduTdmCurrentDrops.setStatus("mandatory")


class _Winlink1000IduTdmCurrentTxClock_Type(Integer32):
    """Custom type winlink1000IduTdmCurrentTxClock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              4,
              8,
              16,
              32)
        )
    )
    namedValues = NamedValues(
        *(("transparent", 2),
          ("localLT", 4),
          ("remoteLT", 8),
          ("localInternal", 16),
          ("remoteInternal", 32))
    )


_Winlink1000IduTdmCurrentTxClock_Type.__name__ = "Integer32"
_Winlink1000IduTdmCurrentTxClock_Object = MibTableColumn
winlink1000IduTdmCurrentTxClock = _Winlink1000IduTdmCurrentTxClock_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 7, 1, 103),
    _Winlink1000IduTdmCurrentTxClock_Type()
)
winlink1000IduTdmCurrentTxClock.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduTdmCurrentTxClock.setStatus("mandatory")
_Winlink1000IduTdmCurrentBlocksHigh_Type = Counter32
_Winlink1000IduTdmCurrentBlocksHigh_Object = MibTableColumn
winlink1000IduTdmCurrentBlocksHigh = _Winlink1000IduTdmCurrentBlocksHigh_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 7, 1, 104),
    _Winlink1000IduTdmCurrentBlocksHigh_Type()
)
winlink1000IduTdmCurrentBlocksHigh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduTdmCurrentBlocksHigh.setStatus("mandatory")
_Winlink1000IduTdmRemoteQual_Type = Integer32
_Winlink1000IduTdmRemoteQual_Object = MibScalar
winlink1000IduTdmRemoteQual = _Winlink1000IduTdmRemoteQual_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 8),
    _Winlink1000IduTdmRemoteQual_Type()
)
winlink1000IduTdmRemoteQual.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduTdmRemoteQual.setStatus("mandatory")
_Winlink1000IduTdmRemoteQualEval_Type = Integer32
_Winlink1000IduTdmRemoteQualEval_Object = MibScalar
winlink1000IduTdmRemoteQualEval = _Winlink1000IduTdmRemoteQualEval_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 9),
    _Winlink1000IduTdmRemoteQualEval_Type()
)
winlink1000IduTdmRemoteQualEval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduTdmRemoteQualEval.setStatus("mandatory")
_Winlink1000IduTdmSrvEval_Type = Integer32
_Winlink1000IduTdmSrvEval_Object = MibScalar
winlink1000IduTdmSrvEval = _Winlink1000IduTdmSrvEval_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 10),
    _Winlink1000IduTdmSrvEval_Type()
)
winlink1000IduTdmSrvEval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduTdmSrvEval.setStatus("mandatory")
_Winlink1000IduTdmBackupAvailableLinks_Type = Integer32
_Winlink1000IduTdmBackupAvailableLinks_Object = MibScalar
winlink1000IduTdmBackupAvailableLinks = _Winlink1000IduTdmBackupAvailableLinks_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 11),
    _Winlink1000IduTdmBackupAvailableLinks_Type()
)
winlink1000IduTdmBackupAvailableLinks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduTdmBackupAvailableLinks.setStatus("mandatory")
_Winlink1000IduTdmBackupTable_Object = MibTable
winlink1000IduTdmBackupTable = _Winlink1000IduTdmBackupTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 12)
)
if mibBuilder.loadTexts:
    winlink1000IduTdmBackupTable.setStatus("mandatory")
_Winlink1000IduTdmBackupEntry_Object = MibTableRow
winlink1000IduTdmBackupEntry = _Winlink1000IduTdmBackupEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 12, 1)
)
winlink1000IduTdmBackupEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000IduTdmBackupIndex"),
)
if mibBuilder.loadTexts:
    winlink1000IduTdmBackupEntry.setStatus("mandatory")


class _Winlink1000IduTdmBackupIndex_Type(Integer32):
    """Custom type winlink1000IduTdmBackupIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_Winlink1000IduTdmBackupIndex_Type.__name__ = "Integer32"
_Winlink1000IduTdmBackupIndex_Object = MibTableColumn
winlink1000IduTdmBackupIndex = _Winlink1000IduTdmBackupIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 12, 1, 1),
    _Winlink1000IduTdmBackupIndex_Type()
)
winlink1000IduTdmBackupIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduTdmBackupIndex.setStatus("mandatory")


class _Winlink1000IduTdmBackupMode_Type(Integer32):
    """Custom type winlink1000IduTdmBackupMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("enableUseAirLinkAsBackupLink", 1),
          ("enableUseExternalLinkAsBackupLink", 2),
          ("disableUseExternalLinkAsMainLink", 3),
          ("disableUseAirLinkAsMainLink", 4))
    )


_Winlink1000IduTdmBackupMode_Type.__name__ = "Integer32"
_Winlink1000IduTdmBackupMode_Object = MibTableColumn
winlink1000IduTdmBackupMode = _Winlink1000IduTdmBackupMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 12, 1, 2),
    _Winlink1000IduTdmBackupMode_Type()
)
winlink1000IduTdmBackupMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduTdmBackupMode.setStatus("mandatory")


class _Winlink1000IduTdmBackupCurrentActiveLink_Type(Integer32):
    """Custom type winlink1000IduTdmBackupCurrentActiveLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notAvailable", 1),
          ("airLinkIsActive", 2),
          ("externalLinkIsActive", 3),
          ("noLinkIsActive", 4))
    )


_Winlink1000IduTdmBackupCurrentActiveLink_Type.__name__ = "Integer32"
_Winlink1000IduTdmBackupCurrentActiveLink_Object = MibTableColumn
winlink1000IduTdmBackupCurrentActiveLink = _Winlink1000IduTdmBackupCurrentActiveLink_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 12, 1, 3),
    _Winlink1000IduTdmBackupCurrentActiveLink_Type()
)
winlink1000IduTdmBackupCurrentActiveLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduTdmBackupCurrentActiveLink.setStatus("mandatory")
_Winlink1000IduTdmJitterBufferSize_Type = Integer32
_Winlink1000IduTdmJitterBufferSize_Object = MibScalar
winlink1000IduTdmJitterBufferSize = _Winlink1000IduTdmJitterBufferSize_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 13),
    _Winlink1000IduTdmJitterBufferSize_Type()
)
winlink1000IduTdmJitterBufferSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduTdmJitterBufferSize.setStatus("mandatory")
_Winlink1000IduTdmJitterBufferDefaultSize_Type = Integer32
_Winlink1000IduTdmJitterBufferDefaultSize_Object = MibScalar
winlink1000IduTdmJitterBufferDefaultSize = _Winlink1000IduTdmJitterBufferDefaultSize_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 14),
    _Winlink1000IduTdmJitterBufferDefaultSize_Type()
)
winlink1000IduTdmJitterBufferDefaultSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduTdmJitterBufferDefaultSize.setStatus("mandatory")
_Winlink1000IduTdmJitterBufferMinSize_Type = Integer32
_Winlink1000IduTdmJitterBufferMinSize_Object = MibScalar
winlink1000IduTdmJitterBufferMinSize = _Winlink1000IduTdmJitterBufferMinSize_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 15),
    _Winlink1000IduTdmJitterBufferMinSize_Type()
)
winlink1000IduTdmJitterBufferMinSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduTdmJitterBufferMinSize.setStatus("mandatory")
_Winlink1000IduTdmJitterBufferMaxSize_Type = Integer32
_Winlink1000IduTdmJitterBufferMaxSize_Object = MibScalar
winlink1000IduTdmJitterBufferMaxSize = _Winlink1000IduTdmJitterBufferMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 16),
    _Winlink1000IduTdmJitterBufferMaxSize_Type()
)
winlink1000IduTdmJitterBufferMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduTdmJitterBufferMaxSize.setStatus("mandatory")
_Winlink1000IduTdmJitterBufferSizeEval_Type = Integer32
_Winlink1000IduTdmJitterBufferSizeEval_Object = MibScalar
winlink1000IduTdmJitterBufferSizeEval = _Winlink1000IduTdmJitterBufferSizeEval_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 17),
    _Winlink1000IduTdmJitterBufferSizeEval_Type()
)
winlink1000IduTdmJitterBufferSizeEval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduTdmJitterBufferSizeEval.setStatus("mandatory")


class _Winlink1000IduTdmType_Type(Integer32):
    """Custom type winlink1000IduTdmType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unDefined", 1),
          ("e1", 2),
          ("t1", 3))
    )


_Winlink1000IduTdmType_Type.__name__ = "Integer32"
_Winlink1000IduTdmType_Object = MibScalar
winlink1000IduTdmType = _Winlink1000IduTdmType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 18),
    _Winlink1000IduTdmType_Type()
)
winlink1000IduTdmType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduTdmType.setStatus("mandatory")


class _Winlink1000IduTdmTypeEval_Type(Integer32):
    """Custom type winlink1000IduTdmTypeEval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unDefined", 1),
          ("e1", 2),
          ("t1", 3))
    )


_Winlink1000IduTdmTypeEval_Type.__name__ = "Integer32"
_Winlink1000IduTdmTypeEval_Object = MibScalar
winlink1000IduTdmTypeEval = _Winlink1000IduTdmTypeEval_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 19),
    _Winlink1000IduTdmTypeEval_Type()
)
winlink1000IduTdmTypeEval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduTdmTypeEval.setStatus("mandatory")
_Winlink1000IduTdmLineStatusStr_Type = DisplayString
_Winlink1000IduTdmLineStatusStr_Object = MibScalar
winlink1000IduTdmLineStatusStr = _Winlink1000IduTdmLineStatusStr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 20),
    _Winlink1000IduTdmLineStatusStr_Type()
)
winlink1000IduTdmLineStatusStr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduTdmLineStatusStr.setStatus("mandatory")


class _Winlink1000IduTdmHotStandbySupport_Type(Integer32):
    """Custom type winlink1000IduTdmHotStandbySupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("supported", 1),
          ("notSupported", 2))
    )


_Winlink1000IduTdmHotStandbySupport_Type.__name__ = "Integer32"
_Winlink1000IduTdmHotStandbySupport_Object = MibScalar
winlink1000IduTdmHotStandbySupport = _Winlink1000IduTdmHotStandbySupport_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 21),
    _Winlink1000IduTdmHotStandbySupport_Type()
)
winlink1000IduTdmHotStandbySupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduTdmHotStandbySupport.setStatus("mandatory")


class _Winlink1000IduTdmDesiredHotStandbyMode_Type(Integer32):
    """Custom type winlink1000IduTdmDesiredHotStandbyMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("primary", 1),
          ("secondary", 2),
          ("disabled", 3))
    )


_Winlink1000IduTdmDesiredHotStandbyMode_Type.__name__ = "Integer32"
_Winlink1000IduTdmDesiredHotStandbyMode_Object = MibScalar
winlink1000IduTdmDesiredHotStandbyMode = _Winlink1000IduTdmDesiredHotStandbyMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 22),
    _Winlink1000IduTdmDesiredHotStandbyMode_Type()
)
winlink1000IduTdmDesiredHotStandbyMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduTdmDesiredHotStandbyMode.setStatus("mandatory")


class _Winlink1000IduTdmHotStandbyOperationStatus_Type(Integer32):
    """Custom type winlink1000IduTdmHotStandbyOperationStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("notActive", 2))
    )


_Winlink1000IduTdmHotStandbyOperationStatus_Type.__name__ = "Integer32"
_Winlink1000IduTdmHotStandbyOperationStatus_Object = MibScalar
winlink1000IduTdmHotStandbyOperationStatus = _Winlink1000IduTdmHotStandbyOperationStatus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 23),
    _Winlink1000IduTdmHotStandbyOperationStatus_Type()
)
winlink1000IduTdmHotStandbyOperationStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000IduTdmHotStandbyOperationStatus.setStatus("mandatory")


class _Winlink1000IduTdmBackupLinkConfiguration_Type(Integer32):
    """Custom type winlink1000IduTdmBackupLinkConfiguration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("independent", 1),
          ("repeaterEnd", 2),
          ("lineEnd", 3))
    )


_Winlink1000IduTdmBackupLinkConfiguration_Type.__name__ = "Integer32"
_Winlink1000IduTdmBackupLinkConfiguration_Object = MibScalar
winlink1000IduTdmBackupLinkConfiguration = _Winlink1000IduTdmBackupLinkConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 24),
    _Winlink1000IduTdmBackupLinkConfiguration_Type()
)
winlink1000IduTdmBackupLinkConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduTdmBackupLinkConfiguration.setStatus("mandatory")


class _Winlink1000IduTdmLineInterfaceConfiguration_Type(Integer32):
    """Custom type winlink1000IduTdmLineInterfaceConfiguration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("balanced", 1),
          ("unBalanced", 2))
    )


_Winlink1000IduTdmLineInterfaceConfiguration_Type.__name__ = "Integer32"
_Winlink1000IduTdmLineInterfaceConfiguration_Object = MibScalar
winlink1000IduTdmLineInterfaceConfiguration = _Winlink1000IduTdmLineInterfaceConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 25),
    _Winlink1000IduTdmLineInterfaceConfiguration_Type()
)
winlink1000IduTdmLineInterfaceConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduTdmLineInterfaceConfiguration.setStatus("mandatory")


class _Winlink1000IduTdmLineImpedanceConfiguration_Type(Integer32):
    """Custom type winlink1000IduTdmLineImpedanceConfiguration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("standardT1", 1),
          ("nonStandardT1", 2))
    )


_Winlink1000IduTdmLineImpedanceConfiguration_Type.__name__ = "Integer32"
_Winlink1000IduTdmLineImpedanceConfiguration_Object = MibScalar
winlink1000IduTdmLineImpedanceConfiguration = _Winlink1000IduTdmLineImpedanceConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 2, 6, 26),
    _Winlink1000IduTdmLineImpedanceConfiguration_Type()
)
winlink1000IduTdmLineImpedanceConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000IduTdmLineImpedanceConfiguration.setStatus("mandatory")
_Winlink1000Hbs_ObjectIdentity = ObjectIdentity
winlink1000Hbs = _Winlink1000Hbs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3)
)
_Winlink1000HbsAir_ObjectIdentity = ObjectIdentity
winlink1000HbsAir = _Winlink1000HbsAir_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1)
)


class _Winlink1000HbsAirState_Type(Integer32):
    """Custom type winlink1000HbsAirState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("init", 1),
          ("bitFailed", 2),
          ("inactive", 3),
          ("spectrumMeasurement", 4),
          ("scanning", 5),
          ("cac", 6),
          ("transceiving", 7),
          ("standBy", 8),
          ("rawAlignment", 9),
          ("deviceNotReachable", 10),
          ("tvwsDbDisabled", 11),
          ("unauthorized", 12),
          ("fail", 13),
          ("linkDown", 14),
          ("regulationMismatch", 15),
          ("bandSelectionRequired", 16))
    )


_Winlink1000HbsAirState_Type.__name__ = "Integer32"
_Winlink1000HbsAirState_Object = MibScalar
winlink1000HbsAirState = _Winlink1000HbsAirState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 1),
    _Winlink1000HbsAirState_Type()
)
winlink1000HbsAirState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirState.setStatus("mandatory")


class _Winlink1000HbsAirOpMode_Type(Integer32):
    """Custom type winlink1000HbsAirOpMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("inactive", 1),
          ("active", 2))
    )


_Winlink1000HbsAirOpMode_Type.__name__ = "Integer32"
_Winlink1000HbsAirOpMode_Object = MibScalar
winlink1000HbsAirOpMode = _Winlink1000HbsAirOpMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 2),
    _Winlink1000HbsAirOpMode_Type()
)
winlink1000HbsAirOpMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirOpMode.setStatus("mandatory")
_Winlink1000HbsAirAvailTimeSlots_Type = Integer32
_Winlink1000HbsAirAvailTimeSlots_Object = MibScalar
winlink1000HbsAirAvailTimeSlots = _Winlink1000HbsAirAvailTimeSlots_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 3),
    _Winlink1000HbsAirAvailTimeSlots_Type()
)
winlink1000HbsAirAvailTimeSlots.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirAvailTimeSlots.setStatus("mandatory")
_Winlink1000HbsAirSectorCbwSupportedStr_Type = DisplayString
_Winlink1000HbsAirSectorCbwSupportedStr_Object = MibScalar
winlink1000HbsAirSectorCbwSupportedStr = _Winlink1000HbsAirSectorCbwSupportedStr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 4),
    _Winlink1000HbsAirSectorCbwSupportedStr_Type()
)
winlink1000HbsAirSectorCbwSupportedStr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirSectorCbwSupportedStr.setStatus("mandatory")
_Winlink1000HbsAirCompressedMon_Type = OctetString
_Winlink1000HbsAirCompressedMon_Object = MibScalar
winlink1000HbsAirCompressedMon = _Winlink1000HbsAirCompressedMon_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 5),
    _Winlink1000HbsAirCompressedMon_Type()
)
winlink1000HbsAirCompressedMon.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCompressedMon.setStatus("mandatory")
_Winlink1000HbsAirConf_ObjectIdentity = ObjectIdentity
winlink1000HbsAirConf = _Winlink1000HbsAirConf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6)
)


class _Winlink1000HbsAirConfChanges_Type(OctetString):
    """Custom type winlink1000HbsAirConfChanges based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )
    fixed_length = 16


_Winlink1000HbsAirConfChanges_Type.__name__ = "OctetString"
_Winlink1000HbsAirConfChanges_Object = MibScalar
winlink1000HbsAirConfChanges = _Winlink1000HbsAirConfChanges_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 1),
    _Winlink1000HbsAirConfChanges_Type()
)
winlink1000HbsAirConfChanges.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfChanges.setStatus("mandatory")
_Winlink1000HbsAirConfTable_Object = MibTable
winlink1000HbsAirConfTable = _Winlink1000HbsAirConfTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2)
)
if mibBuilder.loadTexts:
    winlink1000HbsAirConfTable.setStatus("mandatory")
_Winlink1000HbsAirConfEntry_Object = MibTableRow
winlink1000HbsAirConfEntry = _Winlink1000HbsAirConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1)
)
winlink1000HbsAirConfEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsAirConfIndex"),
)
if mibBuilder.loadTexts:
    winlink1000HbsAirConfEntry.setStatus("mandatory")


class _Winlink1000HbsAirConfIndex_Type(Integer32):
    """Custom type winlink1000HbsAirConfIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000HbsAirConfIndex_Type.__name__ = "Integer32"
_Winlink1000HbsAirConfIndex_Object = MibTableColumn
winlink1000HbsAirConfIndex = _Winlink1000HbsAirConfIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 1),
    _Winlink1000HbsAirConfIndex_Type()
)
winlink1000HbsAirConfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfIndex.setStatus("mandatory")
_Winlink1000HbsAirConfUpMir_Type = Integer32
_Winlink1000HbsAirConfUpMir_Object = MibTableColumn
winlink1000HbsAirConfUpMir = _Winlink1000HbsAirConfUpMir_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 2),
    _Winlink1000HbsAirConfUpMir_Type()
)
winlink1000HbsAirConfUpMir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfUpMir.setStatus("mandatory")
_Winlink1000HbsAirConfDownMir_Type = Integer32
_Winlink1000HbsAirConfDownMir_Object = MibTableColumn
winlink1000HbsAirConfDownMir = _Winlink1000HbsAirConfDownMir_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 3),
    _Winlink1000HbsAirConfDownMir_Type()
)
winlink1000HbsAirConfDownMir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfDownMir.setStatus("mandatory")
_Winlink1000HbsAirConfHsuName_Type = DisplayString
_Winlink1000HbsAirConfHsuName_Object = MibTableColumn
winlink1000HbsAirConfHsuName = _Winlink1000HbsAirConfHsuName_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 4),
    _Winlink1000HbsAirConfHsuName_Type()
)
winlink1000HbsAirConfHsuName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfHsuName.setStatus("mandatory")
_Winlink1000HbsAirConfHsuLocation_Type = DisplayString
_Winlink1000HbsAirConfHsuLocation_Object = MibTableColumn
winlink1000HbsAirConfHsuLocation = _Winlink1000HbsAirConfHsuLocation_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 5),
    _Winlink1000HbsAirConfHsuLocation_Type()
)
winlink1000HbsAirConfHsuLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfHsuLocation.setStatus("mandatory")


class _Winlink1000HbsAirConfDualAntTxMode_Type(Integer32):
    """Custom type winlink1000HbsAirConfDualAntTxMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("mimo", 1),
          ("diversity", 2),
          ("autoSelection", 3))
    )


_Winlink1000HbsAirConfDualAntTxMode_Type.__name__ = "Integer32"
_Winlink1000HbsAirConfDualAntTxMode_Object = MibTableColumn
winlink1000HbsAirConfDualAntTxMode = _Winlink1000HbsAirConfDualAntTxMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 6),
    _Winlink1000HbsAirConfDualAntTxMode_Type()
)
winlink1000HbsAirConfDualAntTxMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfDualAntTxMode.setStatus("mandatory")
_Winlink1000HbsAirConfNumOfTs_Type = Integer32
_Winlink1000HbsAirConfNumOfTs_Object = MibTableColumn
winlink1000HbsAirConfNumOfTs = _Winlink1000HbsAirConfNumOfTs_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 7),
    _Winlink1000HbsAirConfNumOfTs_Type()
)
winlink1000HbsAirConfNumOfTs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfNumOfTs.setStatus("mandatory")
_Winlink1000HbsAirConfGeoLocation_Type = DisplayString
_Winlink1000HbsAirConfGeoLocation_Object = MibTableColumn
winlink1000HbsAirConfGeoLocation = _Winlink1000HbsAirConfGeoLocation_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 8),
    _Winlink1000HbsAirConfGeoLocation_Type()
)
winlink1000HbsAirConfGeoLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfGeoLocation.setStatus("mandatory")


class _Winlink1000HbsAirConfHsuType_Type(Integer32):
    """Custom type winlink1000HbsAirConfHsuType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("fixed", 1),
          ("stationary", 2),
          ("mobile", 3),
          ("transport", 4),
          ("mobileCoChannel", 5),
          ("residential", 6),
          ("nFixed", 7),
          ("nResidential", 8))
    )


_Winlink1000HbsAirConfHsuType_Type.__name__ = "Integer32"
_Winlink1000HbsAirConfHsuType_Object = MibTableColumn
winlink1000HbsAirConfHsuType = _Winlink1000HbsAirConfHsuType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 9),
    _Winlink1000HbsAirConfHsuType_Type()
)
winlink1000HbsAirConfHsuType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfHsuType.setStatus("mandatory")
_Winlink1000HbsAirConfHsuLevel_Type = Integer32
_Winlink1000HbsAirConfHsuLevel_Object = MibTableColumn
winlink1000HbsAirConfHsuLevel = _Winlink1000HbsAirConfHsuLevel_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 10),
    _Winlink1000HbsAirConfHsuLevel_Type()
)
winlink1000HbsAirConfHsuLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfHsuLevel.setStatus("mandatory")
_Winlink1000HbsAirConfDesiredRateIndex_Type = Integer32
_Winlink1000HbsAirConfDesiredRateIndex_Object = MibTableColumn
winlink1000HbsAirConfDesiredRateIndex = _Winlink1000HbsAirConfDesiredRateIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 11),
    _Winlink1000HbsAirConfDesiredRateIndex_Type()
)
winlink1000HbsAirConfDesiredRateIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfDesiredRateIndex.setStatus("mandatory")
_Winlink1000HbsAirConfMacAddress_Type = DisplayString
_Winlink1000HbsAirConfMacAddress_Object = MibTableColumn
winlink1000HbsAirConfMacAddress = _Winlink1000HbsAirConfMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 12),
    _Winlink1000HbsAirConfMacAddress_Type()
)
winlink1000HbsAirConfMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfMacAddress.setStatus("mandatory")
_Winlink1000HbsAirConfNumOfTsUp_Type = Integer32
_Winlink1000HbsAirConfNumOfTsUp_Object = MibTableColumn
winlink1000HbsAirConfNumOfTsUp = _Winlink1000HbsAirConfNumOfTsUp_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 13),
    _Winlink1000HbsAirConfNumOfTsUp_Type()
)
winlink1000HbsAirConfNumOfTsUp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfNumOfTsUp.setStatus("mandatory")


class _Winlink1000HbsAirConfLanPortsConnection_Type(Integer32):
    """Custom type winlink1000HbsAirConfLanPortsConnection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_Winlink1000HbsAirConfLanPortsConnection_Type.__name__ = "Integer32"
_Winlink1000HbsAirConfLanPortsConnection_Object = MibTableColumn
winlink1000HbsAirConfLanPortsConnection = _Winlink1000HbsAirConfLanPortsConnection_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 14),
    _Winlink1000HbsAirConfLanPortsConnection_Type()
)
winlink1000HbsAirConfLanPortsConnection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfLanPortsConnection.setStatus("mandatory")
_Winlink1000HbsAirConfServiceCategory_Type = Integer32
_Winlink1000HbsAirConfServiceCategory_Object = MibTableColumn
winlink1000HbsAirConfServiceCategory = _Winlink1000HbsAirConfServiceCategory_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 15),
    _Winlink1000HbsAirConfServiceCategory_Type()
)
winlink1000HbsAirConfServiceCategory.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfServiceCategory.setStatus("mandatory")
_Winlink1000HbsAirConfAutoRealignmentConfiguration_Type = DisplayString
_Winlink1000HbsAirConfAutoRealignmentConfiguration_Object = MibTableColumn
winlink1000HbsAirConfAutoRealignmentConfiguration = _Winlink1000HbsAirConfAutoRealignmentConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 16),
    _Winlink1000HbsAirConfAutoRealignmentConfiguration_Type()
)
winlink1000HbsAirConfAutoRealignmentConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfAutoRealignmentConfiguration.setStatus("mandatory")
_Winlink1000HbsAirConfBeaconRssSyncLossThreshold_Type = Integer32
_Winlink1000HbsAirConfBeaconRssSyncLossThreshold_Object = MibTableColumn
winlink1000HbsAirConfBeaconRssSyncLossThreshold = _Winlink1000HbsAirConfBeaconRssSyncLossThreshold_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 17),
    _Winlink1000HbsAirConfBeaconRssSyncLossThreshold_Type()
)
winlink1000HbsAirConfBeaconRssSyncLossThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfBeaconRssSyncLossThreshold.setStatus("mandatory")
_Winlink1000HbsAirConfNumOfResourcesDL_Type = Integer32
_Winlink1000HbsAirConfNumOfResourcesDL_Object = MibTableColumn
winlink1000HbsAirConfNumOfResourcesDL = _Winlink1000HbsAirConfNumOfResourcesDL_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 18),
    _Winlink1000HbsAirConfNumOfResourcesDL_Type()
)
winlink1000HbsAirConfNumOfResourcesDL.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfNumOfResourcesDL.setStatus("mandatory")
_Winlink1000HbsAirConfNumOfResourcesUL_Type = Integer32
_Winlink1000HbsAirConfNumOfResourcesUL_Object = MibTableColumn
winlink1000HbsAirConfNumOfResourcesUL = _Winlink1000HbsAirConfNumOfResourcesUL_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 19),
    _Winlink1000HbsAirConfNumOfResourcesUL_Type()
)
winlink1000HbsAirConfNumOfResourcesUL.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfNumOfResourcesUL.setStatus("mandatory")


class _Winlink1000HbsAirConfResourceType_Type(Integer32):
    """Custom type winlink1000HbsAirConfResourceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("assuredAllocation", 1),
          ("bestEffort", 2),
          ("undefined", 3))
    )


_Winlink1000HbsAirConfResourceType_Type.__name__ = "Integer32"
_Winlink1000HbsAirConfResourceType_Object = MibTableColumn
winlink1000HbsAirConfResourceType = _Winlink1000HbsAirConfResourceType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 20),
    _Winlink1000HbsAirConfResourceType_Type()
)
winlink1000HbsAirConfResourceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfResourceType.setStatus("mandatory")


class _Winlink1000HbsAirConfDelaySensitivity_Type(Integer32):
    """Custom type winlink1000HbsAirConfDelaySensitivity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("sensitive", 1),
          ("insensitive", 2))
    )


_Winlink1000HbsAirConfDelaySensitivity_Type.__name__ = "Integer32"
_Winlink1000HbsAirConfDelaySensitivity_Object = MibTableColumn
winlink1000HbsAirConfDelaySensitivity = _Winlink1000HbsAirConfDelaySensitivity_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 21),
    _Winlink1000HbsAirConfDelaySensitivity_Type()
)
winlink1000HbsAirConfDelaySensitivity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfDelaySensitivity.setStatus("mandatory")


class _Winlink1000HbsAirConfLQDActivation_Type(Integer32):
    """Custom type winlink1000HbsAirConfLQDActivation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_Winlink1000HbsAirConfLQDActivation_Type.__name__ = "Integer32"
_Winlink1000HbsAirConfLQDActivation_Object = MibTableColumn
winlink1000HbsAirConfLQDActivation = _Winlink1000HbsAirConfLQDActivation_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 22),
    _Winlink1000HbsAirConfLQDActivation_Type()
)
winlink1000HbsAirConfLQDActivation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfLQDActivation.setStatus("mandatory")
_Winlink1000HbsAirConfLQDBaselineDl_Type = Integer32
_Winlink1000HbsAirConfLQDBaselineDl_Object = MibTableColumn
winlink1000HbsAirConfLQDBaselineDl = _Winlink1000HbsAirConfLQDBaselineDl_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 23),
    _Winlink1000HbsAirConfLQDBaselineDl_Type()
)
winlink1000HbsAirConfLQDBaselineDl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfLQDBaselineDl.setStatus("mandatory")
_Winlink1000HbsAirConfLQDBaselineUl_Type = Integer32
_Winlink1000HbsAirConfLQDBaselineUl_Object = MibTableColumn
winlink1000HbsAirConfLQDBaselineUl = _Winlink1000HbsAirConfLQDBaselineUl_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 24),
    _Winlink1000HbsAirConfLQDBaselineUl_Type()
)
winlink1000HbsAirConfLQDBaselineUl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfLQDBaselineUl.setStatus("mandatory")
_Winlink1000HbsAirConfLQDCurrentQualityDl_Type = Integer32
_Winlink1000HbsAirConfLQDCurrentQualityDl_Object = MibTableColumn
winlink1000HbsAirConfLQDCurrentQualityDl = _Winlink1000HbsAirConfLQDCurrentQualityDl_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 25),
    _Winlink1000HbsAirConfLQDCurrentQualityDl_Type()
)
winlink1000HbsAirConfLQDCurrentQualityDl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfLQDCurrentQualityDl.setStatus("mandatory")
_Winlink1000HbsAirConfLQDCurrentQualityUl_Type = Integer32
_Winlink1000HbsAirConfLQDCurrentQualityUl_Object = MibTableColumn
winlink1000HbsAirConfLQDCurrentQualityUl = _Winlink1000HbsAirConfLQDCurrentQualityUl_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 26),
    _Winlink1000HbsAirConfLQDCurrentQualityUl_Type()
)
winlink1000HbsAirConfLQDCurrentQualityUl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfLQDCurrentQualityUl.setStatus("mandatory")
_Winlink1000HbsAirConfLQDAlarmThresholdDl_Type = Integer32
_Winlink1000HbsAirConfLQDAlarmThresholdDl_Object = MibTableColumn
winlink1000HbsAirConfLQDAlarmThresholdDl = _Winlink1000HbsAirConfLQDAlarmThresholdDl_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 27),
    _Winlink1000HbsAirConfLQDAlarmThresholdDl_Type()
)
winlink1000HbsAirConfLQDAlarmThresholdDl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfLQDAlarmThresholdDl.setStatus("mandatory")
_Winlink1000HbsAirConfLQDAlarmThresholdUl_Type = Integer32
_Winlink1000HbsAirConfLQDAlarmThresholdUl_Object = MibTableColumn
winlink1000HbsAirConfLQDAlarmThresholdUl = _Winlink1000HbsAirConfLQDAlarmThresholdUl_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 28),
    _Winlink1000HbsAirConfLQDAlarmThresholdUl_Type()
)
winlink1000HbsAirConfLQDAlarmThresholdUl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfLQDAlarmThresholdUl.setStatus("mandatory")
_Winlink1000HbsAirConfLQDAlarmClearThresholdDl_Type = Integer32
_Winlink1000HbsAirConfLQDAlarmClearThresholdDl_Object = MibTableColumn
winlink1000HbsAirConfLQDAlarmClearThresholdDl = _Winlink1000HbsAirConfLQDAlarmClearThresholdDl_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 29),
    _Winlink1000HbsAirConfLQDAlarmClearThresholdDl_Type()
)
winlink1000HbsAirConfLQDAlarmClearThresholdDl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfLQDAlarmClearThresholdDl.setStatus("mandatory")
_Winlink1000HbsAirConfLQDAlarmClearThresholdUl_Type = Integer32
_Winlink1000HbsAirConfLQDAlarmClearThresholdUl_Object = MibTableColumn
winlink1000HbsAirConfLQDAlarmClearThresholdUl = _Winlink1000HbsAirConfLQDAlarmClearThresholdUl_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 30),
    _Winlink1000HbsAirConfLQDAlarmClearThresholdUl_Type()
)
winlink1000HbsAirConfLQDAlarmClearThresholdUl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfLQDAlarmClearThresholdUl.setStatus("mandatory")
_Winlink1000HbsAirConfIpAddress_Type = DisplayString
_Winlink1000HbsAirConfIpAddress_Object = MibTableColumn
winlink1000HbsAirConfIpAddress = _Winlink1000HbsAirConfIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 31),
    _Winlink1000HbsAirConfIpAddress_Type()
)
winlink1000HbsAirConfIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfIpAddress.setStatus("mandatory")
_Winlink1000HbsAirConfCarrierId_Type = Integer32
_Winlink1000HbsAirConfCarrierId_Object = MibTableColumn
winlink1000HbsAirConfCarrierId = _Winlink1000HbsAirConfCarrierId_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 32),
    _Winlink1000HbsAirConfCarrierId_Type()
)
winlink1000HbsAirConfCarrierId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfCarrierId.setStatus("mandatory")


class _Winlink1000HbsAirDhcpClientMode_Type(Integer32):
    """Custom type winlink1000HbsAirDhcpClientMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_Winlink1000HbsAirDhcpClientMode_Type.__name__ = "Integer32"
_Winlink1000HbsAirDhcpClientMode_Object = MibTableColumn
winlink1000HbsAirDhcpClientMode = _Winlink1000HbsAirDhcpClientMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 2, 1, 33),
    _Winlink1000HbsAirDhcpClientMode_Type()
)
winlink1000HbsAirDhcpClientMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirDhcpClientMode.setStatus("mandatory")
_Winlink1000HbsAirConfBeaconRssSyncLossInterval_Type = Integer32
_Winlink1000HbsAirConfBeaconRssSyncLossInterval_Object = MibScalar
winlink1000HbsAirConfBeaconRssSyncLossInterval = _Winlink1000HbsAirConfBeaconRssSyncLossInterval_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 3),
    _Winlink1000HbsAirConfBeaconRssSyncLossInterval_Type()
)
winlink1000HbsAirConfBeaconRssSyncLossInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfBeaconRssSyncLossInterval.setStatus("mandatory")
_Winlink1000HbsAirConfBEPercentage_Type = DisplayString
_Winlink1000HbsAirConfBEPercentage_Object = MibScalar
winlink1000HbsAirConfBEPercentage = _Winlink1000HbsAirConfBEPercentage_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 6, 4),
    _Winlink1000HbsAirConfBEPercentage_Type()
)
winlink1000HbsAirConfBEPercentage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirConfBEPercentage.setStatus("mandatory")
_Winlink1000HbsAirLink_ObjectIdentity = ObjectIdentity
winlink1000HbsAirLink = _Winlink1000HbsAirLink_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7)
)
_Winlink1000HbsAirLinkNumOfLinks_Type = Integer32
_Winlink1000HbsAirLinkNumOfLinks_Object = MibScalar
winlink1000HbsAirLinkNumOfLinks = _Winlink1000HbsAirLinkNumOfLinks_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 1),
    _Winlink1000HbsAirLinkNumOfLinks_Type()
)
winlink1000HbsAirLinkNumOfLinks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkNumOfLinks.setStatus("mandatory")
_Winlink1000HbsAirLinkTable_Object = MibTable
winlink1000HbsAirLinkTable = _Winlink1000HbsAirLinkTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2)
)
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkTable.setStatus("mandatory")
_Winlink1000HbsAirLinkEntry_Object = MibTableRow
winlink1000HbsAirLinkEntry = _Winlink1000HbsAirLinkEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1)
)
winlink1000HbsAirLinkEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsAirLinkIndex"),
)
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkEntry.setStatus("mandatory")


class _Winlink1000HbsAirLinkIndex_Type(Integer32):
    """Custom type winlink1000HbsAirLinkIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000HbsAirLinkIndex_Type.__name__ = "Integer32"
_Winlink1000HbsAirLinkIndex_Object = MibTableColumn
winlink1000HbsAirLinkIndex = _Winlink1000HbsAirLinkIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 1),
    _Winlink1000HbsAirLinkIndex_Type()
)
winlink1000HbsAirLinkIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkIndex.setStatus("mandatory")
_Winlink1000HbsAirLinkHsuId_Type = Integer32
_Winlink1000HbsAirLinkHsuId_Object = MibTableColumn
winlink1000HbsAirLinkHsuId = _Winlink1000HbsAirLinkHsuId_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 2),
    _Winlink1000HbsAirLinkHsuId_Type()
)
winlink1000HbsAirLinkHsuId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkHsuId.setStatus("mandatory")


class _Winlink1000HbsAirLinkState_Type(Integer32):
    """Custom type winlink1000HbsAirLinkState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("noSync", 1),
          ("violated", 2),
          ("syncUnregistered", 3),
          ("syncRegistered", 4),
          ("authenticationError", 5),
          ("swUpgradeRequired", 6),
          ("syncRegisteredPassive", 7),
          ("syncRegisteredALP", 8))
    )


_Winlink1000HbsAirLinkState_Type.__name__ = "Integer32"
_Winlink1000HbsAirLinkState_Object = MibTableColumn
winlink1000HbsAirLinkState = _Winlink1000HbsAirLinkState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 3),
    _Winlink1000HbsAirLinkState_Type()
)
winlink1000HbsAirLinkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkState.setStatus("mandatory")


class _Winlink1000HbsAirLinkWorkingMode_Type(Integer32):
    """Custom type winlink1000HbsAirLinkWorkingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 1),
          ("normal", 2),
          ("fullCompatibilityRemoteUpgradeAvailable", 3),
          ("fullCompatibilityLocalUpgradeAvailable", 4),
          ("restrictedCompatibilityRemoteUpgradeRecomended", 5),
          ("restrictedCompatibilityLocalUpgradeRecomended", 6),
          ("softwareUpgradeRemoteUpgradeRequired", 7),
          ("softwareUpgradeLocalUpgradeRequired", 8),
          ("versionsIncompatibilityRemoteUpgradeRequired", 9),
          ("versionsIncompatibilityLocalUpgradeRequired", 10))
    )


_Winlink1000HbsAirLinkWorkingMode_Type.__name__ = "Integer32"
_Winlink1000HbsAirLinkWorkingMode_Object = MibTableColumn
winlink1000HbsAirLinkWorkingMode = _Winlink1000HbsAirLinkWorkingMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 4),
    _Winlink1000HbsAirLinkWorkingMode_Type()
)
winlink1000HbsAirLinkWorkingMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkWorkingMode.setStatus("mandatory")
_Winlink1000HbsAirLinkSessionId_Type = Integer32
_Winlink1000HbsAirLinkSessionId_Object = MibTableColumn
winlink1000HbsAirLinkSessionId = _Winlink1000HbsAirLinkSessionId_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 5),
    _Winlink1000HbsAirLinkSessionId_Type()
)
winlink1000HbsAirLinkSessionId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkSessionId.setStatus("mandatory")
_Winlink1000HbsAirLinkHbsEstTput_Type = Integer32
_Winlink1000HbsAirLinkHbsEstTput_Object = MibTableColumn
winlink1000HbsAirLinkHbsEstTput = _Winlink1000HbsAirLinkHbsEstTput_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 6),
    _Winlink1000HbsAirLinkHbsEstTput_Type()
)
winlink1000HbsAirLinkHbsEstTput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkHbsEstTput.setStatus("mandatory")
_Winlink1000HbsAirLinkHsuEstTput_Type = Integer32
_Winlink1000HbsAirLinkHsuEstTput_Object = MibTableColumn
winlink1000HbsAirLinkHsuEstTput = _Winlink1000HbsAirLinkHsuEstTput_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 7),
    _Winlink1000HbsAirLinkHsuEstTput_Type()
)
winlink1000HbsAirLinkHsuEstTput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkHsuEstTput.setStatus("mandatory")
_Winlink1000HbsAirLinkRange_Type = Integer32
_Winlink1000HbsAirLinkRange_Object = MibTableColumn
winlink1000HbsAirLinkRange = _Winlink1000HbsAirLinkRange_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 8),
    _Winlink1000HbsAirLinkRange_Type()
)
winlink1000HbsAirLinkRange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkRange.setStatus("mandatory")
_Winlink1000HbsAirLinkHbsRss_Type = Integer32
_Winlink1000HbsAirLinkHbsRss_Object = MibTableColumn
winlink1000HbsAirLinkHbsRss = _Winlink1000HbsAirLinkHbsRss_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 9),
    _Winlink1000HbsAirLinkHbsRss_Type()
)
winlink1000HbsAirLinkHbsRss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkHbsRss.setStatus("mandatory")
_Winlink1000HbsAirLinkHbsRssBal_Type = Integer32
_Winlink1000HbsAirLinkHbsRssBal_Object = MibTableColumn
winlink1000HbsAirLinkHbsRssBal = _Winlink1000HbsAirLinkHbsRssBal_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 10),
    _Winlink1000HbsAirLinkHbsRssBal_Type()
)
winlink1000HbsAirLinkHbsRssBal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkHbsRssBal.setStatus("mandatory")
_Winlink1000HbsAirLinkHsuRss_Type = Integer32
_Winlink1000HbsAirLinkHsuRss_Object = MibTableColumn
winlink1000HbsAirLinkHsuRss = _Winlink1000HbsAirLinkHsuRss_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 11),
    _Winlink1000HbsAirLinkHsuRss_Type()
)
winlink1000HbsAirLinkHsuRss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkHsuRss.setStatus("mandatory")
_Winlink1000HbsAirLinkHsuRssBal_Type = Integer32
_Winlink1000HbsAirLinkHsuRssBal_Object = MibTableColumn
winlink1000HbsAirLinkHsuRssBal = _Winlink1000HbsAirLinkHsuRssBal_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 12),
    _Winlink1000HbsAirLinkHsuRssBal_Type()
)
winlink1000HbsAirLinkHsuRssBal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkHsuRssBal.setStatus("mandatory")
_Winlink1000HbsAirLinkHsuSerial_Type = DisplayString
_Winlink1000HbsAirLinkHsuSerial_Object = MibTableColumn
winlink1000HbsAirLinkHsuSerial = _Winlink1000HbsAirLinkHsuSerial_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 13),
    _Winlink1000HbsAirLinkHsuSerial_Type()
)
winlink1000HbsAirLinkHsuSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkHsuSerial.setStatus("mandatory")


class _Winlink1000HbsAirLinkTxOperMode_Type(Integer32):
    """Custom type winlink1000HbsAirLinkTxOperMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("regularMode", 1),
          ("measurementMode", 2))
    )


_Winlink1000HbsAirLinkTxOperMode_Type.__name__ = "Integer32"
_Winlink1000HbsAirLinkTxOperMode_Object = MibTableColumn
winlink1000HbsAirLinkTxOperMode = _Winlink1000HbsAirLinkTxOperMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 14),
    _Winlink1000HbsAirLinkTxOperMode_Type()
)
winlink1000HbsAirLinkTxOperMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkTxOperMode.setStatus("mandatory")
_Winlink1000HbsAirHsuInBytes_Type = Integer32
_Winlink1000HbsAirHsuInBytes_Object = MibTableColumn
winlink1000HbsAirHsuInBytes = _Winlink1000HbsAirHsuInBytes_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 15),
    _Winlink1000HbsAirHsuInBytes_Type()
)
winlink1000HbsAirHsuInBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirHsuInBytes.setStatus("mandatory")
_Winlink1000HbsAirHsuOutBytes_Type = Integer32
_Winlink1000HbsAirHsuOutBytes_Object = MibTableColumn
winlink1000HbsAirHsuOutBytes = _Winlink1000HbsAirHsuOutBytes_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 16),
    _Winlink1000HbsAirHsuOutBytes_Type()
)
winlink1000HbsAirHsuOutBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirHsuOutBytes.setStatus("mandatory")
_Winlink1000HbsAirHsuInFrames_Type = Integer32
_Winlink1000HbsAirHsuInFrames_Object = MibTableColumn
winlink1000HbsAirHsuInFrames = _Winlink1000HbsAirHsuInFrames_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 17),
    _Winlink1000HbsAirHsuInFrames_Type()
)
winlink1000HbsAirHsuInFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirHsuInFrames.setStatus("mandatory")
_Winlink1000HbsAirHsuOutFrames_Type = Integer32
_Winlink1000HbsAirHsuOutFrames_Object = MibTableColumn
winlink1000HbsAirHsuOutFrames = _Winlink1000HbsAirHsuOutFrames_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 18),
    _Winlink1000HbsAirHsuOutFrames_Type()
)
winlink1000HbsAirHsuOutFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirHsuOutFrames.setStatus("mandatory")
_Winlink1000HbsAirHsuMacAddress_Type = DisplayString
_Winlink1000HbsAirHsuMacAddress_Object = MibTableColumn
winlink1000HbsAirHsuMacAddress = _Winlink1000HbsAirHsuMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 19),
    _Winlink1000HbsAirHsuMacAddress_Type()
)
winlink1000HbsAirHsuMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirHsuMacAddress.setStatus("mandatory")
_Winlink1000HbsAirMaxTputDown_Type = Integer32
_Winlink1000HbsAirMaxTputDown_Object = MibTableColumn
winlink1000HbsAirMaxTputDown = _Winlink1000HbsAirMaxTputDown_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 20),
    _Winlink1000HbsAirMaxTputDown_Type()
)
winlink1000HbsAirMaxTputDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirMaxTputDown.setStatus("mandatory")
_Winlink1000HbsAirMaxTputUp_Type = Integer32
_Winlink1000HbsAirMaxTputUp_Object = MibTableColumn
winlink1000HbsAirMaxTputUp = _Winlink1000HbsAirMaxTputUp_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 21),
    _Winlink1000HbsAirMaxTputUp_Type()
)
winlink1000HbsAirMaxTputUp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirMaxTputUp.setStatus("mandatory")
_Winlink1000HbsAirLinkCompressedMon_Type = OctetString
_Winlink1000HbsAirLinkCompressedMon_Object = MibTableColumn
winlink1000HbsAirLinkCompressedMon = _Winlink1000HbsAirLinkCompressedMon_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 22),
    _Winlink1000HbsAirLinkCompressedMon_Type()
)
winlink1000HbsAirLinkCompressedMon.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkCompressedMon.setStatus("mandatory")
_Winlink1000HbsAirLinkCompressedStatic_Type = DisplayString
_Winlink1000HbsAirLinkCompressedStatic_Object = MibTableColumn
winlink1000HbsAirLinkCompressedStatic = _Winlink1000HbsAirLinkCompressedStatic_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 23),
    _Winlink1000HbsAirLinkCompressedStatic_Type()
)
winlink1000HbsAirLinkCompressedStatic.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkCompressedStatic.setStatus("mandatory")
_Winlink1000HbsAirCpeCapacityLimit_Type = Integer32
_Winlink1000HbsAirCpeCapacityLimit_Object = MibTableColumn
winlink1000HbsAirCpeCapacityLimit = _Winlink1000HbsAirCpeCapacityLimit_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 24),
    _Winlink1000HbsAirCpeCapacityLimit_Type()
)
winlink1000HbsAirCpeCapacityLimit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCpeCapacityLimit.setStatus("mandatory")


class _Winlink1000HbsAirLinkAntennaType_Type(Integer32):
    """Custom type winlink1000HbsAirLinkAntennaType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("single", 1),
          ("dual", 2),
          ("undefined", 3),
          ("triple", 4))
    )


_Winlink1000HbsAirLinkAntennaType_Type.__name__ = "Integer32"
_Winlink1000HbsAirLinkAntennaType_Object = MibTableColumn
winlink1000HbsAirLinkAntennaType = _Winlink1000HbsAirLinkAntennaType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 25),
    _Winlink1000HbsAirLinkAntennaType_Type()
)
winlink1000HbsAirLinkAntennaType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkAntennaType.setStatus("mandatory")
_Winlink1000HbsAirHsuRxRateInKbps_Type = Integer32
_Winlink1000HbsAirHsuRxRateInKbps_Object = MibTableColumn
winlink1000HbsAirHsuRxRateInKbps = _Winlink1000HbsAirHsuRxRateInKbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 26),
    _Winlink1000HbsAirHsuRxRateInKbps_Type()
)
winlink1000HbsAirHsuRxRateInKbps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirHsuRxRateInKbps.setStatus("mandatory")
_Winlink1000HbsAirHsuTxRateInKbps_Type = Integer32
_Winlink1000HbsAirHsuTxRateInKbps_Object = MibTableColumn
winlink1000HbsAirHsuTxRateInKbps = _Winlink1000HbsAirHsuTxRateInKbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 27),
    _Winlink1000HbsAirHsuTxRateInKbps_Type()
)
winlink1000HbsAirHsuTxRateInKbps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirHsuTxRateInKbps.setStatus("mandatory")
_Winlink1000HbsAirHsuRxRateInFps_Type = Integer32
_Winlink1000HbsAirHsuRxRateInFps_Object = MibTableColumn
winlink1000HbsAirHsuRxRateInFps = _Winlink1000HbsAirHsuRxRateInFps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 28),
    _Winlink1000HbsAirHsuRxRateInFps_Type()
)
winlink1000HbsAirHsuRxRateInFps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirHsuRxRateInFps.setStatus("mandatory")
_Winlink1000HbsAirHsuTxRateInFps_Type = Integer32
_Winlink1000HbsAirHsuTxRateInFps_Object = MibTableColumn
winlink1000HbsAirHsuTxRateInFps = _Winlink1000HbsAirHsuTxRateInFps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 29),
    _Winlink1000HbsAirHsuTxRateInFps_Type()
)
winlink1000HbsAirHsuTxRateInFps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirHsuTxRateInFps.setStatus("mandatory")
_Winlink1000HbsAirLinkPeakTputDown_Type = Integer32
_Winlink1000HbsAirLinkPeakTputDown_Object = MibTableColumn
winlink1000HbsAirLinkPeakTputDown = _Winlink1000HbsAirLinkPeakTputDown_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 30),
    _Winlink1000HbsAirLinkPeakTputDown_Type()
)
winlink1000HbsAirLinkPeakTputDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkPeakTputDown.setStatus("mandatory")
_Winlink1000HbsAirLinkPeakTputUp_Type = Integer32
_Winlink1000HbsAirLinkPeakTputUp_Object = MibTableColumn
winlink1000HbsAirLinkPeakTputUp = _Winlink1000HbsAirLinkPeakTputUp_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 31),
    _Winlink1000HbsAirLinkPeakTputUp_Type()
)
winlink1000HbsAirLinkPeakTputUp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkPeakTputUp.setStatus("mandatory")
_Winlink1000HbsAirLinkUtilDownSecRelMill_Type = Integer32
_Winlink1000HbsAirLinkUtilDownSecRelMill_Object = MibTableColumn
winlink1000HbsAirLinkUtilDownSecRelMill = _Winlink1000HbsAirLinkUtilDownSecRelMill_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 32),
    _Winlink1000HbsAirLinkUtilDownSecRelMill_Type()
)
winlink1000HbsAirLinkUtilDownSecRelMill.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkUtilDownSecRelMill.setStatus("mandatory")
_Winlink1000HbsAirLinkUtilUpSecRelMill_Type = Integer32
_Winlink1000HbsAirLinkUtilUpSecRelMill_Object = MibTableColumn
winlink1000HbsAirLinkUtilUpSecRelMill = _Winlink1000HbsAirLinkUtilUpSecRelMill_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 33),
    _Winlink1000HbsAirLinkUtilUpSecRelMill_Type()
)
winlink1000HbsAirLinkUtilUpSecRelMill.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkUtilUpSecRelMill.setStatus("mandatory")
_Winlink1000HbsAirLinkUtilDownAllocRelMill_Type = Integer32
_Winlink1000HbsAirLinkUtilDownAllocRelMill_Object = MibTableColumn
winlink1000HbsAirLinkUtilDownAllocRelMill = _Winlink1000HbsAirLinkUtilDownAllocRelMill_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 34),
    _Winlink1000HbsAirLinkUtilDownAllocRelMill_Type()
)
winlink1000HbsAirLinkUtilDownAllocRelMill.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkUtilDownAllocRelMill.setStatus("mandatory")
_Winlink1000HbsAirLinkUtilUpAllocRelMill_Type = Integer32
_Winlink1000HbsAirLinkUtilUpAllocRelMill_Object = MibTableColumn
winlink1000HbsAirLinkUtilUpAllocRelMill = _Winlink1000HbsAirLinkUtilUpAllocRelMill_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 35),
    _Winlink1000HbsAirLinkUtilUpAllocRelMill_Type()
)
winlink1000HbsAirLinkUtilUpAllocRelMill.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkUtilUpAllocRelMill.setStatus("mandatory")
_Winlink1000HbsAirLinkUtilDownTrafficKbps_Type = Integer32
_Winlink1000HbsAirLinkUtilDownTrafficKbps_Object = MibTableColumn
winlink1000HbsAirLinkUtilDownTrafficKbps = _Winlink1000HbsAirLinkUtilDownTrafficKbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 36),
    _Winlink1000HbsAirLinkUtilDownTrafficKbps_Type()
)
winlink1000HbsAirLinkUtilDownTrafficKbps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkUtilDownTrafficKbps.setStatus("mandatory")
_Winlink1000HbsAirLinkUtilUpTrafficKbps_Type = Integer32
_Winlink1000HbsAirLinkUtilUpTrafficKbps_Object = MibTableColumn
winlink1000HbsAirLinkUtilUpTrafficKbps = _Winlink1000HbsAirLinkUtilUpTrafficKbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 37),
    _Winlink1000HbsAirLinkUtilUpTrafficKbps_Type()
)
winlink1000HbsAirLinkUtilUpTrafficKbps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkUtilUpTrafficKbps.setStatus("mandatory")
_Winlink1000HbsAirLinkUtilCompressedMon_Type = OctetString
_Winlink1000HbsAirLinkUtilCompressedMon_Object = MibTableColumn
winlink1000HbsAirLinkUtilCompressedMon = _Winlink1000HbsAirLinkUtilCompressedMon_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 38),
    _Winlink1000HbsAirLinkUtilCompressedMon_Type()
)
winlink1000HbsAirLinkUtilCompressedMon.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkUtilCompressedMon.setStatus("mandatory")
_Winlink1000HbsAirLinkBsaAzimuth_Type = Integer32
_Winlink1000HbsAirLinkBsaAzimuth_Object = MibTableColumn
winlink1000HbsAirLinkBsaAzimuth = _Winlink1000HbsAirLinkBsaAzimuth_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 39),
    _Winlink1000HbsAirLinkBsaAzimuth_Type()
)
winlink1000HbsAirLinkBsaAzimuth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkBsaAzimuth.setStatus("mandatory")


class _Winlink1000HbsAirLink1588TCPerformance_Type(Integer32):
    """Custom type winlink1000HbsAirLink1588TCPerformance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("high", 1),
          ("low", 2),
          ("notApplicable", 3))
    )


_Winlink1000HbsAirLink1588TCPerformance_Type.__name__ = "Integer32"
_Winlink1000HbsAirLink1588TCPerformance_Object = MibTableColumn
winlink1000HbsAirLink1588TCPerformance = _Winlink1000HbsAirLink1588TCPerformance_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 40),
    _Winlink1000HbsAirLink1588TCPerformance_Type()
)
winlink1000HbsAirLink1588TCPerformance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLink1588TCPerformance.setStatus("mandatory")


class _Winlink1000HbsAirLinkSyncEPerformance_Type(Integer32):
    """Custom type winlink1000HbsAirLinkSyncEPerformance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("high", 1),
          ("low", 2),
          ("holdover", 3),
          ("syncEFailure", 4),
          ("notApplicable", 5),
          ("refClk", 6))
    )


_Winlink1000HbsAirLinkSyncEPerformance_Type.__name__ = "Integer32"
_Winlink1000HbsAirLinkSyncEPerformance_Object = MibTableColumn
winlink1000HbsAirLinkSyncEPerformance = _Winlink1000HbsAirLinkSyncEPerformance_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 41),
    _Winlink1000HbsAirLinkSyncEPerformance_Type()
)
winlink1000HbsAirLinkSyncEPerformance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkSyncEPerformance.setStatus("mandatory")
_Winlink1000HbsAirHsuTxBytes_Type = Counter32
_Winlink1000HbsAirHsuTxBytes_Object = MibTableColumn
winlink1000HbsAirHsuTxBytes = _Winlink1000HbsAirHsuTxBytes_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 42),
    _Winlink1000HbsAirHsuTxBytes_Type()
)
winlink1000HbsAirHsuTxBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirHsuTxBytes.setStatus("mandatory")
_Winlink1000HbsAirHsuRxBytes_Type = Counter32
_Winlink1000HbsAirHsuRxBytes_Object = MibTableColumn
winlink1000HbsAirHsuRxBytes = _Winlink1000HbsAirHsuRxBytes_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 7, 2, 1, 43),
    _Winlink1000HbsAirHsuRxBytes_Type()
)
winlink1000HbsAirHsuRxBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirHsuRxBytes.setStatus("mandatory")
_Winlink1000HbsAirComboSwitchSectorFreqBandId_Type = Integer32
_Winlink1000HbsAirComboSwitchSectorFreqBandId_Object = MibScalar
winlink1000HbsAirComboSwitchSectorFreqBandId = _Winlink1000HbsAirComboSwitchSectorFreqBandId_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 8),
    _Winlink1000HbsAirComboSwitchSectorFreqBandId_Type()
)
winlink1000HbsAirComboSwitchSectorFreqBandId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirComboSwitchSectorFreqBandId.setStatus("mandatory")
_Winlink1000HbsAirGeoAzimuth_Type = Integer32
_Winlink1000HbsAirGeoAzimuth_Object = MibScalar
winlink1000HbsAirGeoAzimuth = _Winlink1000HbsAirGeoAzimuth_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 9),
    _Winlink1000HbsAirGeoAzimuth_Type()
)
winlink1000HbsAirGeoAzimuth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirGeoAzimuth.setStatus("mandatory")
_Winlink1000HbsAirGeoBeamwidth_Type = Integer32
_Winlink1000HbsAirGeoBeamwidth_Object = MibScalar
winlink1000HbsAirGeoBeamwidth = _Winlink1000HbsAirGeoBeamwidth_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 10),
    _Winlink1000HbsAirGeoBeamwidth_Type()
)
winlink1000HbsAirGeoBeamwidth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirGeoBeamwidth.setStatus("mandatory")
_Winlink1000HbsAirMaxDistanceMetersMobility_Type = Integer32
_Winlink1000HbsAirMaxDistanceMetersMobility_Object = MibScalar
winlink1000HbsAirMaxDistanceMetersMobility = _Winlink1000HbsAirMaxDistanceMetersMobility_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 11),
    _Winlink1000HbsAirMaxDistanceMetersMobility_Type()
)
winlink1000HbsAirMaxDistanceMetersMobility.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirMaxDistanceMetersMobility.setStatus("mandatory")
_Winlink1000HbsAirComboSwitchSectorFreqBandIdStr_Type = DisplayString
_Winlink1000HbsAirComboSwitchSectorFreqBandIdStr_Object = MibScalar
winlink1000HbsAirComboSwitchSectorFreqBandIdStr = _Winlink1000HbsAirComboSwitchSectorFreqBandIdStr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 12),
    _Winlink1000HbsAirComboSwitchSectorFreqBandIdStr_Type()
)
winlink1000HbsAirComboSwitchSectorFreqBandIdStr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirComboSwitchSectorFreqBandIdStr.setStatus("mandatory")
_Winlink1000HbsAirTimeSlotAllocationBitmap_Type = DisplayString
_Winlink1000HbsAirTimeSlotAllocationBitmap_Object = MibScalar
winlink1000HbsAirTimeSlotAllocationBitmap = _Winlink1000HbsAirTimeSlotAllocationBitmap_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 13),
    _Winlink1000HbsAirTimeSlotAllocationBitmap_Type()
)
winlink1000HbsAirTimeSlotAllocationBitmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirTimeSlotAllocationBitmap.setStatus("mandatory")
_Winlink1000HbsAirAvailTimeSlotsUp_Type = Integer32
_Winlink1000HbsAirAvailTimeSlotsUp_Object = MibScalar
winlink1000HbsAirAvailTimeSlotsUp = _Winlink1000HbsAirAvailTimeSlotsUp_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 14),
    _Winlink1000HbsAirAvailTimeSlotsUp_Type()
)
winlink1000HbsAirAvailTimeSlotsUp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirAvailTimeSlotsUp.setStatus("mandatory")
_Winlink1000HbsAirDownUtilMill_Type = Integer32
_Winlink1000HbsAirDownUtilMill_Object = MibScalar
winlink1000HbsAirDownUtilMill = _Winlink1000HbsAirDownUtilMill_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 15),
    _Winlink1000HbsAirDownUtilMill_Type()
)
winlink1000HbsAirDownUtilMill.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirDownUtilMill.setStatus("mandatory")
_Winlink1000HbsAirUpUtilMill_Type = Integer32
_Winlink1000HbsAirUpUtilMill_Object = MibScalar
winlink1000HbsAirUpUtilMill = _Winlink1000HbsAirUpUtilMill_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 16),
    _Winlink1000HbsAirUpUtilMill_Type()
)
winlink1000HbsAirUpUtilMill.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirUpUtilMill.setStatus("mandatory")
_Winlink1000HbsAirDownTrafficKbps_Type = Integer32
_Winlink1000HbsAirDownTrafficKbps_Object = MibScalar
winlink1000HbsAirDownTrafficKbps = _Winlink1000HbsAirDownTrafficKbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 17),
    _Winlink1000HbsAirDownTrafficKbps_Type()
)
winlink1000HbsAirDownTrafficKbps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirDownTrafficKbps.setStatus("mandatory")
_Winlink1000HbsAirUpTrafficKbps_Type = Integer32
_Winlink1000HbsAirUpTrafficKbps_Object = MibScalar
winlink1000HbsAirUpTrafficKbps = _Winlink1000HbsAirUpTrafficKbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 18),
    _Winlink1000HbsAirUpTrafficKbps_Type()
)
winlink1000HbsAirUpTrafficKbps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirUpTrafficKbps.setStatus("mandatory")
_Winlink1000HbsAirCompressedMonSec_Type = DisplayString
_Winlink1000HbsAirCompressedMonSec_Object = MibScalar
winlink1000HbsAirCompressedMonSec = _Winlink1000HbsAirCompressedMonSec_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 19),
    _Winlink1000HbsAirCompressedMonSec_Type()
)
winlink1000HbsAirCompressedMonSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCompressedMonSec.setStatus("mandatory")


class _Winlink1000HbsAirDelayVsTputOpt_Type(Integer32):
    """Custom type winlink1000HbsAirDelayVsTputOpt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("delaySensitivity", 1),
          ("throughputOptimized", 2))
    )


_Winlink1000HbsAirDelayVsTputOpt_Type.__name__ = "Integer32"
_Winlink1000HbsAirDelayVsTputOpt_Object = MibScalar
winlink1000HbsAirDelayVsTputOpt = _Winlink1000HbsAirDelayVsTputOpt_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 20),
    _Winlink1000HbsAirDelayVsTputOpt_Type()
)
winlink1000HbsAirDelayVsTputOpt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirDelayVsTputOpt.setStatus("mandatory")
_Winlink1000HbsAirUCBP_ObjectIdentity = ObjectIdentity
winlink1000HbsAirUCBP = _Winlink1000HbsAirUCBP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 21)
)
_Winlink1000HbsAirUCBPMinCS_Type = Integer32
_Winlink1000HbsAirUCBPMinCS_Object = MibScalar
winlink1000HbsAirUCBPMinCS = _Winlink1000HbsAirUCBPMinCS_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 21, 1),
    _Winlink1000HbsAirUCBPMinCS_Type()
)
winlink1000HbsAirUCBPMinCS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirUCBPMinCS.setStatus("mandatory")
_Winlink1000HbsAirUCBPSharingPercentage_Type = Integer32
_Winlink1000HbsAirUCBPSharingPercentage_Object = MibScalar
winlink1000HbsAirUCBPSharingPercentage = _Winlink1000HbsAirUCBPSharingPercentage_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 21, 2),
    _Winlink1000HbsAirUCBPSharingPercentage_Type()
)
winlink1000HbsAirUCBPSharingPercentage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirUCBPSharingPercentage.setStatus("mandatory")


class _Winlink1000HbsAirSingleHsuMode_Type(Integer32):
    """Custom type winlink1000HbsAirSingleHsuMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("singleHsu", 2),
          ("multipleHsus", 3))
    )


_Winlink1000HbsAirSingleHsuMode_Type.__name__ = "Integer32"
_Winlink1000HbsAirSingleHsuMode_Object = MibScalar
winlink1000HbsAirSingleHsuMode = _Winlink1000HbsAirSingleHsuMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 22),
    _Winlink1000HbsAirSingleHsuMode_Type()
)
winlink1000HbsAirSingleHsuMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirSingleHsuMode.setStatus("mandatory")
_Winlink1000HbsAirMobilityAzTrack_Type = Integer32
_Winlink1000HbsAirMobilityAzTrack_Object = MibScalar
winlink1000HbsAirMobilityAzTrack = _Winlink1000HbsAirMobilityAzTrack_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 23),
    _Winlink1000HbsAirMobilityAzTrack_Type()
)
winlink1000HbsAirMobilityAzTrack.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirMobilityAzTrack.setStatus("mandatory")


class _Winlink1000HbsAirSyncEPerformance_Type(Integer32):
    """Custom type winlink1000HbsAirSyncEPerformance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("high", 1),
          ("low", 2),
          ("holdover", 3),
          ("syncEFailure", 4),
          ("notApplicable", 5),
          ("refClk", 6))
    )


_Winlink1000HbsAirSyncEPerformance_Type.__name__ = "Integer32"
_Winlink1000HbsAirSyncEPerformance_Object = MibScalar
winlink1000HbsAirSyncEPerformance = _Winlink1000HbsAirSyncEPerformance_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 24),
    _Winlink1000HbsAirSyncEPerformance_Type()
)
winlink1000HbsAirSyncEPerformance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirSyncEPerformance.setStatus("mandatory")


class _Winlink1000HbsAirAtpcEnable_Type(Integer32):
    """Custom type winlink1000HbsAirAtpcEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("static", 2),
          ("dynamic", 3),
          ("notSupported", 4))
    )


_Winlink1000HbsAirAtpcEnable_Type.__name__ = "Integer32"
_Winlink1000HbsAirAtpcEnable_Object = MibScalar
winlink1000HbsAirAtpcEnable = _Winlink1000HbsAirAtpcEnable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 25),
    _Winlink1000HbsAirAtpcEnable_Type()
)
winlink1000HbsAirAtpcEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirAtpcEnable.setStatus("mandatory")
_Winlink1000HbsAirAtpcTargetMCS_Type = Integer32
_Winlink1000HbsAirAtpcTargetMCS_Object = MibScalar
winlink1000HbsAirAtpcTargetMCS = _Winlink1000HbsAirAtpcTargetMCS_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 26),
    _Winlink1000HbsAirAtpcTargetMCS_Type()
)
winlink1000HbsAirAtpcTargetMCS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirAtpcTargetMCS.setStatus("mandatory")
_Winlink1000HbsAirAtpcMaxAllowedRate_Type = Integer32
_Winlink1000HbsAirAtpcMaxAllowedRate_Object = MibScalar
winlink1000HbsAirAtpcMaxAllowedRate = _Winlink1000HbsAirAtpcMaxAllowedRate_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 27),
    _Winlink1000HbsAirAtpcMaxAllowedRate_Type()
)
winlink1000HbsAirAtpcMaxAllowedRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirAtpcMaxAllowedRate.setStatus("mandatory")
_Winlink1000HbsAirAtpcTargetRSSPerRateTable_Object = MibTable
winlink1000HbsAirAtpcTargetRSSPerRateTable = _Winlink1000HbsAirAtpcTargetRSSPerRateTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 28)
)
if mibBuilder.loadTexts:
    winlink1000HbsAirAtpcTargetRSSPerRateTable.setStatus("mandatory")
_Winlink1000HbsAirAtpcMaxAllowedRateEntry_Object = MibTableRow
winlink1000HbsAirAtpcMaxAllowedRateEntry = _Winlink1000HbsAirAtpcMaxAllowedRateEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 28, 1)
)
winlink1000HbsAirAtpcMaxAllowedRateEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsAirAtpcTargetRSSPerRateIndex"),
)
if mibBuilder.loadTexts:
    winlink1000HbsAirAtpcMaxAllowedRateEntry.setStatus("mandatory")


class _Winlink1000HbsAirAtpcTargetRSSPerRateIndex_Type(Integer32):
    """Custom type winlink1000HbsAirAtpcTargetRSSPerRateIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000HbsAirAtpcTargetRSSPerRateIndex_Type.__name__ = "Integer32"
_Winlink1000HbsAirAtpcTargetRSSPerRateIndex_Object = MibTableColumn
winlink1000HbsAirAtpcTargetRSSPerRateIndex = _Winlink1000HbsAirAtpcTargetRSSPerRateIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 28, 1, 1),
    _Winlink1000HbsAirAtpcTargetRSSPerRateIndex_Type()
)
winlink1000HbsAirAtpcTargetRSSPerRateIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirAtpcTargetRSSPerRateIndex.setStatus("mandatory")
_Winlink1000HbsAirAtpcTargetRSSPerRate_Type = Integer32
_Winlink1000HbsAirAtpcTargetRSSPerRate_Object = MibTableColumn
winlink1000HbsAirAtpcTargetRSSPerRate = _Winlink1000HbsAirAtpcTargetRSSPerRate_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 28, 1, 2),
    _Winlink1000HbsAirAtpcTargetRSSPerRate_Type()
)
winlink1000HbsAirAtpcTargetRSSPerRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirAtpcTargetRSSPerRate.setStatus("mandatory")
_Winlink1000HbsAirMinimalTimeBetweenAutoRealignment_Type = Integer32
_Winlink1000HbsAirMinimalTimeBetweenAutoRealignment_Object = MibScalar
winlink1000HbsAirMinimalTimeBetweenAutoRealignment = _Winlink1000HbsAirMinimalTimeBetweenAutoRealignment_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 29),
    _Winlink1000HbsAirMinimalTimeBetweenAutoRealignment_Type()
)
winlink1000HbsAirMinimalTimeBetweenAutoRealignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirMinimalTimeBetweenAutoRealignment.setStatus("mandatory")
_Winlink1000HbsAirAvailResourcesDL_Type = Integer32
_Winlink1000HbsAirAvailResourcesDL_Object = MibScalar
winlink1000HbsAirAvailResourcesDL = _Winlink1000HbsAirAvailResourcesDL_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 30),
    _Winlink1000HbsAirAvailResourcesDL_Type()
)
winlink1000HbsAirAvailResourcesDL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirAvailResourcesDL.setStatus("mandatory")
_Winlink1000HbsAirAvailResourcesUL_Type = Integer32
_Winlink1000HbsAirAvailResourcesUL_Object = MibScalar
winlink1000HbsAirAvailResourcesUL = _Winlink1000HbsAirAvailResourcesUL_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 31),
    _Winlink1000HbsAirAvailResourcesUL_Type()
)
winlink1000HbsAirAvailResourcesUL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirAvailResourcesUL.setStatus("mandatory")


class _Winlink1000HbsAirHbsType_Type(Integer32):
    """Custom type winlink1000HbsAirHbsType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("carrier", 1),
          ("residential", 2))
    )


_Winlink1000HbsAirHbsType_Type.__name__ = "Integer32"
_Winlink1000HbsAirHbsType_Object = MibScalar
winlink1000HbsAirHbsType = _Winlink1000HbsAirHbsType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 32),
    _Winlink1000HbsAirHbsType_Type()
)
winlink1000HbsAirHbsType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirHbsType.setStatus("mandatory")
_Winlink1000HbsAirLinkQuality_ObjectIdentity = ObjectIdentity
winlink1000HbsAirLinkQuality = _Winlink1000HbsAirLinkQuality_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 33)
)


class _Winlink1000HbsAirLinkQualitySupport_Type(Integer32):
    """Custom type winlink1000HbsAirLinkQualitySupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notSupported", 1),
          ("supported", 2))
    )


_Winlink1000HbsAirLinkQualitySupport_Type.__name__ = "Integer32"
_Winlink1000HbsAirLinkQualitySupport_Object = MibScalar
winlink1000HbsAirLinkQualitySupport = _Winlink1000HbsAirLinkQualitySupport_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 33, 1),
    _Winlink1000HbsAirLinkQualitySupport_Type()
)
winlink1000HbsAirLinkQualitySupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkQualitySupport.setStatus("mandatory")


class _Winlink1000HbsAirLinkQualityActivationStatus_Type(Integer32):
    """Custom type winlink1000HbsAirLinkQualityActivationStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_Winlink1000HbsAirLinkQualityActivationStatus_Type.__name__ = "Integer32"
_Winlink1000HbsAirLinkQualityActivationStatus_Object = MibScalar
winlink1000HbsAirLinkQualityActivationStatus = _Winlink1000HbsAirLinkQualityActivationStatus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 33, 2),
    _Winlink1000HbsAirLinkQualityActivationStatus_Type()
)
winlink1000HbsAirLinkQualityActivationStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkQualityActivationStatus.setStatus("mandatory")


class _Winlink1000HbsAirLinkQualityDetectionTime_Type(Integer32):
    """Custom type winlink1000HbsAirLinkQualityDetectionTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(60, 900),
    )


_Winlink1000HbsAirLinkQualityDetectionTime_Type.__name__ = "Integer32"
_Winlink1000HbsAirLinkQualityDetectionTime_Object = MibScalar
winlink1000HbsAirLinkQualityDetectionTime = _Winlink1000HbsAirLinkQualityDetectionTime_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 33, 3),
    _Winlink1000HbsAirLinkQualityDetectionTime_Type()
)
winlink1000HbsAirLinkQualityDetectionTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkQualityDetectionTime.setStatus("mandatory")


class _Winlink1000HbsAirLinkQualityDetectionThreshold_Type(Integer32):
    """Custom type winlink1000HbsAirLinkQualityDetectionThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 100),
    )


_Winlink1000HbsAirLinkQualityDetectionThreshold_Type.__name__ = "Integer32"
_Winlink1000HbsAirLinkQualityDetectionThreshold_Object = MibScalar
winlink1000HbsAirLinkQualityDetectionThreshold = _Winlink1000HbsAirLinkQualityDetectionThreshold_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 33, 4),
    _Winlink1000HbsAirLinkQualityDetectionThreshold_Type()
)
winlink1000HbsAirLinkQualityDetectionThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirLinkQualityDetectionThreshold.setStatus("mandatory")
_Winlink1000HbsAirAggregatedDownlinkUtil_Type = Counter32
_Winlink1000HbsAirAggregatedDownlinkUtil_Object = MibScalar
winlink1000HbsAirAggregatedDownlinkUtil = _Winlink1000HbsAirAggregatedDownlinkUtil_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 34),
    _Winlink1000HbsAirAggregatedDownlinkUtil_Type()
)
winlink1000HbsAirAggregatedDownlinkUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirAggregatedDownlinkUtil.setStatus("mandatory")
_Winlink1000HbsAirAggregatedUplinkUtil_Type = Counter32
_Winlink1000HbsAirAggregatedUplinkUtil_Object = MibScalar
winlink1000HbsAirAggregatedUplinkUtil = _Winlink1000HbsAirAggregatedUplinkUtil_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 35),
    _Winlink1000HbsAirAggregatedUplinkUtil_Type()
)
winlink1000HbsAirAggregatedUplinkUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirAggregatedUplinkUtil.setStatus("mandatory")
_Winlink1000HbsAirAggregatedReferenceCounter_Type = Counter32
_Winlink1000HbsAirAggregatedReferenceCounter_Object = MibScalar
winlink1000HbsAirAggregatedReferenceCounter = _Winlink1000HbsAirAggregatedReferenceCounter_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 36),
    _Winlink1000HbsAirAggregatedReferenceCounter_Type()
)
winlink1000HbsAirAggregatedReferenceCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirAggregatedReferenceCounter.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeTable_Object = MibTable
winlink1000HbsAirRegisteredCpeTable = _Winlink1000HbsAirRegisteredCpeTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37)
)
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeTable.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeTableEntry_Object = MibTableRow
winlink1000HbsAirRegisteredCpeTableEntry = _Winlink1000HbsAirRegisteredCpeTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1)
)
winlink1000HbsAirRegisteredCpeTableEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsAirRegisteredCpeTableIndex"),
)
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeTableEntry.setStatus("mandatory")


class _Winlink1000HbsAirRegisteredCpeTableIndex_Type(Integer32):
    """Custom type winlink1000HbsAirRegisteredCpeTableIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000HbsAirRegisteredCpeTableIndex_Type.__name__ = "Integer32"
_Winlink1000HbsAirRegisteredCpeTableIndex_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeTableIndex = _Winlink1000HbsAirRegisteredCpeTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 1),
    _Winlink1000HbsAirRegisteredCpeTableIndex_Type()
)
winlink1000HbsAirRegisteredCpeTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeTableIndex.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeLinkId_Type = Integer32
_Winlink1000HbsAirRegisteredCpeLinkId_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeLinkId = _Winlink1000HbsAirRegisteredCpeLinkId_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 2),
    _Winlink1000HbsAirRegisteredCpeLinkId_Type()
)
winlink1000HbsAirRegisteredCpeLinkId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeLinkId.setStatus("mandatory")


class _Winlink1000HbsAirRegisteredCpeState_Type(Integer32):
    """Custom type winlink1000HbsAirRegisteredCpeState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("noSync", 1),
          ("violated", 2),
          ("syncUnregistered", 3),
          ("syncRegistered", 4),
          ("authenticationError", 5),
          ("swUpgradeRequired", 6),
          ("syncRegisteredPassive", 7),
          ("syncRegisteredALP", 8))
    )


_Winlink1000HbsAirRegisteredCpeState_Type.__name__ = "Integer32"
_Winlink1000HbsAirRegisteredCpeState_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeState = _Winlink1000HbsAirRegisteredCpeState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 3),
    _Winlink1000HbsAirRegisteredCpeState_Type()
)
winlink1000HbsAirRegisteredCpeState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeState.setStatus("mandatory")


class _Winlink1000HbsAirRegisteredCpeWorkingMode_Type(Integer32):
    """Custom type winlink1000HbsAirRegisteredCpeWorkingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 1),
          ("normal", 2),
          ("fullCompatibilityRemoteUpgradeAvailable", 3),
          ("fullCompatibilityLocalUpgradeAvailable", 4),
          ("restrictedCompatibilityRemoteUpgradeRecomended", 5),
          ("restrictedCompatibilityLocalUpgradeRecomended", 6),
          ("softwareUpgradeRemoteUpgradeRequired", 7),
          ("softwareUpgradeLocalUpgradeRequired", 8),
          ("versionsIncompatibilityRemoteUpgradeRequired", 9),
          ("versionsIncompatibilityLocalUpgradeRequired", 10))
    )


_Winlink1000HbsAirRegisteredCpeWorkingMode_Type.__name__ = "Integer32"
_Winlink1000HbsAirRegisteredCpeWorkingMode_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeWorkingMode = _Winlink1000HbsAirRegisteredCpeWorkingMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 4),
    _Winlink1000HbsAirRegisteredCpeWorkingMode_Type()
)
winlink1000HbsAirRegisteredCpeWorkingMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeWorkingMode.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeSessionId_Type = Integer32
_Winlink1000HbsAirRegisteredCpeSessionId_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeSessionId = _Winlink1000HbsAirRegisteredCpeSessionId_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 5),
    _Winlink1000HbsAirRegisteredCpeSessionId_Type()
)
winlink1000HbsAirRegisteredCpeSessionId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeSessionId.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeHbsEstTput_Type = Integer32
_Winlink1000HbsAirRegisteredCpeHbsEstTput_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeHbsEstTput = _Winlink1000HbsAirRegisteredCpeHbsEstTput_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 6),
    _Winlink1000HbsAirRegisteredCpeHbsEstTput_Type()
)
winlink1000HbsAirRegisteredCpeHbsEstTput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeHbsEstTput.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeHsuEstTput_Type = Integer32
_Winlink1000HbsAirRegisteredCpeHsuEstTput_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeHsuEstTput = _Winlink1000HbsAirRegisteredCpeHsuEstTput_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 7),
    _Winlink1000HbsAirRegisteredCpeHsuEstTput_Type()
)
winlink1000HbsAirRegisteredCpeHsuEstTput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeHsuEstTput.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeRange_Type = Integer32
_Winlink1000HbsAirRegisteredCpeRange_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeRange = _Winlink1000HbsAirRegisteredCpeRange_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 8),
    _Winlink1000HbsAirRegisteredCpeRange_Type()
)
winlink1000HbsAirRegisteredCpeRange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeRange.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeHbsRss_Type = Integer32
_Winlink1000HbsAirRegisteredCpeHbsRss_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeHbsRss = _Winlink1000HbsAirRegisteredCpeHbsRss_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 9),
    _Winlink1000HbsAirRegisteredCpeHbsRss_Type()
)
winlink1000HbsAirRegisteredCpeHbsRss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeHbsRss.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeHbsRssBal_Type = Integer32
_Winlink1000HbsAirRegisteredCpeHbsRssBal_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeHbsRssBal = _Winlink1000HbsAirRegisteredCpeHbsRssBal_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 10),
    _Winlink1000HbsAirRegisteredCpeHbsRssBal_Type()
)
winlink1000HbsAirRegisteredCpeHbsRssBal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeHbsRssBal.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeHsuRss_Type = Integer32
_Winlink1000HbsAirRegisteredCpeHsuRss_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeHsuRss = _Winlink1000HbsAirRegisteredCpeHsuRss_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 11),
    _Winlink1000HbsAirRegisteredCpeHsuRss_Type()
)
winlink1000HbsAirRegisteredCpeHsuRss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeHsuRss.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeHsuRssBal_Type = Integer32
_Winlink1000HbsAirRegisteredCpeHsuRssBal_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeHsuRssBal = _Winlink1000HbsAirRegisteredCpeHsuRssBal_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 12),
    _Winlink1000HbsAirRegisteredCpeHsuRssBal_Type()
)
winlink1000HbsAirRegisteredCpeHsuRssBal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeHsuRssBal.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeHsuSerial_Type = DisplayString
_Winlink1000HbsAirRegisteredCpeHsuSerial_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeHsuSerial = _Winlink1000HbsAirRegisteredCpeHsuSerial_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 13),
    _Winlink1000HbsAirRegisteredCpeHsuSerial_Type()
)
winlink1000HbsAirRegisteredCpeHsuSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeHsuSerial.setStatus("mandatory")


class _Winlink1000HbsAirRegisteredCpeTxOperMode_Type(Integer32):
    """Custom type winlink1000HbsAirRegisteredCpeTxOperMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("regularMode", 1),
          ("measurementMode", 2))
    )


_Winlink1000HbsAirRegisteredCpeTxOperMode_Type.__name__ = "Integer32"
_Winlink1000HbsAirRegisteredCpeTxOperMode_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeTxOperMode = _Winlink1000HbsAirRegisteredCpeTxOperMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 14),
    _Winlink1000HbsAirRegisteredCpeTxOperMode_Type()
)
winlink1000HbsAirRegisteredCpeTxOperMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeTxOperMode.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeHsuInBytes_Type = Integer32
_Winlink1000HbsAirRegisteredCpeHsuInBytes_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeHsuInBytes = _Winlink1000HbsAirRegisteredCpeHsuInBytes_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 15),
    _Winlink1000HbsAirRegisteredCpeHsuInBytes_Type()
)
winlink1000HbsAirRegisteredCpeHsuInBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeHsuInBytes.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeHsuOutBytes_Type = Integer32
_Winlink1000HbsAirRegisteredCpeHsuOutBytes_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeHsuOutBytes = _Winlink1000HbsAirRegisteredCpeHsuOutBytes_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 16),
    _Winlink1000HbsAirRegisteredCpeHsuOutBytes_Type()
)
winlink1000HbsAirRegisteredCpeHsuOutBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeHsuOutBytes.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeHsuInFrames_Type = Integer32
_Winlink1000HbsAirRegisteredCpeHsuInFrames_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeHsuInFrames = _Winlink1000HbsAirRegisteredCpeHsuInFrames_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 17),
    _Winlink1000HbsAirRegisteredCpeHsuInFrames_Type()
)
winlink1000HbsAirRegisteredCpeHsuInFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeHsuInFrames.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeHsuOutFrames_Type = Integer32
_Winlink1000HbsAirRegisteredCpeHsuOutFrames_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeHsuOutFrames = _Winlink1000HbsAirRegisteredCpeHsuOutFrames_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 18),
    _Winlink1000HbsAirRegisteredCpeHsuOutFrames_Type()
)
winlink1000HbsAirRegisteredCpeHsuOutFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeHsuOutFrames.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeHsuMacAddress_Type = DisplayString
_Winlink1000HbsAirRegisteredCpeHsuMacAddress_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeHsuMacAddress = _Winlink1000HbsAirRegisteredCpeHsuMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 19),
    _Winlink1000HbsAirRegisteredCpeHsuMacAddress_Type()
)
winlink1000HbsAirRegisteredCpeHsuMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeHsuMacAddress.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeMaxTputDown_Type = Integer32
_Winlink1000HbsAirRegisteredCpeMaxTputDown_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeMaxTputDown = _Winlink1000HbsAirRegisteredCpeMaxTputDown_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 20),
    _Winlink1000HbsAirRegisteredCpeMaxTputDown_Type()
)
winlink1000HbsAirRegisteredCpeMaxTputDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeMaxTputDown.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeMaxTputUp_Type = Integer32
_Winlink1000HbsAirRegisteredCpeMaxTputUp_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeMaxTputUp = _Winlink1000HbsAirRegisteredCpeMaxTputUp_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 21),
    _Winlink1000HbsAirRegisteredCpeMaxTputUp_Type()
)
winlink1000HbsAirRegisteredCpeMaxTputUp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeMaxTputUp.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeCompressedMon_Type = OctetString
_Winlink1000HbsAirRegisteredCpeCompressedMon_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeCompressedMon = _Winlink1000HbsAirRegisteredCpeCompressedMon_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 22),
    _Winlink1000HbsAirRegisteredCpeCompressedMon_Type()
)
winlink1000HbsAirRegisteredCpeCompressedMon.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeCompressedMon.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeCompressedStatic_Type = DisplayString
_Winlink1000HbsAirRegisteredCpeCompressedStatic_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeCompressedStatic = _Winlink1000HbsAirRegisteredCpeCompressedStatic_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 23),
    _Winlink1000HbsAirRegisteredCpeCompressedStatic_Type()
)
winlink1000HbsAirRegisteredCpeCompressedStatic.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeCompressedStatic.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeCpeCapacityLimit_Type = Integer32
_Winlink1000HbsAirRegisteredCpeCpeCapacityLimit_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeCpeCapacityLimit = _Winlink1000HbsAirRegisteredCpeCpeCapacityLimit_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 24),
    _Winlink1000HbsAirRegisteredCpeCpeCapacityLimit_Type()
)
winlink1000HbsAirRegisteredCpeCpeCapacityLimit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeCpeCapacityLimit.setStatus("mandatory")


class _Winlink1000HbsAirRegisteredCpeAntennaType_Type(Integer32):
    """Custom type winlink1000HbsAirRegisteredCpeAntennaType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("single", 1),
          ("dual", 2),
          ("undefined", 3),
          ("triple", 4))
    )


_Winlink1000HbsAirRegisteredCpeAntennaType_Type.__name__ = "Integer32"
_Winlink1000HbsAirRegisteredCpeAntennaType_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeAntennaType = _Winlink1000HbsAirRegisteredCpeAntennaType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 25),
    _Winlink1000HbsAirRegisteredCpeAntennaType_Type()
)
winlink1000HbsAirRegisteredCpeAntennaType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeAntennaType.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeHsuRxRateInKbps_Type = Integer32
_Winlink1000HbsAirRegisteredCpeHsuRxRateInKbps_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeHsuRxRateInKbps = _Winlink1000HbsAirRegisteredCpeHsuRxRateInKbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 26),
    _Winlink1000HbsAirRegisteredCpeHsuRxRateInKbps_Type()
)
winlink1000HbsAirRegisteredCpeHsuRxRateInKbps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeHsuRxRateInKbps.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeHsuTxRateInKbps_Type = Integer32
_Winlink1000HbsAirRegisteredCpeHsuTxRateInKbps_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeHsuTxRateInKbps = _Winlink1000HbsAirRegisteredCpeHsuTxRateInKbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 27),
    _Winlink1000HbsAirRegisteredCpeHsuTxRateInKbps_Type()
)
winlink1000HbsAirRegisteredCpeHsuTxRateInKbps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeHsuTxRateInKbps.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeHsuRxRateInFps_Type = Integer32
_Winlink1000HbsAirRegisteredCpeHsuRxRateInFps_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeHsuRxRateInFps = _Winlink1000HbsAirRegisteredCpeHsuRxRateInFps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 28),
    _Winlink1000HbsAirRegisteredCpeHsuRxRateInFps_Type()
)
winlink1000HbsAirRegisteredCpeHsuRxRateInFps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeHsuRxRateInFps.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeHsuTxRateInFps_Type = Integer32
_Winlink1000HbsAirRegisteredCpeHsuTxRateInFps_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeHsuTxRateInFps = _Winlink1000HbsAirRegisteredCpeHsuTxRateInFps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 29),
    _Winlink1000HbsAirRegisteredCpeHsuTxRateInFps_Type()
)
winlink1000HbsAirRegisteredCpeHsuTxRateInFps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeHsuTxRateInFps.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpePeakTputDown_Type = Integer32
_Winlink1000HbsAirRegisteredCpePeakTputDown_Object = MibTableColumn
winlink1000HbsAirRegisteredCpePeakTputDown = _Winlink1000HbsAirRegisteredCpePeakTputDown_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 30),
    _Winlink1000HbsAirRegisteredCpePeakTputDown_Type()
)
winlink1000HbsAirRegisteredCpePeakTputDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpePeakTputDown.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpePeakTputUp_Type = Integer32
_Winlink1000HbsAirRegisteredCpePeakTputUp_Object = MibTableColumn
winlink1000HbsAirRegisteredCpePeakTputUp = _Winlink1000HbsAirRegisteredCpePeakTputUp_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 31),
    _Winlink1000HbsAirRegisteredCpePeakTputUp_Type()
)
winlink1000HbsAirRegisteredCpePeakTputUp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpePeakTputUp.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeUtilDownSecRelMill_Type = Integer32
_Winlink1000HbsAirRegisteredCpeUtilDownSecRelMill_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeUtilDownSecRelMill = _Winlink1000HbsAirRegisteredCpeUtilDownSecRelMill_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 32),
    _Winlink1000HbsAirRegisteredCpeUtilDownSecRelMill_Type()
)
winlink1000HbsAirRegisteredCpeUtilDownSecRelMill.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeUtilDownSecRelMill.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeUtilUpSecRelMill_Type = Integer32
_Winlink1000HbsAirRegisteredCpeUtilUpSecRelMill_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeUtilUpSecRelMill = _Winlink1000HbsAirRegisteredCpeUtilUpSecRelMill_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 33),
    _Winlink1000HbsAirRegisteredCpeUtilUpSecRelMill_Type()
)
winlink1000HbsAirRegisteredCpeUtilUpSecRelMill.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeUtilUpSecRelMill.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeUtilDownAllocRelMill_Type = Integer32
_Winlink1000HbsAirRegisteredCpeUtilDownAllocRelMill_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeUtilDownAllocRelMill = _Winlink1000HbsAirRegisteredCpeUtilDownAllocRelMill_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 34),
    _Winlink1000HbsAirRegisteredCpeUtilDownAllocRelMill_Type()
)
winlink1000HbsAirRegisteredCpeUtilDownAllocRelMill.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeUtilDownAllocRelMill.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeUtilUpAllocRelMill_Type = Integer32
_Winlink1000HbsAirRegisteredCpeUtilUpAllocRelMill_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeUtilUpAllocRelMill = _Winlink1000HbsAirRegisteredCpeUtilUpAllocRelMill_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 35),
    _Winlink1000HbsAirRegisteredCpeUtilUpAllocRelMill_Type()
)
winlink1000HbsAirRegisteredCpeUtilUpAllocRelMill.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeUtilUpAllocRelMill.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeUtilDownTrafficKbps_Type = Integer32
_Winlink1000HbsAirRegisteredCpeUtilDownTrafficKbps_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeUtilDownTrafficKbps = _Winlink1000HbsAirRegisteredCpeUtilDownTrafficKbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 36),
    _Winlink1000HbsAirRegisteredCpeUtilDownTrafficKbps_Type()
)
winlink1000HbsAirRegisteredCpeUtilDownTrafficKbps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeUtilDownTrafficKbps.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeUtilUpTrafficKbps_Type = Integer32
_Winlink1000HbsAirRegisteredCpeUtilUpTrafficKbps_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeUtilUpTrafficKbps = _Winlink1000HbsAirRegisteredCpeUtilUpTrafficKbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 37),
    _Winlink1000HbsAirRegisteredCpeUtilUpTrafficKbps_Type()
)
winlink1000HbsAirRegisteredCpeUtilUpTrafficKbps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeUtilUpTrafficKbps.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeUtilCompressedMon_Type = OctetString
_Winlink1000HbsAirRegisteredCpeUtilCompressedMon_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeUtilCompressedMon = _Winlink1000HbsAirRegisteredCpeUtilCompressedMon_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 38),
    _Winlink1000HbsAirRegisteredCpeUtilCompressedMon_Type()
)
winlink1000HbsAirRegisteredCpeUtilCompressedMon.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeUtilCompressedMon.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeBsaAzimuth_Type = Integer32
_Winlink1000HbsAirRegisteredCpeBsaAzimuth_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeBsaAzimuth = _Winlink1000HbsAirRegisteredCpeBsaAzimuth_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 39),
    _Winlink1000HbsAirRegisteredCpeBsaAzimuth_Type()
)
winlink1000HbsAirRegisteredCpeBsaAzimuth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeBsaAzimuth.setStatus("mandatory")


class _Winlink1000HbsAirRegisteredCpe1588TCPerformance_Type(Integer32):
    """Custom type winlink1000HbsAirRegisteredCpe1588TCPerformance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("high", 1),
          ("low", 2),
          ("notApplicable", 3))
    )


_Winlink1000HbsAirRegisteredCpe1588TCPerformance_Type.__name__ = "Integer32"
_Winlink1000HbsAirRegisteredCpe1588TCPerformance_Object = MibTableColumn
winlink1000HbsAirRegisteredCpe1588TCPerformance = _Winlink1000HbsAirRegisteredCpe1588TCPerformance_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 40),
    _Winlink1000HbsAirRegisteredCpe1588TCPerformance_Type()
)
winlink1000HbsAirRegisteredCpe1588TCPerformance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpe1588TCPerformance.setStatus("mandatory")


class _Winlink1000HbsAirRegisteredCpeSyncEPerformance_Type(Integer32):
    """Custom type winlink1000HbsAirRegisteredCpeSyncEPerformance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("high", 1),
          ("low", 2),
          ("holdover", 3),
          ("syncEFailure", 4),
          ("notApplicable", 5),
          ("refClk", 6))
    )


_Winlink1000HbsAirRegisteredCpeSyncEPerformance_Type.__name__ = "Integer32"
_Winlink1000HbsAirRegisteredCpeSyncEPerformance_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeSyncEPerformance = _Winlink1000HbsAirRegisteredCpeSyncEPerformance_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 41),
    _Winlink1000HbsAirRegisteredCpeSyncEPerformance_Type()
)
winlink1000HbsAirRegisteredCpeSyncEPerformance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeSyncEPerformance.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeProductName_Type = DisplayString
_Winlink1000HbsAirRegisteredCpeProductName_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeProductName = _Winlink1000HbsAirRegisteredCpeProductName_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 42),
    _Winlink1000HbsAirRegisteredCpeProductName_Type()
)
winlink1000HbsAirRegisteredCpeProductName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeProductName.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeIpAddress_Type = DisplayString
_Winlink1000HbsAirRegisteredCpeIpAddress_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeIpAddress = _Winlink1000HbsAirRegisteredCpeIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 43),
    _Winlink1000HbsAirRegisteredCpeIpAddress_Type()
)
winlink1000HbsAirRegisteredCpeIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeIpAddress.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeIpAddressV6_Type = DisplayString
_Winlink1000HbsAirRegisteredCpeIpAddressV6_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeIpAddressV6 = _Winlink1000HbsAirRegisteredCpeIpAddressV6_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 44),
    _Winlink1000HbsAirRegisteredCpeIpAddressV6_Type()
)
winlink1000HbsAirRegisteredCpeIpAddressV6.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeIpAddressV6.setStatus("mandatory")
_Winlink1000HbsAirRegisteredCpeCarrierId_Type = Integer32
_Winlink1000HbsAirRegisteredCpeCarrierId_Object = MibTableColumn
winlink1000HbsAirRegisteredCpeCarrierId = _Winlink1000HbsAirRegisteredCpeCarrierId_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 37, 1, 45),
    _Winlink1000HbsAirRegisteredCpeCarrierId_Type()
)
winlink1000HbsAirRegisteredCpeCarrierId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirRegisteredCpeCarrierId.setStatus("mandatory")
_Winlink1000HbsAirNumberOfRegisteredCpes_Type = Integer32
_Winlink1000HbsAirNumberOfRegisteredCpes_Object = MibScalar
winlink1000HbsAirNumberOfRegisteredCpes = _Winlink1000HbsAirNumberOfRegisteredCpes_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 38),
    _Winlink1000HbsAirNumberOfRegisteredCpes_Type()
)
winlink1000HbsAirNumberOfRegisteredCpes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirNumberOfRegisteredCpes.setStatus("mandatory")
_Winlink1000HbsAirNumberOfRegisteredActiveCpes_Type = Integer32
_Winlink1000HbsAirNumberOfRegisteredActiveCpes_Object = MibScalar
winlink1000HbsAirNumberOfRegisteredActiveCpes = _Winlink1000HbsAirNumberOfRegisteredActiveCpes_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 39),
    _Winlink1000HbsAirNumberOfRegisteredActiveCpes_Type()
)
winlink1000HbsAirNumberOfRegisteredActiveCpes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirNumberOfRegisteredActiveCpes.setStatus("mandatory")
_Winlink1000HbsAirCarrierTable_Object = MibTable
winlink1000HbsAirCarrierTable = _Winlink1000HbsAirCarrierTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 40)
)
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierTable.setStatus("mandatory")
_Winlink1000HbsAirCarrierEntry_Object = MibTableRow
winlink1000HbsAirCarrierEntry = _Winlink1000HbsAirCarrierEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 40, 1)
)
winlink1000HbsAirCarrierEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsAirCarrierIndex"),
)
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierEntry.setStatus("mandatory")


class _Winlink1000HbsAirCarrierIndex_Type(Integer32):
    """Custom type winlink1000HbsAirCarrierIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("carrier1", 1),
          ("carrier2", 2))
    )


_Winlink1000HbsAirCarrierIndex_Type.__name__ = "Integer32"
_Winlink1000HbsAirCarrierIndex_Object = MibTableColumn
winlink1000HbsAirCarrierIndex = _Winlink1000HbsAirCarrierIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 40, 1, 1),
    _Winlink1000HbsAirCarrierIndex_Type()
)
winlink1000HbsAirCarrierIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierIndex.setStatus("mandatory")


class _Winlink1000HbsAirCarrierState_Type(Integer32):
    """Custom type winlink1000HbsAirCarrierState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("init", 1),
          ("bitFailed", 2),
          ("inactive", 3),
          ("spectrumMeasurement", 4),
          ("scanning", 5),
          ("cac", 6),
          ("transceiving", 7),
          ("standBy", 8),
          ("rawAlignment", 9),
          ("deviceNotReachable", 10),
          ("tvwsDbDisabled", 11),
          ("unauthorized", 12),
          ("fail", 13),
          ("linkDown", 14),
          ("regulationMismatch", 15),
          ("bandSelectionRequired", 16))
    )


_Winlink1000HbsAirCarrierState_Type.__name__ = "Integer32"
_Winlink1000HbsAirCarrierState_Object = MibTableColumn
winlink1000HbsAirCarrierState = _Winlink1000HbsAirCarrierState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 40, 1, 2),
    _Winlink1000HbsAirCarrierState_Type()
)
winlink1000HbsAirCarrierState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierState.setStatus("mandatory")


class _Winlink1000HbsAirCarrierOpMode_Type(Integer32):
    """Custom type winlink1000HbsAirCarrierOpMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("inactive", 1),
          ("active", 2))
    )


_Winlink1000HbsAirCarrierOpMode_Type.__name__ = "Integer32"
_Winlink1000HbsAirCarrierOpMode_Object = MibTableColumn
winlink1000HbsAirCarrierOpMode = _Winlink1000HbsAirCarrierOpMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 40, 1, 3),
    _Winlink1000HbsAirCarrierOpMode_Type()
)
winlink1000HbsAirCarrierOpMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierOpMode.setStatus("mandatory")
_Winlink1000HbsAirCarrierSectorCbwSupportedStr_Type = DisplayString
_Winlink1000HbsAirCarrierSectorCbwSupportedStr_Object = MibTableColumn
winlink1000HbsAirCarrierSectorCbwSupportedStr = _Winlink1000HbsAirCarrierSectorCbwSupportedStr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 40, 1, 4),
    _Winlink1000HbsAirCarrierSectorCbwSupportedStr_Type()
)
winlink1000HbsAirCarrierSectorCbwSupportedStr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierSectorCbwSupportedStr.setStatus("mandatory")
_Winlink1000HbsAirCarrierComboSwitchSectorFreqBandIdStr_Type = DisplayString
_Winlink1000HbsAirCarrierComboSwitchSectorFreqBandIdStr_Object = MibTableColumn
winlink1000HbsAirCarrierComboSwitchSectorFreqBandIdStr = _Winlink1000HbsAirCarrierComboSwitchSectorFreqBandIdStr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 40, 1, 5),
    _Winlink1000HbsAirCarrierComboSwitchSectorFreqBandIdStr_Type()
)
winlink1000HbsAirCarrierComboSwitchSectorFreqBandIdStr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierComboSwitchSectorFreqBandIdStr.setStatus("mandatory")


class _Winlink1000HbsAirCarrierDelayVsTputOpt_Type(Integer32):
    """Custom type winlink1000HbsAirCarrierDelayVsTputOpt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("delaySensitivity", 1),
          ("throughputOptimized", 2))
    )


_Winlink1000HbsAirCarrierDelayVsTputOpt_Type.__name__ = "Integer32"
_Winlink1000HbsAirCarrierDelayVsTputOpt_Object = MibTableColumn
winlink1000HbsAirCarrierDelayVsTputOpt = _Winlink1000HbsAirCarrierDelayVsTputOpt_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 40, 1, 6),
    _Winlink1000HbsAirCarrierDelayVsTputOpt_Type()
)
winlink1000HbsAirCarrierDelayVsTputOpt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierDelayVsTputOpt.setStatus("mandatory")


class _Winlink1000HbsAirCarrierAtpcEnable_Type(Integer32):
    """Custom type winlink1000HbsAirCarrierAtpcEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("static", 2),
          ("dynamic", 3),
          ("notSupported", 4))
    )


_Winlink1000HbsAirCarrierAtpcEnable_Type.__name__ = "Integer32"
_Winlink1000HbsAirCarrierAtpcEnable_Object = MibTableColumn
winlink1000HbsAirCarrierAtpcEnable = _Winlink1000HbsAirCarrierAtpcEnable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 40, 1, 7),
    _Winlink1000HbsAirCarrierAtpcEnable_Type()
)
winlink1000HbsAirCarrierAtpcEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierAtpcEnable.setStatus("mandatory")
_Winlink1000HbsAirCarrierAtpcTargetMCS_Type = Integer32
_Winlink1000HbsAirCarrierAtpcTargetMCS_Object = MibTableColumn
winlink1000HbsAirCarrierAtpcTargetMCS = _Winlink1000HbsAirCarrierAtpcTargetMCS_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 40, 1, 8),
    _Winlink1000HbsAirCarrierAtpcTargetMCS_Type()
)
winlink1000HbsAirCarrierAtpcTargetMCS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierAtpcTargetMCS.setStatus("mandatory")
_Winlink1000HbsAirCarrierAtpcMaxAllowedRate_Type = Integer32
_Winlink1000HbsAirCarrierAtpcMaxAllowedRate_Object = MibTableColumn
winlink1000HbsAirCarrierAtpcMaxAllowedRate = _Winlink1000HbsAirCarrierAtpcMaxAllowedRate_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 40, 1, 9),
    _Winlink1000HbsAirCarrierAtpcMaxAllowedRate_Type()
)
winlink1000HbsAirCarrierAtpcMaxAllowedRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierAtpcMaxAllowedRate.setStatus("mandatory")
_Winlink1000HbsAirCarrierAvailResourcesDL_Type = Integer32
_Winlink1000HbsAirCarrierAvailResourcesDL_Object = MibTableColumn
winlink1000HbsAirCarrierAvailResourcesDL = _Winlink1000HbsAirCarrierAvailResourcesDL_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 40, 1, 10),
    _Winlink1000HbsAirCarrierAvailResourcesDL_Type()
)
winlink1000HbsAirCarrierAvailResourcesDL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierAvailResourcesDL.setStatus("mandatory")
_Winlink1000HbsAirCarrierAvailResourcesUL_Type = Integer32
_Winlink1000HbsAirCarrierAvailResourcesUL_Object = MibTableColumn
winlink1000HbsAirCarrierAvailResourcesUL = _Winlink1000HbsAirCarrierAvailResourcesUL_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 40, 1, 11),
    _Winlink1000HbsAirCarrierAvailResourcesUL_Type()
)
winlink1000HbsAirCarrierAvailResourcesUL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierAvailResourcesUL.setStatus("mandatory")
_Winlink1000HbsAirCarrierBEPercentage_Type = DisplayString
_Winlink1000HbsAirCarrierBEPercentage_Object = MibTableColumn
winlink1000HbsAirCarrierBEPercentage = _Winlink1000HbsAirCarrierBEPercentage_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 40, 1, 12),
    _Winlink1000HbsAirCarrierBEPercentage_Type()
)
winlink1000HbsAirCarrierBEPercentage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierBEPercentage.setStatus("mandatory")
_Winlink1000HbsAirCarrierMaxNumOfBeHsus_Type = Integer32
_Winlink1000HbsAirCarrierMaxNumOfBeHsus_Object = MibTableColumn
winlink1000HbsAirCarrierMaxNumOfBeHsus = _Winlink1000HbsAirCarrierMaxNumOfBeHsus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 40, 1, 13),
    _Winlink1000HbsAirCarrierMaxNumOfBeHsus_Type()
)
winlink1000HbsAirCarrierMaxNumOfBeHsus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierMaxNumOfBeHsus.setStatus("mandatory")
_Winlink1000HbsAirAggregatedReferenceCounterUplink_Type = Counter32
_Winlink1000HbsAirAggregatedReferenceCounterUplink_Object = MibScalar
winlink1000HbsAirAggregatedReferenceCounterUplink = _Winlink1000HbsAirAggregatedReferenceCounterUplink_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 41),
    _Winlink1000HbsAirAggregatedReferenceCounterUplink_Type()
)
winlink1000HbsAirAggregatedReferenceCounterUplink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirAggregatedReferenceCounterUplink.setStatus("mandatory")
_Winlink1000HbsAirCarrierInformationTable_Object = MibTable
winlink1000HbsAirCarrierInformationTable = _Winlink1000HbsAirCarrierInformationTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 42)
)
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierInformationTable.setStatus("mandatory")
_Winlink1000HbsAirCarrierInformationEntry_Object = MibTableRow
winlink1000HbsAirCarrierInformationEntry = _Winlink1000HbsAirCarrierInformationEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 42, 1)
)
winlink1000HbsAirCarrierInformationEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsAirCarrierInformationIndex"),
)
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierInformationEntry.setStatus("mandatory")


class _Winlink1000HbsAirCarrierInformationIndex_Type(Integer32):
    """Custom type winlink1000HbsAirCarrierInformationIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("carrier1", 1),
          ("carrier2", 2))
    )


_Winlink1000HbsAirCarrierInformationIndex_Type.__name__ = "Integer32"
_Winlink1000HbsAirCarrierInformationIndex_Object = MibTableColumn
winlink1000HbsAirCarrierInformationIndex = _Winlink1000HbsAirCarrierInformationIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 42, 1, 1),
    _Winlink1000HbsAirCarrierInformationIndex_Type()
)
winlink1000HbsAirCarrierInformationIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierInformationIndex.setStatus("mandatory")
_Winlink1000HbsAirCarrierInformationSubBandDescription_Type = DisplayString
_Winlink1000HbsAirCarrierInformationSubBandDescription_Object = MibTableColumn
winlink1000HbsAirCarrierInformationSubBandDescription = _Winlink1000HbsAirCarrierInformationSubBandDescription_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 42, 1, 2),
    _Winlink1000HbsAirCarrierInformationSubBandDescription_Type()
)
winlink1000HbsAirCarrierInformationSubBandDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierInformationSubBandDescription.setStatus("mandatory")


class _Winlink1000HbsAirCarrierInformationState_Type(Integer32):
    """Custom type winlink1000HbsAirCarrierInformationState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("init", 1),
          ("bitFailed", 2),
          ("inactive", 3),
          ("spectrumMeasurement", 4),
          ("scanning", 5),
          ("cac", 6),
          ("transceiving", 7),
          ("standBy", 8),
          ("rawAlignment", 9),
          ("deviceNotReachable", 10),
          ("tvwsDbDisabled", 11),
          ("unauthorized", 12),
          ("fail", 13),
          ("linkDown", 14),
          ("regulationMismatch", 15),
          ("bandSelectionRequired", 16))
    )


_Winlink1000HbsAirCarrierInformationState_Type.__name__ = "Integer32"
_Winlink1000HbsAirCarrierInformationState_Object = MibTableColumn
winlink1000HbsAirCarrierInformationState = _Winlink1000HbsAirCarrierInformationState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 42, 1, 3),
    _Winlink1000HbsAirCarrierInformationState_Type()
)
winlink1000HbsAirCarrierInformationState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierInformationState.setStatus("mandatory")
_Winlink1000HbsAirCarrierInformationFrequency_Type = Integer32
_Winlink1000HbsAirCarrierInformationFrequency_Object = MibTableColumn
winlink1000HbsAirCarrierInformationFrequency = _Winlink1000HbsAirCarrierInformationFrequency_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 42, 1, 4),
    _Winlink1000HbsAirCarrierInformationFrequency_Type()
)
winlink1000HbsAirCarrierInformationFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierInformationFrequency.setStatus("mandatory")
_Winlink1000HbsAirCarrierInformationTxPower_Type = Integer32
_Winlink1000HbsAirCarrierInformationTxPower_Object = MibTableColumn
winlink1000HbsAirCarrierInformationTxPower = _Winlink1000HbsAirCarrierInformationTxPower_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 42, 1, 5),
    _Winlink1000HbsAirCarrierInformationTxPower_Type()
)
winlink1000HbsAirCarrierInformationTxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierInformationTxPower.setStatus("mandatory")
_Winlink1000HbsAirCarrierInformationTotalTxPower_Type = Integer32
_Winlink1000HbsAirCarrierInformationTotalTxPower_Object = MibTableColumn
winlink1000HbsAirCarrierInformationTotalTxPower = _Winlink1000HbsAirCarrierInformationTotalTxPower_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 42, 1, 6),
    _Winlink1000HbsAirCarrierInformationTotalTxPower_Type()
)
winlink1000HbsAirCarrierInformationTotalTxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierInformationTotalTxPower.setStatus("mandatory")
_Winlink1000HbsAirCarrierInformationChannelBandwidth_Type = Integer32
_Winlink1000HbsAirCarrierInformationChannelBandwidth_Object = MibTableColumn
winlink1000HbsAirCarrierInformationChannelBandwidth = _Winlink1000HbsAirCarrierInformationChannelBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 42, 1, 7),
    _Winlink1000HbsAirCarrierInformationChannelBandwidth_Type()
)
winlink1000HbsAirCarrierInformationChannelBandwidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierInformationChannelBandwidth.setStatus("mandatory")
_Winlink1000HbsAirCarrierInformationAntennaGain_Type = Integer32
_Winlink1000HbsAirCarrierInformationAntennaGain_Object = MibTableColumn
winlink1000HbsAirCarrierInformationAntennaGain = _Winlink1000HbsAirCarrierInformationAntennaGain_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 42, 1, 8),
    _Winlink1000HbsAirCarrierInformationAntennaGain_Type()
)
winlink1000HbsAirCarrierInformationAntennaGain.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierInformationAntennaGain.setStatus("mandatory")
_Winlink1000HbsAirCarrierInformationFeederLoss_Type = Integer32
_Winlink1000HbsAirCarrierInformationFeederLoss_Object = MibTableColumn
winlink1000HbsAirCarrierInformationFeederLoss = _Winlink1000HbsAirCarrierInformationFeederLoss_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 42, 1, 9),
    _Winlink1000HbsAirCarrierInformationFeederLoss_Type()
)
winlink1000HbsAirCarrierInformationFeederLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierInformationFeederLoss.setStatus("mandatory")
_Winlink1000HbsAirCarrierInformationMaxEirp_Type = Integer32
_Winlink1000HbsAirCarrierInformationMaxEirp_Object = MibTableColumn
winlink1000HbsAirCarrierInformationMaxEirp = _Winlink1000HbsAirCarrierInformationMaxEirp_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 42, 1, 10),
    _Winlink1000HbsAirCarrierInformationMaxEirp_Type()
)
winlink1000HbsAirCarrierInformationMaxEirp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierInformationMaxEirp.setStatus("mandatory")
_Winlink1000HbsAirCarrierInformationDfsState_Type = Integer32
_Winlink1000HbsAirCarrierInformationDfsState_Object = MibTableColumn
winlink1000HbsAirCarrierInformationDfsState = _Winlink1000HbsAirCarrierInformationDfsState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 42, 1, 11),
    _Winlink1000HbsAirCarrierInformationDfsState_Type()
)
winlink1000HbsAirCarrierInformationDfsState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierInformationDfsState.setStatus("mandatory")


class _Winlink1000HbsAirCarrierInformationAtpcEnable_Type(Integer32):
    """Custom type winlink1000HbsAirCarrierInformationAtpcEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("static", 2),
          ("dynamic", 3),
          ("notSupported", 4))
    )


_Winlink1000HbsAirCarrierInformationAtpcEnable_Type.__name__ = "Integer32"
_Winlink1000HbsAirCarrierInformationAtpcEnable_Object = MibTableColumn
winlink1000HbsAirCarrierInformationAtpcEnable = _Winlink1000HbsAirCarrierInformationAtpcEnable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 42, 1, 12),
    _Winlink1000HbsAirCarrierInformationAtpcEnable_Type()
)
winlink1000HbsAirCarrierInformationAtpcEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierInformationAtpcEnable.setStatus("mandatory")


class _Winlink1000HbsAirCarrierInformationDelayVsTputOpt_Type(Integer32):
    """Custom type winlink1000HbsAirCarrierInformationDelayVsTputOpt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("delaySensitivity", 1),
          ("throughputOptimized", 2))
    )


_Winlink1000HbsAirCarrierInformationDelayVsTputOpt_Type.__name__ = "Integer32"
_Winlink1000HbsAirCarrierInformationDelayVsTputOpt_Object = MibTableColumn
winlink1000HbsAirCarrierInformationDelayVsTputOpt = _Winlink1000HbsAirCarrierInformationDelayVsTputOpt_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 42, 1, 13),
    _Winlink1000HbsAirCarrierInformationDelayVsTputOpt_Type()
)
winlink1000HbsAirCarrierInformationDelayVsTputOpt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierInformationDelayVsTputOpt.setStatus("mandatory")
_Winlink1000HbsAirCarrierInformationAvailResourcesDL_Type = Integer32
_Winlink1000HbsAirCarrierInformationAvailResourcesDL_Object = MibTableColumn
winlink1000HbsAirCarrierInformationAvailResourcesDL = _Winlink1000HbsAirCarrierInformationAvailResourcesDL_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 42, 1, 14),
    _Winlink1000HbsAirCarrierInformationAvailResourcesDL_Type()
)
winlink1000HbsAirCarrierInformationAvailResourcesDL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierInformationAvailResourcesDL.setStatus("mandatory")
_Winlink1000HbsAirCarrierInformationAvailResourcesUL_Type = Integer32
_Winlink1000HbsAirCarrierInformationAvailResourcesUL_Object = MibTableColumn
winlink1000HbsAirCarrierInformationAvailResourcesUL = _Winlink1000HbsAirCarrierInformationAvailResourcesUL_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 42, 1, 15),
    _Winlink1000HbsAirCarrierInformationAvailResourcesUL_Type()
)
winlink1000HbsAirCarrierInformationAvailResourcesUL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierInformationAvailResourcesUL.setStatus("mandatory")
_Winlink1000HbsAirCarrierInformationBEPercentage_Type = DisplayString
_Winlink1000HbsAirCarrierInformationBEPercentage_Object = MibTableColumn
winlink1000HbsAirCarrierInformationBEPercentage = _Winlink1000HbsAirCarrierInformationBEPercentage_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 42, 1, 16),
    _Winlink1000HbsAirCarrierInformationBEPercentage_Type()
)
winlink1000HbsAirCarrierInformationBEPercentage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierInformationBEPercentage.setStatus("mandatory")
_Winlink1000HbsAirSecuredSyncType_Type = Integer32
_Winlink1000HbsAirSecuredSyncType_Object = MibScalar
winlink1000HbsAirSecuredSyncType = _Winlink1000HbsAirSecuredSyncType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 43),
    _Winlink1000HbsAirSecuredSyncType_Type()
)
winlink1000HbsAirSecuredSyncType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirSecuredSyncType.setStatus("mandatory")
_Winlink1000HbsAirTvws_ObjectIdentity = ObjectIdentity
winlink1000HbsAirTvws = _Winlink1000HbsAirTvws_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 44)
)


class _Winlink1000HbsAirTvwsDatabaseSupport_Type(Integer32):
    """Custom type winlink1000HbsAirTvwsDatabaseSupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notSupported", 1),
          ("nominetFcc", 2),
          ("nominetEtsi", 3))
    )


_Winlink1000HbsAirTvwsDatabaseSupport_Type.__name__ = "Integer32"
_Winlink1000HbsAirTvwsDatabaseSupport_Object = MibScalar
winlink1000HbsAirTvwsDatabaseSupport = _Winlink1000HbsAirTvwsDatabaseSupport_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 44, 1),
    _Winlink1000HbsAirTvwsDatabaseSupport_Type()
)
winlink1000HbsAirTvwsDatabaseSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirTvwsDatabaseSupport.setStatus("mandatory")
_Winlink1000HbsAirTvwsStatus_Type = DisplayString
_Winlink1000HbsAirTvwsStatus_Object = MibScalar
winlink1000HbsAirTvwsStatus = _Winlink1000HbsAirTvwsStatus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 44, 2),
    _Winlink1000HbsAirTvwsStatus_Type()
)
winlink1000HbsAirTvwsStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirTvwsStatus.setStatus("mandatory")


class _Winlink1000HbsAirTvwsReceiverMode_Type(Integer32):
    """Custom type winlink1000HbsAirTvwsReceiverMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("optimizedSensitivity", 1),
          ("optimizedBlockPerf", 2))
    )


_Winlink1000HbsAirTvwsReceiverMode_Type.__name__ = "Integer32"
_Winlink1000HbsAirTvwsReceiverMode_Object = MibScalar
winlink1000HbsAirTvwsReceiverMode = _Winlink1000HbsAirTvwsReceiverMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 44, 3),
    _Winlink1000HbsAirTvwsReceiverMode_Type()
)
winlink1000HbsAirTvwsReceiverMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirTvwsReceiverMode.setStatus("mandatory")
_Winlink1000HbsAirAntennaTable_Object = MibTable
winlink1000HbsAirAntennaTable = _Winlink1000HbsAirAntennaTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 45)
)
if mibBuilder.loadTexts:
    winlink1000HbsAirAntennaTable.setStatus("mandatory")
_Winlink1000HbsAirAntennaEntry_Object = MibTableRow
winlink1000HbsAirAntennaEntry = _Winlink1000HbsAirAntennaEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 45, 1)
)
winlink1000HbsAirAntennaEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsAirAntennaIndex"),
)
if mibBuilder.loadTexts:
    winlink1000HbsAirAntennaEntry.setStatus("mandatory")


class _Winlink1000HbsAirAntennaIndex_Type(Integer32):
    """Custom type winlink1000HbsAirAntennaIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000HbsAirAntennaIndex_Type.__name__ = "Integer32"
_Winlink1000HbsAirAntennaIndex_Object = MibTableColumn
winlink1000HbsAirAntennaIndex = _Winlink1000HbsAirAntennaIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 45, 1, 1),
    _Winlink1000HbsAirAntennaIndex_Type()
)
winlink1000HbsAirAntennaIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirAntennaIndex.setStatus("mandatory")
_Winlink1000HbsAirAntennaGain_Type = Integer32
_Winlink1000HbsAirAntennaGain_Object = MibTableColumn
winlink1000HbsAirAntennaGain = _Winlink1000HbsAirAntennaGain_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 45, 1, 2),
    _Winlink1000HbsAirAntennaGain_Type()
)
winlink1000HbsAirAntennaGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirAntennaGain.setStatus("mandatory")
_Winlink1000HbsAirAntennaFeederLoss_Type = Integer32
_Winlink1000HbsAirAntennaFeederLoss_Object = MibTableColumn
winlink1000HbsAirAntennaFeederLoss = _Winlink1000HbsAirAntennaFeederLoss_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 45, 1, 3),
    _Winlink1000HbsAirAntennaFeederLoss_Type()
)
winlink1000HbsAirAntennaFeederLoss.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirAntennaFeederLoss.setStatus("mandatory")
_Winlink1000HbsAirAntennaBeamwidth_Type = Integer32
_Winlink1000HbsAirAntennaBeamwidth_Object = MibTableColumn
winlink1000HbsAirAntennaBeamwidth = _Winlink1000HbsAirAntennaBeamwidth_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 45, 1, 4),
    _Winlink1000HbsAirAntennaBeamwidth_Type()
)
winlink1000HbsAirAntennaBeamwidth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirAntennaBeamwidth.setStatus("mandatory")
_Winlink1000HbsAirAntennaAzimuth_Type = Integer32
_Winlink1000HbsAirAntennaAzimuth_Object = MibTableColumn
winlink1000HbsAirAntennaAzimuth = _Winlink1000HbsAirAntennaAzimuth_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 45, 1, 5),
    _Winlink1000HbsAirAntennaAzimuth_Type()
)
winlink1000HbsAirAntennaAzimuth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirAntennaAzimuth.setStatus("mandatory")
_Winlink1000HbsAirAntennaName_Type = DisplayString
_Winlink1000HbsAirAntennaName_Object = MibTableColumn
winlink1000HbsAirAntennaName = _Winlink1000HbsAirAntennaName_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 45, 1, 6),
    _Winlink1000HbsAirAntennaName_Type()
)
winlink1000HbsAirAntennaName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirAntennaName.setStatus("mandatory")


class _Winlink1000HbsAirAntennaPortModeH_Type(Integer32):
    """Custom type winlink1000HbsAirAntennaPortModeH based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("notConnected", 2),
          ("connected", 3),
          ("terminated", 4))
    )


_Winlink1000HbsAirAntennaPortModeH_Type.__name__ = "Integer32"
_Winlink1000HbsAirAntennaPortModeH_Object = MibTableColumn
winlink1000HbsAirAntennaPortModeH = _Winlink1000HbsAirAntennaPortModeH_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 45, 1, 7),
    _Winlink1000HbsAirAntennaPortModeH_Type()
)
winlink1000HbsAirAntennaPortModeH.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirAntennaPortModeH.setStatus("mandatory")


class _Winlink1000HbsAirAntennaPortModeV_Type(Integer32):
    """Custom type winlink1000HbsAirAntennaPortModeV based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("notConnected", 2),
          ("connected", 3),
          ("terminated", 4))
    )


_Winlink1000HbsAirAntennaPortModeV_Type.__name__ = "Integer32"
_Winlink1000HbsAirAntennaPortModeV_Object = MibTableColumn
winlink1000HbsAirAntennaPortModeV = _Winlink1000HbsAirAntennaPortModeV_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 45, 1, 8),
    _Winlink1000HbsAirAntennaPortModeV_Type()
)
winlink1000HbsAirAntennaPortModeV.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirAntennaPortModeV.setStatus("mandatory")


class _Winlink1000HbsAirAntennaFormFactor_Type(Integer32):
    """Custom type winlink1000HbsAirAntennaFormFactor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("integrated", 2),
          ("external", 3),
          ("externalSlave", 4))
    )


_Winlink1000HbsAirAntennaFormFactor_Type.__name__ = "Integer32"
_Winlink1000HbsAirAntennaFormFactor_Object = MibTableColumn
winlink1000HbsAirAntennaFormFactor = _Winlink1000HbsAirAntennaFormFactor_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 45, 1, 9),
    _Winlink1000HbsAirAntennaFormFactor_Type()
)
winlink1000HbsAirAntennaFormFactor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAirAntennaFormFactor.setStatus("mandatory")
_Winlink1000HbsAirCarrierIfTable_Object = MibTable
winlink1000HbsAirCarrierIfTable = _Winlink1000HbsAirCarrierIfTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 46)
)
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierIfTable.setStatus("mandatory")
_Winlink1000HbsAirCarrierIfEntry_Object = MibTableRow
winlink1000HbsAirCarrierIfEntry = _Winlink1000HbsAirCarrierIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 46, 1)
)
winlink1000HbsAirCarrierIfEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsAirCarrierIfIndex"),
)
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierIfEntry.setStatus("mandatory")


class _Winlink1000HbsAirCarrierIfIndex_Type(Integer32):
    """Custom type winlink1000HbsAirCarrierIfIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("carrier1", 1),
          ("carrier2", 2))
    )


_Winlink1000HbsAirCarrierIfIndex_Type.__name__ = "Integer32"
_Winlink1000HbsAirCarrierIfIndex_Object = MibTableColumn
winlink1000HbsAirCarrierIfIndex = _Winlink1000HbsAirCarrierIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 46, 1, 1),
    _Winlink1000HbsAirCarrierIfIndex_Type()
)
winlink1000HbsAirCarrierIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierIfIndex.setStatus("mandatory")
_Winlink1000HbsAirCarrierIfDLUtilPct_Type = Integer32
_Winlink1000HbsAirCarrierIfDLUtilPct_Object = MibTableColumn
winlink1000HbsAirCarrierIfDLUtilPct = _Winlink1000HbsAirCarrierIfDLUtilPct_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 46, 1, 2),
    _Winlink1000HbsAirCarrierIfDLUtilPct_Type()
)
winlink1000HbsAirCarrierIfDLUtilPct.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierIfDLUtilPct.setStatus("mandatory")
_Winlink1000HbsAirCarrierIfULUtilPct_Type = Integer32
_Winlink1000HbsAirCarrierIfULUtilPct_Object = MibTableColumn
winlink1000HbsAirCarrierIfULUtilPct = _Winlink1000HbsAirCarrierIfULUtilPct_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 46, 1, 3),
    _Winlink1000HbsAirCarrierIfULUtilPct_Type()
)
winlink1000HbsAirCarrierIfULUtilPct.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirCarrierIfULUtilPct.setStatus("mandatory")
_Winlink1000HbsAirEnhancedAllowableChannel_Type = DisplayString
_Winlink1000HbsAirEnhancedAllowableChannel_Object = MibScalar
winlink1000HbsAirEnhancedAllowableChannel = _Winlink1000HbsAirEnhancedAllowableChannel_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 1, 47),
    _Winlink1000HbsAirEnhancedAllowableChannel_Type()
)
winlink1000HbsAirEnhancedAllowableChannel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsAirEnhancedAllowableChannel.setStatus("mandatory")
_Winlink1000HbsBridge_ObjectIdentity = ObjectIdentity
winlink1000HbsBridge = _Winlink1000HbsBridge_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2)
)
_Winlink1000HbsBridgeAgingTime_Type = Integer32
_Winlink1000HbsBridgeAgingTime_Object = MibScalar
winlink1000HbsBridgeAgingTime = _Winlink1000HbsBridgeAgingTime_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 1),
    _Winlink1000HbsBridgeAgingTime_Type()
)
winlink1000HbsBridgeAgingTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeAgingTime.setStatus("mandatory")
_Winlink1000HbsBridgeVlanTable_Object = MibTable
winlink1000HbsBridgeVlanTable = _Winlink1000HbsBridgeVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 2)
)
if mibBuilder.loadTexts:
    winlink1000HbsBridgeVlanTable.setStatus("mandatory")
_Winlink1000HbsBridgeVlanEntry_Object = MibTableRow
winlink1000HbsBridgeVlanEntry = _Winlink1000HbsBridgeVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 2, 1)
)
winlink1000HbsBridgeVlanEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsBridgeVlanIndex"),
)
if mibBuilder.loadTexts:
    winlink1000HbsBridgeVlanEntry.setStatus("mandatory")


class _Winlink1000HbsBridgeVlanIndex_Type(Integer32):
    """Custom type winlink1000HbsBridgeVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000HbsBridgeVlanIndex_Type.__name__ = "Integer32"
_Winlink1000HbsBridgeVlanIndex_Object = MibTableColumn
winlink1000HbsBridgeVlanIndex = _Winlink1000HbsBridgeVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 2, 1, 1),
    _Winlink1000HbsBridgeVlanIndex_Type()
)
winlink1000HbsBridgeVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeVlanIndex.setStatus("mandatory")


class _Winlink1000HbsBridgeVlanIngress_Type(Integer32):
    """Custom type winlink1000HbsBridgeVlanIngress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("transparent", 1),
          ("tag", 2))
    )


_Winlink1000HbsBridgeVlanIngress_Type.__name__ = "Integer32"
_Winlink1000HbsBridgeVlanIngress_Object = MibTableColumn
winlink1000HbsBridgeVlanIngress = _Winlink1000HbsBridgeVlanIngress_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 2, 1, 2),
    _Winlink1000HbsBridgeVlanIngress_Type()
)
winlink1000HbsBridgeVlanIngress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeVlanIngress.setStatus("mandatory")


class _Winlink1000HbsBridgeVlanEgress_Type(Integer32):
    """Custom type winlink1000HbsBridgeVlanEgress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("transparent", 1),
          ("unTag", 2))
    )


_Winlink1000HbsBridgeVlanEgress_Type.__name__ = "Integer32"
_Winlink1000HbsBridgeVlanEgress_Object = MibTableColumn
winlink1000HbsBridgeVlanEgress = _Winlink1000HbsBridgeVlanEgress_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 2, 1, 3),
    _Winlink1000HbsBridgeVlanEgress_Type()
)
winlink1000HbsBridgeVlanEgress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeVlanEgress.setStatus("mandatory")


class _Winlink1000HbsBridgeVlanFilterIn_Type(Integer32):
    """Custom type winlink1000HbsBridgeVlanFilterIn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_Winlink1000HbsBridgeVlanFilterIn_Type.__name__ = "Integer32"
_Winlink1000HbsBridgeVlanFilterIn_Object = MibTableColumn
winlink1000HbsBridgeVlanFilterIn = _Winlink1000HbsBridgeVlanFilterIn_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 2, 1, 4),
    _Winlink1000HbsBridgeVlanFilterIn_Type()
)
winlink1000HbsBridgeVlanFilterIn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeVlanFilterIn.setStatus("mandatory")


class _Winlink1000HbsBridgeVlanFilterOut_Type(Integer32):
    """Custom type winlink1000HbsBridgeVlanFilterOut based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_Winlink1000HbsBridgeVlanFilterOut_Type.__name__ = "Integer32"
_Winlink1000HbsBridgeVlanFilterOut_Object = MibTableColumn
winlink1000HbsBridgeVlanFilterOut = _Winlink1000HbsBridgeVlanFilterOut_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 2, 1, 5),
    _Winlink1000HbsBridgeVlanFilterOut_Type()
)
winlink1000HbsBridgeVlanFilterOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeVlanFilterOut.setStatus("mandatory")


class _Winlink1000HbsBridgeVlanDoubleTag_Type(Integer32):
    """Custom type winlink1000HbsBridgeVlanDoubleTag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_Winlink1000HbsBridgeVlanDoubleTag_Type.__name__ = "Integer32"
_Winlink1000HbsBridgeVlanDoubleTag_Object = MibTableColumn
winlink1000HbsBridgeVlanDoubleTag = _Winlink1000HbsBridgeVlanDoubleTag_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 2, 1, 6),
    _Winlink1000HbsBridgeVlanDoubleTag_Type()
)
winlink1000HbsBridgeVlanDoubleTag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeVlanDoubleTag.setStatus("mandatory")
_Winlink1000HbsBridgeVlanDefaultId_Type = Integer32
_Winlink1000HbsBridgeVlanDefaultId_Object = MibTableColumn
winlink1000HbsBridgeVlanDefaultId = _Winlink1000HbsBridgeVlanDefaultId_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 2, 1, 7),
    _Winlink1000HbsBridgeVlanDefaultId_Type()
)
winlink1000HbsBridgeVlanDefaultId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeVlanDefaultId.setStatus("mandatory")
_Winlink1000HbsBridgeMembershipTable_Object = MibTable
winlink1000HbsBridgeMembershipTable = _Winlink1000HbsBridgeMembershipTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 3)
)
if mibBuilder.loadTexts:
    winlink1000HbsBridgeMembershipTable.setStatus("mandatory")
_Winlink1000HbsBridgeMembershipEntry_Object = MibTableRow
winlink1000HbsBridgeMembershipEntry = _Winlink1000HbsBridgeMembershipEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 3, 1)
)
winlink1000HbsBridgeMembershipEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsBridgeMembershipIndex"),
)
if mibBuilder.loadTexts:
    winlink1000HbsBridgeMembershipEntry.setStatus("mandatory")


class _Winlink1000HbsBridgeMembershipIndex_Type(Integer32):
    """Custom type winlink1000HbsBridgeMembershipIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000HbsBridgeMembershipIndex_Type.__name__ = "Integer32"
_Winlink1000HbsBridgeMembershipIndex_Object = MibTableColumn
winlink1000HbsBridgeMembershipIndex = _Winlink1000HbsBridgeMembershipIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 3, 1, 1),
    _Winlink1000HbsBridgeMembershipIndex_Type()
)
winlink1000HbsBridgeMembershipIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeMembershipIndex.setStatus("mandatory")
_Winlink1000HbsBridgeMembershipState_Type = Gauge32
_Winlink1000HbsBridgeMembershipState_Object = MibTableColumn
winlink1000HbsBridgeMembershipState = _Winlink1000HbsBridgeMembershipState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 3, 1, 2),
    _Winlink1000HbsBridgeMembershipState_Type()
)
winlink1000HbsBridgeMembershipState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeMembershipState.setStatus("mandatory")
_Winlink1000HbsBridgeMembershipState2nd_Type = Gauge32
_Winlink1000HbsBridgeMembershipState2nd_Object = MibTableColumn
winlink1000HbsBridgeMembershipState2nd = _Winlink1000HbsBridgeMembershipState2nd_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 3, 1, 3),
    _Winlink1000HbsBridgeMembershipState2nd_Type()
)
winlink1000HbsBridgeMembershipState2nd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeMembershipState2nd.setStatus("mandatory")
_Winlink1000HbsBridgeMembershipState3rd_Type = Gauge32
_Winlink1000HbsBridgeMembershipState3rd_Object = MibTableColumn
winlink1000HbsBridgeMembershipState3rd = _Winlink1000HbsBridgeMembershipState3rd_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 3, 1, 4),
    _Winlink1000HbsBridgeMembershipState3rd_Type()
)
winlink1000HbsBridgeMembershipState3rd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeMembershipState3rd.setStatus("mandatory")


class _Winlink1000HbsBridgeFloodOverloadProtect_Type(Integer32):
    """Custom type winlink1000HbsBridgeFloodOverloadProtect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_Winlink1000HbsBridgeFloodOverloadProtect_Type.__name__ = "Integer32"
_Winlink1000HbsBridgeFloodOverloadProtect_Object = MibScalar
winlink1000HbsBridgeFloodOverloadProtect = _Winlink1000HbsBridgeFloodOverloadProtect_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 4),
    _Winlink1000HbsBridgeFloodOverloadProtect_Type()
)
winlink1000HbsBridgeFloodOverloadProtect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeFloodOverloadProtect.setStatus("mandatory")
_Winlink1000HbsBridgeEntireRestrictionTable_Type = OctetString
_Winlink1000HbsBridgeEntireRestrictionTable_Object = MibScalar
winlink1000HbsBridgeEntireRestrictionTable = _Winlink1000HbsBridgeEntireRestrictionTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 5),
    _Winlink1000HbsBridgeEntireRestrictionTable_Type()
)
winlink1000HbsBridgeEntireRestrictionTable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeEntireRestrictionTable.setStatus("mandatory")


class _Winlink1000HbsBridgeMulticastOverloadProtection_Type(Integer32):
    """Custom type winlink1000HbsBridgeMulticastOverloadProtection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_Winlink1000HbsBridgeMulticastOverloadProtection_Type.__name__ = "Integer32"
_Winlink1000HbsBridgeMulticastOverloadProtection_Object = MibScalar
winlink1000HbsBridgeMulticastOverloadProtection = _Winlink1000HbsBridgeMulticastOverloadProtection_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 6),
    _Winlink1000HbsBridgeMulticastOverloadProtection_Type()
)
winlink1000HbsBridgeMulticastOverloadProtection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeMulticastOverloadProtection.setStatus("mandatory")
_Winlink1000HbsBridgeFloodBroadcastLimit_Type = Integer32
_Winlink1000HbsBridgeFloodBroadcastLimit_Object = MibScalar
winlink1000HbsBridgeFloodBroadcastLimit = _Winlink1000HbsBridgeFloodBroadcastLimit_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 7),
    _Winlink1000HbsBridgeFloodBroadcastLimit_Type()
)
winlink1000HbsBridgeFloodBroadcastLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeFloodBroadcastLimit.setStatus("mandatory")
_Winlink1000HbsBridgeFloodMulticastLimit_Type = Integer32
_Winlink1000HbsBridgeFloodMulticastLimit_Object = MibScalar
winlink1000HbsBridgeFloodMulticastLimit = _Winlink1000HbsBridgeFloodMulticastLimit_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 8),
    _Winlink1000HbsBridgeFloodMulticastLimit_Type()
)
winlink1000HbsBridgeFloodMulticastLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeFloodMulticastLimit.setStatus("mandatory")
_Winlink1000HbsBridgeSectorMulticastMIR_Type = Integer32
_Winlink1000HbsBridgeSectorMulticastMIR_Object = MibScalar
winlink1000HbsBridgeSectorMulticastMIR = _Winlink1000HbsBridgeSectorMulticastMIR_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 9),
    _Winlink1000HbsBridgeSectorMulticastMIR_Type()
)
winlink1000HbsBridgeSectorMulticastMIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeSectorMulticastMIR.setStatus("mandatory")
_Winlink1000HbsBridgeMulticastMirNumSecPacketsDropped_Type = Integer32
_Winlink1000HbsBridgeMulticastMirNumSecPacketsDropped_Object = MibScalar
winlink1000HbsBridgeMulticastMirNumSecPacketsDropped = _Winlink1000HbsBridgeMulticastMirNumSecPacketsDropped_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 10),
    _Winlink1000HbsBridgeMulticastMirNumSecPacketsDropped_Type()
)
winlink1000HbsBridgeMulticastMirNumSecPacketsDropped.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeMulticastMirNumSecPacketsDropped.setStatus("mandatory")
_Winlink1000HbsBridgeUnicastTableSize_Type = Integer32
_Winlink1000HbsBridgeUnicastTableSize_Object = MibScalar
winlink1000HbsBridgeUnicastTableSize = _Winlink1000HbsBridgeUnicastTableSize_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 11),
    _Winlink1000HbsBridgeUnicastTableSize_Type()
)
winlink1000HbsBridgeUnicastTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeUnicastTableSize.setStatus("mandatory")
_Winlink1000HbsBridgeUnicastTable_Object = MibTable
winlink1000HbsBridgeUnicastTable = _Winlink1000HbsBridgeUnicastTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 12)
)
if mibBuilder.loadTexts:
    winlink1000HbsBridgeUnicastTable.setStatus("mandatory")
_Winlink1000HbsBridgeUnicastTableEntry_Object = MibTableRow
winlink1000HbsBridgeUnicastTableEntry = _Winlink1000HbsBridgeUnicastTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 12, 1)
)
winlink1000HbsBridgeUnicastTableEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsBridgeUnicastTableIndex"),
)
if mibBuilder.loadTexts:
    winlink1000HbsBridgeUnicastTableEntry.setStatus("mandatory")


class _Winlink1000HbsBridgeUnicastTableIndex_Type(Integer32):
    """Custom type winlink1000HbsBridgeUnicastTableIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000HbsBridgeUnicastTableIndex_Type.__name__ = "Integer32"
_Winlink1000HbsBridgeUnicastTableIndex_Object = MibTableColumn
winlink1000HbsBridgeUnicastTableIndex = _Winlink1000HbsBridgeUnicastTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 12, 1, 1),
    _Winlink1000HbsBridgeUnicastTableIndex_Type()
)
winlink1000HbsBridgeUnicastTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeUnicastTableIndex.setStatus("mandatory")
_Winlink1000HbsBridgeUnicastTableMACAddress_Type = DisplayString
_Winlink1000HbsBridgeUnicastTableMACAddress_Object = MibTableColumn
winlink1000HbsBridgeUnicastTableMACAddress = _Winlink1000HbsBridgeUnicastTableMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 12, 1, 2),
    _Winlink1000HbsBridgeUnicastTableMACAddress_Type()
)
winlink1000HbsBridgeUnicastTableMACAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeUnicastTableMACAddress.setStatus("mandatory")
_Winlink1000HbsBridgeUnicastTableInterfaceDescription_Type = DisplayString
_Winlink1000HbsBridgeUnicastTableInterfaceDescription_Object = MibTableColumn
winlink1000HbsBridgeUnicastTableInterfaceDescription = _Winlink1000HbsBridgeUnicastTableInterfaceDescription_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 12, 1, 3),
    _Winlink1000HbsBridgeUnicastTableInterfaceDescription_Type()
)
winlink1000HbsBridgeUnicastTableInterfaceDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeUnicastTableInterfaceDescription.setStatus("mandatory")
_Winlink1000HbsBridgeUnicastTableInterfaceID_Type = Integer32
_Winlink1000HbsBridgeUnicastTableInterfaceID_Object = MibTableColumn
winlink1000HbsBridgeUnicastTableInterfaceID = _Winlink1000HbsBridgeUnicastTableInterfaceID_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 12, 1, 4),
    _Winlink1000HbsBridgeUnicastTableInterfaceID_Type()
)
winlink1000HbsBridgeUnicastTableInterfaceID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeUnicastTableInterfaceID.setStatus("mandatory")
_Winlink1000HbsBridgeBlockSuOnDuplicateMac_Type = Integer32
_Winlink1000HbsBridgeBlockSuOnDuplicateMac_Object = MibScalar
winlink1000HbsBridgeBlockSuOnDuplicateMac = _Winlink1000HbsBridgeBlockSuOnDuplicateMac_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 13),
    _Winlink1000HbsBridgeBlockSuOnDuplicateMac_Type()
)
winlink1000HbsBridgeBlockSuOnDuplicateMac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeBlockSuOnDuplicateMac.setStatus("mandatory")


class _Winlink1000HbsBridgeSUsInterconnection_Type(Integer32):
    """Custom type winlink1000HbsBridgeSUsInterconnection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("alwaysDisabled", 1),
          ("disabled", 2),
          ("enabled", 3))
    )


_Winlink1000HbsBridgeSUsInterconnection_Type.__name__ = "Integer32"
_Winlink1000HbsBridgeSUsInterconnection_Object = MibScalar
winlink1000HbsBridgeSUsInterconnection = _Winlink1000HbsBridgeSUsInterconnection_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 2, 14),
    _Winlink1000HbsBridgeSUsInterconnection_Type()
)
winlink1000HbsBridgeSUsInterconnection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsBridgeSUsInterconnection.setStatus("mandatory")
_Winlink1000HbsService_ObjectIdentity = ObjectIdentity
winlink1000HbsService = _Winlink1000HbsService_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3)
)
_Winlink1000HbsServiceCommandStr_Type = DisplayString
_Winlink1000HbsServiceCommandStr_Object = MibScalar
winlink1000HbsServiceCommandStr = _Winlink1000HbsServiceCommandStr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 1),
    _Winlink1000HbsServiceCommandStr_Type()
)
winlink1000HbsServiceCommandStr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceCommandStr.setStatus("mandatory")
_Winlink1000HbsServiceVlan_ObjectIdentity = ObjectIdentity
winlink1000HbsServiceVlan = _Winlink1000HbsServiceVlan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2)
)
_Winlink1000HbsServiceVlanTable_Object = MibTable
winlink1000HbsServiceVlanTable = _Winlink1000HbsServiceVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1)
)
if mibBuilder.loadTexts:
    winlink1000HbsServiceVlanTable.setStatus("mandatory")
_Winlink1000HbsServiceVlanEntry_Object = MibTableRow
winlink1000HbsServiceVlanEntry = _Winlink1000HbsServiceVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1, 1)
)
winlink1000HbsServiceVlanEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsServiceVlanIndex"),
)
if mibBuilder.loadTexts:
    winlink1000HbsServiceVlanEntry.setStatus("mandatory")


class _Winlink1000HbsServiceVlanIndex_Type(Integer32):
    """Custom type winlink1000HbsServiceVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000HbsServiceVlanIndex_Type.__name__ = "Integer32"
_Winlink1000HbsServiceVlanIndex_Object = MibTableColumn
winlink1000HbsServiceVlanIndex = _Winlink1000HbsServiceVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1, 1, 1),
    _Winlink1000HbsServiceVlanIndex_Type()
)
winlink1000HbsServiceVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServiceVlanIndex.setStatus("mandatory")
_Winlink1000OduServiceVlanTblTag_Type = Integer32
_Winlink1000OduServiceVlanTblTag_Object = MibTableColumn
winlink1000OduServiceVlanTblTag = _Winlink1000OduServiceVlanTblTag_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1, 1, 2),
    _Winlink1000OduServiceVlanTblTag_Type()
)
winlink1000OduServiceVlanTblTag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceVlanTblTag.setStatus("mandatory")
_Winlink1000OduServiceVlanTblPri_Type = Integer32
_Winlink1000OduServiceVlanTblPri_Object = MibTableColumn
winlink1000OduServiceVlanTblPri = _Winlink1000OduServiceVlanTblPri_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1, 1, 3),
    _Winlink1000OduServiceVlanTblPri_Type()
)
winlink1000OduServiceVlanTblPri.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceVlanTblPri.setStatus("mandatory")


class _Winlink1000OduServiceVlanTblMajorMode_Type(Integer32):
    """Custom type winlink1000OduServiceVlanTblMajorMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("tag", 2),
          ("provider", 3),
          ("hwTag", 4),
          ("hwTagFilter", 5))
    )


_Winlink1000OduServiceVlanTblMajorMode_Type.__name__ = "Integer32"
_Winlink1000OduServiceVlanTblMajorMode_Object = MibTableColumn
winlink1000OduServiceVlanTblMajorMode = _Winlink1000OduServiceVlanTblMajorMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1, 1, 4),
    _Winlink1000OduServiceVlanTblMajorMode_Type()
)
winlink1000OduServiceVlanTblMajorMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceVlanTblMajorMode.setStatus("mandatory")


class _Winlink1000OduServiceVlanTblEgressMode_Type(Integer32):
    """Custom type winlink1000OduServiceVlanTblEgressMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("untag", 2),
          ("filter", 3),
          ("untagFiltered", 4))
    )


_Winlink1000OduServiceVlanTblEgressMode_Type.__name__ = "Integer32"
_Winlink1000OduServiceVlanTblEgressMode_Object = MibTableColumn
winlink1000OduServiceVlanTblEgressMode = _Winlink1000OduServiceVlanTblEgressMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1, 1, 5),
    _Winlink1000OduServiceVlanTblEgressMode_Type()
)
winlink1000OduServiceVlanTblEgressMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceVlanTblEgressMode.setStatus("mandatory")


class _Winlink1000OduServiceVlanTblIngressMode_Type(Integer32):
    """Custom type winlink1000OduServiceVlanTblIngressMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("tag", 2))
    )


_Winlink1000OduServiceVlanTblIngressMode_Type.__name__ = "Integer32"
_Winlink1000OduServiceVlanTblIngressMode_Object = MibTableColumn
winlink1000OduServiceVlanTblIngressMode = _Winlink1000OduServiceVlanTblIngressMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1, 1, 6),
    _Winlink1000OduServiceVlanTblIngressMode_Type()
)
winlink1000OduServiceVlanTblIngressMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceVlanTblIngressMode.setStatus("mandatory")
_Winlink1000OduServiceVlanTblEgressFilter1_Type = Integer32
_Winlink1000OduServiceVlanTblEgressFilter1_Object = MibTableColumn
winlink1000OduServiceVlanTblEgressFilter1 = _Winlink1000OduServiceVlanTblEgressFilter1_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1, 1, 7),
    _Winlink1000OduServiceVlanTblEgressFilter1_Type()
)
winlink1000OduServiceVlanTblEgressFilter1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceVlanTblEgressFilter1.setStatus("mandatory")
_Winlink1000OduServiceVlanTblEgressFilter2_Type = Integer32
_Winlink1000OduServiceVlanTblEgressFilter2_Object = MibTableColumn
winlink1000OduServiceVlanTblEgressFilter2 = _Winlink1000OduServiceVlanTblEgressFilter2_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1, 1, 8),
    _Winlink1000OduServiceVlanTblEgressFilter2_Type()
)
winlink1000OduServiceVlanTblEgressFilter2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceVlanTblEgressFilter2.setStatus("mandatory")
_Winlink1000OduServiceVlanTblEgressFilter3_Type = Integer32
_Winlink1000OduServiceVlanTblEgressFilter3_Object = MibTableColumn
winlink1000OduServiceVlanTblEgressFilter3 = _Winlink1000OduServiceVlanTblEgressFilter3_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1, 1, 9),
    _Winlink1000OduServiceVlanTblEgressFilter3_Type()
)
winlink1000OduServiceVlanTblEgressFilter3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceVlanTblEgressFilter3.setStatus("mandatory")
_Winlink1000OduServiceVlanTblEgressFilter4_Type = Integer32
_Winlink1000OduServiceVlanTblEgressFilter4_Object = MibTableColumn
winlink1000OduServiceVlanTblEgressFilter4 = _Winlink1000OduServiceVlanTblEgressFilter4_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1, 1, 10),
    _Winlink1000OduServiceVlanTblEgressFilter4_Type()
)
winlink1000OduServiceVlanTblEgressFilter4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceVlanTblEgressFilter4.setStatus("mandatory")
_Winlink1000OduServiceVlanTblUntagFilteredBitmap_Type = Integer32
_Winlink1000OduServiceVlanTblUntagFilteredBitmap_Object = MibTableColumn
winlink1000OduServiceVlanTblUntagFilteredBitmap = _Winlink1000OduServiceVlanTblUntagFilteredBitmap_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1, 1, 11),
    _Winlink1000OduServiceVlanTblUntagFilteredBitmap_Type()
)
winlink1000OduServiceVlanTblUntagFilteredBitmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceVlanTblUntagFilteredBitmap.setStatus("mandatory")
_Winlink1000OduServiceVlanTblProviderTPID_Type = DisplayString
_Winlink1000OduServiceVlanTblProviderTPID_Object = MibTableColumn
winlink1000OduServiceVlanTblProviderTPID = _Winlink1000OduServiceVlanTblProviderTPID_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1, 1, 12),
    _Winlink1000OduServiceVlanTblProviderTPID_Type()
)
winlink1000OduServiceVlanTblProviderTPID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceVlanTblProviderTPID.setStatus("mandatory")
_Winlink1000OduServiceVlan2TblTag_Type = Integer32
_Winlink1000OduServiceVlan2TblTag_Object = MibTableColumn
winlink1000OduServiceVlan2TblTag = _Winlink1000OduServiceVlan2TblTag_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1, 1, 13),
    _Winlink1000OduServiceVlan2TblTag_Type()
)
winlink1000OduServiceVlan2TblTag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceVlan2TblTag.setStatus("mandatory")
_Winlink1000OduServiceVlan2TblPri_Type = Integer32
_Winlink1000OduServiceVlan2TblPri_Object = MibTableColumn
winlink1000OduServiceVlan2TblPri = _Winlink1000OduServiceVlan2TblPri_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1, 1, 14),
    _Winlink1000OduServiceVlan2TblPri_Type()
)
winlink1000OduServiceVlan2TblPri.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceVlan2TblPri.setStatus("mandatory")


class _Winlink1000OduServiceVlan2TblMajorMode_Type(Integer32):
    """Custom type winlink1000OduServiceVlan2TblMajorMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("tag", 2),
          ("provider", 3))
    )


_Winlink1000OduServiceVlan2TblMajorMode_Type.__name__ = "Integer32"
_Winlink1000OduServiceVlan2TblMajorMode_Object = MibTableColumn
winlink1000OduServiceVlan2TblMajorMode = _Winlink1000OduServiceVlan2TblMajorMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1, 1, 15),
    _Winlink1000OduServiceVlan2TblMajorMode_Type()
)
winlink1000OduServiceVlan2TblMajorMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceVlan2TblMajorMode.setStatus("mandatory")


class _Winlink1000OduServiceVlan2TblEgressMode_Type(Integer32):
    """Custom type winlink1000OduServiceVlan2TblEgressMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("untag", 2),
          ("filter", 3),
          ("untagFiltered", 4))
    )


_Winlink1000OduServiceVlan2TblEgressMode_Type.__name__ = "Integer32"
_Winlink1000OduServiceVlan2TblEgressMode_Object = MibTableColumn
winlink1000OduServiceVlan2TblEgressMode = _Winlink1000OduServiceVlan2TblEgressMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1, 1, 16),
    _Winlink1000OduServiceVlan2TblEgressMode_Type()
)
winlink1000OduServiceVlan2TblEgressMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceVlan2TblEgressMode.setStatus("mandatory")


class _Winlink1000OduServiceVlan2TblIngressMode_Type(Integer32):
    """Custom type winlink1000OduServiceVlan2TblIngressMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("tag", 2))
    )


_Winlink1000OduServiceVlan2TblIngressMode_Type.__name__ = "Integer32"
_Winlink1000OduServiceVlan2TblIngressMode_Object = MibTableColumn
winlink1000OduServiceVlan2TblIngressMode = _Winlink1000OduServiceVlan2TblIngressMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1, 1, 17),
    _Winlink1000OduServiceVlan2TblIngressMode_Type()
)
winlink1000OduServiceVlan2TblIngressMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceVlan2TblIngressMode.setStatus("mandatory")
_Winlink1000OduServiceVlan2TblEgressFilter1_Type = Integer32
_Winlink1000OduServiceVlan2TblEgressFilter1_Object = MibTableColumn
winlink1000OduServiceVlan2TblEgressFilter1 = _Winlink1000OduServiceVlan2TblEgressFilter1_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1, 1, 18),
    _Winlink1000OduServiceVlan2TblEgressFilter1_Type()
)
winlink1000OduServiceVlan2TblEgressFilter1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceVlan2TblEgressFilter1.setStatus("mandatory")
_Winlink1000OduServiceVlan2TblEgressFilter2_Type = Integer32
_Winlink1000OduServiceVlan2TblEgressFilter2_Object = MibTableColumn
winlink1000OduServiceVlan2TblEgressFilter2 = _Winlink1000OduServiceVlan2TblEgressFilter2_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1, 1, 19),
    _Winlink1000OduServiceVlan2TblEgressFilter2_Type()
)
winlink1000OduServiceVlan2TblEgressFilter2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceVlan2TblEgressFilter2.setStatus("mandatory")
_Winlink1000OduServiceVlan2TblEgressFilter3_Type = Integer32
_Winlink1000OduServiceVlan2TblEgressFilter3_Object = MibTableColumn
winlink1000OduServiceVlan2TblEgressFilter3 = _Winlink1000OduServiceVlan2TblEgressFilter3_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1, 1, 20),
    _Winlink1000OduServiceVlan2TblEgressFilter3_Type()
)
winlink1000OduServiceVlan2TblEgressFilter3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceVlan2TblEgressFilter3.setStatus("mandatory")
_Winlink1000OduServiceVlan2TblEgressFilter4_Type = Integer32
_Winlink1000OduServiceVlan2TblEgressFilter4_Object = MibTableColumn
winlink1000OduServiceVlan2TblEgressFilter4 = _Winlink1000OduServiceVlan2TblEgressFilter4_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1, 1, 21),
    _Winlink1000OduServiceVlan2TblEgressFilter4_Type()
)
winlink1000OduServiceVlan2TblEgressFilter4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceVlan2TblEgressFilter4.setStatus("mandatory")
_Winlink1000OduServiceVlan2TblUntagFilteredBitmap_Type = Integer32
_Winlink1000OduServiceVlan2TblUntagFilteredBitmap_Object = MibTableColumn
winlink1000OduServiceVlan2TblUntagFilteredBitmap = _Winlink1000OduServiceVlan2TblUntagFilteredBitmap_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1, 1, 22),
    _Winlink1000OduServiceVlan2TblUntagFilteredBitmap_Type()
)
winlink1000OduServiceVlan2TblUntagFilteredBitmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceVlan2TblUntagFilteredBitmap.setStatus("mandatory")
_Winlink1000OduServiceVlan2TblProviderTPID_Type = DisplayString
_Winlink1000OduServiceVlan2TblProviderTPID_Object = MibTableColumn
winlink1000OduServiceVlan2TblProviderTPID = _Winlink1000OduServiceVlan2TblProviderTPID_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 2, 1, 1, 23),
    _Winlink1000OduServiceVlan2TblProviderTPID_Type()
)
winlink1000OduServiceVlan2TblProviderTPID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000OduServiceVlan2TblProviderTPID.setStatus("mandatory")
_Winlink1000HbsServiceQoS_ObjectIdentity = ObjectIdentity
winlink1000HbsServiceQoS = _Winlink1000HbsServiceQoS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 3)
)


class _Winlink1000HbsServiceQoSMode_Type(Integer32):
    """Custom type winlink1000HbsServiceQoSMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notSupported", 1),
          ("notActive", 2),
          ("classVlan", 3),
          ("classDiffserv", 4))
    )


_Winlink1000HbsServiceQoSMode_Type.__name__ = "Integer32"
_Winlink1000HbsServiceQoSMode_Object = MibScalar
winlink1000HbsServiceQoSMode = _Winlink1000HbsServiceQoSMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 3, 1),
    _Winlink1000HbsServiceQoSMode_Type()
)
winlink1000HbsServiceQoSMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceQoSMode.setStatus("mandatory")
_Winlink1000HbsServiceQoSVlanQGroupsStr_Type = DisplayString
_Winlink1000HbsServiceQoSVlanQGroupsStr_Object = MibScalar
winlink1000HbsServiceQoSVlanQGroupsStr = _Winlink1000HbsServiceQoSVlanQGroupsStr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 3, 2),
    _Winlink1000HbsServiceQoSVlanQGroupsStr_Type()
)
winlink1000HbsServiceQoSVlanQGroupsStr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceQoSVlanQGroupsStr.setStatus("mandatory")
_Winlink1000HbsServiceQoSDiffservQGroupsStr_Type = DisplayString
_Winlink1000HbsServiceQoSDiffservQGroupsStr_Object = MibScalar
winlink1000HbsServiceQoSDiffservQGroupsStr = _Winlink1000HbsServiceQoSDiffservQGroupsStr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 3, 3),
    _Winlink1000HbsServiceQoSDiffservQGroupsStr_Type()
)
winlink1000HbsServiceQoSDiffservQGroupsStr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceQoSDiffservQGroupsStr.setStatus("mandatory")
_Winlink1000HbsServiceQoSMaxRtQuePct_Type = Integer32
_Winlink1000HbsServiceQoSMaxRtQuePct_Object = MibScalar
winlink1000HbsServiceQoSMaxRtQuePct = _Winlink1000HbsServiceQoSMaxRtQuePct_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 3, 4),
    _Winlink1000HbsServiceQoSMaxRtQuePct_Type()
)
winlink1000HbsServiceQoSMaxRtQuePct.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServiceQoSMaxRtQuePct.setStatus("mandatory")
_Winlink1000HbsServiceQoSTable_Object = MibTable
winlink1000HbsServiceQoSTable = _Winlink1000HbsServiceQoSTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 3, 5)
)
if mibBuilder.loadTexts:
    winlink1000HbsServiceQoSTable.setStatus("mandatory")
_Winlink1000HbsServiceQoSEntry_Object = MibTableRow
winlink1000HbsServiceQoSEntry = _Winlink1000HbsServiceQoSEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 3, 5, 1)
)
winlink1000HbsServiceQoSEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsServiceQoSIndex"),
)
if mibBuilder.loadTexts:
    winlink1000HbsServiceQoSEntry.setStatus("mandatory")


class _Winlink1000HbsServiceQoSIndex_Type(Integer32):
    """Custom type winlink1000HbsServiceQoSIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000HbsServiceQoSIndex_Type.__name__ = "Integer32"
_Winlink1000HbsServiceQoSIndex_Object = MibTableColumn
winlink1000HbsServiceQoSIndex = _Winlink1000HbsServiceQoSIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 3, 5, 1, 1),
    _Winlink1000HbsServiceQoSIndex_Type()
)
winlink1000HbsServiceQoSIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServiceQoSIndex.setStatus("mandatory")


class _Winlink1000HbsServiceQoSConfAdminState_Type(Integer32):
    """Custom type winlink1000HbsServiceQoSConfAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_Winlink1000HbsServiceQoSConfAdminState_Type.__name__ = "Integer32"
_Winlink1000HbsServiceQoSConfAdminState_Object = MibTableColumn
winlink1000HbsServiceQoSConfAdminState = _Winlink1000HbsServiceQoSConfAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 3, 5, 1, 2),
    _Winlink1000HbsServiceQoSConfAdminState_Type()
)
winlink1000HbsServiceQoSConfAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceQoSConfAdminState.setStatus("mandatory")
_Winlink1000HbsServiceQoSConfUpQueMir_Type = DisplayString
_Winlink1000HbsServiceQoSConfUpQueMir_Object = MibTableColumn
winlink1000HbsServiceQoSConfUpQueMir = _Winlink1000HbsServiceQoSConfUpQueMir_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 3, 5, 1, 3),
    _Winlink1000HbsServiceQoSConfUpQueMir_Type()
)
winlink1000HbsServiceQoSConfUpQueMir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceQoSConfUpQueMir.setStatus("mandatory")
_Winlink1000HbsServiceQoSConfUpQueWeight_Type = DisplayString
_Winlink1000HbsServiceQoSConfUpQueWeight_Object = MibTableColumn
winlink1000HbsServiceQoSConfUpQueWeight = _Winlink1000HbsServiceQoSConfUpQueWeight_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 3, 5, 1, 4),
    _Winlink1000HbsServiceQoSConfUpQueWeight_Type()
)
winlink1000HbsServiceQoSConfUpQueWeight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceQoSConfUpQueWeight.setStatus("mandatory")
_Winlink1000HbsServiceQoSConfDownQueMir_Type = DisplayString
_Winlink1000HbsServiceQoSConfDownQueMir_Object = MibTableColumn
winlink1000HbsServiceQoSConfDownQueMir = _Winlink1000HbsServiceQoSConfDownQueMir_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 3, 5, 1, 5),
    _Winlink1000HbsServiceQoSConfDownQueMir_Type()
)
winlink1000HbsServiceQoSConfDownQueMir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceQoSConfDownQueMir.setStatus("mandatory")
_Winlink1000HbsServiceQoSConfDownQueWeight_Type = DisplayString
_Winlink1000HbsServiceQoSConfDownQueWeight_Object = MibTableColumn
winlink1000HbsServiceQoSConfDownQueWeight = _Winlink1000HbsServiceQoSConfDownQueWeight_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 3, 5, 1, 6),
    _Winlink1000HbsServiceQoSConfDownQueWeight_Type()
)
winlink1000HbsServiceQoSConfDownQueWeight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceQoSConfDownQueWeight.setStatus("mandatory")
_Winlink1000HbsServiceQoSUpTtlMs_Type = DisplayString
_Winlink1000HbsServiceQoSUpTtlMs_Object = MibTableColumn
winlink1000HbsServiceQoSUpTtlMs = _Winlink1000HbsServiceQoSUpTtlMs_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 3, 5, 1, 7),
    _Winlink1000HbsServiceQoSUpTtlMs_Type()
)
winlink1000HbsServiceQoSUpTtlMs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceQoSUpTtlMs.setStatus("mandatory")
_Winlink1000HbsServiceQoSDownTtlMs_Type = DisplayString
_Winlink1000HbsServiceQoSDownTtlMs_Object = MibTableColumn
winlink1000HbsServiceQoSDownTtlMs = _Winlink1000HbsServiceQoSDownTtlMs_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 3, 5, 1, 8),
    _Winlink1000HbsServiceQoSDownTtlMs_Type()
)
winlink1000HbsServiceQoSDownTtlMs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceQoSDownTtlMs.setStatus("mandatory")
_Winlink1000HbsServiceQoSUpStrict_Type = DisplayString
_Winlink1000HbsServiceQoSUpStrict_Object = MibTableColumn
winlink1000HbsServiceQoSUpStrict = _Winlink1000HbsServiceQoSUpStrict_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 3, 5, 1, 9),
    _Winlink1000HbsServiceQoSUpStrict_Type()
)
winlink1000HbsServiceQoSUpStrict.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceQoSUpStrict.setStatus("mandatory")
_Winlink1000HbsServiceQoSDownStrict_Type = DisplayString
_Winlink1000HbsServiceQoSDownStrict_Object = MibTableColumn
winlink1000HbsServiceQoSDownStrict = _Winlink1000HbsServiceQoSDownStrict_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 3, 5, 1, 10),
    _Winlink1000HbsServiceQoSDownStrict_Type()
)
winlink1000HbsServiceQoSDownStrict.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceQoSDownStrict.setStatus("mandatory")


class _Winlink1000HbsServiceQoSConfVoIPSupport_Type(Integer32):
    """Custom type winlink1000HbsServiceQoSConfVoIPSupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_Winlink1000HbsServiceQoSConfVoIPSupport_Type.__name__ = "Integer32"
_Winlink1000HbsServiceQoSConfVoIPSupport_Object = MibTableColumn
winlink1000HbsServiceQoSConfVoIPSupport = _Winlink1000HbsServiceQoSConfVoIPSupport_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 3, 5, 1, 11),
    _Winlink1000HbsServiceQoSConfVoIPSupport_Type()
)
winlink1000HbsServiceQoSConfVoIPSupport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceQoSConfVoIPSupport.setStatus("mandatory")


class _Winlink1000HbsServiceQoSVoIPState_Type(Integer32):
    """Custom type winlink1000HbsServiceQoSVoIPState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_Winlink1000HbsServiceQoSVoIPState_Type.__name__ = "Integer32"
_Winlink1000HbsServiceQoSVoIPState_Object = MibScalar
winlink1000HbsServiceQoSVoIPState = _Winlink1000HbsServiceQoSVoIPState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 3, 6),
    _Winlink1000HbsServiceQoSVoIPState_Type()
)
winlink1000HbsServiceQoSVoIPState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceQoSVoIPState.setStatus("mandatory")


class _Winlink1000HbsServiceMobilitySupported_Type(Integer32):
    """Custom type winlink1000HbsServiceMobilitySupported based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notSupported", 1),
          ("supported", 2),
          ("transportSupported", 3))
    )


_Winlink1000HbsServiceMobilitySupported_Type.__name__ = "Integer32"
_Winlink1000HbsServiceMobilitySupported_Object = MibScalar
winlink1000HbsServiceMobilitySupported = _Winlink1000HbsServiceMobilitySupported_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 4),
    _Winlink1000HbsServiceMobilitySupported_Type()
)
winlink1000HbsServiceMobilitySupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServiceMobilitySupported.setStatus("mandatory")
_Winlink1000HbsServiceMaxNumOfHSUs_Type = Integer32
_Winlink1000HbsServiceMaxNumOfHSUs_Object = MibScalar
winlink1000HbsServiceMaxNumOfHSUs = _Winlink1000HbsServiceMaxNumOfHSUs_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 5),
    _Winlink1000HbsServiceMaxNumOfHSUs_Type()
)
winlink1000HbsServiceMaxNumOfHSUs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServiceMaxNumOfHSUs.setStatus("mandatory")
_Winlink1000HbsServiceSynchronization_ObjectIdentity = ObjectIdentity
winlink1000HbsServiceSynchronization = _Winlink1000HbsServiceSynchronization_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 6)
)


class _Winlink1000HbsServiceSynchronization1588TCEnable_Type(Integer32):
    """Custom type winlink1000HbsServiceSynchronization1588TCEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("mandatoryDisabled", 1),
          ("disabled", 2),
          ("enabled", 3))
    )


_Winlink1000HbsServiceSynchronization1588TCEnable_Type.__name__ = "Integer32"
_Winlink1000HbsServiceSynchronization1588TCEnable_Object = MibScalar
winlink1000HbsServiceSynchronization1588TCEnable = _Winlink1000HbsServiceSynchronization1588TCEnable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 6, 1),
    _Winlink1000HbsServiceSynchronization1588TCEnable_Type()
)
winlink1000HbsServiceSynchronization1588TCEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceSynchronization1588TCEnable.setStatus("mandatory")


class _Winlink1000HbsServiceSynchronizationSyncEEnable_Type(Integer32):
    """Custom type winlink1000HbsServiceSynchronizationSyncEEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("mandatoryDisabled", 1),
          ("disabled", 2),
          ("enabled", 3))
    )


_Winlink1000HbsServiceSynchronizationSyncEEnable_Type.__name__ = "Integer32"
_Winlink1000HbsServiceSynchronizationSyncEEnable_Object = MibScalar
winlink1000HbsServiceSynchronizationSyncEEnable = _Winlink1000HbsServiceSynchronizationSyncEEnable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 6, 2),
    _Winlink1000HbsServiceSynchronizationSyncEEnable_Type()
)
winlink1000HbsServiceSynchronizationSyncEEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceSynchronizationSyncEEnable.setStatus("mandatory")


class _Winlink1000HbsServiceSynchronizationSyncESSMGeneration_Type(Integer32):
    """Custom type winlink1000HbsServiceSynchronizationSyncESSMGeneration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_Winlink1000HbsServiceSynchronizationSyncESSMGeneration_Type.__name__ = "Integer32"
_Winlink1000HbsServiceSynchronizationSyncESSMGeneration_Object = MibScalar
winlink1000HbsServiceSynchronizationSyncESSMGeneration = _Winlink1000HbsServiceSynchronizationSyncESSMGeneration_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 6, 3),
    _Winlink1000HbsServiceSynchronizationSyncESSMGeneration_Type()
)
winlink1000HbsServiceSynchronizationSyncESSMGeneration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceSynchronizationSyncESSMGeneration.setStatus("mandatory")
_Winlink1000HbsServiceSynchronizationSyncESupportedReferenceClock_Type = DisplayString
_Winlink1000HbsServiceSynchronizationSyncESupportedReferenceClock_Object = MibScalar
winlink1000HbsServiceSynchronizationSyncESupportedReferenceClock = _Winlink1000HbsServiceSynchronizationSyncESupportedReferenceClock_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 6, 4),
    _Winlink1000HbsServiceSynchronizationSyncESupportedReferenceClock_Type()
)
winlink1000HbsServiceSynchronizationSyncESupportedReferenceClock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServiceSynchronizationSyncESupportedReferenceClock.setStatus("mandatory")
_Winlink1000HbsServiceSynchronizationSyncEDesiredReferenceClock_Type = DisplayString
_Winlink1000HbsServiceSynchronizationSyncEDesiredReferenceClock_Object = MibScalar
winlink1000HbsServiceSynchronizationSyncEDesiredReferenceClock = _Winlink1000HbsServiceSynchronizationSyncEDesiredReferenceClock_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 6, 5),
    _Winlink1000HbsServiceSynchronizationSyncEDesiredReferenceClock_Type()
)
winlink1000HbsServiceSynchronizationSyncEDesiredReferenceClock.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceSynchronizationSyncEDesiredReferenceClock.setStatus("mandatory")
_Winlink1000HbsServiceRadius_ObjectIdentity = ObjectIdentity
winlink1000HbsServiceRadius = _Winlink1000HbsServiceRadius_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7)
)


class _Winlink1000HbsServiceRadiusAuthorizationMode_Type(Integer32):
    """Custom type winlink1000HbsServiceRadiusAuthorizationMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_Winlink1000HbsServiceRadiusAuthorizationMode_Type.__name__ = "Integer32"
_Winlink1000HbsServiceRadiusAuthorizationMode_Object = MibScalar
winlink1000HbsServiceRadiusAuthorizationMode = _Winlink1000HbsServiceRadiusAuthorizationMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 1),
    _Winlink1000HbsServiceRadiusAuthorizationMode_Type()
)
winlink1000HbsServiceRadiusAuthorizationMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusAuthorizationMode.setStatus("mandatory")
_Winlink1000HbsServiceRadiusUserName_Type = DisplayString
_Winlink1000HbsServiceRadiusUserName_Object = MibScalar
winlink1000HbsServiceRadiusUserName = _Winlink1000HbsServiceRadiusUserName_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 2),
    _Winlink1000HbsServiceRadiusUserName_Type()
)
winlink1000HbsServiceRadiusUserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusUserName.setStatus("mandatory")
_Winlink1000HbsServiceRadiusPassword_Type = DisplayString
_Winlink1000HbsServiceRadiusPassword_Object = MibScalar
winlink1000HbsServiceRadiusPassword = _Winlink1000HbsServiceRadiusPassword_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 3),
    _Winlink1000HbsServiceRadiusPassword_Type()
)
winlink1000HbsServiceRadiusPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusPassword.setStatus("mandatory")
_Winlink1000HbsServiceRadiusServerTable_Object = MibTable
winlink1000HbsServiceRadiusServerTable = _Winlink1000HbsServiceRadiusServerTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 4)
)
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusServerTable.setStatus("mandatory")
_Winlink1000HbsServiceRadiusServerEntry_Object = MibTableRow
winlink1000HbsServiceRadiusServerEntry = _Winlink1000HbsServiceRadiusServerEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 4, 1)
)
winlink1000HbsServiceRadiusServerEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsServiceRadiusServerIndex"),
)
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusServerEntry.setStatus("mandatory")


class _Winlink1000HbsServiceRadiusServerIndex_Type(Integer32):
    """Custom type winlink1000HbsServiceRadiusServerIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000HbsServiceRadiusServerIndex_Type.__name__ = "Integer32"
_Winlink1000HbsServiceRadiusServerIndex_Object = MibTableColumn
winlink1000HbsServiceRadiusServerIndex = _Winlink1000HbsServiceRadiusServerIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 4, 1, 1),
    _Winlink1000HbsServiceRadiusServerIndex_Type()
)
winlink1000HbsServiceRadiusServerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusServerIndex.setStatus("mandatory")
_Winlink1000HbsServiceRadiusServerIpAddr_Type = IpAddress
_Winlink1000HbsServiceRadiusServerIpAddr_Object = MibTableColumn
winlink1000HbsServiceRadiusServerIpAddr = _Winlink1000HbsServiceRadiusServerIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 4, 1, 2),
    _Winlink1000HbsServiceRadiusServerIpAddr_Type()
)
winlink1000HbsServiceRadiusServerIpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusServerIpAddr.setStatus("mandatory")
_Winlink1000HbsServiceRadiusServerPort_Type = Integer32
_Winlink1000HbsServiceRadiusServerPort_Object = MibTableColumn
winlink1000HbsServiceRadiusServerPort = _Winlink1000HbsServiceRadiusServerPort_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 4, 1, 3),
    _Winlink1000HbsServiceRadiusServerPort_Type()
)
winlink1000HbsServiceRadiusServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusServerPort.setStatus("mandatory")
_Winlink1000HbsServiceRadiusServerSecret_Type = DisplayString
_Winlink1000HbsServiceRadiusServerSecret_Object = MibTableColumn
winlink1000HbsServiceRadiusServerSecret = _Winlink1000HbsServiceRadiusServerSecret_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 4, 1, 4),
    _Winlink1000HbsServiceRadiusServerSecret_Type()
)
winlink1000HbsServiceRadiusServerSecret.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusServerSecret.setStatus("mandatory")


class _Winlink1000HbsServiceRadiusServerConnectivity_Type(Integer32):
    """Custom type winlink1000HbsServiceRadiusServerConnectivity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("success", 1),
          ("noServerResponse", 2),
          ("noServer", 3),
          ("testing", 4),
          ("badSecret", 5),
          ("timeout", 6))
    )


_Winlink1000HbsServiceRadiusServerConnectivity_Type.__name__ = "Integer32"
_Winlink1000HbsServiceRadiusServerConnectivity_Object = MibTableColumn
winlink1000HbsServiceRadiusServerConnectivity = _Winlink1000HbsServiceRadiusServerConnectivity_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 4, 1, 5),
    _Winlink1000HbsServiceRadiusServerConnectivity_Type()
)
winlink1000HbsServiceRadiusServerConnectivity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusServerConnectivity.setStatus("mandatory")
_Winlink1000HbsServiceRadiusServerNumberOfRetries_Type = Integer32
_Winlink1000HbsServiceRadiusServerNumberOfRetries_Object = MibTableColumn
winlink1000HbsServiceRadiusServerNumberOfRetries = _Winlink1000HbsServiceRadiusServerNumberOfRetries_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 4, 1, 6),
    _Winlink1000HbsServiceRadiusServerNumberOfRetries_Type()
)
winlink1000HbsServiceRadiusServerNumberOfRetries.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusServerNumberOfRetries.setStatus("mandatory")
_Winlink1000HbsServiceRadiusServerTimeout_Type = Integer32
_Winlink1000HbsServiceRadiusServerTimeout_Object = MibTableColumn
winlink1000HbsServiceRadiusServerTimeout = _Winlink1000HbsServiceRadiusServerTimeout_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 4, 1, 7),
    _Winlink1000HbsServiceRadiusServerTimeout_Type()
)
winlink1000HbsServiceRadiusServerTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusServerTimeout.setStatus("mandatory")
_Winlink1000HbsServiceRadiusServerAccountingPort_Type = Integer32
_Winlink1000HbsServiceRadiusServerAccountingPort_Object = MibTableColumn
winlink1000HbsServiceRadiusServerAccountingPort = _Winlink1000HbsServiceRadiusServerAccountingPort_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 4, 1, 8),
    _Winlink1000HbsServiceRadiusServerAccountingPort_Type()
)
winlink1000HbsServiceRadiusServerAccountingPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusServerAccountingPort.setStatus("mandatory")


class _Winlink1000HbsServiceRadiusHsuNasIdentifierConvention_Type(Integer32):
    """Custom type winlink1000HbsServiceRadiusHsuNasIdentifierConvention based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("deviceName", 1),
          ("deviceLocation", 2))
    )


_Winlink1000HbsServiceRadiusHsuNasIdentifierConvention_Type.__name__ = "Integer32"
_Winlink1000HbsServiceRadiusHsuNasIdentifierConvention_Object = MibScalar
winlink1000HbsServiceRadiusHsuNasIdentifierConvention = _Winlink1000HbsServiceRadiusHsuNasIdentifierConvention_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 5),
    _Winlink1000HbsServiceRadiusHsuNasIdentifierConvention_Type()
)
winlink1000HbsServiceRadiusHsuNasIdentifierConvention.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusHsuNasIdentifierConvention.setStatus("mandatory")


class _Winlink1000HbsServiceRadiusHsuAccountingMode_Type(Integer32):
    """Custom type winlink1000HbsServiceRadiusHsuAccountingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_Winlink1000HbsServiceRadiusHsuAccountingMode_Type.__name__ = "Integer32"
_Winlink1000HbsServiceRadiusHsuAccountingMode_Object = MibScalar
winlink1000HbsServiceRadiusHsuAccountingMode = _Winlink1000HbsServiceRadiusHsuAccountingMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 6),
    _Winlink1000HbsServiceRadiusHsuAccountingMode_Type()
)
winlink1000HbsServiceRadiusHsuAccountingMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusHsuAccountingMode.setStatus("mandatory")
_Winlink1000HbsServiceRadiusAccountingServerTable_Object = MibTable
winlink1000HbsServiceRadiusAccountingServerTable = _Winlink1000HbsServiceRadiusAccountingServerTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 7)
)
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusAccountingServerTable.setStatus("mandatory")
_Winlink1000HbsServiceRadiusAccountingServerEntry_Object = MibTableRow
winlink1000HbsServiceRadiusAccountingServerEntry = _Winlink1000HbsServiceRadiusAccountingServerEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 7, 1)
)
winlink1000HbsServiceRadiusAccountingServerEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsServiceRadiusAccountingServerIndex"),
)
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusAccountingServerEntry.setStatus("mandatory")


class _Winlink1000HbsServiceRadiusAccountingServerIndex_Type(Integer32):
    """Custom type winlink1000HbsServiceRadiusAccountingServerIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000HbsServiceRadiusAccountingServerIndex_Type.__name__ = "Integer32"
_Winlink1000HbsServiceRadiusAccountingServerIndex_Object = MibTableColumn
winlink1000HbsServiceRadiusAccountingServerIndex = _Winlink1000HbsServiceRadiusAccountingServerIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 7, 1, 1),
    _Winlink1000HbsServiceRadiusAccountingServerIndex_Type()
)
winlink1000HbsServiceRadiusAccountingServerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusAccountingServerIndex.setStatus("mandatory")
_Winlink1000HbsServiceRadiusAccountingServerIpAddr_Type = IpAddress
_Winlink1000HbsServiceRadiusAccountingServerIpAddr_Object = MibTableColumn
winlink1000HbsServiceRadiusAccountingServerIpAddr = _Winlink1000HbsServiceRadiusAccountingServerIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 7, 1, 2),
    _Winlink1000HbsServiceRadiusAccountingServerIpAddr_Type()
)
winlink1000HbsServiceRadiusAccountingServerIpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusAccountingServerIpAddr.setStatus("mandatory")
_Winlink1000HbsServiceRadiusAccountingServerPort_Type = Integer32
_Winlink1000HbsServiceRadiusAccountingServerPort_Object = MibTableColumn
winlink1000HbsServiceRadiusAccountingServerPort = _Winlink1000HbsServiceRadiusAccountingServerPort_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 7, 1, 3),
    _Winlink1000HbsServiceRadiusAccountingServerPort_Type()
)
winlink1000HbsServiceRadiusAccountingServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusAccountingServerPort.setStatus("mandatory")
_Winlink1000HbsServiceRadiusAccountingServerSecret_Type = DisplayString
_Winlink1000HbsServiceRadiusAccountingServerSecret_Object = MibTableColumn
winlink1000HbsServiceRadiusAccountingServerSecret = _Winlink1000HbsServiceRadiusAccountingServerSecret_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 7, 1, 4),
    _Winlink1000HbsServiceRadiusAccountingServerSecret_Type()
)
winlink1000HbsServiceRadiusAccountingServerSecret.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusAccountingServerSecret.setStatus("mandatory")


class _Winlink1000HbsServiceRadiusAccountingServerConnectivity_Type(Integer32):
    """Custom type winlink1000HbsServiceRadiusAccountingServerConnectivity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("success", 1),
          ("noServerResponse", 2),
          ("noServer", 3),
          ("testing", 4),
          ("badSecret", 5),
          ("timeout", 6))
    )


_Winlink1000HbsServiceRadiusAccountingServerConnectivity_Type.__name__ = "Integer32"
_Winlink1000HbsServiceRadiusAccountingServerConnectivity_Object = MibTableColumn
winlink1000HbsServiceRadiusAccountingServerConnectivity = _Winlink1000HbsServiceRadiusAccountingServerConnectivity_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 7, 1, 5),
    _Winlink1000HbsServiceRadiusAccountingServerConnectivity_Type()
)
winlink1000HbsServiceRadiusAccountingServerConnectivity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusAccountingServerConnectivity.setStatus("mandatory")
_Winlink1000HbsServiceRadiusAccountingServerNumberOfRetries_Type = Integer32
_Winlink1000HbsServiceRadiusAccountingServerNumberOfRetries_Object = MibTableColumn
winlink1000HbsServiceRadiusAccountingServerNumberOfRetries = _Winlink1000HbsServiceRadiusAccountingServerNumberOfRetries_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 7, 1, 6),
    _Winlink1000HbsServiceRadiusAccountingServerNumberOfRetries_Type()
)
winlink1000HbsServiceRadiusAccountingServerNumberOfRetries.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusAccountingServerNumberOfRetries.setStatus("mandatory")
_Winlink1000HbsServiceRadiusAccountingServerTimeout_Type = Integer32
_Winlink1000HbsServiceRadiusAccountingServerTimeout_Object = MibTableColumn
winlink1000HbsServiceRadiusAccountingServerTimeout = _Winlink1000HbsServiceRadiusAccountingServerTimeout_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 7, 1, 7),
    _Winlink1000HbsServiceRadiusAccountingServerTimeout_Type()
)
winlink1000HbsServiceRadiusAccountingServerTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusAccountingServerTimeout.setStatus("mandatory")


class _Winlink1000HbsServiceRadiusAuthorizationComponent_Type(Integer32):
    """Custom type winlink1000HbsServiceRadiusAuthorizationComponent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("na", 1),
          ("baseOnly", 2),
          ("cpeOnly", 3),
          ("baseAndCpe", 4))
    )


_Winlink1000HbsServiceRadiusAuthorizationComponent_Type.__name__ = "Integer32"
_Winlink1000HbsServiceRadiusAuthorizationComponent_Object = MibScalar
winlink1000HbsServiceRadiusAuthorizationComponent = _Winlink1000HbsServiceRadiusAuthorizationComponent_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 8),
    _Winlink1000HbsServiceRadiusAuthorizationComponent_Type()
)
winlink1000HbsServiceRadiusAuthorizationComponent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusAuthorizationComponent.setStatus("mandatory")
_Winlink1000HbsServiceRadiusPeriodicSeconds_Type = Integer32
_Winlink1000HbsServiceRadiusPeriodicSeconds_Object = MibScalar
winlink1000HbsServiceRadiusPeriodicSeconds = _Winlink1000HbsServiceRadiusPeriodicSeconds_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 9),
    _Winlink1000HbsServiceRadiusPeriodicSeconds_Type()
)
winlink1000HbsServiceRadiusPeriodicSeconds.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusPeriodicSeconds.setStatus("mandatory")
_Winlink1000HbsServiceRadiusDeprecated_Type = Integer32
_Winlink1000HbsServiceRadiusDeprecated_Object = MibScalar
winlink1000HbsServiceRadiusDeprecated = _Winlink1000HbsServiceRadiusDeprecated_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 10),
    _Winlink1000HbsServiceRadiusDeprecated_Type()
)
winlink1000HbsServiceRadiusDeprecated.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusDeprecated.setStatus("mandatory")


class _Winlink1000HbsServiceRadiusIdentificationKeyType_Type(Integer32):
    """Custom type winlink1000HbsServiceRadiusIdentificationKeyType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("serialNumber", 0),
          ("mac", 1),
          ("identificationKeyId", 2))
    )


_Winlink1000HbsServiceRadiusIdentificationKeyType_Type.__name__ = "Integer32"
_Winlink1000HbsServiceRadiusIdentificationKeyType_Object = MibScalar
winlink1000HbsServiceRadiusIdentificationKeyType = _Winlink1000HbsServiceRadiusIdentificationKeyType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 7, 11),
    _Winlink1000HbsServiceRadiusIdentificationKeyType_Type()
)
winlink1000HbsServiceRadiusIdentificationKeyType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusIdentificationKeyType.setStatus("mandatory")
_Winlink1000HbsServiceCategoryTable_Object = MibTable
winlink1000HbsServiceCategoryTable = _Winlink1000HbsServiceCategoryTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 8)
)
if mibBuilder.loadTexts:
    winlink1000HbsServiceCategoryTable.setStatus("mandatory")
_Winlink1000HbsServiceCategoryEntry_Object = MibTableRow
winlink1000HbsServiceCategoryEntry = _Winlink1000HbsServiceCategoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 8, 1)
)
winlink1000HbsServiceCategoryEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsServiceCategoryIndex"),
)
if mibBuilder.loadTexts:
    winlink1000HbsServiceCategoryEntry.setStatus("mandatory")


class _Winlink1000HbsServiceCategoryIndex_Type(Integer32):
    """Custom type winlink1000HbsServiceCategoryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000HbsServiceCategoryIndex_Type.__name__ = "Integer32"
_Winlink1000HbsServiceCategoryIndex_Object = MibTableColumn
winlink1000HbsServiceCategoryIndex = _Winlink1000HbsServiceCategoryIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 8, 1, 1),
    _Winlink1000HbsServiceCategoryIndex_Type()
)
winlink1000HbsServiceCategoryIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceCategoryIndex.setStatus("mandatory")
_Winlink1000HbsServiceCategoryName_Type = DisplayString
_Winlink1000HbsServiceCategoryName_Object = MibTableColumn
winlink1000HbsServiceCategoryName = _Winlink1000HbsServiceCategoryName_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 8, 1, 2),
    _Winlink1000HbsServiceCategoryName_Type()
)
winlink1000HbsServiceCategoryName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceCategoryName.setStatus("mandatory")
_Winlink1000HbsServiceCategoryULResources_Type = Integer32
_Winlink1000HbsServiceCategoryULResources_Object = MibTableColumn
winlink1000HbsServiceCategoryULResources = _Winlink1000HbsServiceCategoryULResources_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 8, 1, 3),
    _Winlink1000HbsServiceCategoryULResources_Type()
)
winlink1000HbsServiceCategoryULResources.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceCategoryULResources.setStatus("mandatory")
_Winlink1000HbsServiceCategoryDLResources_Type = Integer32
_Winlink1000HbsServiceCategoryDLResources_Object = MibTableColumn
winlink1000HbsServiceCategoryDLResources = _Winlink1000HbsServiceCategoryDLResources_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 8, 1, 4),
    _Winlink1000HbsServiceCategoryDLResources_Type()
)
winlink1000HbsServiceCategoryDLResources.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceCategoryDLResources.setStatus("mandatory")
_Winlink1000HbsServiceCategoryULMir_Type = Integer32
_Winlink1000HbsServiceCategoryULMir_Object = MibTableColumn
winlink1000HbsServiceCategoryULMir = _Winlink1000HbsServiceCategoryULMir_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 8, 1, 5),
    _Winlink1000HbsServiceCategoryULMir_Type()
)
winlink1000HbsServiceCategoryULMir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceCategoryULMir.setStatus("mandatory")
_Winlink1000HbsServiceCategoryDLMir_Type = Integer32
_Winlink1000HbsServiceCategoryDLMir_Object = MibTableColumn
winlink1000HbsServiceCategoryDLMir = _Winlink1000HbsServiceCategoryDLMir_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 8, 1, 6),
    _Winlink1000HbsServiceCategoryDLMir_Type()
)
winlink1000HbsServiceCategoryDLMir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceCategoryDLMir.setStatus("mandatory")
_Winlink1000HbsServiceCategoryQoSUpQueMir_Type = DisplayString
_Winlink1000HbsServiceCategoryQoSUpQueMir_Object = MibTableColumn
winlink1000HbsServiceCategoryQoSUpQueMir = _Winlink1000HbsServiceCategoryQoSUpQueMir_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 8, 1, 7),
    _Winlink1000HbsServiceCategoryQoSUpQueMir_Type()
)
winlink1000HbsServiceCategoryQoSUpQueMir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceCategoryQoSUpQueMir.setStatus("mandatory")
_Winlink1000HbsServiceCategoryQoSUpQueWeight_Type = DisplayString
_Winlink1000HbsServiceCategoryQoSUpQueWeight_Object = MibTableColumn
winlink1000HbsServiceCategoryQoSUpQueWeight = _Winlink1000HbsServiceCategoryQoSUpQueWeight_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 8, 1, 8),
    _Winlink1000HbsServiceCategoryQoSUpQueWeight_Type()
)
winlink1000HbsServiceCategoryQoSUpQueWeight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceCategoryQoSUpQueWeight.setStatus("mandatory")
_Winlink1000HbsServiceCategoryQoSDownQueMir_Type = DisplayString
_Winlink1000HbsServiceCategoryQoSDownQueMir_Object = MibTableColumn
winlink1000HbsServiceCategoryQoSDownQueMir = _Winlink1000HbsServiceCategoryQoSDownQueMir_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 8, 1, 9),
    _Winlink1000HbsServiceCategoryQoSDownQueMir_Type()
)
winlink1000HbsServiceCategoryQoSDownQueMir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceCategoryQoSDownQueMir.setStatus("mandatory")
_Winlink1000HbsServiceCategoryQoSDownQueWeight_Type = DisplayString
_Winlink1000HbsServiceCategoryQoSDownQueWeight_Object = MibTableColumn
winlink1000HbsServiceCategoryQoSDownQueWeight = _Winlink1000HbsServiceCategoryQoSDownQueWeight_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 8, 1, 10),
    _Winlink1000HbsServiceCategoryQoSDownQueWeight_Type()
)
winlink1000HbsServiceCategoryQoSDownQueWeight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceCategoryQoSDownQueWeight.setStatus("mandatory")
_Winlink1000HbsServiceCategoryQoSUpTtlMs_Type = DisplayString
_Winlink1000HbsServiceCategoryQoSUpTtlMs_Object = MibTableColumn
winlink1000HbsServiceCategoryQoSUpTtlMs = _Winlink1000HbsServiceCategoryQoSUpTtlMs_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 8, 1, 11),
    _Winlink1000HbsServiceCategoryQoSUpTtlMs_Type()
)
winlink1000HbsServiceCategoryQoSUpTtlMs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceCategoryQoSUpTtlMs.setStatus("mandatory")
_Winlink1000HbsServiceCategoryQoSDownTtlMs_Type = DisplayString
_Winlink1000HbsServiceCategoryQoSDownTtlMs_Object = MibTableColumn
winlink1000HbsServiceCategoryQoSDownTtlMs = _Winlink1000HbsServiceCategoryQoSDownTtlMs_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 8, 1, 12),
    _Winlink1000HbsServiceCategoryQoSDownTtlMs_Type()
)
winlink1000HbsServiceCategoryQoSDownTtlMs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceCategoryQoSDownTtlMs.setStatus("mandatory")
_Winlink1000HbsServiceCategoryQoSUpStrict_Type = DisplayString
_Winlink1000HbsServiceCategoryQoSUpStrict_Object = MibTableColumn
winlink1000HbsServiceCategoryQoSUpStrict = _Winlink1000HbsServiceCategoryQoSUpStrict_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 8, 1, 13),
    _Winlink1000HbsServiceCategoryQoSUpStrict_Type()
)
winlink1000HbsServiceCategoryQoSUpStrict.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceCategoryQoSUpStrict.setStatus("mandatory")
_Winlink1000HbsServiceCategoryQoSDownStrict_Type = DisplayString
_Winlink1000HbsServiceCategoryQoSDownStrict_Object = MibTableColumn
winlink1000HbsServiceCategoryQoSDownStrict = _Winlink1000HbsServiceCategoryQoSDownStrict_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 8, 1, 14),
    _Winlink1000HbsServiceCategoryQoSDownStrict_Type()
)
winlink1000HbsServiceCategoryQoSDownStrict.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceCategoryQoSDownStrict.setStatus("mandatory")


class _Winlink1000HbsServiceCategoryResourceType_Type(Integer32):
    """Custom type winlink1000HbsServiceCategoryResourceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("assuredAllocation", 1),
          ("bestEffort", 2),
          ("undefined", 3))
    )


_Winlink1000HbsServiceCategoryResourceType_Type.__name__ = "Integer32"
_Winlink1000HbsServiceCategoryResourceType_Object = MibTableColumn
winlink1000HbsServiceCategoryResourceType = _Winlink1000HbsServiceCategoryResourceType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 8, 1, 15),
    _Winlink1000HbsServiceCategoryResourceType_Type()
)
winlink1000HbsServiceCategoryResourceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceCategoryResourceType.setStatus("mandatory")


class _Winlink1000HbsServiceCategoryDelaySensitivity_Type(Integer32):
    """Custom type winlink1000HbsServiceCategoryDelaySensitivity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("sensitive", 1),
          ("insensitive", 2))
    )


_Winlink1000HbsServiceCategoryDelaySensitivity_Type.__name__ = "Integer32"
_Winlink1000HbsServiceCategoryDelaySensitivity_Object = MibTableColumn
winlink1000HbsServiceCategoryDelaySensitivity = _Winlink1000HbsServiceCategoryDelaySensitivity_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 8, 1, 16),
    _Winlink1000HbsServiceCategoryDelaySensitivity_Type()
)
winlink1000HbsServiceCategoryDelaySensitivity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceCategoryDelaySensitivity.setStatus("mandatory")


class _Winlink1000HbsServiceCategoryQoSVoIPState_Type(Integer32):
    """Custom type winlink1000HbsServiceCategoryQoSVoIPState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_Winlink1000HbsServiceCategoryQoSVoIPState_Type.__name__ = "Integer32"
_Winlink1000HbsServiceCategoryQoSVoIPState_Object = MibTableColumn
winlink1000HbsServiceCategoryQoSVoIPState = _Winlink1000HbsServiceCategoryQoSVoIPState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 8, 1, 17),
    _Winlink1000HbsServiceCategoryQoSVoIPState_Type()
)
winlink1000HbsServiceCategoryQoSVoIPState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceCategoryQoSVoIPState.setStatus("mandatory")


class _Winlink1000HbsServiceCategoryPppoeFilter_Type(Integer32):
    """Custom type winlink1000HbsServiceCategoryPppoeFilter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2),
          ("uplink", 3))
    )


_Winlink1000HbsServiceCategoryPppoeFilter_Type.__name__ = "Integer32"
_Winlink1000HbsServiceCategoryPppoeFilter_Object = MibTableColumn
winlink1000HbsServiceCategoryPppoeFilter = _Winlink1000HbsServiceCategoryPppoeFilter_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 8, 1, 18),
    _Winlink1000HbsServiceCategoryPppoeFilter_Type()
)
winlink1000HbsServiceCategoryPppoeFilter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceCategoryPppoeFilter.setStatus("mandatory")


class _Winlink1000HbsServiceCategoryDhcpFilter_Type(Integer32):
    """Custom type winlink1000HbsServiceCategoryDhcpFilter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("dhcpServerFiltering", 2),
          ("dhcpClientFiltering", 3),
          ("dhcpClientAndServerFiltering", 4))
    )


_Winlink1000HbsServiceCategoryDhcpFilter_Type.__name__ = "Integer32"
_Winlink1000HbsServiceCategoryDhcpFilter_Object = MibTableColumn
winlink1000HbsServiceCategoryDhcpFilter = _Winlink1000HbsServiceCategoryDhcpFilter_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 8, 1, 19),
    _Winlink1000HbsServiceCategoryDhcpFilter_Type()
)
winlink1000HbsServiceCategoryDhcpFilter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceCategoryDhcpFilter.setStatus("mandatory")
_Winlink1000HbsServicedotX_ObjectIdentity = ObjectIdentity
winlink1000HbsServicedotX = _Winlink1000HbsServicedotX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 9)
)


class _Winlink1000HbsServicedotXEnable_Type(Integer32):
    """Custom type winlink1000HbsServicedotXEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("mandatoryDisabled", 1),
          ("disabled", 2),
          ("enabled", 3))
    )


_Winlink1000HbsServicedotXEnable_Type.__name__ = "Integer32"
_Winlink1000HbsServicedotXEnable_Object = MibScalar
winlink1000HbsServicedotXEnable = _Winlink1000HbsServicedotXEnable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 9, 1),
    _Winlink1000HbsServicedotXEnable_Type()
)
winlink1000HbsServicedotXEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServicedotXEnable.setStatus("mandatory")
_Winlink1000HbsServicedotXRadiusServerTable_Object = MibTable
winlink1000HbsServicedotXRadiusServerTable = _Winlink1000HbsServicedotXRadiusServerTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 9, 2)
)
if mibBuilder.loadTexts:
    winlink1000HbsServicedotXRadiusServerTable.setStatus("mandatory")
_Winlink1000HbsServicedotXRadiusServerEntry_Object = MibTableRow
winlink1000HbsServicedotXRadiusServerEntry = _Winlink1000HbsServicedotXRadiusServerEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 9, 2, 1)
)
winlink1000HbsServicedotXRadiusServerEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsServicedotXRadiusServerIndex"),
)
if mibBuilder.loadTexts:
    winlink1000HbsServicedotXRadiusServerEntry.setStatus("mandatory")


class _Winlink1000HbsServicedotXRadiusServerIndex_Type(Integer32):
    """Custom type winlink1000HbsServicedotXRadiusServerIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000HbsServicedotXRadiusServerIndex_Type.__name__ = "Integer32"
_Winlink1000HbsServicedotXRadiusServerIndex_Object = MibTableColumn
winlink1000HbsServicedotXRadiusServerIndex = _Winlink1000HbsServicedotXRadiusServerIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 9, 2, 1, 1),
    _Winlink1000HbsServicedotXRadiusServerIndex_Type()
)
winlink1000HbsServicedotXRadiusServerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServicedotXRadiusServerIndex.setStatus("mandatory")
_Winlink1000HbsServicedotXRadiusServerIpAddr_Type = IpAddress
_Winlink1000HbsServicedotXRadiusServerIpAddr_Object = MibTableColumn
winlink1000HbsServicedotXRadiusServerIpAddr = _Winlink1000HbsServicedotXRadiusServerIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 9, 2, 1, 2),
    _Winlink1000HbsServicedotXRadiusServerIpAddr_Type()
)
winlink1000HbsServicedotXRadiusServerIpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServicedotXRadiusServerIpAddr.setStatus("mandatory")
_Winlink1000HbsServicedotXRadiusServerPort_Type = Integer32
_Winlink1000HbsServicedotXRadiusServerPort_Object = MibTableColumn
winlink1000HbsServicedotXRadiusServerPort = _Winlink1000HbsServicedotXRadiusServerPort_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 9, 2, 1, 3),
    _Winlink1000HbsServicedotXRadiusServerPort_Type()
)
winlink1000HbsServicedotXRadiusServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServicedotXRadiusServerPort.setStatus("mandatory")
_Winlink1000HbsServicedotXRadiusServerSecret_Type = DisplayString
_Winlink1000HbsServicedotXRadiusServerSecret_Object = MibTableColumn
winlink1000HbsServicedotXRadiusServerSecret = _Winlink1000HbsServicedotXRadiusServerSecret_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 9, 2, 1, 4),
    _Winlink1000HbsServicedotXRadiusServerSecret_Type()
)
winlink1000HbsServicedotXRadiusServerSecret.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServicedotXRadiusServerSecret.setStatus("mandatory")


class _Winlink1000HbsServicedotXRadiusServerConnectivity_Type(Integer32):
    """Custom type winlink1000HbsServicedotXRadiusServerConnectivity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("success", 1),
          ("noServerResponse", 2),
          ("noServer", 3),
          ("testing", 4),
          ("badSecret", 5),
          ("timeout", 6))
    )


_Winlink1000HbsServicedotXRadiusServerConnectivity_Type.__name__ = "Integer32"
_Winlink1000HbsServicedotXRadiusServerConnectivity_Object = MibTableColumn
winlink1000HbsServicedotXRadiusServerConnectivity = _Winlink1000HbsServicedotXRadiusServerConnectivity_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 9, 2, 1, 5),
    _Winlink1000HbsServicedotXRadiusServerConnectivity_Type()
)
winlink1000HbsServicedotXRadiusServerConnectivity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServicedotXRadiusServerConnectivity.setStatus("mandatory")
_Winlink1000HbsServicedotXRadiusServerAccountingPort_Type = Integer32
_Winlink1000HbsServicedotXRadiusServerAccountingPort_Object = MibTableColumn
winlink1000HbsServicedotXRadiusServerAccountingPort = _Winlink1000HbsServicedotXRadiusServerAccountingPort_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 9, 2, 1, 6),
    _Winlink1000HbsServicedotXRadiusServerAccountingPort_Type()
)
winlink1000HbsServicedotXRadiusServerAccountingPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServicedotXRadiusServerAccountingPort.setStatus("mandatory")
_Winlink1000HbsServicedotXReAuthenticatePeriod_Type = Integer32
_Winlink1000HbsServicedotXReAuthenticatePeriod_Object = MibScalar
winlink1000HbsServicedotXReAuthenticatePeriod = _Winlink1000HbsServicedotXReAuthenticatePeriod_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 9, 3),
    _Winlink1000HbsServicedotXReAuthenticatePeriod_Type()
)
winlink1000HbsServicedotXReAuthenticatePeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServicedotXReAuthenticatePeriod.setStatus("mandatory")


class _Winlink1000HbsServiceRadiusDotXAccountingMode_Type(Integer32):
    """Custom type winlink1000HbsServiceRadiusDotXAccountingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_Winlink1000HbsServiceRadiusDotXAccountingMode_Type.__name__ = "Integer32"
_Winlink1000HbsServiceRadiusDotXAccountingMode_Object = MibScalar
winlink1000HbsServiceRadiusDotXAccountingMode = _Winlink1000HbsServiceRadiusDotXAccountingMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 9, 4),
    _Winlink1000HbsServiceRadiusDotXAccountingMode_Type()
)
winlink1000HbsServiceRadiusDotXAccountingMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceRadiusDotXAccountingMode.setStatus("mandatory")
_Winlink1000HbsServicedotXRadiusAccountingServerTable_Object = MibTable
winlink1000HbsServicedotXRadiusAccountingServerTable = _Winlink1000HbsServicedotXRadiusAccountingServerTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 9, 5)
)
if mibBuilder.loadTexts:
    winlink1000HbsServicedotXRadiusAccountingServerTable.setStatus("mandatory")
_Winlink1000HbsServicedotXRadiusAccountingServerEntry_Object = MibTableRow
winlink1000HbsServicedotXRadiusAccountingServerEntry = _Winlink1000HbsServicedotXRadiusAccountingServerEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 9, 5, 1)
)
winlink1000HbsServicedotXRadiusAccountingServerEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsServicedotXRadiusAccountingServerIndex"),
)
if mibBuilder.loadTexts:
    winlink1000HbsServicedotXRadiusAccountingServerEntry.setStatus("mandatory")


class _Winlink1000HbsServicedotXRadiusAccountingServerIndex_Type(Integer32):
    """Custom type winlink1000HbsServicedotXRadiusAccountingServerIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000HbsServicedotXRadiusAccountingServerIndex_Type.__name__ = "Integer32"
_Winlink1000HbsServicedotXRadiusAccountingServerIndex_Object = MibTableColumn
winlink1000HbsServicedotXRadiusAccountingServerIndex = _Winlink1000HbsServicedotXRadiusAccountingServerIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 9, 5, 1, 1),
    _Winlink1000HbsServicedotXRadiusAccountingServerIndex_Type()
)
winlink1000HbsServicedotXRadiusAccountingServerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServicedotXRadiusAccountingServerIndex.setStatus("mandatory")
_Winlink1000HbsServicedotXRadiusAccountingServerIpAddr_Type = IpAddress
_Winlink1000HbsServicedotXRadiusAccountingServerIpAddr_Object = MibTableColumn
winlink1000HbsServicedotXRadiusAccountingServerIpAddr = _Winlink1000HbsServicedotXRadiusAccountingServerIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 9, 5, 1, 2),
    _Winlink1000HbsServicedotXRadiusAccountingServerIpAddr_Type()
)
winlink1000HbsServicedotXRadiusAccountingServerIpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServicedotXRadiusAccountingServerIpAddr.setStatus("mandatory")
_Winlink1000HbsServicedotXRadiusAccountingServerPort_Type = Integer32
_Winlink1000HbsServicedotXRadiusAccountingServerPort_Object = MibTableColumn
winlink1000HbsServicedotXRadiusAccountingServerPort = _Winlink1000HbsServicedotXRadiusAccountingServerPort_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 9, 5, 1, 3),
    _Winlink1000HbsServicedotXRadiusAccountingServerPort_Type()
)
winlink1000HbsServicedotXRadiusAccountingServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServicedotXRadiusAccountingServerPort.setStatus("mandatory")
_Winlink1000HbsServicedotXRadiusAccountingServerSecret_Type = DisplayString
_Winlink1000HbsServicedotXRadiusAccountingServerSecret_Object = MibTableColumn
winlink1000HbsServicedotXRadiusAccountingServerSecret = _Winlink1000HbsServicedotXRadiusAccountingServerSecret_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 9, 5, 1, 4),
    _Winlink1000HbsServicedotXRadiusAccountingServerSecret_Type()
)
winlink1000HbsServicedotXRadiusAccountingServerSecret.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServicedotXRadiusAccountingServerSecret.setStatus("mandatory")


class _Winlink1000HbsServicedotXRadiusAccountingServerConnectivity_Type(Integer32):
    """Custom type winlink1000HbsServicedotXRadiusAccountingServerConnectivity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("success", 1),
          ("noServerResponse", 2),
          ("noServer", 3),
          ("testing", 4),
          ("badSecret", 5),
          ("timeout", 6))
    )


_Winlink1000HbsServicedotXRadiusAccountingServerConnectivity_Type.__name__ = "Integer32"
_Winlink1000HbsServicedotXRadiusAccountingServerConnectivity_Object = MibTableColumn
winlink1000HbsServicedotXRadiusAccountingServerConnectivity = _Winlink1000HbsServicedotXRadiusAccountingServerConnectivity_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 9, 5, 1, 5),
    _Winlink1000HbsServicedotXRadiusAccountingServerConnectivity_Type()
)
winlink1000HbsServicedotXRadiusAccountingServerConnectivity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServicedotXRadiusAccountingServerConnectivity.setStatus("mandatory")
_Winlink1000HbsServiceIGMPSnooping_ObjectIdentity = ObjectIdentity
winlink1000HbsServiceIGMPSnooping = _Winlink1000HbsServiceIGMPSnooping_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 10)
)


class _Winlink1000HbsServiceIGMPSnoopingEnable_Type(Integer32):
    """Custom type winlink1000HbsServiceIGMPSnoopingEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("mandatoryDisabled", 1),
          ("disabled", 2),
          ("enabled", 3))
    )


_Winlink1000HbsServiceIGMPSnoopingEnable_Type.__name__ = "Integer32"
_Winlink1000HbsServiceIGMPSnoopingEnable_Object = MibScalar
winlink1000HbsServiceIGMPSnoopingEnable = _Winlink1000HbsServiceIGMPSnoopingEnable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 10, 1),
    _Winlink1000HbsServiceIGMPSnoopingEnable_Type()
)
winlink1000HbsServiceIGMPSnoopingEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceIGMPSnoopingEnable.setStatus("mandatory")
_Winlink1000HbsServiceIGMPSnoopingRobustnesVariable_Type = Integer32
_Winlink1000HbsServiceIGMPSnoopingRobustnesVariable_Object = MibScalar
winlink1000HbsServiceIGMPSnoopingRobustnesVariable = _Winlink1000HbsServiceIGMPSnoopingRobustnesVariable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 10, 2),
    _Winlink1000HbsServiceIGMPSnoopingRobustnesVariable_Type()
)
winlink1000HbsServiceIGMPSnoopingRobustnesVariable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceIGMPSnoopingRobustnesVariable.setStatus("mandatory")
_Winlink1000HbsServiceIGMPSnoopingStatistics_ObjectIdentity = ObjectIdentity
winlink1000HbsServiceIGMPSnoopingStatistics = _Winlink1000HbsServiceIGMPSnoopingStatistics_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 10, 3)
)
_Winlink1000HbsServiceIGMPSnoopingStatisticsReportsTable_Object = MibTable
winlink1000HbsServiceIGMPSnoopingStatisticsReportsTable = _Winlink1000HbsServiceIGMPSnoopingStatisticsReportsTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 10, 3, 1)
)
if mibBuilder.loadTexts:
    winlink1000HbsServiceIGMPSnoopingStatisticsReportsTable.setStatus("mandatory")
_Winlink1000HbsServiceIGMPSnoopingStatisticsReportsEntry_Object = MibTableRow
winlink1000HbsServiceIGMPSnoopingStatisticsReportsEntry = _Winlink1000HbsServiceIGMPSnoopingStatisticsReportsEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 10, 3, 1, 1)
)
winlink1000HbsServiceIGMPSnoopingStatisticsReportsEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsServiceIGMPSnoopingStatisticsReportsIndex"),
)
if mibBuilder.loadTexts:
    winlink1000HbsServiceIGMPSnoopingStatisticsReportsEntry.setStatus("mandatory")


class _Winlink1000HbsServiceIGMPSnoopingStatisticsReportsIndex_Type(Integer32):
    """Custom type winlink1000HbsServiceIGMPSnoopingStatisticsReportsIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000HbsServiceIGMPSnoopingStatisticsReportsIndex_Type.__name__ = "Integer32"
_Winlink1000HbsServiceIGMPSnoopingStatisticsReportsIndex_Object = MibTableColumn
winlink1000HbsServiceIGMPSnoopingStatisticsReportsIndex = _Winlink1000HbsServiceIGMPSnoopingStatisticsReportsIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 10, 3, 1, 1, 1),
    _Winlink1000HbsServiceIGMPSnoopingStatisticsReportsIndex_Type()
)
winlink1000HbsServiceIGMPSnoopingStatisticsReportsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServiceIGMPSnoopingStatisticsReportsIndex.setStatus("mandatory")
_Winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV1_Type = Integer32
_Winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV1_Object = MibTableColumn
winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV1 = _Winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV1_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 10, 3, 1, 1, 2),
    _Winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV1_Type()
)
winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV1.setStatus("mandatory")
_Winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV2_Type = Integer32
_Winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV2_Object = MibTableColumn
winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV2 = _Winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV2_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 10, 3, 1, 1, 3),
    _Winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV2_Type()
)
winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV2.setStatus("mandatory")
_Winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV3_Type = Integer32
_Winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV3_Object = MibTableColumn
winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV3 = _Winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV3_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 10, 3, 1, 1, 4),
    _Winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV3_Type()
)
winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV3.setStatus("mandatory")
_Winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV3Src_Type = Integer32
_Winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV3Src_Object = MibTableColumn
winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV3Src = _Winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV3Src_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 10, 3, 1, 1, 5),
    _Winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV3Src_Type()
)
winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV3Src.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV3Src.setStatus("mandatory")
_Winlink1000HbsServiceIGMPSnoopingStatisticsQueriesTable_Object = MibTable
winlink1000HbsServiceIGMPSnoopingStatisticsQueriesTable = _Winlink1000HbsServiceIGMPSnoopingStatisticsQueriesTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 10, 3, 2)
)
if mibBuilder.loadTexts:
    winlink1000HbsServiceIGMPSnoopingStatisticsQueriesTable.setStatus("mandatory")
_Winlink1000HbsServiceIGMPSnoopingStatisticsQueriesEntry_Object = MibTableRow
winlink1000HbsServiceIGMPSnoopingStatisticsQueriesEntry = _Winlink1000HbsServiceIGMPSnoopingStatisticsQueriesEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 10, 3, 2, 1)
)
winlink1000HbsServiceIGMPSnoopingStatisticsQueriesEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsServiceIGMPSnoopingStatisticsQueriesIndex"),
)
if mibBuilder.loadTexts:
    winlink1000HbsServiceIGMPSnoopingStatisticsQueriesEntry.setStatus("mandatory")


class _Winlink1000HbsServiceIGMPSnoopingStatisticsQueriesIndex_Type(Integer32):
    """Custom type winlink1000HbsServiceIGMPSnoopingStatisticsQueriesIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000HbsServiceIGMPSnoopingStatisticsQueriesIndex_Type.__name__ = "Integer32"
_Winlink1000HbsServiceIGMPSnoopingStatisticsQueriesIndex_Object = MibTableColumn
winlink1000HbsServiceIGMPSnoopingStatisticsQueriesIndex = _Winlink1000HbsServiceIGMPSnoopingStatisticsQueriesIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 10, 3, 2, 1, 1),
    _Winlink1000HbsServiceIGMPSnoopingStatisticsQueriesIndex_Type()
)
winlink1000HbsServiceIGMPSnoopingStatisticsQueriesIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServiceIGMPSnoopingStatisticsQueriesIndex.setStatus("mandatory")
_Winlink1000HbsServiceIGMPSnoopingStatisticsQueriesCounterV1_Type = Integer32
_Winlink1000HbsServiceIGMPSnoopingStatisticsQueriesCounterV1_Object = MibTableColumn
winlink1000HbsServiceIGMPSnoopingStatisticsQueriesCounterV1 = _Winlink1000HbsServiceIGMPSnoopingStatisticsQueriesCounterV1_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 10, 3, 2, 1, 2),
    _Winlink1000HbsServiceIGMPSnoopingStatisticsQueriesCounterV1_Type()
)
winlink1000HbsServiceIGMPSnoopingStatisticsQueriesCounterV1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServiceIGMPSnoopingStatisticsQueriesCounterV1.setStatus("mandatory")
_Winlink1000HbsServiceIGMPSnoopingStatisticsGeneralQueriesCntV2_Type = Integer32
_Winlink1000HbsServiceIGMPSnoopingStatisticsGeneralQueriesCntV2_Object = MibTableColumn
winlink1000HbsServiceIGMPSnoopingStatisticsGeneralQueriesCntV2 = _Winlink1000HbsServiceIGMPSnoopingStatisticsGeneralQueriesCntV2_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 10, 3, 2, 1, 3),
    _Winlink1000HbsServiceIGMPSnoopingStatisticsGeneralQueriesCntV2_Type()
)
winlink1000HbsServiceIGMPSnoopingStatisticsGeneralQueriesCntV2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServiceIGMPSnoopingStatisticsGeneralQueriesCntV2.setStatus("mandatory")
_Winlink1000HbsServiceIGMPSnoopingStatisticsSpecificQueriesCntV2_Type = Integer32
_Winlink1000HbsServiceIGMPSnoopingStatisticsSpecificQueriesCntV2_Object = MibTableColumn
winlink1000HbsServiceIGMPSnoopingStatisticsSpecificQueriesCntV2 = _Winlink1000HbsServiceIGMPSnoopingStatisticsSpecificQueriesCntV2_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 10, 3, 2, 1, 4),
    _Winlink1000HbsServiceIGMPSnoopingStatisticsSpecificQueriesCntV2_Type()
)
winlink1000HbsServiceIGMPSnoopingStatisticsSpecificQueriesCntV2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServiceIGMPSnoopingStatisticsSpecificQueriesCntV2.setStatus("mandatory")
_Winlink1000HbsServiceIGMPSnoopingStatisticsGeneralQueriesCntV3_Type = Integer32
_Winlink1000HbsServiceIGMPSnoopingStatisticsGeneralQueriesCntV3_Object = MibTableColumn
winlink1000HbsServiceIGMPSnoopingStatisticsGeneralQueriesCntV3 = _Winlink1000HbsServiceIGMPSnoopingStatisticsGeneralQueriesCntV3_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 10, 3, 2, 1, 5),
    _Winlink1000HbsServiceIGMPSnoopingStatisticsGeneralQueriesCntV3_Type()
)
winlink1000HbsServiceIGMPSnoopingStatisticsGeneralQueriesCntV3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServiceIGMPSnoopingStatisticsGeneralQueriesCntV3.setStatus("mandatory")
_Winlink1000HbsServiceIGMPSnoopingStatisticsSpecificQueriesCntV3_Type = Integer32
_Winlink1000HbsServiceIGMPSnoopingStatisticsSpecificQueriesCntV3_Object = MibTableColumn
winlink1000HbsServiceIGMPSnoopingStatisticsSpecificQueriesCntV3 = _Winlink1000HbsServiceIGMPSnoopingStatisticsSpecificQueriesCntV3_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 10, 3, 2, 1, 6),
    _Winlink1000HbsServiceIGMPSnoopingStatisticsSpecificQueriesCntV3_Type()
)
winlink1000HbsServiceIGMPSnoopingStatisticsSpecificQueriesCntV3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServiceIGMPSnoopingStatisticsSpecificQueriesCntV3.setStatus("mandatory")
_Winlink1000HbsServiceIGMPSnoopingStatisticsSrcSpcQueriesCntV3_Type = Integer32
_Winlink1000HbsServiceIGMPSnoopingStatisticsSrcSpcQueriesCntV3_Object = MibTableColumn
winlink1000HbsServiceIGMPSnoopingStatisticsSrcSpcQueriesCntV3 = _Winlink1000HbsServiceIGMPSnoopingStatisticsSrcSpcQueriesCntV3_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 10, 3, 2, 1, 7),
    _Winlink1000HbsServiceIGMPSnoopingStatisticsSrcSpcQueriesCntV3_Type()
)
winlink1000HbsServiceIGMPSnoopingStatisticsSrcSpcQueriesCntV3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServiceIGMPSnoopingStatisticsSrcSpcQueriesCntV3.setStatus("mandatory")
_Winlink1000HbsServiceIGMPSnoopingVlanId_Type = Integer32
_Winlink1000HbsServiceIGMPSnoopingVlanId_Object = MibScalar
winlink1000HbsServiceIGMPSnoopingVlanId = _Winlink1000HbsServiceIGMPSnoopingVlanId_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 10, 4),
    _Winlink1000HbsServiceIGMPSnoopingVlanId_Type()
)
winlink1000HbsServiceIGMPSnoopingVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceIGMPSnoopingVlanId.setStatus("mandatory")
_Winlink1000HbsServiceProtocolFilterTable_Object = MibTable
winlink1000HbsServiceProtocolFilterTable = _Winlink1000HbsServiceProtocolFilterTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 11)
)
if mibBuilder.loadTexts:
    winlink1000HbsServiceProtocolFilterTable.setStatus("mandatory")
_Winlink1000HbsServiceProtocolFilterEntry_Object = MibTableRow
winlink1000HbsServiceProtocolFilterEntry = _Winlink1000HbsServiceProtocolFilterEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 11, 1)
)
winlink1000HbsServiceProtocolFilterEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsServiceProtocolFilterIndex"),
)
if mibBuilder.loadTexts:
    winlink1000HbsServiceProtocolFilterEntry.setStatus("mandatory")


class _Winlink1000HbsServiceProtocolFilterIndex_Type(Integer32):
    """Custom type winlink1000HbsServiceProtocolFilterIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000HbsServiceProtocolFilterIndex_Type.__name__ = "Integer32"
_Winlink1000HbsServiceProtocolFilterIndex_Object = MibTableColumn
winlink1000HbsServiceProtocolFilterIndex = _Winlink1000HbsServiceProtocolFilterIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 11, 1, 1),
    _Winlink1000HbsServiceProtocolFilterIndex_Type()
)
winlink1000HbsServiceProtocolFilterIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServiceProtocolFilterIndex.setStatus("mandatory")


class _Winlink1000HbsServicePppoeFilter_Type(Integer32):
    """Custom type winlink1000HbsServicePppoeFilter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2),
          ("uplink", 3))
    )


_Winlink1000HbsServicePppoeFilter_Type.__name__ = "Integer32"
_Winlink1000HbsServicePppoeFilter_Object = MibTableColumn
winlink1000HbsServicePppoeFilter = _Winlink1000HbsServicePppoeFilter_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 11, 1, 2),
    _Winlink1000HbsServicePppoeFilter_Type()
)
winlink1000HbsServicePppoeFilter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServicePppoeFilter.setStatus("mandatory")


class _Winlink1000HbsServiceDhcpFilter_Type(Integer32):
    """Custom type winlink1000HbsServiceDhcpFilter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("dhcpServerFiltering", 2),
          ("dhcpClientFiltering", 3),
          ("dhcpClientAndServerFiltering", 4))
    )


_Winlink1000HbsServiceDhcpFilter_Type.__name__ = "Integer32"
_Winlink1000HbsServiceDhcpFilter_Object = MibTableColumn
winlink1000HbsServiceDhcpFilter = _Winlink1000HbsServiceDhcpFilter_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 11, 1, 3),
    _Winlink1000HbsServiceDhcpFilter_Type()
)
winlink1000HbsServiceDhcpFilter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceDhcpFilter.setStatus("mandatory")
_Winlink1000HbsServiceVlanTranslation_ObjectIdentity = ObjectIdentity
winlink1000HbsServiceVlanTranslation = _Winlink1000HbsServiceVlanTranslation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 12)
)
_Winlink1000HbsServiceVlanTranslationTable_Object = MibTable
winlink1000HbsServiceVlanTranslationTable = _Winlink1000HbsServiceVlanTranslationTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 12, 1)
)
if mibBuilder.loadTexts:
    winlink1000HbsServiceVlanTranslationTable.setStatus("mandatory")
_Winlink1000HbsServiceVlanTranslationEntry_Object = MibTableRow
winlink1000HbsServiceVlanTranslationEntry = _Winlink1000HbsServiceVlanTranslationEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 12, 1, 1)
)
winlink1000HbsServiceVlanTranslationEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsServiceVlanTranslationIndex"),
)
if mibBuilder.loadTexts:
    winlink1000HbsServiceVlanTranslationEntry.setStatus("mandatory")


class _Winlink1000HbsServiceVlanTranslationIndex_Type(Integer32):
    """Custom type winlink1000HbsServiceVlanTranslationIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000HbsServiceVlanTranslationIndex_Type.__name__ = "Integer32"
_Winlink1000HbsServiceVlanTranslationIndex_Object = MibTableColumn
winlink1000HbsServiceVlanTranslationIndex = _Winlink1000HbsServiceVlanTranslationIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 12, 1, 1, 1),
    _Winlink1000HbsServiceVlanTranslationIndex_Type()
)
winlink1000HbsServiceVlanTranslationIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsServiceVlanTranslationIndex.setStatus("mandatory")
_Winlink1000HbsServiceVlanTranslationRule1_Type = DisplayString
_Winlink1000HbsServiceVlanTranslationRule1_Object = MibTableColumn
winlink1000HbsServiceVlanTranslationRule1 = _Winlink1000HbsServiceVlanTranslationRule1_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 12, 1, 1, 2),
    _Winlink1000HbsServiceVlanTranslationRule1_Type()
)
winlink1000HbsServiceVlanTranslationRule1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceVlanTranslationRule1.setStatus("mandatory")
_Winlink1000HbsServiceVlanTranslationRule2_Type = DisplayString
_Winlink1000HbsServiceVlanTranslationRule2_Object = MibTableColumn
winlink1000HbsServiceVlanTranslationRule2 = _Winlink1000HbsServiceVlanTranslationRule2_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 12, 1, 1, 3),
    _Winlink1000HbsServiceVlanTranslationRule2_Type()
)
winlink1000HbsServiceVlanTranslationRule2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceVlanTranslationRule2.setStatus("mandatory")
_Winlink1000HbsServiceVlanTranslationRule3_Type = DisplayString
_Winlink1000HbsServiceVlanTranslationRule3_Object = MibTableColumn
winlink1000HbsServiceVlanTranslationRule3 = _Winlink1000HbsServiceVlanTranslationRule3_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 12, 1, 1, 4),
    _Winlink1000HbsServiceVlanTranslationRule3_Type()
)
winlink1000HbsServiceVlanTranslationRule3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceVlanTranslationRule3.setStatus("mandatory")
_Winlink1000HbsServiceVlanTranslationRule4_Type = DisplayString
_Winlink1000HbsServiceVlanTranslationRule4_Object = MibTableColumn
winlink1000HbsServiceVlanTranslationRule4 = _Winlink1000HbsServiceVlanTranslationRule4_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 12, 1, 1, 5),
    _Winlink1000HbsServiceVlanTranslationRule4_Type()
)
winlink1000HbsServiceVlanTranslationRule4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceVlanTranslationRule4.setStatus("mandatory")
_Winlink1000HbsServiceVlanTranslationRule5_Type = DisplayString
_Winlink1000HbsServiceVlanTranslationRule5_Object = MibTableColumn
winlink1000HbsServiceVlanTranslationRule5 = _Winlink1000HbsServiceVlanTranslationRule5_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 12, 1, 1, 6),
    _Winlink1000HbsServiceVlanTranslationRule5_Type()
)
winlink1000HbsServiceVlanTranslationRule5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceVlanTranslationRule5.setStatus("mandatory")
_Winlink1000HbsServiceVlanTranslationRule6_Type = DisplayString
_Winlink1000HbsServiceVlanTranslationRule6_Object = MibTableColumn
winlink1000HbsServiceVlanTranslationRule6 = _Winlink1000HbsServiceVlanTranslationRule6_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 12, 1, 1, 7),
    _Winlink1000HbsServiceVlanTranslationRule6_Type()
)
winlink1000HbsServiceVlanTranslationRule6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceVlanTranslationRule6.setStatus("mandatory")
_Winlink1000HbsServiceVlanTranslationRule7_Type = DisplayString
_Winlink1000HbsServiceVlanTranslationRule7_Object = MibTableColumn
winlink1000HbsServiceVlanTranslationRule7 = _Winlink1000HbsServiceVlanTranslationRule7_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 12, 1, 1, 8),
    _Winlink1000HbsServiceVlanTranslationRule7_Type()
)
winlink1000HbsServiceVlanTranslationRule7.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceVlanTranslationRule7.setStatus("mandatory")
_Winlink1000HbsServiceVlanTranslationRule8_Type = DisplayString
_Winlink1000HbsServiceVlanTranslationRule8_Object = MibTableColumn
winlink1000HbsServiceVlanTranslationRule8 = _Winlink1000HbsServiceVlanTranslationRule8_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 3, 12, 1, 1, 9),
    _Winlink1000HbsServiceVlanTranslationRule8_Type()
)
winlink1000HbsServiceVlanTranslationRule8.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsServiceVlanTranslationRule8.setStatus("mandatory")
_Winlink1000HbsPerfMon_ObjectIdentity = ObjectIdentity
winlink1000HbsPerfMon = _Winlink1000HbsPerfMon_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4)
)
_Winlink1000HbsPerfMonThreshTable_Object = MibTable
winlink1000HbsPerfMonThreshTable = _Winlink1000HbsPerfMonThreshTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 1)
)
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonThreshTable.setStatus("mandatory")
_Winlink1000HbsPerfMonThreshEntry_Object = MibTableRow
winlink1000HbsPerfMonThreshEntry = _Winlink1000HbsPerfMonThreshEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 1, 1)
)
winlink1000HbsPerfMonThreshEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsPerfMonThreshIndex"),
)
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonThreshEntry.setStatus("mandatory")


class _Winlink1000HbsPerfMonThreshIndex_Type(Integer32):
    """Custom type winlink1000HbsPerfMonThreshIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000HbsPerfMonThreshIndex_Type.__name__ = "Integer32"
_Winlink1000HbsPerfMonThreshIndex_Object = MibTableColumn
winlink1000HbsPerfMonThreshIndex = _Winlink1000HbsPerfMonThreshIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 1, 1, 1),
    _Winlink1000HbsPerfMonThreshIndex_Type()
)
winlink1000HbsPerfMonThreshIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonThreshIndex.setStatus("mandatory")
_Winlink1000HbsPerfMonTxThresh1_Type = Integer32
_Winlink1000HbsPerfMonTxThresh1_Object = MibTableColumn
winlink1000HbsPerfMonTxThresh1 = _Winlink1000HbsPerfMonTxThresh1_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 1, 1, 2),
    _Winlink1000HbsPerfMonTxThresh1_Type()
)
winlink1000HbsPerfMonTxThresh1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonTxThresh1.setStatus("mandatory")
_Winlink1000HbsPerfMonRxThresh1_Type = Integer32
_Winlink1000HbsPerfMonRxThresh1_Object = MibTableColumn
winlink1000HbsPerfMonRxThresh1 = _Winlink1000HbsPerfMonRxThresh1_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 1, 1, 3),
    _Winlink1000HbsPerfMonRxThresh1_Type()
)
winlink1000HbsPerfMonRxThresh1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonRxThresh1.setStatus("mandatory")
_Winlink1000HbsPerfMonRxThresh2_Type = Integer32
_Winlink1000HbsPerfMonRxThresh2_Object = MibTableColumn
winlink1000HbsPerfMonRxThresh2 = _Winlink1000HbsPerfMonRxThresh2_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 1, 1, 4),
    _Winlink1000HbsPerfMonRxThresh2_Type()
)
winlink1000HbsPerfMonRxThresh2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonRxThresh2.setStatus("mandatory")
_Winlink1000HbsPerfMonBBERThresh1_Type = Integer32
_Winlink1000HbsPerfMonBBERThresh1_Object = MibTableColumn
winlink1000HbsPerfMonBBERThresh1 = _Winlink1000HbsPerfMonBBERThresh1_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 1, 1, 5),
    _Winlink1000HbsPerfMonBBERThresh1_Type()
)
winlink1000HbsPerfMonBBERThresh1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonBBERThresh1.setStatus("mandatory")
_Winlink1000HbsPerfMonEstThroughputThreshKbps_Type = Integer32
_Winlink1000HbsPerfMonEstThroughputThreshKbps_Object = MibTableColumn
winlink1000HbsPerfMonEstThroughputThreshKbps = _Winlink1000HbsPerfMonEstThroughputThreshKbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 1, 1, 6),
    _Winlink1000HbsPerfMonEstThroughputThreshKbps_Type()
)
winlink1000HbsPerfMonEstThroughputThreshKbps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonEstThroughputThreshKbps.setStatus("mandatory")
_Winlink1000HbsPerfMonHighTrafficThreshKbps_Type = Integer32
_Winlink1000HbsPerfMonHighTrafficThreshKbps_Object = MibTableColumn
winlink1000HbsPerfMonHighTrafficThreshKbps = _Winlink1000HbsPerfMonHighTrafficThreshKbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 1, 1, 7),
    _Winlink1000HbsPerfMonHighTrafficThreshKbps_Type()
)
winlink1000HbsPerfMonHighTrafficThreshKbps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonHighTrafficThreshKbps.setStatus("mandatory")
_Winlink1000HbsPerfMonAirGenCurrTable_Object = MibTable
winlink1000HbsPerfMonAirGenCurrTable = _Winlink1000HbsPerfMonAirGenCurrTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 2)
)
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonAirGenCurrTable.setStatus("mandatory")
_Winlink1000HbsPerfMonAirGenCurrEntry_Object = MibTableRow
winlink1000HbsPerfMonAirGenCurrEntry = _Winlink1000HbsPerfMonAirGenCurrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 2, 1)
)
winlink1000HbsPerfMonAirGenCurrEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonAirGenCurrEntry.setStatus("mandatory")


class _Winlink1000HbsPerfMonAirGenCurrRxMBytes_Type(Gauge32):
    """Custom type winlink1000HbsPerfMonAirGenCurrRxMBytes based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11250),
    )


_Winlink1000HbsPerfMonAirGenCurrRxMBytes_Type.__name__ = "Gauge32"
_Winlink1000HbsPerfMonAirGenCurrRxMBytes_Object = MibTableColumn
winlink1000HbsPerfMonAirGenCurrRxMBytes = _Winlink1000HbsPerfMonAirGenCurrRxMBytes_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 2, 1, 1),
    _Winlink1000HbsPerfMonAirGenCurrRxMBytes_Type()
)
winlink1000HbsPerfMonAirGenCurrRxMBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonAirGenCurrRxMBytes.setStatus("mandatory")


class _Winlink1000HbsPerfMonAirGenCurrTxMBytes_Type(Gauge32):
    """Custom type winlink1000HbsPerfMonAirGenCurrTxMBytes based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11250),
    )


_Winlink1000HbsPerfMonAirGenCurrTxMBytes_Type.__name__ = "Gauge32"
_Winlink1000HbsPerfMonAirGenCurrTxMBytes_Object = MibTableColumn
winlink1000HbsPerfMonAirGenCurrTxMBytes = _Winlink1000HbsPerfMonAirGenCurrTxMBytes_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 2, 1, 2),
    _Winlink1000HbsPerfMonAirGenCurrTxMBytes_Type()
)
winlink1000HbsPerfMonAirGenCurrTxMBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonAirGenCurrTxMBytes.setStatus("mandatory")


class _Winlink1000HbsPerfMonAirGenCurrEthCapacityThreshUnder_Type(Gauge32):
    """Custom type winlink1000HbsPerfMonAirGenCurrEthCapacityThreshUnder based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000HbsPerfMonAirGenCurrEthCapacityThreshUnder_Type.__name__ = "Gauge32"
_Winlink1000HbsPerfMonAirGenCurrEthCapacityThreshUnder_Object = MibTableColumn
winlink1000HbsPerfMonAirGenCurrEthCapacityThreshUnder = _Winlink1000HbsPerfMonAirGenCurrEthCapacityThreshUnder_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 2, 1, 3),
    _Winlink1000HbsPerfMonAirGenCurrEthCapacityThreshUnder_Type()
)
winlink1000HbsPerfMonAirGenCurrEthCapacityThreshUnder.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonAirGenCurrEthCapacityThreshUnder.setStatus("mandatory")


class _Winlink1000HbsPerfMonAirGenCurrHighTrafficThreshExceed_Type(Gauge32):
    """Custom type winlink1000HbsPerfMonAirGenCurrHighTrafficThreshExceed based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000HbsPerfMonAirGenCurrHighTrafficThreshExceed_Type.__name__ = "Gauge32"
_Winlink1000HbsPerfMonAirGenCurrHighTrafficThreshExceed_Object = MibTableColumn
winlink1000HbsPerfMonAirGenCurrHighTrafficThreshExceed = _Winlink1000HbsPerfMonAirGenCurrHighTrafficThreshExceed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 2, 1, 4),
    _Winlink1000HbsPerfMonAirGenCurrHighTrafficThreshExceed_Type()
)
winlink1000HbsPerfMonAirGenCurrHighTrafficThreshExceed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonAirGenCurrHighTrafficThreshExceed.setStatus("mandatory")


class _Winlink1000HbsPerfMonAirGenCurrActiveSeconds_Type(Gauge32):
    """Custom type winlink1000HbsPerfMonAirGenCurrActiveSeconds based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000HbsPerfMonAirGenCurrActiveSeconds_Type.__name__ = "Gauge32"
_Winlink1000HbsPerfMonAirGenCurrActiveSeconds_Object = MibTableColumn
winlink1000HbsPerfMonAirGenCurrActiveSeconds = _Winlink1000HbsPerfMonAirGenCurrActiveSeconds_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 2, 1, 5),
    _Winlink1000HbsPerfMonAirGenCurrActiveSeconds_Type()
)
winlink1000HbsPerfMonAirGenCurrActiveSeconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonAirGenCurrActiveSeconds.setStatus("mandatory")
_Winlink1000HbsPerfMonAirGenIntervalTable_Object = MibTable
winlink1000HbsPerfMonAirGenIntervalTable = _Winlink1000HbsPerfMonAirGenIntervalTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 3)
)
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonAirGenIntervalTable.setStatus("mandatory")
_Winlink1000HbsPerfMonAirGenIntervalEntry_Object = MibTableRow
winlink1000HbsPerfMonAirGenIntervalEntry = _Winlink1000HbsPerfMonAirGenIntervalEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 3, 1)
)
winlink1000HbsPerfMonAirGenIntervalEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsPerfMonAirGenIntervalIdx"),
)
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonAirGenIntervalEntry.setStatus("mandatory")


class _Winlink1000HbsPerfMonAirGenIntervalIdx_Type(Integer32):
    """Custom type winlink1000HbsPerfMonAirGenIntervalIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_Winlink1000HbsPerfMonAirGenIntervalIdx_Type.__name__ = "Integer32"
_Winlink1000HbsPerfMonAirGenIntervalIdx_Object = MibTableColumn
winlink1000HbsPerfMonAirGenIntervalIdx = _Winlink1000HbsPerfMonAirGenIntervalIdx_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 3, 1, 1),
    _Winlink1000HbsPerfMonAirGenIntervalIdx_Type()
)
winlink1000HbsPerfMonAirGenIntervalIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonAirGenIntervalIdx.setStatus("mandatory")


class _Winlink1000HbsPerfMonAirGenIntervalRxMBytes_Type(Gauge32):
    """Custom type winlink1000HbsPerfMonAirGenIntervalRxMBytes based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11250),
    )


_Winlink1000HbsPerfMonAirGenIntervalRxMBytes_Type.__name__ = "Gauge32"
_Winlink1000HbsPerfMonAirGenIntervalRxMBytes_Object = MibTableColumn
winlink1000HbsPerfMonAirGenIntervalRxMBytes = _Winlink1000HbsPerfMonAirGenIntervalRxMBytes_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 3, 1, 2),
    _Winlink1000HbsPerfMonAirGenIntervalRxMBytes_Type()
)
winlink1000HbsPerfMonAirGenIntervalRxMBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonAirGenIntervalRxMBytes.setStatus("mandatory")


class _Winlink1000HbsPerfMonAirGenIntervalTxMBytes_Type(Gauge32):
    """Custom type winlink1000HbsPerfMonAirGenIntervalTxMBytes based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11250),
    )


_Winlink1000HbsPerfMonAirGenIntervalTxMBytes_Type.__name__ = "Gauge32"
_Winlink1000HbsPerfMonAirGenIntervalTxMBytes_Object = MibTableColumn
winlink1000HbsPerfMonAirGenIntervalTxMBytes = _Winlink1000HbsPerfMonAirGenIntervalTxMBytes_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 3, 1, 3),
    _Winlink1000HbsPerfMonAirGenIntervalTxMBytes_Type()
)
winlink1000HbsPerfMonAirGenIntervalTxMBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonAirGenIntervalTxMBytes.setStatus("mandatory")


class _Winlink1000HbsPerfMonAirGenIntervalEthCapacityThreshUnder_Type(Gauge32):
    """Custom type winlink1000HbsPerfMonAirGenIntervalEthCapacityThreshUnder based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000HbsPerfMonAirGenIntervalEthCapacityThreshUnder_Type.__name__ = "Gauge32"
_Winlink1000HbsPerfMonAirGenIntervalEthCapacityThreshUnder_Object = MibTableColumn
winlink1000HbsPerfMonAirGenIntervalEthCapacityThreshUnder = _Winlink1000HbsPerfMonAirGenIntervalEthCapacityThreshUnder_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 3, 1, 4),
    _Winlink1000HbsPerfMonAirGenIntervalEthCapacityThreshUnder_Type()
)
winlink1000HbsPerfMonAirGenIntervalEthCapacityThreshUnder.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonAirGenIntervalEthCapacityThreshUnder.setStatus("mandatory")


class _Winlink1000HbsPerfMonAirGenIntervalHighTrafficThreshExceed_Type(Gauge32):
    """Custom type winlink1000HbsPerfMonAirGenIntervalHighTrafficThreshExceed based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000HbsPerfMonAirGenIntervalHighTrafficThreshExceed_Type.__name__ = "Gauge32"
_Winlink1000HbsPerfMonAirGenIntervalHighTrafficThreshExceed_Object = MibTableColumn
winlink1000HbsPerfMonAirGenIntervalHighTrafficThreshExceed = _Winlink1000HbsPerfMonAirGenIntervalHighTrafficThreshExceed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 3, 1, 5),
    _Winlink1000HbsPerfMonAirGenIntervalHighTrafficThreshExceed_Type()
)
winlink1000HbsPerfMonAirGenIntervalHighTrafficThreshExceed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonAirGenIntervalHighTrafficThreshExceed.setStatus("mandatory")


class _Winlink1000HbsPerfMonAirGenIntervalActiveSeconds_Type(Gauge32):
    """Custom type winlink1000HbsPerfMonAirGenIntervalActiveSeconds based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 900),
    )


_Winlink1000HbsPerfMonAirGenIntervalActiveSeconds_Type.__name__ = "Gauge32"
_Winlink1000HbsPerfMonAirGenIntervalActiveSeconds_Object = MibTableColumn
winlink1000HbsPerfMonAirGenIntervalActiveSeconds = _Winlink1000HbsPerfMonAirGenIntervalActiveSeconds_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 3, 1, 6),
    _Winlink1000HbsPerfMonAirGenIntervalActiveSeconds_Type()
)
winlink1000HbsPerfMonAirGenIntervalActiveSeconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonAirGenIntervalActiveSeconds.setStatus("mandatory")
_Winlink1000HbsPerfMonAirGenDayTable_Object = MibTable
winlink1000HbsPerfMonAirGenDayTable = _Winlink1000HbsPerfMonAirGenDayTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 4)
)
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonAirGenDayTable.setStatus("mandatory")
_Winlink1000HbsPerfMonAirGenDayEntry_Object = MibTableRow
winlink1000HbsPerfMonAirGenDayEntry = _Winlink1000HbsPerfMonAirGenDayEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 4, 1)
)
winlink1000HbsPerfMonAirGenDayEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000HbsPerfMonAirGenDayIdx"),
)
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonAirGenDayEntry.setStatus("mandatory")


class _Winlink1000HbsPerfMonAirGenDayIdx_Type(Integer32):
    """Custom type winlink1000HbsPerfMonAirGenDayIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_Winlink1000HbsPerfMonAirGenDayIdx_Type.__name__ = "Integer32"
_Winlink1000HbsPerfMonAirGenDayIdx_Object = MibTableColumn
winlink1000HbsPerfMonAirGenDayIdx = _Winlink1000HbsPerfMonAirGenDayIdx_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 4, 1, 1),
    _Winlink1000HbsPerfMonAirGenDayIdx_Type()
)
winlink1000HbsPerfMonAirGenDayIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonAirGenDayIdx.setStatus("mandatory")


class _Winlink1000HbsPerfMonAirGenDayRxMBytes_Type(Gauge32):
    """Custom type winlink1000HbsPerfMonAirGenDayRxMBytes based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1080000),
    )


_Winlink1000HbsPerfMonAirGenDayRxMBytes_Type.__name__ = "Gauge32"
_Winlink1000HbsPerfMonAirGenDayRxMBytes_Object = MibTableColumn
winlink1000HbsPerfMonAirGenDayRxMBytes = _Winlink1000HbsPerfMonAirGenDayRxMBytes_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 4, 1, 2),
    _Winlink1000HbsPerfMonAirGenDayRxMBytes_Type()
)
winlink1000HbsPerfMonAirGenDayRxMBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonAirGenDayRxMBytes.setStatus("mandatory")


class _Winlink1000HbsPerfMonAirGenDayTxMBytes_Type(Gauge32):
    """Custom type winlink1000HbsPerfMonAirGenDayTxMBytes based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1080000),
    )


_Winlink1000HbsPerfMonAirGenDayTxMBytes_Type.__name__ = "Gauge32"
_Winlink1000HbsPerfMonAirGenDayTxMBytes_Object = MibTableColumn
winlink1000HbsPerfMonAirGenDayTxMBytes = _Winlink1000HbsPerfMonAirGenDayTxMBytes_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 4, 1, 3),
    _Winlink1000HbsPerfMonAirGenDayTxMBytes_Type()
)
winlink1000HbsPerfMonAirGenDayTxMBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonAirGenDayTxMBytes.setStatus("mandatory")


class _Winlink1000HbsPerfMonAirGenDayEthCapacityThreshUnder_Type(Gauge32):
    """Custom type winlink1000HbsPerfMonAirGenDayEthCapacityThreshUnder based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 86400),
    )


_Winlink1000HbsPerfMonAirGenDayEthCapacityThreshUnder_Type.__name__ = "Gauge32"
_Winlink1000HbsPerfMonAirGenDayEthCapacityThreshUnder_Object = MibTableColumn
winlink1000HbsPerfMonAirGenDayEthCapacityThreshUnder = _Winlink1000HbsPerfMonAirGenDayEthCapacityThreshUnder_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 4, 1, 4),
    _Winlink1000HbsPerfMonAirGenDayEthCapacityThreshUnder_Type()
)
winlink1000HbsPerfMonAirGenDayEthCapacityThreshUnder.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonAirGenDayEthCapacityThreshUnder.setStatus("mandatory")


class _Winlink1000HbsPerfMonAirGenDayHighTrafficThreshExceed_Type(Gauge32):
    """Custom type winlink1000HbsPerfMonAirGenDayHighTrafficThreshExceed based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 86400),
    )


_Winlink1000HbsPerfMonAirGenDayHighTrafficThreshExceed_Type.__name__ = "Gauge32"
_Winlink1000HbsPerfMonAirGenDayHighTrafficThreshExceed_Object = MibTableColumn
winlink1000HbsPerfMonAirGenDayHighTrafficThreshExceed = _Winlink1000HbsPerfMonAirGenDayHighTrafficThreshExceed_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 4, 1, 5),
    _Winlink1000HbsPerfMonAirGenDayHighTrafficThreshExceed_Type()
)
winlink1000HbsPerfMonAirGenDayHighTrafficThreshExceed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonAirGenDayHighTrafficThreshExceed.setStatus("mandatory")


class _Winlink1000HbsPerfMonAirGenDayActiveSeconds_Type(Gauge32):
    """Custom type winlink1000HbsPerfMonAirGenDayActiveSeconds based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 86400),
    )


_Winlink1000HbsPerfMonAirGenDayActiveSeconds_Type.__name__ = "Gauge32"
_Winlink1000HbsPerfMonAirGenDayActiveSeconds_Object = MibTableColumn
winlink1000HbsPerfMonAirGenDayActiveSeconds = _Winlink1000HbsPerfMonAirGenDayActiveSeconds_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 4, 4, 1, 6),
    _Winlink1000HbsPerfMonAirGenDayActiveSeconds_Type()
)
winlink1000HbsPerfMonAirGenDayActiveSeconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HbsPerfMonAirGenDayActiveSeconds.setStatus("mandatory")
_Winlink1000HbsAdmin_ObjectIdentity = ObjectIdentity
winlink1000HbsAdmin = _Winlink1000HbsAdmin_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 5)
)


class _Winlink1000HbsAdminInstallationConfirmationRequired_Type(Integer32):
    """Custom type winlink1000HbsAdminInstallationConfirmationRequired based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_Winlink1000HbsAdminInstallationConfirmationRequired_Type.__name__ = "Integer32"
_Winlink1000HbsAdminInstallationConfirmationRequired_Object = MibScalar
winlink1000HbsAdminInstallationConfirmationRequired = _Winlink1000HbsAdminInstallationConfirmationRequired_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 5, 1),
    _Winlink1000HbsAdminInstallationConfirmationRequired_Type()
)
winlink1000HbsAdminInstallationConfirmationRequired.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAdminInstallationConfirmationRequired.setStatus("mandatory")


class _Winlink1000HbsAdminRemoteTrapGenerationMode_Type(Integer32):
    """Custom type winlink1000HbsAdminRemoteTrapGenerationMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_Winlink1000HbsAdminRemoteTrapGenerationMode_Type.__name__ = "Integer32"
_Winlink1000HbsAdminRemoteTrapGenerationMode_Object = MibScalar
winlink1000HbsAdminRemoteTrapGenerationMode = _Winlink1000HbsAdminRemoteTrapGenerationMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 5, 2),
    _Winlink1000HbsAdminRemoteTrapGenerationMode_Type()
)
winlink1000HbsAdminRemoteTrapGenerationMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAdminRemoteTrapGenerationMode.setStatus("mandatory")


class _Winlink1000HbsAdminBackwardsSupport_Type(Integer32):
    """Custom type winlink1000HbsAdminBackwardsSupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_Winlink1000HbsAdminBackwardsSupport_Type.__name__ = "Integer32"
_Winlink1000HbsAdminBackwardsSupport_Object = MibScalar
winlink1000HbsAdminBackwardsSupport = _Winlink1000HbsAdminBackwardsSupport_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 3, 5, 3),
    _Winlink1000HbsAdminBackwardsSupport_Type()
)
winlink1000HbsAdminBackwardsSupport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HbsAdminBackwardsSupport.setStatus("mandatory")
_Winlink1000Hsu_ObjectIdentity = ObjectIdentity
winlink1000Hsu = _Winlink1000Hsu_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4)
)
_Winlink1000HsuAir_ObjectIdentity = ObjectIdentity
winlink1000HsuAir = _Winlink1000HsuAir_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1)
)


class _Winlink1000HsuAirState_Type(Integer32):
    """Custom type winlink1000HsuAirState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              5,
              6,
              7,
              8,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("init", 1),
          ("bitFailed", 2),
          ("spectrumMeasurement", 4),
          ("scanning", 5),
          ("cac", 6),
          ("transceiving", 7),
          ("standBy", 8),
          ("fail", 13),
          ("mute", 14))
    )


_Winlink1000HsuAirState_Type.__name__ = "Integer32"
_Winlink1000HsuAirState_Object = MibScalar
winlink1000HsuAirState = _Winlink1000HsuAirState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 1),
    _Winlink1000HsuAirState_Type()
)
winlink1000HsuAirState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuAirState.setStatus("mandatory")


class _Winlink1000HsuAirLinkState_Type(Integer32):
    """Custom type winlink1000HsuAirLinkState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("noSync", 1),
          ("violated", 2),
          ("syncUnregistered", 3),
          ("syncRegistered", 4),
          ("authenticationError", 5),
          ("swUpgradeRequired", 6),
          ("syncRegisteredPassive", 7),
          ("syncRegisteredALP", 8))
    )


_Winlink1000HsuAirLinkState_Type.__name__ = "Integer32"
_Winlink1000HsuAirLinkState_Object = MibScalar
winlink1000HsuAirLinkState = _Winlink1000HsuAirLinkState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 2),
    _Winlink1000HsuAirLinkState_Type()
)
winlink1000HsuAirLinkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuAirLinkState.setStatus("mandatory")
_Winlink1000HsuAirHsuId_Type = Integer32
_Winlink1000HsuAirHsuId_Object = MibScalar
winlink1000HsuAirHsuId = _Winlink1000HsuAirHsuId_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 3),
    _Winlink1000HsuAirHsuId_Type()
)
winlink1000HsuAirHsuId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuAirHsuId.setStatus("mandatory")
_Winlink1000HsuAirLocalDeregister_Type = Integer32
_Winlink1000HsuAirLocalDeregister_Object = MibScalar
winlink1000HsuAirLocalDeregister = _Winlink1000HsuAirLocalDeregister_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 5),
    _Winlink1000HsuAirLocalDeregister_Type()
)
winlink1000HsuAirLocalDeregister.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HsuAirLocalDeregister.setStatus("mandatory")
_Winlink1000HsuAirRemoteCompressedMon_Type = OctetString
_Winlink1000HsuAirRemoteCompressedMon_Object = MibScalar
winlink1000HsuAirRemoteCompressedMon = _Winlink1000HsuAirRemoteCompressedMon_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 6),
    _Winlink1000HsuAirRemoteCompressedMon_Type()
)
winlink1000HsuAirRemoteCompressedMon.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuAirRemoteCompressedMon.setStatus("mandatory")
_Winlink1000HsuAirRemoteCompressedStatic_Type = DisplayString
_Winlink1000HsuAirRemoteCompressedStatic_Object = MibScalar
winlink1000HsuAirRemoteCompressedStatic = _Winlink1000HsuAirRemoteCompressedStatic_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 7),
    _Winlink1000HsuAirRemoteCompressedStatic_Type()
)
winlink1000HsuAirRemoteCompressedStatic.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuAirRemoteCompressedStatic.setStatus("mandatory")
_Winlink1000HsuAirRssThreshSync_Type = Integer32
_Winlink1000HsuAirRssThreshSync_Object = MibScalar
winlink1000HsuAirRssThreshSync = _Winlink1000HsuAirRssThreshSync_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 8),
    _Winlink1000HsuAirRssThreshSync_Type()
)
winlink1000HsuAirRssThreshSync.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HsuAirRssThreshSync.setStatus("mandatory")
_Winlink1000HsuAirAlignment_ObjectIdentity = ObjectIdentity
winlink1000HsuAirAlignment = _Winlink1000HsuAirAlignment_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 9)
)


class _Winlink1000HsuAirAlignmentCmd_Type(Integer32):
    """Custom type winlink1000HsuAirAlignmentCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("startAlignmentProcess", 1),
          ("evaluateCurrentManualAngle", 2),
          ("finishAlignmentProcess", 3),
          ("abortAlignmentProcess", 4),
          ("evaluteBestManualAngle", 5),
          ("stopAlignmentProcess", 6),
          ("startGyro", 7),
          ("stopGyro", 8))
    )


_Winlink1000HsuAirAlignmentCmd_Type.__name__ = "Integer32"
_Winlink1000HsuAirAlignmentCmd_Object = MibScalar
winlink1000HsuAirAlignmentCmd = _Winlink1000HsuAirAlignmentCmd_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 9, 1),
    _Winlink1000HsuAirAlignmentCmd_Type()
)
winlink1000HsuAirAlignmentCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HsuAirAlignmentCmd.setStatus("mandatory")


class _Winlink1000HsuAirAlignmentStatus_Type(Integer32):
    """Custom type winlink1000HsuAirAlignmentStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(-1,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("na", -1),
          ("iss", 1),
          ("csa", 2),
          ("biDirectionalLink", 3),
          ("evaluate2x2", 4),
          ("evaluate3x3", 5),
          ("alignmentFinished", 6))
    )


_Winlink1000HsuAirAlignmentStatus_Type.__name__ = "Integer32"
_Winlink1000HsuAirAlignmentStatus_Object = MibScalar
winlink1000HsuAirAlignmentStatus = _Winlink1000HsuAirAlignmentStatus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 9, 2),
    _Winlink1000HsuAirAlignmentStatus_Type()
)
winlink1000HsuAirAlignmentStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuAirAlignmentStatus.setStatus("mandatory")
_Winlink1000HsuAirAlignment3x3Step_Type = Integer32
_Winlink1000HsuAirAlignment3x3Step_Object = MibScalar
winlink1000HsuAirAlignment3x3Step = _Winlink1000HsuAirAlignment3x3Step_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 9, 3),
    _Winlink1000HsuAirAlignment3x3Step_Type()
)
winlink1000HsuAirAlignment3x3Step.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuAirAlignment3x3Step.setStatus("mandatory")
_Winlink1000HsuAirAlignment3x3TotalSteps_Type = Integer32
_Winlink1000HsuAirAlignment3x3TotalSteps_Object = MibScalar
winlink1000HsuAirAlignment3x3TotalSteps = _Winlink1000HsuAirAlignment3x3TotalSteps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 9, 4),
    _Winlink1000HsuAirAlignment3x3TotalSteps_Type()
)
winlink1000HsuAirAlignment3x3TotalSteps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuAirAlignment3x3TotalSteps.setStatus("mandatory")
_Winlink1000HsuAirAlignmentEvalTo_Type = Integer32
_Winlink1000HsuAirAlignmentEvalTo_Object = MibScalar
winlink1000HsuAirAlignmentEvalTo = _Winlink1000HsuAirAlignmentEvalTo_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 9, 5),
    _Winlink1000HsuAirAlignmentEvalTo_Type()
)
winlink1000HsuAirAlignmentEvalTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HsuAirAlignmentEvalTo.setStatus("mandatory")
_Winlink1000HsuAirAlignmentLastReport_ObjectIdentity = ObjectIdentity
winlink1000HsuAirAlignmentLastReport = _Winlink1000HsuAirAlignmentLastReport_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 9, 6)
)
_Winlink1000HsuAirAlignmentLastReportManualAngle_Type = Integer32
_Winlink1000HsuAirAlignmentLastReportManualAngle_Object = MibScalar
winlink1000HsuAirAlignmentLastReportManualAngle = _Winlink1000HsuAirAlignmentLastReportManualAngle_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 9, 6, 1),
    _Winlink1000HsuAirAlignmentLastReportManualAngle_Type()
)
winlink1000HsuAirAlignmentLastReportManualAngle.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuAirAlignmentLastReportManualAngle.setStatus("mandatory")
_Winlink1000HsuAirAlignmentLastReportTputUpSector_Type = Integer32
_Winlink1000HsuAirAlignmentLastReportTputUpSector_Object = MibScalar
winlink1000HsuAirAlignmentLastReportTputUpSector = _Winlink1000HsuAirAlignmentLastReportTputUpSector_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 9, 6, 2),
    _Winlink1000HsuAirAlignmentLastReportTputUpSector_Type()
)
winlink1000HsuAirAlignmentLastReportTputUpSector.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuAirAlignmentLastReportTputUpSector.setStatus("mandatory")
_Winlink1000HsuAirAlignmentLastReportTputDownSector_Type = Integer32
_Winlink1000HsuAirAlignmentLastReportTputDownSector_Object = MibScalar
winlink1000HsuAirAlignmentLastReportTputDownSector = _Winlink1000HsuAirAlignmentLastReportTputDownSector_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 9, 6, 3),
    _Winlink1000HsuAirAlignmentLastReportTputDownSector_Type()
)
winlink1000HsuAirAlignmentLastReportTputDownSector.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuAirAlignmentLastReportTputDownSector.setStatus("mandatory")
_Winlink1000HsuAirAlignmentLastReportMcsIndexUp_Type = Integer32
_Winlink1000HsuAirAlignmentLastReportMcsIndexUp_Object = MibScalar
winlink1000HsuAirAlignmentLastReportMcsIndexUp = _Winlink1000HsuAirAlignmentLastReportMcsIndexUp_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 9, 6, 4),
    _Winlink1000HsuAirAlignmentLastReportMcsIndexUp_Type()
)
winlink1000HsuAirAlignmentLastReportMcsIndexUp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuAirAlignmentLastReportMcsIndexUp.setStatus("mandatory")
_Winlink1000HsuAirAlignmentLastReportMcsIndexDown_Type = Integer32
_Winlink1000HsuAirAlignmentLastReportMcsIndexDown_Object = MibScalar
winlink1000HsuAirAlignmentLastReportMcsIndexDown = _Winlink1000HsuAirAlignmentLastReportMcsIndexDown_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 9, 6, 5),
    _Winlink1000HsuAirAlignmentLastReportMcsIndexDown_Type()
)
winlink1000HsuAirAlignmentLastReportMcsIndexDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuAirAlignmentLastReportMcsIndexDown.setStatus("mandatory")


class _Winlink1000HsuAirAlignmentLastReportState_Type(Integer32):
    """Custom type winlink1000HsuAirAlignmentLastReportState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("finishedSuccessfully", 1),
          ("partialEvaluationTimeoutExceeded", 2),
          ("evaluationAbortedTimeoutExceeded", 3),
          ("evaluationAbortedUnstableAntenna", 4),
          ("evaluationAbortedSyncLost", 5),
          ("evaluationAbortedExternalCommand", 6),
          ("evaluating", 7))
    )


_Winlink1000HsuAirAlignmentLastReportState_Type.__name__ = "Integer32"
_Winlink1000HsuAirAlignmentLastReportState_Object = MibScalar
winlink1000HsuAirAlignmentLastReportState = _Winlink1000HsuAirAlignmentLastReportState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 9, 6, 6),
    _Winlink1000HsuAirAlignmentLastReportState_Type()
)
winlink1000HsuAirAlignmentLastReportState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuAirAlignmentLastReportState.setStatus("mandatory")
_Winlink1000HsuAirAlignmentLastReportElectronicAnglesHsu_Type = DisplayString
_Winlink1000HsuAirAlignmentLastReportElectronicAnglesHsu_Object = MibScalar
winlink1000HsuAirAlignmentLastReportElectronicAnglesHsu = _Winlink1000HsuAirAlignmentLastReportElectronicAnglesHsu_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 9, 6, 7),
    _Winlink1000HsuAirAlignmentLastReportElectronicAnglesHsu_Type()
)
winlink1000HsuAirAlignmentLastReportElectronicAnglesHsu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuAirAlignmentLastReportElectronicAnglesHsu.setStatus("mandatory")
_Winlink1000HsuAirAlignmentLastReportElectronicAnglesHbs_Type = DisplayString
_Winlink1000HsuAirAlignmentLastReportElectronicAnglesHbs_Object = MibScalar
winlink1000HsuAirAlignmentLastReportElectronicAnglesHbs = _Winlink1000HsuAirAlignmentLastReportElectronicAnglesHbs_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 9, 6, 8),
    _Winlink1000HsuAirAlignmentLastReportElectronicAnglesHbs_Type()
)
winlink1000HsuAirAlignmentLastReportElectronicAnglesHbs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuAirAlignmentLastReportElectronicAnglesHbs.setStatus("mandatory")
_Winlink1000HsuAirAlignmentLastReportRss_Type = DisplayString
_Winlink1000HsuAirAlignmentLastReportRss_Object = MibScalar
winlink1000HsuAirAlignmentLastReportRss = _Winlink1000HsuAirAlignmentLastReportRss_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 9, 6, 9),
    _Winlink1000HsuAirAlignmentLastReportRss_Type()
)
winlink1000HsuAirAlignmentLastReportRss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuAirAlignmentLastReportRss.setStatus("mandatory")
_Winlink1000HsuAirCompressedMon_Type = OctetString
_Winlink1000HsuAirCompressedMon_Object = MibScalar
winlink1000HsuAirCompressedMon = _Winlink1000HsuAirCompressedMon_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 10),
    _Winlink1000HsuAirCompressedMon_Type()
)
winlink1000HsuAirCompressedMon.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuAirCompressedMon.setStatus("mandatory")


class _Winlink1000HsuAirReAlignmentOnStartupEnable_Type(Integer32):
    """Custom type winlink1000HsuAirReAlignmentOnStartupEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_Winlink1000HsuAirReAlignmentOnStartupEnable_Type.__name__ = "Integer32"
_Winlink1000HsuAirReAlignmentOnStartupEnable_Object = MibScalar
winlink1000HsuAirReAlignmentOnStartupEnable = _Winlink1000HsuAirReAlignmentOnStartupEnable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 11),
    _Winlink1000HsuAirReAlignmentOnStartupEnable_Type()
)
winlink1000HsuAirReAlignmentOnStartupEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HsuAirReAlignmentOnStartupEnable.setStatus("mandatory")
_Winlink1000HsuAirInstallation_ObjectIdentity = ObjectIdentity
winlink1000HsuAirInstallation = _Winlink1000HsuAirInstallation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 12)
)
_Winlink1000HsuAirInstallationCBW_Type = Integer32
_Winlink1000HsuAirInstallationCBW_Object = MibScalar
winlink1000HsuAirInstallationCBW = _Winlink1000HsuAirInstallationCBW_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 12, 1),
    _Winlink1000HsuAirInstallationCBW_Type()
)
winlink1000HsuAirInstallationCBW.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HsuAirInstallationCBW.setStatus("mandatory")
_Winlink1000HsuAirInstallationFreq_Type = Integer32
_Winlink1000HsuAirInstallationFreq_Object = MibScalar
winlink1000HsuAirInstallationFreq = _Winlink1000HsuAirInstallationFreq_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 12, 2),
    _Winlink1000HsuAirInstallationFreq_Type()
)
winlink1000HsuAirInstallationFreq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HsuAirInstallationFreq.setStatus("mandatory")
_Winlink1000HsuAirInstallationUlRss_Type = Integer32
_Winlink1000HsuAirInstallationUlRss_Object = MibScalar
winlink1000HsuAirInstallationUlRss = _Winlink1000HsuAirInstallationUlRss_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 12, 3),
    _Winlink1000HsuAirInstallationUlRss_Type()
)
winlink1000HsuAirInstallationUlRss.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HsuAirInstallationUlRss.setStatus("mandatory")
_Winlink1000HsuAirInstallationDlRss_Type = Integer32
_Winlink1000HsuAirInstallationDlRss_Object = MibScalar
winlink1000HsuAirInstallationDlRss = _Winlink1000HsuAirInstallationDlRss_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 12, 4),
    _Winlink1000HsuAirInstallationDlRss_Type()
)
winlink1000HsuAirInstallationDlRss.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HsuAirInstallationDlRss.setStatus("mandatory")
_Winlink1000HsuAirInstallationUlTput_Type = Integer32
_Winlink1000HsuAirInstallationUlTput_Object = MibScalar
winlink1000HsuAirInstallationUlTput = _Winlink1000HsuAirInstallationUlTput_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 12, 5),
    _Winlink1000HsuAirInstallationUlTput_Type()
)
winlink1000HsuAirInstallationUlTput.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HsuAirInstallationUlTput.setStatus("mandatory")
_Winlink1000HsuAirInstallationDlTput_Type = Integer32
_Winlink1000HsuAirInstallationDlTput_Object = MibScalar
winlink1000HsuAirInstallationDlTput = _Winlink1000HsuAirInstallationDlTput_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 12, 6),
    _Winlink1000HsuAirInstallationDlTput_Type()
)
winlink1000HsuAirInstallationDlTput.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HsuAirInstallationDlTput.setStatus("mandatory")
_Winlink1000HsuAirInstallationBandId_Type = DisplayString
_Winlink1000HsuAirInstallationBandId_Object = MibScalar
winlink1000HsuAirInstallationBandId = _Winlink1000HsuAirInstallationBandId_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 12, 7),
    _Winlink1000HsuAirInstallationBandId_Type()
)
winlink1000HsuAirInstallationBandId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HsuAirInstallationBandId.setStatus("mandatory")
_Winlink1000HsuAirInstallationSrvType_Type = Integer32
_Winlink1000HsuAirInstallationSrvType_Object = MibScalar
winlink1000HsuAirInstallationSrvType = _Winlink1000HsuAirInstallationSrvType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 12, 8),
    _Winlink1000HsuAirInstallationSrvType_Type()
)
winlink1000HsuAirInstallationSrvType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HsuAirInstallationSrvType.setStatus("mandatory")
_Winlink1000HsuAirInstallationGenStr_Type = DisplayString
_Winlink1000HsuAirInstallationGenStr_Object = MibScalar
winlink1000HsuAirInstallationGenStr = _Winlink1000HsuAirInstallationGenStr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 12, 9),
    _Winlink1000HsuAirInstallationGenStr_Type()
)
winlink1000HsuAirInstallationGenStr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HsuAirInstallationGenStr.setStatus("mandatory")
_Winlink1000HsuAirInstallationDateTime_Type = DisplayString
_Winlink1000HsuAirInstallationDateTime_Object = MibScalar
winlink1000HsuAirInstallationDateTime = _Winlink1000HsuAirInstallationDateTime_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 12, 10),
    _Winlink1000HsuAirInstallationDateTime_Type()
)
winlink1000HsuAirInstallationDateTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HsuAirInstallationDateTime.setStatus("mandatory")
_Winlink1000HsuAirFreqAndCBWList_Type = DisplayString
_Winlink1000HsuAirFreqAndCBWList_Object = MibScalar
winlink1000HsuAirFreqAndCBWList = _Winlink1000HsuAirFreqAndCBWList_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 1, 13),
    _Winlink1000HsuAirFreqAndCBWList_Type()
)
winlink1000HsuAirFreqAndCBWList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuAirFreqAndCBWList.setStatus("mandatory")
_Winlink1000HsuService_ObjectIdentity = ObjectIdentity
winlink1000HsuService = _Winlink1000HsuService_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 2)
)
_Winlink1000HsuServiceCommandStr_Type = DisplayString
_Winlink1000HsuServiceCommandStr_Object = MibScalar
winlink1000HsuServiceCommandStr = _Winlink1000HsuServiceCommandStr_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 2, 1),
    _Winlink1000HsuServiceCommandStr_Type()
)
winlink1000HsuServiceCommandStr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HsuServiceCommandStr.setStatus("mandatory")


class _Winlink1000HsuServiceHsuType_Type(Integer32):
    """Custom type winlink1000HsuServiceHsuType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("fixed", 1),
          ("stationary", 2),
          ("mobile", 3),
          ("transport", 4),
          ("mobileCoChannel", 5),
          ("residential", 6),
          ("nFixed", 7),
          ("nResidential", 8))
    )


_Winlink1000HsuServiceHsuType_Type.__name__ = "Integer32"
_Winlink1000HsuServiceHsuType_Object = MibScalar
winlink1000HsuServiceHsuType = _Winlink1000HsuServiceHsuType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 2, 2),
    _Winlink1000HsuServiceHsuType_Type()
)
winlink1000HsuServiceHsuType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HsuServiceHsuType.setStatus("mandatory")
_Winlink1000HsuServiceHsuLevel_Type = Integer32
_Winlink1000HsuServiceHsuLevel_Object = MibScalar
winlink1000HsuServiceHsuLevel = _Winlink1000HsuServiceHsuLevel_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 2, 3),
    _Winlink1000HsuServiceHsuLevel_Type()
)
winlink1000HsuServiceHsuLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HsuServiceHsuLevel.setStatus("mandatory")
_Winlink1000HsuServiceRadiusIdentificationKeyId_Type = DisplayString
_Winlink1000HsuServiceRadiusIdentificationKeyId_Object = MibScalar
winlink1000HsuServiceRadiusIdentificationKeyId = _Winlink1000HsuServiceRadiusIdentificationKeyId_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 2, 4),
    _Winlink1000HsuServiceRadiusIdentificationKeyId_Type()
)
winlink1000HsuServiceRadiusIdentificationKeyId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HsuServiceRadiusIdentificationKeyId.setStatus("mandatory")
_Winlink1000HsuMuteMU_ObjectIdentity = ObjectIdentity
winlink1000HsuMuteMU = _Winlink1000HsuMuteMU_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 2, 5)
)


class _Winlink1000HsuMuteMUStatus_Type(Integer32):
    """Custom type winlink1000HsuMuteMUStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_Winlink1000HsuMuteMUStatus_Type.__name__ = "Integer32"
_Winlink1000HsuMuteMUStatus_Object = MibScalar
winlink1000HsuMuteMUStatus = _Winlink1000HsuMuteMUStatus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 2, 5, 1),
    _Winlink1000HsuMuteMUStatus_Type()
)
winlink1000HsuMuteMUStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuMuteMUStatus.setStatus("mandatory")
_Winlink1000HsuMuteMUTrainID_Type = Integer32
_Winlink1000HsuMuteMUTrainID_Object = MibScalar
winlink1000HsuMuteMUTrainID = _Winlink1000HsuMuteMUTrainID_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 2, 5, 2),
    _Winlink1000HsuMuteMUTrainID_Type()
)
winlink1000HsuMuteMUTrainID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuMuteMUTrainID.setStatus("mandatory")
_Winlink1000HsuMuteMUNumberOfMUsInTrain_Type = Integer32
_Winlink1000HsuMuteMUNumberOfMUsInTrain_Object = MibScalar
winlink1000HsuMuteMUNumberOfMUsInTrain = _Winlink1000HsuMuteMUNumberOfMUsInTrain_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 2, 5, 3),
    _Winlink1000HsuMuteMUNumberOfMUsInTrain_Type()
)
winlink1000HsuMuteMUNumberOfMUsInTrain.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuMuteMUNumberOfMUsInTrain.setStatus("mandatory")


class _Winlink1000HsuServiceFirewallMode_Type(Integer32):
    """Custom type winlink1000HsuServiceFirewallMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_Winlink1000HsuServiceFirewallMode_Type.__name__ = "Integer32"
_Winlink1000HsuServiceFirewallMode_Object = MibScalar
winlink1000HsuServiceFirewallMode = _Winlink1000HsuServiceFirewallMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 2, 6),
    _Winlink1000HsuServiceFirewallMode_Type()
)
winlink1000HsuServiceFirewallMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HsuServiceFirewallMode.setStatus("mandatory")
_Winlink1000HsuServiceFirewallTable_Type = DisplayString
_Winlink1000HsuServiceFirewallTable_Object = MibScalar
winlink1000HsuServiceFirewallTable = _Winlink1000HsuServiceFirewallTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 2, 7),
    _Winlink1000HsuServiceFirewallTable_Type()
)
winlink1000HsuServiceFirewallTable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HsuServiceFirewallTable.setStatus("mandatory")
_Winlink1000HsuEthernet_ObjectIdentity = ObjectIdentity
winlink1000HsuEthernet = _Winlink1000HsuEthernet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 3)
)
_Winlink1000HsuEthernetPoE_ObjectIdentity = ObjectIdentity
winlink1000HsuEthernetPoE = _Winlink1000HsuEthernetPoE_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 3, 1)
)


class _Winlink1000HsuEthernetPoESupported_Type(Integer32):
    """Custom type winlink1000HsuEthernetPoESupported based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notSupported", 1),
          ("supported", 2))
    )


_Winlink1000HsuEthernetPoESupported_Type.__name__ = "Integer32"
_Winlink1000HsuEthernetPoESupported_Object = MibScalar
winlink1000HsuEthernetPoESupported = _Winlink1000HsuEthernetPoESupported_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 3, 1, 1),
    _Winlink1000HsuEthernetPoESupported_Type()
)
winlink1000HsuEthernetPoESupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuEthernetPoESupported.setStatus("mandatory")
_Winlink1000HsuEthernetPoETemperature_Type = Integer32
_Winlink1000HsuEthernetPoETemperature_Object = MibScalar
winlink1000HsuEthernetPoETemperature = _Winlink1000HsuEthernetPoETemperature_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 3, 1, 2),
    _Winlink1000HsuEthernetPoETemperature_Type()
)
winlink1000HsuEthernetPoETemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuEthernetPoETemperature.setStatus("mandatory")
_Winlink1000HsuEthernetPoEEquConsumption_Type = Integer32
_Winlink1000HsuEthernetPoEEquConsumption_Object = MibScalar
winlink1000HsuEthernetPoEEquConsumption = _Winlink1000HsuEthernetPoEEquConsumption_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 3, 1, 3),
    _Winlink1000HsuEthernetPoEEquConsumption_Type()
)
winlink1000HsuEthernetPoEEquConsumption.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuEthernetPoEEquConsumption.setStatus("mandatory")
_Winlink1000HsuEthernetPoEEquVoltage_Type = Integer32
_Winlink1000HsuEthernetPoEEquVoltage_Object = MibScalar
winlink1000HsuEthernetPoEEquVoltage = _Winlink1000HsuEthernetPoEEquVoltage_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 3, 1, 4),
    _Winlink1000HsuEthernetPoEEquVoltage_Type()
)
winlink1000HsuEthernetPoEEquVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuEthernetPoEEquVoltage.setStatus("mandatory")
_Winlink1000HsuAdmin_ObjectIdentity = ObjectIdentity
winlink1000HsuAdmin = _Winlink1000HsuAdmin_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 4)
)


class _Winlink1000HsuAdminInstallationConfirmationRequired_Type(Integer32):
    """Custom type winlink1000HsuAdminInstallationConfirmationRequired based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_Winlink1000HsuAdminInstallationConfirmationRequired_Type.__name__ = "Integer32"
_Winlink1000HsuAdminInstallationConfirmationRequired_Object = MibScalar
winlink1000HsuAdminInstallationConfirmationRequired = _Winlink1000HsuAdminInstallationConfirmationRequired_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 4, 1),
    _Winlink1000HsuAdminInstallationConfirmationRequired_Type()
)
winlink1000HsuAdminInstallationConfirmationRequired.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuAdminInstallationConfirmationRequired.setStatus("mandatory")


class _Winlink1000HsuAdminSiteSurveySupport_Type(Integer32):
    """Custom type winlink1000HsuAdminSiteSurveySupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notSupported", 1),
          ("supported", 2))
    )


_Winlink1000HsuAdminSiteSurveySupport_Type.__name__ = "Integer32"
_Winlink1000HsuAdminSiteSurveySupport_Object = MibScalar
winlink1000HsuAdminSiteSurveySupport = _Winlink1000HsuAdminSiteSurveySupport_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 4, 2),
    _Winlink1000HsuAdminSiteSurveySupport_Type()
)
winlink1000HsuAdminSiteSurveySupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000HsuAdminSiteSurveySupport.setStatus("mandatory")


class _Winlink1000HsuAdminSiteSurveyMode_Type(Integer32):
    """Custom type winlink1000HsuAdminSiteSurveyMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notActivated", 1),
          ("activated", 2))
    )


_Winlink1000HsuAdminSiteSurveyMode_Type.__name__ = "Integer32"
_Winlink1000HsuAdminSiteSurveyMode_Object = MibScalar
winlink1000HsuAdminSiteSurveyMode = _Winlink1000HsuAdminSiteSurveyMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 4, 4, 3),
    _Winlink1000HsuAdminSiteSurveyMode_Type()
)
winlink1000HsuAdminSiteSurveyMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000HsuAdminSiteSurveyMode.setStatus("mandatory")
_Winlink1000SN_ObjectIdentity = ObjectIdentity
winlink1000SN = _Winlink1000SN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5)
)


class _Winlink1000SNPowerSource_Type(Integer32):
    """Custom type winlink1000SNPowerSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("external", 1),
          ("battery", 2))
    )


_Winlink1000SNPowerSource_Type.__name__ = "Integer32"
_Winlink1000SNPowerSource_Object = MibScalar
winlink1000SNPowerSource = _Winlink1000SNPowerSource_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 1),
    _Winlink1000SNPowerSource_Type()
)
winlink1000SNPowerSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000SNPowerSource.setStatus("mandatory")
_Winlink1000SNBattery_ObjectIdentity = ObjectIdentity
winlink1000SNBattery = _Winlink1000SNBattery_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 2)
)
_Winlink1000SNBatteryVoltage_Type = DisplayString
_Winlink1000SNBatteryVoltage_Object = MibScalar
winlink1000SNBatteryVoltage = _Winlink1000SNBatteryVoltage_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 2, 1),
    _Winlink1000SNBatteryVoltage_Type()
)
winlink1000SNBatteryVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000SNBatteryVoltage.setStatus("mandatory")
_Winlink1000SNBatteryCurrent_Type = DisplayString
_Winlink1000SNBatteryCurrent_Object = MibScalar
winlink1000SNBatteryCurrent = _Winlink1000SNBatteryCurrent_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 2, 2),
    _Winlink1000SNBatteryCurrent_Type()
)
winlink1000SNBatteryCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000SNBatteryCurrent.setStatus("mandatory")
_Winlink1000SNBatterySerialNumber_Type = DisplayString
_Winlink1000SNBatterySerialNumber_Object = MibScalar
winlink1000SNBatterySerialNumber = _Winlink1000SNBatterySerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 2, 3),
    _Winlink1000SNBatterySerialNumber_Type()
)
winlink1000SNBatterySerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000SNBatterySerialNumber.setStatus("mandatory")
_Winlink1000SNBatteryStatus_Type = DisplayString
_Winlink1000SNBatteryStatus_Object = MibScalar
winlink1000SNBatteryStatus = _Winlink1000SNBatteryStatus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 2, 4),
    _Winlink1000SNBatteryStatus_Type()
)
winlink1000SNBatteryStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000SNBatteryStatus.setStatus("mandatory")
_Winlink1000SNBatteryTemperature_Type = Integer32
_Winlink1000SNBatteryTemperature_Object = MibScalar
winlink1000SNBatteryTemperature = _Winlink1000SNBatteryTemperature_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 2, 5),
    _Winlink1000SNBatteryTemperature_Type()
)
winlink1000SNBatteryTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000SNBatteryTemperature.setStatus("mandatory")
_Winlink1000SNBatteryModel_Type = DisplayString
_Winlink1000SNBatteryModel_Object = MibScalar
winlink1000SNBatteryModel = _Winlink1000SNBatteryModel_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 2, 6),
    _Winlink1000SNBatteryModel_Type()
)
winlink1000SNBatteryModel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000SNBatteryModel.setStatus("mandatory")


class _Winlink1000SNBatteryRemainPercent_Type(Integer32):
    """Custom type winlink1000SNBatteryRemainPercent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_Winlink1000SNBatteryRemainPercent_Type.__name__ = "Integer32"
_Winlink1000SNBatteryRemainPercent_Object = MibScalar
winlink1000SNBatteryRemainPercent = _Winlink1000SNBatteryRemainPercent_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 2, 7),
    _Winlink1000SNBatteryRemainPercent_Type()
)
winlink1000SNBatteryRemainPercent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000SNBatteryRemainPercent.setStatus("mandatory")
_Winlink1000SNBatteryRemainTime_Type = Integer32
_Winlink1000SNBatteryRemainTime_Object = MibScalar
winlink1000SNBatteryRemainTime = _Winlink1000SNBatteryRemainTime_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 2, 8),
    _Winlink1000SNBatteryRemainTime_Type()
)
winlink1000SNBatteryRemainTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000SNBatteryRemainTime.setStatus("mandatory")
_Winlink1000SNConfig_ObjectIdentity = ObjectIdentity
winlink1000SNConfig = _Winlink1000SNConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3)
)
_Winlink1000SNConfigAlarms_ObjectIdentity = ObjectIdentity
winlink1000SNConfigAlarms = _Winlink1000SNConfigAlarms_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3, 1)
)
_Winlink1000SNConfigAlarmsSensorInput1TrapDescription_Type = DisplayString
_Winlink1000SNConfigAlarmsSensorInput1TrapDescription_Object = MibScalar
winlink1000SNConfigAlarmsSensorInput1TrapDescription = _Winlink1000SNConfigAlarmsSensorInput1TrapDescription_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3, 1, 1),
    _Winlink1000SNConfigAlarmsSensorInput1TrapDescription_Type()
)
winlink1000SNConfigAlarmsSensorInput1TrapDescription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000SNConfigAlarmsSensorInput1TrapDescription.setStatus("mandatory")
_Winlink1000SNConfigAlarmsSensorInput2TrapDescription_Type = DisplayString
_Winlink1000SNConfigAlarmsSensorInput2TrapDescription_Object = MibScalar
winlink1000SNConfigAlarmsSensorInput2TrapDescription = _Winlink1000SNConfigAlarmsSensorInput2TrapDescription_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3, 1, 2),
    _Winlink1000SNConfigAlarmsSensorInput2TrapDescription_Type()
)
winlink1000SNConfigAlarmsSensorInput2TrapDescription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000SNConfigAlarmsSensorInput2TrapDescription.setStatus("mandatory")
_Winlink1000SNConfigAlarmsSensorOutput1Trigger_Type = DisplayString
_Winlink1000SNConfigAlarmsSensorOutput1Trigger_Object = MibScalar
winlink1000SNConfigAlarmsSensorOutput1Trigger = _Winlink1000SNConfigAlarmsSensorOutput1Trigger_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3, 1, 3),
    _Winlink1000SNConfigAlarmsSensorOutput1Trigger_Type()
)
winlink1000SNConfigAlarmsSensorOutput1Trigger.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000SNConfigAlarmsSensorOutput1Trigger.setStatus("mandatory")
_Winlink1000SNConfigAlarmsSensorOutput2Trigger_Type = DisplayString
_Winlink1000SNConfigAlarmsSensorOutput2Trigger_Object = MibScalar
winlink1000SNConfigAlarmsSensorOutput2Trigger = _Winlink1000SNConfigAlarmsSensorOutput2Trigger_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3, 1, 4),
    _Winlink1000SNConfigAlarmsSensorOutput2Trigger_Type()
)
winlink1000SNConfigAlarmsSensorOutput2Trigger.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000SNConfigAlarmsSensorOutput2Trigger.setStatus("mandatory")
_Winlink1000SNConfigAlarmsSensorOutput1TriggerOff_Type = DisplayString
_Winlink1000SNConfigAlarmsSensorOutput1TriggerOff_Object = MibScalar
winlink1000SNConfigAlarmsSensorOutput1TriggerOff = _Winlink1000SNConfigAlarmsSensorOutput1TriggerOff_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3, 1, 5),
    _Winlink1000SNConfigAlarmsSensorOutput1TriggerOff_Type()
)
winlink1000SNConfigAlarmsSensorOutput1TriggerOff.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000SNConfigAlarmsSensorOutput1TriggerOff.setStatus("mandatory")
_Winlink1000SNConfigAlarmsSensorOutput2TriggerOff_Type = DisplayString
_Winlink1000SNConfigAlarmsSensorOutput2TriggerOff_Object = MibScalar
winlink1000SNConfigAlarmsSensorOutput2TriggerOff = _Winlink1000SNConfigAlarmsSensorOutput2TriggerOff_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3, 1, 6),
    _Winlink1000SNConfigAlarmsSensorOutput2TriggerOff_Type()
)
winlink1000SNConfigAlarmsSensorOutput2TriggerOff.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000SNConfigAlarmsSensorOutput2TriggerOff.setStatus("mandatory")


class _Winlink1000SNConfigBridgingMode_Type(Integer32):
    """Custom type winlink1000SNConfigBridgingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vlan-transparent", 1),
          ("vlan-aware", 2))
    )


_Winlink1000SNConfigBridgingMode_Type.__name__ = "Integer32"
_Winlink1000SNConfigBridgingMode_Object = MibScalar
winlink1000SNConfigBridgingMode = _Winlink1000SNConfigBridgingMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3, 2),
    _Winlink1000SNConfigBridgingMode_Type()
)
winlink1000SNConfigBridgingMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000SNConfigBridgingMode.setStatus("mandatory")
_Winlink1000SNConfigDataPortTable_Object = MibTable
winlink1000SNConfigDataPortTable = _Winlink1000SNConfigDataPortTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3, 3)
)
if mibBuilder.loadTexts:
    winlink1000SNConfigDataPortTable.setStatus("mandatory")
_Winlink1000SNConfigDataPortEntry_Object = MibTableRow
winlink1000SNConfigDataPortEntry = _Winlink1000SNConfigDataPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3, 3, 1)
)
winlink1000SNConfigDataPortEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000SNConfigDataPortIndex"),
)
if mibBuilder.loadTexts:
    winlink1000SNConfigDataPortEntry.setStatus("mandatory")


class _Winlink1000SNConfigDataPortIndex_Type(Integer32):
    """Custom type winlink1000SNConfigDataPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000SNConfigDataPortIndex_Type.__name__ = "Integer32"
_Winlink1000SNConfigDataPortIndex_Object = MibTableColumn
winlink1000SNConfigDataPortIndex = _Winlink1000SNConfigDataPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3, 3, 1, 1),
    _Winlink1000SNConfigDataPortIndex_Type()
)
winlink1000SNConfigDataPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000SNConfigDataPortIndex.setStatus("mandatory")
_Winlink1000SNConfigDataPortVlanType_Type = Integer32
_Winlink1000SNConfigDataPortVlanType_Object = MibTableColumn
winlink1000SNConfigDataPortVlanType = _Winlink1000SNConfigDataPortVlanType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3, 3, 1, 2),
    _Winlink1000SNConfigDataPortVlanType_Type()
)
winlink1000SNConfigDataPortVlanType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000SNConfigDataPortVlanType.setStatus("mandatory")
_Winlink1000SNConfigDataPortAllowedVlan_Type = DisplayString
_Winlink1000SNConfigDataPortAllowedVlan_Object = MibTableColumn
winlink1000SNConfigDataPortAllowedVlan = _Winlink1000SNConfigDataPortAllowedVlan_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3, 3, 1, 3),
    _Winlink1000SNConfigDataPortAllowedVlan_Type()
)
winlink1000SNConfigDataPortAllowedVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000SNConfigDataPortAllowedVlan.setStatus("mandatory")
_Winlink1000SNConfigDataPortPowerConsumption_Type = DisplayString
_Winlink1000SNConfigDataPortPowerConsumption_Object = MibTableColumn
winlink1000SNConfigDataPortPowerConsumption = _Winlink1000SNConfigDataPortPowerConsumption_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3, 3, 1, 4),
    _Winlink1000SNConfigDataPortPowerConsumption_Type()
)
winlink1000SNConfigDataPortPowerConsumption.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000SNConfigDataPortPowerConsumption.setStatus("mandatory")
_Winlink1000SNConfigDataPortPowerPriority_Type = Integer32
_Winlink1000SNConfigDataPortPowerPriority_Object = MibTableColumn
winlink1000SNConfigDataPortPowerPriority = _Winlink1000SNConfigDataPortPowerPriority_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3, 3, 1, 5),
    _Winlink1000SNConfigDataPortPowerPriority_Type()
)
winlink1000SNConfigDataPortPowerPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000SNConfigDataPortPowerPriority.setStatus("mandatory")
_Winlink1000SNConfigDataPortPowerStatus_Type = DisplayString
_Winlink1000SNConfigDataPortPowerStatus_Object = MibTableColumn
winlink1000SNConfigDataPortPowerStatus = _Winlink1000SNConfigDataPortPowerStatus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3, 3, 1, 6),
    _Winlink1000SNConfigDataPortPowerStatus_Type()
)
winlink1000SNConfigDataPortPowerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000SNConfigDataPortPowerStatus.setStatus("mandatory")
_Winlink1000SNConfigDataPortPowerType_Type = DisplayString
_Winlink1000SNConfigDataPortPowerType_Object = MibTableColumn
winlink1000SNConfigDataPortPowerType = _Winlink1000SNConfigDataPortPowerType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3, 3, 1, 7),
    _Winlink1000SNConfigDataPortPowerType_Type()
)
winlink1000SNConfigDataPortPowerType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000SNConfigDataPortPowerType.setStatus("mandatory")
_Winlink1000SNConfigDataPortLanStatus_Type = DisplayString
_Winlink1000SNConfigDataPortLanStatus_Object = MibTableColumn
winlink1000SNConfigDataPortLanStatus = _Winlink1000SNConfigDataPortLanStatus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3, 3, 1, 8),
    _Winlink1000SNConfigDataPortLanStatus_Type()
)
winlink1000SNConfigDataPortLanStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000SNConfigDataPortLanStatus.setStatus("mandatory")
_Winlink1000SNConfigDataPortLanMode_Type = DisplayString
_Winlink1000SNConfigDataPortLanMode_Object = MibTableColumn
winlink1000SNConfigDataPortLanMode = _Winlink1000SNConfigDataPortLanMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3, 3, 1, 9),
    _Winlink1000SNConfigDataPortLanMode_Type()
)
winlink1000SNConfigDataPortLanMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000SNConfigDataPortLanMode.setStatus("mandatory")
_Winlink1000SNConfigDataPortWatchdogMode_Type = Integer32
_Winlink1000SNConfigDataPortWatchdogMode_Object = MibTableColumn
winlink1000SNConfigDataPortWatchdogMode = _Winlink1000SNConfigDataPortWatchdogMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3, 3, 1, 10),
    _Winlink1000SNConfigDataPortWatchdogMode_Type()
)
winlink1000SNConfigDataPortWatchdogMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000SNConfigDataPortWatchdogMode.setStatus("mandatory")
_Winlink1000SNConfigDataPortWatchdogIP_Type = IpAddress
_Winlink1000SNConfigDataPortWatchdogIP_Object = MibTableColumn
winlink1000SNConfigDataPortWatchdogIP = _Winlink1000SNConfigDataPortWatchdogIP_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3, 3, 1, 11),
    _Winlink1000SNConfigDataPortWatchdogIP_Type()
)
winlink1000SNConfigDataPortWatchdogIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000SNConfigDataPortWatchdogIP.setStatus("mandatory")
_Winlink1000SNConfigDataPortDeviceName_Type = DisplayString
_Winlink1000SNConfigDataPortDeviceName_Object = MibTableColumn
winlink1000SNConfigDataPortDeviceName = _Winlink1000SNConfigDataPortDeviceName_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3, 3, 1, 12),
    _Winlink1000SNConfigDataPortDeviceName_Type()
)
winlink1000SNConfigDataPortDeviceName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000SNConfigDataPortDeviceName.setStatus("mandatory")
_Winlink1000SNConfigDataPortType_Type = DisplayString
_Winlink1000SNConfigDataPortType_Object = MibTableColumn
winlink1000SNConfigDataPortType = _Winlink1000SNConfigDataPortType_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3, 3, 1, 13),
    _Winlink1000SNConfigDataPortType_Type()
)
winlink1000SNConfigDataPortType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000SNConfigDataPortType.setStatus("mandatory")
_Winlink1000SNConfigDataPortReset_Type = DisplayString
_Winlink1000SNConfigDataPortReset_Object = MibTableColumn
winlink1000SNConfigDataPortReset = _Winlink1000SNConfigDataPortReset_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 5, 3, 3, 1, 14),
    _Winlink1000SNConfigDataPortReset_Type()
)
winlink1000SNConfigDataPortReset.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    winlink1000SNConfigDataPortReset.setStatus("mandatory")
_Winlink1000CN_ObjectIdentity = ObjectIdentity
winlink1000CN = _Winlink1000CN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 6)
)


class _Winlink1000CNDeviceState_Type(Integer32):
    """Custom type winlink1000CNDeviceState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("fail", 2))
    )


_Winlink1000CNDeviceState_Type.__name__ = "Integer32"
_Winlink1000CNDeviceState_Object = MibScalar
winlink1000CNDeviceState = _Winlink1000CNDeviceState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 6, 1),
    _Winlink1000CNDeviceState_Type()
)
winlink1000CNDeviceState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000CNDeviceState.setStatus("mandatory")
_Winlink1000CNTmuTable_Object = MibTable
winlink1000CNTmuTable = _Winlink1000CNTmuTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 6, 2)
)
if mibBuilder.loadTexts:
    winlink1000CNTmuTable.setStatus("mandatory")
_Winlink1000CNTmuEntry_Object = MibTableRow
winlink1000CNTmuEntry = _Winlink1000CNTmuEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 6, 2, 1)
)
winlink1000CNTmuEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000CNTmuIndex"),
)
if mibBuilder.loadTexts:
    winlink1000CNTmuEntry.setStatus("mandatory")


class _Winlink1000CNTmuIndex_Type(Integer32):
    """Custom type winlink1000CNTmuIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000CNTmuIndex_Type.__name__ = "Integer32"
_Winlink1000CNTmuIndex_Object = MibTableColumn
winlink1000CNTmuIndex = _Winlink1000CNTmuIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 6, 2, 1, 1),
    _Winlink1000CNTmuIndex_Type()
)
winlink1000CNTmuIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    winlink1000CNTmuIndex.setStatus("mandatory")
_Winlink1000CNTmuIp_Type = IpAddress
_Winlink1000CNTmuIp_Object = MibTableColumn
winlink1000CNTmuIp = _Winlink1000CNTmuIp_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 6, 2, 1, 2),
    _Winlink1000CNTmuIp_Type()
)
winlink1000CNTmuIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000CNTmuIp.setStatus("mandatory")
_Winlink1000CNTmuName_Type = DisplayString
_Winlink1000CNTmuName_Object = MibTableColumn
winlink1000CNTmuName = _Winlink1000CNTmuName_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 6, 2, 1, 3),
    _Winlink1000CNTmuName_Type()
)
winlink1000CNTmuName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000CNTmuName.setStatus("mandatory")
_Winlink1000CNTmuBaseIp_Type = IpAddress
_Winlink1000CNTmuBaseIp_Object = MibTableColumn
winlink1000CNTmuBaseIp = _Winlink1000CNTmuBaseIp_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 6, 2, 1, 4),
    _Winlink1000CNTmuBaseIp_Type()
)
winlink1000CNTmuBaseIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000CNTmuBaseIp.setStatus("mandatory")
_Winlink1000CNTmuBaseName_Type = DisplayString
_Winlink1000CNTmuBaseName_Object = MibTableColumn
winlink1000CNTmuBaseName = _Winlink1000CNTmuBaseName_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 6, 2, 1, 5),
    _Winlink1000CNTmuBaseName_Type()
)
winlink1000CNTmuBaseName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000CNTmuBaseName.setStatus("mandatory")


class _Winlink1000CNTmuBaseVrf_Type(Integer32):
    """Custom type winlink1000CNTmuBaseVrf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Winlink1000CNTmuBaseVrf_Type.__name__ = "Integer32"
_Winlink1000CNTmuBaseVrf_Object = MibTableColumn
winlink1000CNTmuBaseVrf = _Winlink1000CNTmuBaseVrf_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 6, 2, 1, 6),
    _Winlink1000CNTmuBaseVrf_Type()
)
winlink1000CNTmuBaseVrf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000CNTmuBaseVrf.setStatus("mandatory")
_Winlink1000CNTmuServedSubnets_Type = DisplayString
_Winlink1000CNTmuServedSubnets_Object = MibTableColumn
winlink1000CNTmuServedSubnets = _Winlink1000CNTmuServedSubnets_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 6, 2, 1, 7),
    _Winlink1000CNTmuServedSubnets_Type()
)
winlink1000CNTmuServedSubnets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000CNTmuServedSubnets.setStatus("mandatory")
_Winlink1000CNDataIfTable_Object = MibTable
winlink1000CNDataIfTable = _Winlink1000CNDataIfTable_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 6, 3)
)
if mibBuilder.loadTexts:
    winlink1000CNDataIfTable.setStatus("mandatory")
_Winlink1000CNDataIfEntry_Object = MibTableRow
winlink1000CNDataIfEntry = _Winlink1000CNDataIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 6, 3, 1)
)
winlink1000CNDataIfEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000CNDataIfIndex"),
)
if mibBuilder.loadTexts:
    winlink1000CNDataIfEntry.setStatus("mandatory")


class _Winlink1000CNDataIfIndex_Type(Integer32):
    """Custom type winlink1000CNDataIfIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000CNDataIfIndex_Type.__name__ = "Integer32"
_Winlink1000CNDataIfIndex_Object = MibTableColumn
winlink1000CNDataIfIndex = _Winlink1000CNDataIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 6, 3, 1, 1),
    _Winlink1000CNDataIfIndex_Type()
)
winlink1000CNDataIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000CNDataIfIndex.setStatus("mandatory")


class _Winlink1000CNDataIfTxThroughput_Type(Integer32):
    """Custom type winlink1000CNDataIfTxThroughput based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000CNDataIfTxThroughput_Type.__name__ = "Integer32"
_Winlink1000CNDataIfTxThroughput_Object = MibTableColumn
winlink1000CNDataIfTxThroughput = _Winlink1000CNDataIfTxThroughput_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 6, 3, 1, 2),
    _Winlink1000CNDataIfTxThroughput_Type()
)
winlink1000CNDataIfTxThroughput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000CNDataIfTxThroughput.setStatus("mandatory")
if mibBuilder.loadTexts:
    winlink1000CNDataIfTxThroughput.setUnits("KB/s")


class _Winlink1000CNDataIfRxThroughput_Type(Integer32):
    """Custom type winlink1000CNDataIfRxThroughput based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000CNDataIfRxThroughput_Type.__name__ = "Integer32"
_Winlink1000CNDataIfRxThroughput_Object = MibTableColumn
winlink1000CNDataIfRxThroughput = _Winlink1000CNDataIfRxThroughput_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 6, 3, 1, 3),
    _Winlink1000CNDataIfRxThroughput_Type()
)
winlink1000CNDataIfRxThroughput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000CNDataIfRxThroughput.setStatus("mandatory")
if mibBuilder.loadTexts:
    winlink1000CNDataIfRxThroughput.setUnits("KB/s")


class _Winlink1000CNDataIfBfdState_Type(Integer32):
    """Custom type winlink1000CNDataIfBfdState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("down", 2),
          ("init", 3),
          ("up", 4))
    )


_Winlink1000CNDataIfBfdState_Type.__name__ = "Integer32"
_Winlink1000CNDataIfBfdState_Object = MibTableColumn
winlink1000CNDataIfBfdState = _Winlink1000CNDataIfBfdState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 6, 3, 1, 4),
    _Winlink1000CNDataIfBfdState_Type()
)
winlink1000CNDataIfBfdState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000CNDataIfBfdState.setStatus("mandatory")
_Winlink1000Genesis_ObjectIdentity = ObjectIdentity
winlink1000Genesis = _Winlink1000Genesis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7)
)
_Winlink1000GenesisGeneral_ObjectIdentity = ObjectIdentity
winlink1000GenesisGeneral = _Winlink1000GenesisGeneral_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 1)
)


class _Winlink1000GenesisGeneralDeviceState_Type(Integer32):
    """Custom type winlink1000GenesisGeneralDeviceState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("init", 1),
          ("bitFailed", 2),
          ("spectrum", 3),
          ("transeiving", 4),
          ("regulationMismatch", 5))
    )


_Winlink1000GenesisGeneralDeviceState_Type.__name__ = "Integer32"
_Winlink1000GenesisGeneralDeviceState_Object = MibScalar
winlink1000GenesisGeneralDeviceState = _Winlink1000GenesisGeneralDeviceState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 1, 1),
    _Winlink1000GenesisGeneralDeviceState_Type()
)
winlink1000GenesisGeneralDeviceState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisGeneralDeviceState.setStatus("mandatory")
_Winlink1000GenesisGeneralCountry_Type = DisplayString
_Winlink1000GenesisGeneralCountry_Object = MibScalar
winlink1000GenesisGeneralCountry = _Winlink1000GenesisGeneralCountry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 1, 2),
    _Winlink1000GenesisGeneralCountry_Type()
)
winlink1000GenesisGeneralCountry.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisGeneralCountry.setStatus("mandatory")
_Winlink1000GenesisLAN_ObjectIdentity = ObjectIdentity
winlink1000GenesisLAN = _Winlink1000GenesisLAN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 2)
)
_Winlink1000GenesisLANLocalRxEthTrafficKbps_Type = Integer32
_Winlink1000GenesisLANLocalRxEthTrafficKbps_Object = MibScalar
winlink1000GenesisLANLocalRxEthTrafficKbps = _Winlink1000GenesisLANLocalRxEthTrafficKbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 2, 1),
    _Winlink1000GenesisLANLocalRxEthTrafficKbps_Type()
)
winlink1000GenesisLANLocalRxEthTrafficKbps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisLANLocalRxEthTrafficKbps.setStatus("mandatory")
_Winlink1000GenesisLANLocalTxEthTrafficKbps_Type = Integer32
_Winlink1000GenesisLANLocalTxEthTrafficKbps_Object = MibScalar
winlink1000GenesisLANLocalTxEthTrafficKbps = _Winlink1000GenesisLANLocalTxEthTrafficKbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 2, 2),
    _Winlink1000GenesisLANLocalTxEthTrafficKbps_Type()
)
winlink1000GenesisLANLocalTxEthTrafficKbps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisLANLocalTxEthTrafficKbps.setStatus("mandatory")


class _Winlink1000GenesisLANLocalEthStatus_Type(Integer32):
    """Custom type winlink1000GenesisLANLocalEthStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("notConnected", 1),
          ("fullDuplex2-5Gbps", 2),
          ("fullDuplex1-0Gbps", 3),
          ("fullDuplex100Mbps", 4),
          ("halfDuplex100Mbps", 5))
    )


_Winlink1000GenesisLANLocalEthStatus_Type.__name__ = "Integer32"
_Winlink1000GenesisLANLocalEthStatus_Object = MibScalar
winlink1000GenesisLANLocalEthStatus = _Winlink1000GenesisLANLocalEthStatus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 2, 3),
    _Winlink1000GenesisLANLocalEthStatus_Type()
)
winlink1000GenesisLANLocalEthStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisLANLocalEthStatus.setStatus("mandatory")
_Winlink1000GenesisLANLocalRxSfpTrafficKbps_Type = Integer32
_Winlink1000GenesisLANLocalRxSfpTrafficKbps_Object = MibScalar
winlink1000GenesisLANLocalRxSfpTrafficKbps = _Winlink1000GenesisLANLocalRxSfpTrafficKbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 2, 4),
    _Winlink1000GenesisLANLocalRxSfpTrafficKbps_Type()
)
winlink1000GenesisLANLocalRxSfpTrafficKbps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisLANLocalRxSfpTrafficKbps.setStatus("mandatory")
_Winlink1000GenesisLANLocalTxSfpTrafficKbps_Type = Integer32
_Winlink1000GenesisLANLocalTxSfpTrafficKbps_Object = MibScalar
winlink1000GenesisLANLocalTxSfpTrafficKbps = _Winlink1000GenesisLANLocalTxSfpTrafficKbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 2, 5),
    _Winlink1000GenesisLANLocalTxSfpTrafficKbps_Type()
)
winlink1000GenesisLANLocalTxSfpTrafficKbps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisLANLocalTxSfpTrafficKbps.setStatus("mandatory")


class _Winlink1000GenesisLANLocalSfpStatus_Type(Integer32):
    """Custom type winlink1000GenesisLANLocalSfpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notConnected", 1),
          ("fullDuplex1-0Gbps", 2))
    )


_Winlink1000GenesisLANLocalSfpStatus_Type.__name__ = "Integer32"
_Winlink1000GenesisLANLocalSfpStatus_Object = MibScalar
winlink1000GenesisLANLocalSfpStatus = _Winlink1000GenesisLANLocalSfpStatus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 2, 6),
    _Winlink1000GenesisLANLocalSfpStatus_Type()
)
winlink1000GenesisLANLocalSfpStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisLANLocalSfpStatus.setStatus("mandatory")
_Winlink1000GenesisAir_ObjectIdentity = ObjectIdentity
winlink1000GenesisAir = _Winlink1000GenesisAir_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3)
)


class _Winlink1000GenesisAirOperationMode_Type(Integer32):
    """Custom type winlink1000GenesisAirOperationMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("hub", 1),
          ("client", 2))
    )


_Winlink1000GenesisAirOperationMode_Type.__name__ = "Integer32"
_Winlink1000GenesisAirOperationMode_Object = MibScalar
winlink1000GenesisAirOperationMode = _Winlink1000GenesisAirOperationMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 1),
    _Winlink1000GenesisAirOperationMode_Type()
)
winlink1000GenesisAirOperationMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirOperationMode.setStatus("mandatory")
_Winlink1000GenesisAirLinksTbl_Object = MibTable
winlink1000GenesisAirLinksTbl = _Winlink1000GenesisAirLinksTbl_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2)
)
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksTbl.setStatus("mandatory")
_Winlink1000GenesisAirLinksEntry_Object = MibTableRow
winlink1000GenesisAirLinksEntry = _Winlink1000GenesisAirLinksEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1)
)
winlink1000GenesisAirLinksEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000GenesisAirLinksIndex"),
)
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksEntry.setStatus("mandatory")


class _Winlink1000GenesisAirLinksIndex_Type(Integer32):
    """Custom type winlink1000GenesisAirLinksIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000GenesisAirLinksIndex_Type.__name__ = "Integer32"
_Winlink1000GenesisAirLinksIndex_Object = MibTableColumn
winlink1000GenesisAirLinksIndex = _Winlink1000GenesisAirLinksIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 1),
    _Winlink1000GenesisAirLinksIndex_Type()
)
winlink1000GenesisAirLinksIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksIndex.setStatus("mandatory")
_Winlink1000GenesisAirLinksLocalRSSdBm_Type = Integer32
_Winlink1000GenesisAirLinksLocalRSSdBm_Object = MibTableColumn
winlink1000GenesisAirLinksLocalRSSdBm = _Winlink1000GenesisAirLinksLocalRSSdBm_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 2),
    _Winlink1000GenesisAirLinksLocalRSSdBm_Type()
)
winlink1000GenesisAirLinksLocalRSSdBm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksLocalRSSdBm.setStatus("mandatory")
_Winlink1000GenesisAirLinksDeltaLocalRssdB_Type = Integer32
_Winlink1000GenesisAirLinksDeltaLocalRssdB_Object = MibTableColumn
winlink1000GenesisAirLinksDeltaLocalRssdB = _Winlink1000GenesisAirLinksDeltaLocalRssdB_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 3),
    _Winlink1000GenesisAirLinksDeltaLocalRssdB_Type()
)
winlink1000GenesisAirLinksDeltaLocalRssdB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksDeltaLocalRssdB.setStatus("mandatory")
_Winlink1000GenesisAirLinksRemoteRSSdBm_Type = Integer32
_Winlink1000GenesisAirLinksRemoteRSSdBm_Object = MibTableColumn
winlink1000GenesisAirLinksRemoteRSSdBm = _Winlink1000GenesisAirLinksRemoteRSSdBm_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 4),
    _Winlink1000GenesisAirLinksRemoteRSSdBm_Type()
)
winlink1000GenesisAirLinksRemoteRSSdBm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksRemoteRSSdBm.setStatus("mandatory")
_Winlink1000GenesisAirLinksDeltaRemoteRssdB_Type = Integer32
_Winlink1000GenesisAirLinksDeltaRemoteRssdB_Object = MibTableColumn
winlink1000GenesisAirLinksDeltaRemoteRssdB = _Winlink1000GenesisAirLinksDeltaRemoteRssdB_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 5),
    _Winlink1000GenesisAirLinksDeltaRemoteRssdB_Type()
)
winlink1000GenesisAirLinksDeltaRemoteRssdB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksDeltaRemoteRssdB.setStatus("mandatory")
_Winlink1000GenesisAirLinksLocalChain1RSSdBm_Type = Integer32
_Winlink1000GenesisAirLinksLocalChain1RSSdBm_Object = MibTableColumn
winlink1000GenesisAirLinksLocalChain1RSSdBm = _Winlink1000GenesisAirLinksLocalChain1RSSdBm_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 6),
    _Winlink1000GenesisAirLinksLocalChain1RSSdBm_Type()
)
winlink1000GenesisAirLinksLocalChain1RSSdBm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksLocalChain1RSSdBm.setStatus("mandatory")
_Winlink1000GenesisAirLinksRemoteChain1RSSdBm_Type = Integer32
_Winlink1000GenesisAirLinksRemoteChain1RSSdBm_Object = MibTableColumn
winlink1000GenesisAirLinksRemoteChain1RSSdBm = _Winlink1000GenesisAirLinksRemoteChain1RSSdBm_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 7),
    _Winlink1000GenesisAirLinksRemoteChain1RSSdBm_Type()
)
winlink1000GenesisAirLinksRemoteChain1RSSdBm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksRemoteChain1RSSdBm.setStatus("mandatory")
_Winlink1000GenesisAirLinksLocalChain2RSSdBm_Type = Integer32
_Winlink1000GenesisAirLinksLocalChain2RSSdBm_Object = MibTableColumn
winlink1000GenesisAirLinksLocalChain2RSSdBm = _Winlink1000GenesisAirLinksLocalChain2RSSdBm_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 8),
    _Winlink1000GenesisAirLinksLocalChain2RSSdBm_Type()
)
winlink1000GenesisAirLinksLocalChain2RSSdBm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksLocalChain2RSSdBm.setStatus("mandatory")
_Winlink1000GenesisAirLinksRemoteChain2RSSdBm_Type = Integer32
_Winlink1000GenesisAirLinksRemoteChain2RSSdBm_Object = MibTableColumn
winlink1000GenesisAirLinksRemoteChain2RSSdBm = _Winlink1000GenesisAirLinksRemoteChain2RSSdBm_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 9),
    _Winlink1000GenesisAirLinksRemoteChain2RSSdBm_Type()
)
winlink1000GenesisAirLinksRemoteChain2RSSdBm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksRemoteChain2RSSdBm.setStatus("mandatory")
_Winlink1000GenesisAirLinksLocalTxRateMbps_Type = Integer32
_Winlink1000GenesisAirLinksLocalTxRateMbps_Object = MibTableColumn
winlink1000GenesisAirLinksLocalTxRateMbps = _Winlink1000GenesisAirLinksLocalTxRateMbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 10),
    _Winlink1000GenesisAirLinksLocalTxRateMbps_Type()
)
winlink1000GenesisAirLinksLocalTxRateMbps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksLocalTxRateMbps.setStatus("mandatory")
_Winlink1000GenesisAirLinksRemoteTxRateMbps_Type = Integer32
_Winlink1000GenesisAirLinksRemoteTxRateMbps_Object = MibTableColumn
winlink1000GenesisAirLinksRemoteTxRateMbps = _Winlink1000GenesisAirLinksRemoteTxRateMbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 11),
    _Winlink1000GenesisAirLinksRemoteTxRateMbps_Type()
)
winlink1000GenesisAirLinksRemoteTxRateMbps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksRemoteTxRateMbps.setStatus("mandatory")
_Winlink1000GenesisAirLinksLocalModulation_Type = DisplayString
_Winlink1000GenesisAirLinksLocalModulation_Object = MibTableColumn
winlink1000GenesisAirLinksLocalModulation = _Winlink1000GenesisAirLinksLocalModulation_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 12),
    _Winlink1000GenesisAirLinksLocalModulation_Type()
)
winlink1000GenesisAirLinksLocalModulation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksLocalModulation.setStatus("mandatory")
_Winlink1000GenesisAirLinksRemoteModulation_Type = DisplayString
_Winlink1000GenesisAirLinksRemoteModulation_Object = MibTableColumn
winlink1000GenesisAirLinksRemoteModulation = _Winlink1000GenesisAirLinksRemoteModulation_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 13),
    _Winlink1000GenesisAirLinksRemoteModulation_Type()
)
winlink1000GenesisAirLinksRemoteModulation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksRemoteModulation.setStatus("mandatory")
_Winlink1000GenesisAirLinksLocalEstimatedTputKbps_Type = Integer32
_Winlink1000GenesisAirLinksLocalEstimatedTputKbps_Object = MibTableColumn
winlink1000GenesisAirLinksLocalEstimatedTputKbps = _Winlink1000GenesisAirLinksLocalEstimatedTputKbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 14),
    _Winlink1000GenesisAirLinksLocalEstimatedTputKbps_Type()
)
winlink1000GenesisAirLinksLocalEstimatedTputKbps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksLocalEstimatedTputKbps.setStatus("mandatory")
_Winlink1000GenesisAirLinksRemoteEstimatedTputKbps_Type = Integer32
_Winlink1000GenesisAirLinksRemoteEstimatedTputKbps_Object = MibTableColumn
winlink1000GenesisAirLinksRemoteEstimatedTputKbps = _Winlink1000GenesisAirLinksRemoteEstimatedTputKbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 15),
    _Winlink1000GenesisAirLinksRemoteEstimatedTputKbps_Type()
)
winlink1000GenesisAirLinksRemoteEstimatedTputKbps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksRemoteEstimatedTputKbps.setStatus("mandatory")


class _Winlink1000GenesisAirLinksState_Type(Integer32):
    """Custom type winlink1000GenesisAirLinksState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("id4le", 1),
          ("scanning", 2),
          ("transmitting", 3),
          ("syncWaitforCompatibility", 4),
          ("syncUnregisteredUnit", 5),
          ("syncKeyMismatch", 6),
          ("syncSWupgradeRequired", 7),
          ("inService", 8))
    )


_Winlink1000GenesisAirLinksState_Type.__name__ = "Integer32"
_Winlink1000GenesisAirLinksState_Object = MibTableColumn
winlink1000GenesisAirLinksState = _Winlink1000GenesisAirLinksState_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 16),
    _Winlink1000GenesisAirLinksState_Type()
)
winlink1000GenesisAirLinksState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksState.setStatus("mandatory")
_Winlink1000GenesisAirLinksDistanceMeter_Type = Integer32
_Winlink1000GenesisAirLinksDistanceMeter_Object = MibTableColumn
winlink1000GenesisAirLinksDistanceMeter = _Winlink1000GenesisAirLinksDistanceMeter_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 17),
    _Winlink1000GenesisAirLinksDistanceMeter_Type()
)
winlink1000GenesisAirLinksDistanceMeter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksDistanceMeter.setStatus("mandatory")


class _Winlink1000GenesisAirLinksRemoteOperationMode_Type(Integer32):
    """Custom type winlink1000GenesisAirLinksRemoteOperationMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("hub", 1),
          ("client", 2))
    )


_Winlink1000GenesisAirLinksRemoteOperationMode_Type.__name__ = "Integer32"
_Winlink1000GenesisAirLinksRemoteOperationMode_Object = MibTableColumn
winlink1000GenesisAirLinksRemoteOperationMode = _Winlink1000GenesisAirLinksRemoteOperationMode_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 18),
    _Winlink1000GenesisAirLinksRemoteOperationMode_Type()
)
winlink1000GenesisAirLinksRemoteOperationMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksRemoteOperationMode.setStatus("mandatory")
_Winlink1000GenesisAirLinksRemoteRxEthTrafficKbps_Type = Integer32
_Winlink1000GenesisAirLinksRemoteRxEthTrafficKbps_Object = MibTableColumn
winlink1000GenesisAirLinksRemoteRxEthTrafficKbps = _Winlink1000GenesisAirLinksRemoteRxEthTrafficKbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 19),
    _Winlink1000GenesisAirLinksRemoteRxEthTrafficKbps_Type()
)
winlink1000GenesisAirLinksRemoteRxEthTrafficKbps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksRemoteRxEthTrafficKbps.setStatus("mandatory")
_Winlink1000GenesisAirLinksRemoteTxEthTrafficKbps_Type = Integer32
_Winlink1000GenesisAirLinksRemoteTxEthTrafficKbps_Object = MibTableColumn
winlink1000GenesisAirLinksRemoteTxEthTrafficKbps = _Winlink1000GenesisAirLinksRemoteTxEthTrafficKbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 20),
    _Winlink1000GenesisAirLinksRemoteTxEthTrafficKbps_Type()
)
winlink1000GenesisAirLinksRemoteTxEthTrafficKbps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksRemoteTxEthTrafficKbps.setStatus("mandatory")


class _Winlink1000GenesisAirLinksRemoteEthStatus_Type(Integer32):
    """Custom type winlink1000GenesisAirLinksRemoteEthStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("notConnected", 1),
          ("fullDuplex2-5Gbps", 2),
          ("fullDuplex1-0Gbps", 3),
          ("fullDuplex100Mbps", 4),
          ("halfDuplex100Mbps", 5))
    )


_Winlink1000GenesisAirLinksRemoteEthStatus_Type.__name__ = "Integer32"
_Winlink1000GenesisAirLinksRemoteEthStatus_Object = MibTableColumn
winlink1000GenesisAirLinksRemoteEthStatus = _Winlink1000GenesisAirLinksRemoteEthStatus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 21),
    _Winlink1000GenesisAirLinksRemoteEthStatus_Type()
)
winlink1000GenesisAirLinksRemoteEthStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksRemoteEthStatus.setStatus("mandatory")
_Winlink1000GenesisAirLinksRemoteRxSfpTrafficKbps_Type = Integer32
_Winlink1000GenesisAirLinksRemoteRxSfpTrafficKbps_Object = MibTableColumn
winlink1000GenesisAirLinksRemoteRxSfpTrafficKbps = _Winlink1000GenesisAirLinksRemoteRxSfpTrafficKbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 22),
    _Winlink1000GenesisAirLinksRemoteRxSfpTrafficKbps_Type()
)
winlink1000GenesisAirLinksRemoteRxSfpTrafficKbps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksRemoteRxSfpTrafficKbps.setStatus("mandatory")
_Winlink1000GenesisAirLinksRemoteTxSfpTrafficKbps_Type = Integer32
_Winlink1000GenesisAirLinksRemoteTxSfpTrafficKbps_Object = MibTableColumn
winlink1000GenesisAirLinksRemoteTxSfpTrafficKbps = _Winlink1000GenesisAirLinksRemoteTxSfpTrafficKbps_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 23),
    _Winlink1000GenesisAirLinksRemoteTxSfpTrafficKbps_Type()
)
winlink1000GenesisAirLinksRemoteTxSfpTrafficKbps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksRemoteTxSfpTrafficKbps.setStatus("mandatory")


class _Winlink1000GenesisAirLinksRemoteSfpStatus_Type(Integer32):
    """Custom type winlink1000GenesisAirLinksRemoteSfpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notConnected", 1),
          ("fullDuplex1-0Gbps", 2))
    )


_Winlink1000GenesisAirLinksRemoteSfpStatus_Type.__name__ = "Integer32"
_Winlink1000GenesisAirLinksRemoteSfpStatus_Object = MibTableColumn
winlink1000GenesisAirLinksRemoteSfpStatus = _Winlink1000GenesisAirLinksRemoteSfpStatus_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 24),
    _Winlink1000GenesisAirLinksRemoteSfpStatus_Type()
)
winlink1000GenesisAirLinksRemoteSfpStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksRemoteSfpStatus.setStatus("mandatory")
_Winlink1000GenesisAirLinksRemoteMACAddress_Type = DisplayString
_Winlink1000GenesisAirLinksRemoteMACAddress_Object = MibTableColumn
winlink1000GenesisAirLinksRemoteMACAddress = _Winlink1000GenesisAirLinksRemoteMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 25),
    _Winlink1000GenesisAirLinksRemoteMACAddress_Type()
)
winlink1000GenesisAirLinksRemoteMACAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksRemoteMACAddress.setStatus("mandatory")
_Winlink1000GenesisAirLinksRemoteIpAddressV4_Type = DisplayString
_Winlink1000GenesisAirLinksRemoteIpAddressV4_Object = MibTableColumn
winlink1000GenesisAirLinksRemoteIpAddressV4 = _Winlink1000GenesisAirLinksRemoteIpAddressV4_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 26),
    _Winlink1000GenesisAirLinksRemoteIpAddressV4_Type()
)
winlink1000GenesisAirLinksRemoteIpAddressV4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksRemoteIpAddressV4.setStatus("mandatory")
_Winlink1000GenesisAirLinksRemoteIpAddressV6_Type = DisplayString
_Winlink1000GenesisAirLinksRemoteIpAddressV6_Object = MibTableColumn
winlink1000GenesisAirLinksRemoteIpAddressV6 = _Winlink1000GenesisAirLinksRemoteIpAddressV6_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 2, 1, 27),
    _Winlink1000GenesisAirLinksRemoteIpAddressV6_Type()
)
winlink1000GenesisAirLinksRemoteIpAddressV6.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirLinksRemoteIpAddressV6.setStatus("mandatory")
_Winlink1000GenesisAirRegisteredTbl_Object = MibTable
winlink1000GenesisAirRegisteredTbl = _Winlink1000GenesisAirRegisteredTbl_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 3)
)
if mibBuilder.loadTexts:
    winlink1000GenesisAirRegisteredTbl.setStatus("mandatory")
_Winlink1000GenesisAirRegisteredEntry_Object = MibTableRow
winlink1000GenesisAirRegisteredEntry = _Winlink1000GenesisAirRegisteredEntry_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 3, 1)
)
winlink1000GenesisAirRegisteredEntry.setIndexNames(
    (0, "RADWIN-MIB-WINLINK1000", "winlink1000GenesisAirRegisteredIndex"),
)
if mibBuilder.loadTexts:
    winlink1000GenesisAirRegisteredEntry.setStatus("mandatory")


class _Winlink1000GenesisAirRegisteredIndex_Type(Integer32):
    """Custom type winlink1000GenesisAirRegisteredIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Winlink1000GenesisAirRegisteredIndex_Type.__name__ = "Integer32"
_Winlink1000GenesisAirRegisteredIndex_Object = MibTableColumn
winlink1000GenesisAirRegisteredIndex = _Winlink1000GenesisAirRegisteredIndex_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 3, 1, 1),
    _Winlink1000GenesisAirRegisteredIndex_Type()
)
winlink1000GenesisAirRegisteredIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    winlink1000GenesisAirRegisteredIndex.setStatus("mandatory")
_Winlink1000GenesisAirRegisteredRemoteMACAddress_Type = DisplayString
_Winlink1000GenesisAirRegisteredRemoteMACAddress_Object = MibTableColumn
winlink1000GenesisAirRegisteredRemoteMACAddress = _Winlink1000GenesisAirRegisteredRemoteMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 3, 1, 2),
    _Winlink1000GenesisAirRegisteredRemoteMACAddress_Type()
)
winlink1000GenesisAirRegisteredRemoteMACAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirRegisteredRemoteMACAddress.setStatus("mandatory")
_Winlink1000GenesisAirRegisteredRemoteIpAddressV4_Type = DisplayString
_Winlink1000GenesisAirRegisteredRemoteIpAddressV4_Object = MibTableColumn
winlink1000GenesisAirRegisteredRemoteIpAddressV4 = _Winlink1000GenesisAirRegisteredRemoteIpAddressV4_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 3, 1, 3),
    _Winlink1000GenesisAirRegisteredRemoteIpAddressV4_Type()
)
winlink1000GenesisAirRegisteredRemoteIpAddressV4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirRegisteredRemoteIpAddressV4.setStatus("mandatory")
_Winlink1000GenesisAirRegisteredRemoteIpAddressV6_Type = DisplayString
_Winlink1000GenesisAirRegisteredRemoteIpAddressV6_Object = MibTableColumn
winlink1000GenesisAirRegisteredRemoteIpAddressV6 = _Winlink1000GenesisAirRegisteredRemoteIpAddressV6_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 7, 3, 3, 1, 4),
    _Winlink1000GenesisAirRegisteredRemoteIpAddressV6_Type()
)
winlink1000GenesisAirRegisteredRemoteIpAddressV6.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GenesisAirRegisteredRemoteIpAddressV6.setStatus("mandatory")
_Winlink1000General_ObjectIdentity = ObjectIdentity
winlink1000General = _Winlink1000General_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 100)
)
_Winlink1000GeneralTrapDescription_Type = DisplayString
_Winlink1000GeneralTrapDescription_Object = MibScalar
winlink1000GeneralTrapDescription = _Winlink1000GeneralTrapDescription_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 100, 1),
    _Winlink1000GeneralTrapDescription_Type()
)
winlink1000GeneralTrapDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GeneralTrapDescription.setStatus("mandatory")


class _Winlink1000GeneralTrapSeverity_Type(Integer32):
    """Custom type winlink1000GeneralTrapSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              8,
              16,
              32)
        )
    )
    namedValues = NamedValues(
        *(("event", 1),
          ("normal", 2),
          ("warning", 4),
          ("minor", 8),
          ("major", 16),
          ("critical", 32))
    )


_Winlink1000GeneralTrapSeverity_Type.__name__ = "Integer32"
_Winlink1000GeneralTrapSeverity_Object = MibScalar
winlink1000GeneralTrapSeverity = _Winlink1000GeneralTrapSeverity_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 100, 2),
    _Winlink1000GeneralTrapSeverity_Type()
)
winlink1000GeneralTrapSeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GeneralTrapSeverity.setStatus("mandatory")
_Winlink1000GeneralCookie_Type = DisplayString
_Winlink1000GeneralCookie_Object = MibScalar
winlink1000GeneralCookie = _Winlink1000GeneralCookie_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 100, 3),
    _Winlink1000GeneralCookie_Type()
)
winlink1000GeneralCookie.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000GeneralCookie.setStatus("mandatory")
_Winlink1000GeneralEcChangesCounter_Type = Integer32
_Winlink1000GeneralEcChangesCounter_Object = MibScalar
winlink1000GeneralEcChangesCounter = _Winlink1000GeneralEcChangesCounter_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 100, 4),
    _Winlink1000GeneralEcChangesCounter_Type()
)
winlink1000GeneralEcChangesCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    winlink1000GeneralEcChangesCounter.setStatus("mandatory")


class _Winlink1000GeneralTelnetSupport_Type(Integer32):
    """Custom type winlink1000GeneralTelnetSupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2),
          ("mandatoryDisabled", 3),
          ("mandatoryEnabled", 4))
    )


_Winlink1000GeneralTelnetSupport_Type.__name__ = "Integer32"
_Winlink1000GeneralTelnetSupport_Object = MibScalar
winlink1000GeneralTelnetSupport = _Winlink1000GeneralTelnetSupport_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 100, 5),
    _Winlink1000GeneralTelnetSupport_Type()
)
winlink1000GeneralTelnetSupport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000GeneralTelnetSupport.setStatus("mandatory")


class _Winlink1000GeneralWISupport_Type(Integer32):
    """Custom type winlink1000GeneralWISupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("mandatoryDisabled", 1),
          ("mandatoryEnabled", 2),
          ("disabled", 3),
          ("enabled", 4),
          ("securedOnlyEnabled", 5),
          ("securedDisabled", 6),
          ("securedAllModesEnabled", 7),
          ("securedAllModesDisabled", 8))
    )


_Winlink1000GeneralWISupport_Type.__name__ = "Integer32"
_Winlink1000GeneralWISupport_Object = MibScalar
winlink1000GeneralWISupport = _Winlink1000GeneralWISupport_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 100, 6),
    _Winlink1000GeneralWISupport_Type()
)
winlink1000GeneralWISupport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000GeneralWISupport.setStatus("mandatory")


class _Winlink1000GeneralSNMPSupport_Type(Integer32):
    """Custom type winlink1000GeneralSNMPSupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("v1Andv3", 1),
          ("snmpv1Only", 2),
          ("snmpv3Only", 3))
    )


_Winlink1000GeneralSNMPSupport_Type.__name__ = "Integer32"
_Winlink1000GeneralSNMPSupport_Object = MibScalar
winlink1000GeneralSNMPSupport = _Winlink1000GeneralSNMPSupport_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 100, 7),
    _Winlink1000GeneralSNMPSupport_Type()
)
winlink1000GeneralSNMPSupport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000GeneralSNMPSupport.setStatus("mandatory")


class _Winlink1000GeneralSSHSupport_Type(Integer32):
    """Custom type winlink1000GeneralSSHSupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2),
          ("unsupported", 3))
    )


_Winlink1000GeneralSSHSupport_Type.__name__ = "Integer32"
_Winlink1000GeneralSSHSupport_Object = MibScalar
winlink1000GeneralSSHSupport = _Winlink1000GeneralSSHSupport_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 100, 8),
    _Winlink1000GeneralSSHSupport_Type()
)
winlink1000GeneralSSHSupport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000GeneralSSHSupport.setStatus("mandatory")


class _Winlink1000GeneralStrictHTTPS_Type(Integer32):
    """Custom type winlink1000GeneralStrictHTTPS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_Winlink1000GeneralStrictHTTPS_Type.__name__ = "Integer32"
_Winlink1000GeneralStrictHTTPS_Object = MibScalar
winlink1000GeneralStrictHTTPS = _Winlink1000GeneralStrictHTTPS_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 100, 9),
    _Winlink1000GeneralStrictHTTPS_Type()
)
winlink1000GeneralStrictHTTPS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000GeneralStrictHTTPS.setStatus("mandatory")


class _Winlink1000GeneralIPForwarding_Type(Integer32):
    """Custom type winlink1000GeneralIPForwarding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_Winlink1000GeneralIPForwarding_Type.__name__ = "Integer32"
_Winlink1000GeneralIPForwarding_Object = MibScalar
winlink1000GeneralIPForwarding = _Winlink1000GeneralIPForwarding_Object(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 100, 10),
    _Winlink1000GeneralIPForwarding_Type()
)
winlink1000GeneralIPForwarding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    winlink1000GeneralIPForwarding.setStatus("mandatory")

# Managed Objects groups


# Notification objects

trunkStateChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 1)
)
trunkStateChanged.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000IduTdmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000IduTdmLineStatus"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    trunkStateChanged.setStatus(
        ""
    )

linkUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 2)
)
linkUp.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    linkUp.setStatus(
        ""
    )

linkDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 3)
)
linkDown.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    linkDown.setStatus(
        ""
    )

detectIDU = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 4)
)
detectIDU.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    detectIDU.setStatus(
        ""
    )

disconnectIDU = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 5)
)
disconnectIDU.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    disconnectIDU.setStatus(
        ""
    )

mismatchIDU = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 6)
)
mismatchIDU.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    mismatchIDU.setStatus(
        ""
    )

openedServices = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 7)
)
openedServices.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000IduSrvDesiredTrunks"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000IduSrvActiveTrunks"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    openedServices.setStatus(
        ""
    )

closedServices = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 8)
)
closedServices.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    closedServices.setStatus(
        ""
    )

incompatibleODUs = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 9)
)
incompatibleODUs.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    incompatibleODUs.setStatus(
        ""
    )

incompatibleIDUs = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 10)
)
incompatibleIDUs.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    incompatibleIDUs.setStatus(
        ""
    )

incompatibleOduIdu = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 11)
)
incompatibleOduIdu.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    incompatibleOduIdu.setStatus(
        ""
    )

probingChannel = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 12)
)
probingChannel.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    probingChannel.setStatus(
        ""
    )

radarDetected = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 13)
)
radarDetected.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    radarDetected.setStatus(
        ""
    )

transmittingOnChannel = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 14)
)
transmittingOnChannel.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    transmittingOnChannel.setStatus(
        ""
    )

scanningChannels = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 15)
)
scanningChannels.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    scanningChannels.setStatus(
        ""
    )

incompatiblePartner = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 16)
)
incompatiblePartner.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    incompatiblePartner.setStatus(
        ""
    )

timeClockSet = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 17)
)
timeClockSet.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    timeClockSet.setStatus(
        ""
    )

configurationChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 18)
)
configurationChanged.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    configurationChanged.setStatus(
        ""
    )

hssOpStateChangedToINU = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 19)
)
hssOpStateChangedToINU.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hssOpStateChangedToINU.setStatus(
        ""
    )

hssOpStateChangedToHSM = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 20)
)
hssOpStateChangedToHSM.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hssOpStateChangedToHSM.setStatus(
        ""
    )

hssOpStateChangedToHSC = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 21)
)
hssOpStateChangedToHSC.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hssOpStateChangedToHSC.setStatus(
        ""
    )

vlanModeActive = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 22)
)
vlanModeActive.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    vlanModeActive.setStatus(
        ""
    )

spectrumAnalysis = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 23)
)
spectrumAnalysis.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    spectrumAnalysis.setStatus(
        ""
    )

hbsHsuDeregisteredOffline = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 24)
)
hbsHsuDeregisteredOffline.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hbsHsuDeregisteredOffline.setStatus(
        ""
    )

hbsHsuDeregisteredSuccessfully = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 25)
)
hbsHsuDeregisteredSuccessfully.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hbsHsuDeregisteredSuccessfully.setStatus(
        ""
    )

hbsHsuRegisteredSuccessfully = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 26)
)
hbsHsuRegisteredSuccessfully.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hbsHsuRegisteredSuccessfully.setStatus(
        ""
    )

hbsHsuRegistrationFailed = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 27)
)
hbsHsuRegistrationFailed.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hbsHsuRegistrationFailed.setStatus(
        ""
    )

hbsHsuViolatedState = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 28)
)
hbsHsuViolatedState.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hbsHsuViolatedState.setStatus(
        ""
    )

hsuViolatedState = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 29)
)
hsuViolatedState.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hsuViolatedState.setStatus(
        ""
    )

hbsUnregisteredSynchronizedHsu = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 30)
)
hbsUnregisteredSynchronizedHsu.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hbsUnregisteredSynchronizedHsu.setStatus(
        ""
    )

hbsUnregisteredUnsynchronizedHsu = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 31)
)
hbsUnregisteredUnsynchronizedHsu.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hbsUnregisteredUnsynchronizedHsu.setStatus(
        ""
    )

cableQuality = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 32)
)
cableQuality.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    cableQuality.setStatus(
        ""
    )

httpAuthentication = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 33)
)
httpAuthentication.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    httpAuthentication.setStatus(
        ""
    )

telnetAuthentication = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 34)
)
telnetAuthentication.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    telnetAuthentication.setStatus(
        ""
    )

tdmServiceAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 100)
)
tdmServiceAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    tdmServiceAlarm.setStatus(
        ""
    )

ethServiceClosed = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 101)
)
ethServiceClosed.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    ethServiceClosed.setStatus(
        ""
    )

ethServiceNotPermitted = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 102)
)
ethServiceNotPermitted.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    ethServiceNotPermitted.setStatus(
        ""
    )

encryptionAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 103)
)
encryptionAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    encryptionAlarm.setStatus(
        ""
    )

changeLinkPasswordAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 104)
)
changeLinkPasswordAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    changeLinkPasswordAlarm.setStatus(
        ""
    )

externalAlarmInPort1Alarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 105)
)
externalAlarmInPort1Alarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    externalAlarmInPort1Alarm.setStatus(
        ""
    )

externalAlarmInPort2Alarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 106)
)
externalAlarmInPort2Alarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    externalAlarmInPort2Alarm.setStatus(
        ""
    )

bitFailedAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 107)
)
bitFailedAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    bitFailedAlarm.setStatus(
        ""
    )

wrongConfigurationLoadedAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 108)
)
wrongConfigurationLoadedAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    wrongConfigurationLoadedAlarm.setStatus(
        ""
    )

lanPort1DisconnectedAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 109)
)
lanPort1DisconnectedAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    lanPort1DisconnectedAlarm.setStatus(
        ""
    )

lanPort2DisconnectedAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 110)
)
lanPort2DisconnectedAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    lanPort2DisconnectedAlarm.setStatus(
        ""
    )

mngPortDisconnectedAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 111)
)
mngPortDisconnectedAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    mngPortDisconnectedAlarm.setStatus(
        ""
    )

externalAlarmInPort3Alarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 112)
)
externalAlarmInPort3Alarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    externalAlarmInPort3Alarm.setStatus(
        ""
    )

externalAlarmInPort4Alarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 113)
)
externalAlarmInPort4Alarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    externalAlarmInPort4Alarm.setStatus(
        ""
    )

swVersionsMismatchFullCompatibilityAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 114)
)
swVersionsMismatchFullCompatibilityAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    swVersionsMismatchFullCompatibilityAlarm.setStatus(
        ""
    )

swVersionsMismatchRestrictedCompatibilityAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 115)
)
swVersionsMismatchRestrictedCompatibilityAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    swVersionsMismatchRestrictedCompatibilityAlarm.setStatus(
        ""
    )

swVersionsMismatchSoftwareUpgradeRequired = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 116)
)
swVersionsMismatchSoftwareUpgradeRequired.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    swVersionsMismatchSoftwareUpgradeRequired.setStatus(
        ""
    )

swVersionsIncompatible = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 117)
)
swVersionsIncompatible.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    swVersionsIncompatible.setStatus(
        ""
    )

hssMultipleSourcesDetectedAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 118)
)
hssMultipleSourcesDetectedAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hssMultipleSourcesDetectedAlarm.setStatus(
        ""
    )

hssSyncToProperSourceStoppedAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 119)
)
hssSyncToProperSourceStoppedAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hssSyncToProperSourceStoppedAlarm.setStatus(
        ""
    )

hssSyncPulseDetectedAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 120)
)
hssSyncPulseDetectedAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hssSyncPulseDetectedAlarm.setStatus(
        ""
    )

tdmBackupAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 121)
)
tdmBackupAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    tdmBackupAlarm.setStatus(
        ""
    )

linkLockUnauthorizedRemoteODU = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 122)
)
linkLockUnauthorizedRemoteODU.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    linkLockUnauthorizedRemoteODU.setStatus(
        ""
    )

linkLockUnauthorizedODU = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 123)
)
linkLockUnauthorizedODU.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    linkLockUnauthorizedODU.setStatus(
        ""
    )

hotStandbyAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 124)
)
hotStandbyAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hotStandbyAlarm.setStatus(
        ""
    )

sfpInsertion = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 126)
)
sfpInsertion.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    sfpInsertion.setStatus(
        ""
    )

sfpPort1DisconnectedAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 127)
)
sfpPort1DisconnectedAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    sfpPort1DisconnectedAlarm.setStatus(
        ""
    )

ringRplStateActiveAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 128)
)
ringRplStateActiveAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    ringRplStateActiveAlarm.setStatus(
        ""
    )

desiredRatioCanNotBeAppliedAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 129)
)
desiredRatioCanNotBeAppliedAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    desiredRatioCanNotBeAppliedAlarm.setStatus(
        ""
    )

cbwMismatch = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 130)
)
cbwMismatch.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    cbwMismatch.setStatus(
        ""
    )

gpsNotSynchronized = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 131)
)
gpsNotSynchronized.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    gpsNotSynchronized.setStatus(
        ""
    )

pdTooHighDueCbwLimitations = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 132)
)
pdTooHighDueCbwLimitations.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    pdTooHighDueCbwLimitations.setStatus(
        ""
    )

hbsEncryptionAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 133)
)
hbsEncryptionAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hbsEncryptionAlarm.setStatus(
        ""
    )

hbsEhServiceClosedToHsu = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 134)
)
hbsEhServiceClosedToHsu.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hbsEhServiceClosedToHsu.setStatus(
        ""
    )

hbsUnsynchronizedHsuAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 135)
)
hbsUnsynchronizedHsuAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hbsUnsynchronizedHsuAlarm.setStatus(
        ""
    )

hbsInactiveHbsAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 136)
)
hbsInactiveHbsAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hbsInactiveHbsAlarm.setStatus(
        ""
    )

incompatibleHsu = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 137)
)
incompatibleHsu.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    incompatibleHsu.setStatus(
        ""
    )

hsuUnsupportedBeacon = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 138)
)
hsuUnsupportedBeacon.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hsuUnsupportedBeacon.setStatus(
        ""
    )

lanPortDisconnectedAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 139)
)
lanPortDisconnectedAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    lanPortDisconnectedAlarm.setStatus(
        ""
    )

poePortDisconnectedAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 140)
)
poePortDisconnectedAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    poePortDisconnectedAlarm.setStatus(
        ""
    )

poePowerConsumptionAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 141)
)
poePowerConsumptionAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    poePowerConsumptionAlarm.setStatus(
        ""
    )

hobupFaultyStateAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 149)
)
hobupFaultyStateAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hobupFaultyStateAlarm.setStatus(
        ""
    )

gpsOverCurrentAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 150)
)
gpsOverCurrentAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    gpsOverCurrentAlarm.setStatus(
        ""
    )

gpsCommunicationFailiureAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 151)
)
gpsCommunicationFailiureAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    gpsCommunicationFailiureAlarm.setStatus(
        ""
    )

temperatureThresholdAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 152)
)
temperatureThresholdAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    temperatureThresholdAlarm.setStatus(
        ""
    )

localRouterDiscoveryStatus = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 153)
)
localRouterDiscoveryStatus.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    localRouterDiscoveryStatus.setStatus(
        ""
    )

trackRouterDiscoveryStatus = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 154)
)
trackRouterDiscoveryStatus.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    trackRouterDiscoveryStatus.setStatus(
        ""
    )

lastUserSnmpAccessOverHourAgo = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 155)
)
lastUserSnmpAccessOverHourAgo.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    lastUserSnmpAccessOverHourAgo.setStatus(
        ""
    )

btsTargetUnreachable = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 156)
)
btsTargetUnreachable.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    btsTargetUnreachable.setStatus(
        ""
    )

hbsLinkQualityDegredationDlAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 158)
)
hbsLinkQualityDegredationDlAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hbsLinkQualityDegredationDlAlarm.setStatus(
        ""
    )

hbsLinkQualityDegredationUlAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 159)
)
hbsLinkQualityDegredationUlAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hbsLinkQualityDegredationUlAlarm.setStatus(
        ""
    )

tdmServiceClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 200)
)
tdmServiceClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    tdmServiceClear.setStatus(
        ""
    )

ethServiceOpened = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 201)
)
ethServiceOpened.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    ethServiceOpened.setStatus(
        ""
    )

encryptionClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 203)
)
encryptionClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    encryptionClear.setStatus(
        ""
    )

changeLinkPasswordClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 204)
)
changeLinkPasswordClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    changeLinkPasswordClear.setStatus(
        ""
    )

externalAlarmInPort1Clear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 205)
)
externalAlarmInPort1Clear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    externalAlarmInPort1Clear.setStatus(
        ""
    )

externalAlarmInPort2Clear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 206)
)
externalAlarmInPort2Clear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    externalAlarmInPort2Clear.setStatus(
        ""
    )

lanPort1Clear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 209)
)
lanPort1Clear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    lanPort1Clear.setStatus(
        ""
    )

lanPort2Clear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 210)
)
lanPort2Clear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    lanPort2Clear.setStatus(
        ""
    )

mngPortClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 211)
)
mngPortClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    mngPortClear.setStatus(
        ""
    )

externalAlarmInPort3Clear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 212)
)
externalAlarmInPort3Clear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    externalAlarmInPort3Clear.setStatus(
        ""
    )

externalAlarmInPort4Clear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 213)
)
externalAlarmInPort4Clear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    externalAlarmInPort4Clear.setStatus(
        ""
    )

swVersionsMatchFullCompatibilityClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 214)
)
swVersionsMatchFullCompatibilityClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    swVersionsMatchFullCompatibilityClear.setStatus(
        ""
    )

swVersionsMatchRestrictedCompatibilityClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 215)
)
swVersionsMatchRestrictedCompatibilityClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    swVersionsMatchRestrictedCompatibilityClear.setStatus(
        ""
    )

swVersionsMatchSoftwareUpgradeRequiredClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 216)
)
swVersionsMatchSoftwareUpgradeRequiredClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    swVersionsMatchSoftwareUpgradeRequiredClear.setStatus(
        ""
    )

swVersionsCompatibleClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 217)
)
swVersionsCompatibleClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    swVersionsCompatibleClear.setStatus(
        ""
    )

hssMultipleSourcesDisappearedClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 218)
)
hssMultipleSourcesDisappearedClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hssMultipleSourcesDisappearedClear.setStatus(
        ""
    )

hssSyncToProperSourceAchievedClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 219)
)
hssSyncToProperSourceAchievedClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hssSyncToProperSourceAchievedClear.setStatus(
        ""
    )

hssSyncPulseDisappearedClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 220)
)
hssSyncPulseDisappearedClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hssSyncPulseDisappearedClear.setStatus(
        ""
    )

tdmBackupClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 221)
)
tdmBackupClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    tdmBackupClear.setStatus(
        ""
    )

linkLockAuthorizedRemoteODU = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 222)
)
linkLockAuthorizedRemoteODU.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    linkLockAuthorizedRemoteODU.setStatus(
        ""
    )

linkLockAuthorizedODU = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 223)
)
linkLockAuthorizedODU.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    linkLockAuthorizedODU.setStatus(
        ""
    )

linkAuthenticationDisabled = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 224)
)
linkAuthenticationDisabled.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    linkAuthenticationDisabled.setStatus(
        ""
    )

hotStandbyClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 225)
)
hotStandbyClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hotStandbyClear.setStatus(
        ""
    )

sfpExtraction = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 226)
)
sfpExtraction.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    sfpExtraction.setStatus(
        ""
    )

sfpPort1Clear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 227)
)
sfpPort1Clear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    sfpPort1Clear.setStatus(
        ""
    )

compatibleIdus = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 228)
)
compatibleIdus.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    compatibleIdus.setStatus(
        ""
    )

desiredRatioCanNotBeAppliedClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 229)
)
desiredRatioCanNotBeAppliedClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    desiredRatioCanNotBeAppliedClear.setStatus(
        ""
    )

cbwMatch = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 230)
)
cbwMatch.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    cbwMatch.setStatus(
        ""
    )

switchCbwAndChannel = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 231)
)
switchCbwAndChannel.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    switchCbwAndChannel.setStatus(
        ""
    )

ringRplStateIdle = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 232)
)
ringRplStateIdle.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    ringRplStateIdle.setStatus(
        ""
    )

ringEthServiceStatus = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 233)
)
ringEthServiceStatus.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    ringEthServiceStatus.setStatus(
        ""
    )

ringFirstRpmReceived = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 234)
)
ringFirstRpmReceived.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    ringFirstRpmReceived.setStatus(
        ""
    )

ringEthernetSrviceUnblockedTO = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 235)
)
ringEthernetSrviceUnblockedTO.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    ringEthernetSrviceUnblockedTO.setStatus(
        ""
    )

gpsSynchronized = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 236)
)
gpsSynchronized.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    gpsSynchronized.setStatus(
        ""
    )

hbsEncryptionClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 237)
)
hbsEncryptionClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hbsEncryptionClear.setStatus(
        ""
    )

hbsEhServiceOpenedToHsu = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 238)
)
hbsEhServiceOpenedToHsu.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hbsEhServiceOpenedToHsu.setStatus(
        ""
    )

hbsSynchronizedHsuAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 239)
)
hbsSynchronizedHsuAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hbsSynchronizedHsuAlarm.setStatus(
        ""
    )

hbsActiveHbs = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 240)
)
hbsActiveHbs.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hbsActiveHbs.setStatus(
        ""
    )

switchCBW = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 241)
)
switchCBW.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    switchCBW.setStatus(
        ""
    )

changeRatio = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 242)
)
changeRatio.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    changeRatio.setStatus(
        ""
    )

lanPortClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 243)
)
lanPortClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    lanPortClear.setStatus(
        ""
    )

poePortClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 244)
)
poePortClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    poePortClear.setStatus(
        ""
    )

poePowerConsumptionClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 245)
)
poePowerConsumptionClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    poePowerConsumptionClear.setStatus(
        ""
    )

incompatibleHbsHsu = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 246)
)
incompatibleHbsHsu.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    incompatibleHbsHsu.setStatus(
        ""
    )

mobilityLinkOff = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 247)
)
mobilityLinkOff.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    mobilityLinkOff.setStatus(
        ""
    )

enterLocalConnection = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 248)
)
enterLocalConnection.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    enterLocalConnection.setStatus(
        ""
    )

hobupActiveStateFaultyClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 249)
)
hobupActiveStateFaultyClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hobupActiveStateFaultyClear.setStatus(
        ""
    )

hobupStandbyState = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 250)
)
hobupStandbyState.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hobupStandbyState.setStatus(
        ""
    )

gpsOverCurrentClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 251)
)
gpsOverCurrentClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    gpsOverCurrentClear.setStatus(
        ""
    )

temperatureThresholdClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 252)
)
temperatureThresholdClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    temperatureThresholdClear.setStatus(
        ""
    )

localRouterDiscoverySucceed = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 253)
)
localRouterDiscoverySucceed.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    localRouterDiscoverySucceed.setStatus(
        ""
    )

trackRouterDiscoverySucceed = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 254)
)
trackRouterDiscoverySucceed.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    trackRouterDiscoverySucceed.setStatus(
        ""
    )

qosVersion2StrictMismatch = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 255)
)
qosVersion2StrictMismatch.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    qosVersion2StrictMismatch.setStatus(
        ""
    )

qosVersion2TtlMismatch = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 256)
)
qosVersion2TtlMismatch.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    qosVersion2TtlMismatch.setStatus(
        ""
    )

btsTargetIsReachable = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 257)
)
btsTargetIsReachable.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    btsTargetIsReachable.setStatus(
        ""
    )

tcNotSupportedByHSU = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 258)
)
tcNotSupportedByHSU.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    tcNotSupportedByHSU.setStatus(
        ""
    )

syncEPortHOStateChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 259)
)
syncEPortHOStateChange.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    syncEPortHOStateChange.setStatus(
        ""
    )

syncEPortFailureStateChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 260)
)
syncEPortFailureStateChange.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    syncEPortFailureStateChange.setStatus(
        ""
    )

btsCpeUpdateServiceFailed = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 261)
)
btsCpeUpdateServiceFailed.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    btsCpeUpdateServiceFailed.setStatus(
        ""
    )

btsCpeUpdateServiceSucceed = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 262)
)
btsCpeUpdateServiceSucceed.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    btsCpeUpdateServiceSucceed.setStatus(
        ""
    )

radiusServerNoREsponse = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 263)
)
radiusServerNoREsponse.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    radiusServerNoREsponse.setStatus(
        ""
    )

noRadiusServerRespond = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 264)
)
noRadiusServerRespond.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    noRadiusServerRespond.setStatus(
        ""
    )

radiusServerRespondedSuccessfully = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 265)
)
radiusServerRespondedSuccessfully.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    radiusServerRespondedSuccessfully.setStatus(
        ""
    )

bsaAlignmentStarted = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 266)
)
bsaAlignmentStarted.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    bsaAlignmentStarted.setStatus(
        ""
    )

bsaAlignmentFinished = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 267)
)
bsaAlignmentFinished.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    bsaAlignmentFinished.setStatus(
        ""
    )

bsaAlignmentTriggered = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 268)
)
bsaAlignmentTriggered.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    bsaAlignmentTriggered.setStatus(
        ""
    )

hbsLinkQualityImprovedDlClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 269)
)
hbsLinkQualityImprovedDlClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hbsLinkQualityImprovedDlClear.setStatus(
        ""
    )

hbsLinkQualityImprovedUlClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 270)
)
hbsLinkQualityImprovedUlClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hbsLinkQualityImprovedUlClear.setStatus(
        ""
    )

hsuResourceTypeMismatch = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 271)
)
hsuResourceTypeMismatch.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hsuResourceTypeMismatch.setStatus(
        ""
    )

externalAntennaAttached = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 272)
)
externalAntennaAttached.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    externalAntennaAttached.setStatus(
        ""
    )

externalAntennaDetached = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 273)
)
externalAntennaDetached.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    externalAntennaDetached.setStatus(
        ""
    )

wifiEnabled = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 274)
)
wifiEnabled.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    wifiEnabled.setStatus(
        ""
    )

wifiDisabled = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 275)
)
wifiDisabled.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    wifiDisabled.setStatus(
        ""
    )

wifiUserConnected = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 276)
)
wifiUserConnected.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    wifiUserConnected.setStatus(
        ""
    )

authenticationMgrUserAutheticationDoneLocally = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 277)
)
authenticationMgrUserAutheticationDoneLocally.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    authenticationMgrUserAutheticationDoneLocally.setStatus(
        ""
    )

authenticationMgrRadiusrequestResult = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 278)
)
authenticationMgrRadiusrequestResult.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    authenticationMgrRadiusrequestResult.setStatus(
        ""
    )

authenticationMgrRemovedEntryFromTable = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 279)
)
authenticationMgrRemovedEntryFromTable.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    authenticationMgrRemovedEntryFromTable.setStatus(
        ""
    )

hsuAuthenticationErrorState = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 280)
)
hsuAuthenticationErrorState.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hsuAuthenticationErrorState.setStatus(
        ""
    )

hbsHsuAuthenticationErrorState = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 281)
)
hbsHsuAuthenticationErrorState.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hbsHsuAuthenticationErrorState.setStatus(
        ""
    )

hsuExitingViolatedState = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 282)
)
hsuExitingViolatedState.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hsuExitingViolatedState.setStatus(
        ""
    )

batteryCapacityBelowThreshold = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 283)
)
batteryCapacityBelowThreshold.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    batteryCapacityBelowThreshold.setStatus(
        ""
    )

batteryTemperatureOutOfRange = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 284)
)
batteryTemperatureOutOfRange.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    batteryTemperatureOutOfRange.setStatus(
        ""
    )

batteryVoltageOutOfRange = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 285)
)
batteryVoltageOutOfRange.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    batteryVoltageOutOfRange.setStatus(
        ""
    )

batteryCurrentOutOfRange = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 286)
)
batteryCurrentOutOfRange.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    batteryCurrentOutOfRange.setStatus(
        ""
    )

portPowerFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 287)
)
portPowerFailure.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    portPowerFailure.setStatus(
        ""
    )

portPowerOn = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 288)
)
portPowerOn.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    portPowerOn.setStatus(
        ""
    )

portPowerOff = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 289)
)
portPowerOff.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    portPowerOff.setStatus(
        ""
    )

portPingLossToDevice = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 290)
)
portPingLossToDevice.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    portPingLossToDevice.setStatus(
        ""
    )

ambientTemperatureNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 291)
)
ambientTemperatureNormal.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    ambientTemperatureNormal.setStatus(
        ""
    )

ambientTemperatureOutOfRange = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 292)
)
ambientTemperatureOutOfRange.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    ambientTemperatureOutOfRange.setStatus(
        ""
    )

mainPowerSupplyFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 293)
)
mainPowerSupplyFailure.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    mainPowerSupplyFailure.setStatus(
        ""
    )

mainPowerSupplyResume = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 294)
)
mainPowerSupplyResume.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    mainPowerSupplyResume.setStatus(
        ""
    )

inputAlarm1Off = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 295)
)
inputAlarm1Off.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    inputAlarm1Off.setStatus(
        ""
    )

inputAlarm1On = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 296)
)
inputAlarm1On.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    inputAlarm1On.setStatus(
        ""
    )

inputAlarm2Off = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 297)
)
inputAlarm2Off.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    inputAlarm2Off.setStatus(
        ""
    )

inputAlarm2On = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 298)
)
inputAlarm2On.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    inputAlarm2On.setStatus(
        ""
    )

tamperCoverClosed = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 299)
)
tamperCoverClosed.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    tamperCoverClosed.setStatus(
        ""
    )

tamperCoverOpened = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 300)
)
tamperCoverOpened.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    tamperCoverOpened.setStatus(
        ""
    )

port8021xEnabledChangedState = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 301)
)
port8021xEnabledChangedState.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    port8021xEnabledChangedState.setStatus(
        ""
    )

ethMissionServerEthernetPortRestarted = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 302)
)
ethMissionServerEthernetPortRestarted.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    ethMissionServerEthernetPortRestarted.setStatus(
        ""
    )

virtualIPMismatch = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 303)
)
virtualIPMismatch.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    virtualIPMismatch.setStatus(
        ""
    )

sshAuthenticationFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 304)
)
sshAuthenticationFailure.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    sshAuthenticationFailure.setStatus(
        ""
    )

sshAuthenticationSuccess = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 305)
)
sshAuthenticationSuccess.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    sshAuthenticationSuccess.setStatus(
        ""
    )

hssSwHscPartiallySupported = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 306)
)
hssSwHscPartiallySupported.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hssSwHscPartiallySupported.setStatus(
        ""
    )

hssFwUpgradeFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 307)
)
hssFwUpgradeFailure.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hssFwUpgradeFailure.setStatus(
        ""
    )

tvwsdbConnectivityErrorAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 311)
)
tvwsdbConnectivityErrorAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    tvwsdbConnectivityErrorAlarm.setStatus(
        ""
    )

tvwsUriChangedByTvws = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 312)
)
tvwsUriChangedByTvws.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    tvwsUriChangedByTvws.setStatus(
        ""
    )

tvwsPawsErrorAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 313)
)
tvwsPawsErrorAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    tvwsPawsErrorAlarm.setStatus(
        ""
    )

tvwsdbConnectedClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 314)
)
tvwsdbConnectedClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    tvwsdbConnectedClear.setStatus(
        ""
    )

tvwsdbEtsiWeblistingConnectivityError = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 315)
)
tvwsdbEtsiWeblistingConnectivityError.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    tvwsdbEtsiWeblistingConnectivityError.setStatus(
        ""
    )

tvwsMopClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 316)
)
tvwsMopClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    tvwsMopClear.setStatus(
        ""
    )

tvwsNoAvailableChannelForHbsAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 317)
)
tvwsNoAvailableChannelForHbsAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    tvwsNoAvailableChannelForHbsAlarm.setStatus(
        ""
    )

tvwsGop = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 318)
)
tvwsGop.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    tvwsGop.setStatus(
        ""
    )

tvwsSopClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 319)
)
tvwsSopClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    tvwsSopClear.setStatus(
        ""
    )

tvwsSpectrumUseRespError = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 320)
)
tvwsSpectrumUseRespError.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    tvwsSpectrumUseRespError.setStatus(
        ""
    )

tvwsSpectrumUseRespCriticalErrorAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 321)
)
tvwsSpectrumUseRespCriticalErrorAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    tvwsSpectrumUseRespCriticalErrorAlarm.setStatus(
        ""
    )

tvwsNoCarrierAvailableForRegisteredHsuAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 322)
)
tvwsNoCarrierAvailableForRegisteredHsuAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    tvwsNoCarrierAvailableForRegisteredHsuAlarm.setStatus(
        ""
    )

tvwsNoCarrierAvailableForUnregisteredHsu = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 323)
)
tvwsNoCarrierAvailableForUnregisteredHsu.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    tvwsNoCarrierAvailableForUnregisteredHsu.setStatus(
        ""
    )

gpsNotSynchronizedAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 324)
)
gpsNotSynchronizedAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    gpsNotSynchronizedAlarm.setStatus(
        ""
    )

gpsSynchronizedClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 325)
)
gpsSynchronizedClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    gpsSynchronizedClear.setStatus(
        ""
    )

gpsLocationChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 326)
)
gpsLocationChange.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    gpsLocationChange.setStatus(
        ""
    )

tvwsHardwareFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 327)
)
tvwsHardwareFailure.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    tvwsHardwareFailure.setStatus(
        ""
    )

changeStateOdu = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 328)
)
changeStateOdu.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    changeStateOdu.setStatus(
        ""
    )

radiusAuthenErrClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 329)
)
radiusAuthenErrClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    radiusAuthenErrClear.setStatus(
        ""
    )

radiusCommunicationErr = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 330)
)
radiusCommunicationErr.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    radiusCommunicationErr.setStatus(
        ""
    )

duplicateMacDetected = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 331)
)
duplicateMacDetected.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    duplicateMacDetected.setStatus(
        ""
    )

radiusAuthorizationFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 332)
)
radiusAuthorizationFailure.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    radiusAuthorizationFailure.setStatus(
        ""
    )

radiusAuthorizationSuccess = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 333)
)
radiusAuthorizationSuccess.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    radiusAuthorizationSuccess.setStatus(
        ""
    )

duplicateMacCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 334)
)
duplicateMacCleared.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    duplicateMacCleared.setStatus(
        ""
    )

changeStateMuteMU = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 335)
)
changeStateMuteMU.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    changeStateMuteMU.setStatus(
        ""
    )

illegalNumOfTrainIDs = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 336)
)
illegalNumOfTrainIDs.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    illegalNumOfTrainIDs.setStatus(
        ""
    )

pawsDBNotActive = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 337)
)
pawsDBNotActive.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    pawsDBNotActive.setStatus(
        ""
    )

pawsDBNameMismatch = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 338)
)
pawsDBNameMismatch.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    pawsDBNameMismatch.setStatus(
        ""
    )

pawsDBNotActiveCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 339)
)
pawsDBNotActiveCleared.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    pawsDBNotActiveCleared.setStatus(
        ""
    )

pawsDBNameMismatchCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 340)
)
pawsDBNameMismatchCleared.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    pawsDBNameMismatchCleared.setStatus(
        ""
    )

linkPasswordChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 341)
)
linkPasswordChange.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    linkPasswordChange.setStatus(
        ""
    )

hbsDisconnectionMuIbhoAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 342)
)
hbsDisconnectionMuIbhoAlarm.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    hbsDisconnectionMuIbhoAlarm.setStatus(
        ""
    )

configurationProblemDetected = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 343)
)
configurationProblemDetected.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    configurationProblemDetected.setStatus(
        ""
    )

regulationMismatch = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 344)
)
regulationMismatch.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    regulationMismatch.setStatus(
        ""
    )

regulationMismatchClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 345)
)
regulationMismatchClear.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    regulationMismatchClear.setStatus(
        ""
    )

swProcessFail = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 346)
)
swProcessFail.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"))
)
if mibBuilder.loadTexts:
    swProcessFail.setStatus(
        ""
    )

swProcessOk = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 347)
)
swProcessOk.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"))
)
if mibBuilder.loadTexts:
    swProcessOk.setStatus(
        ""
    )

tbsConnected = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 348)
)
tbsConnected.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"))
)
if mibBuilder.loadTexts:
    tbsConnected.setStatus(
        ""
    )

tbsDisconnected = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 349)
)
tbsDisconnected.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"))
)
if mibBuilder.loadTexts:
    tbsDisconnected.setStatus(
        ""
    )

controllerConnected = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 350)
)
controllerConnected.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"))
)
if mibBuilder.loadTexts:
    controllerConnected.setStatus(
        ""
    )

controllerDisconnected = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 351)
)
controllerDisconnected.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"))
)
if mibBuilder.loadTexts:
    controllerDisconnected.setStatus(
        ""
    )

gpsRegulationMismatch = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 352)
)
gpsRegulationMismatch.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    gpsRegulationMismatch.setStatus(
        ""
    )

cardIpConfigurationChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 353)
)
cardIpConfigurationChanged.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    cardIpConfigurationChanged.setStatus(
        ""
    )

dhcpIpConflictedWithWifi = NotificationType(
    (1, 3, 6, 1, 4, 1, 4458, 1000, 0, 354)
)
dhcpIpConflictedWithWifi.setObjects(
      *(("RADWIN-MIB-WINLINK1000", "winlink1000GeneralTrapDescription"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmSeverity"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmIfIndex"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmUnit"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmTimeT"),
        ("RADWIN-MIB-WINLINK1000", "winlink1000OduAgnCurrAlarmId"))
)
if mibBuilder.loadTexts:
    dhcpIpConflictedWithWifi.setStatus(
        ""
    )


# Notifications groups


# Agent capabilities


# Module compliance


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "RADWIN-MIB-WINLINK1000",
    **{"radwin": radwin,
       "radwinProducts": radwinProducts,
       "winlink1000Family": winlink1000Family,
       "odu": odu,
       "oduIntegratedAntenna": oduIntegratedAntenna,
       "oduExternalAntenna": oduExternalAntenna,
       "radwin2000Family": radwin2000Family,
       "odu2000": odu2000,
       "odu2KIntegratedAntenna": odu2KIntegratedAntenna,
       "odu2KExternalAntenna": odu2KExternalAntenna,
       "gpsSynchronizerFamily": gpsSynchronizerFamily,
       "oduGSU": oduGSU,
       "oduGSUExternalAntenna": oduGSUExternalAntenna,
       "hssSyncUnits": hssSyncUnits,
       "hssISU": hssISU,
       "hssGSU": hssGSU,
       "radwin5000HBSFamily": radwin5000HBSFamily,
       "oduHBS": oduHBS,
       "oduHBSIntegratedAntenna": oduHBSIntegratedAntenna,
       "oduHBSExternalAntenna": oduHBSExternalAntenna,
       "oduHBSEmbeddedAntenna": oduHBSEmbeddedAntenna,
       "radwin5000HSUFamily": radwin5000HSUFamily,
       "oduHSU": oduHSU,
       "oduHSUIntegratedAntenna": oduHSUIntegratedAntenna,
       "oduHSUExternalAntenna": oduHSUExternalAntenna,
       "oduHSUEmbeddedAntenna": oduHSUEmbeddedAntenna,
       "radwin6000Family": radwin6000Family,
       "odu6000": odu6000,
       "odu6K": odu6K,
       "gateway6000": gateway6000,
       "gateway6K": gateway6K,
       "radwinWiFiAPFamily": radwinWiFiAPFamily,
       "odu600": odu600,
       "oduWiFiAP": oduWiFiAP,
       "radwinSmartNodeFamily": radwinSmartNodeFamily,
       "smartNode": smartNode,
       "radwinNetworkingFamiliy": radwinNetworkingFamiliy,
       "iduS": iduS,
       "iduSI": iduSI,
       "centerNet": centerNet,
       "radwin2000EFamiliy": radwin2000EFamiliy,
       "odu2000E": odu2000E,
       "odu2KEIntegratedAntenna": odu2KEIntegratedAntenna,
       "odu2KEExternalAntenna": odu2KEExternalAntenna,
       "winlink1000": winlink1000,
       "trunkStateChanged": trunkStateChanged,
       "linkUp": linkUp,
       "linkDown": linkDown,
       "detectIDU": detectIDU,
       "disconnectIDU": disconnectIDU,
       "mismatchIDU": mismatchIDU,
       "openedServices": openedServices,
       "closedServices": closedServices,
       "incompatibleODUs": incompatibleODUs,
       "incompatibleIDUs": incompatibleIDUs,
       "incompatibleOduIdu": incompatibleOduIdu,
       "probingChannel": probingChannel,
       "radarDetected": radarDetected,
       "transmittingOnChannel": transmittingOnChannel,
       "scanningChannels": scanningChannels,
       "incompatiblePartner": incompatiblePartner,
       "timeClockSet": timeClockSet,
       "configurationChanged": configurationChanged,
       "hssOpStateChangedToINU": hssOpStateChangedToINU,
       "hssOpStateChangedToHSM": hssOpStateChangedToHSM,
       "hssOpStateChangedToHSC": hssOpStateChangedToHSC,
       "vlanModeActive": vlanModeActive,
       "spectrumAnalysis": spectrumAnalysis,
       "hbsHsuDeregisteredOffline": hbsHsuDeregisteredOffline,
       "hbsHsuDeregisteredSuccessfully": hbsHsuDeregisteredSuccessfully,
       "hbsHsuRegisteredSuccessfully": hbsHsuRegisteredSuccessfully,
       "hbsHsuRegistrationFailed": hbsHsuRegistrationFailed,
       "hbsHsuViolatedState": hbsHsuViolatedState,
       "hsuViolatedState": hsuViolatedState,
       "hbsUnregisteredSynchronizedHsu": hbsUnregisteredSynchronizedHsu,
       "hbsUnregisteredUnsynchronizedHsu": hbsUnregisteredUnsynchronizedHsu,
       "cableQuality": cableQuality,
       "httpAuthentication": httpAuthentication,
       "telnetAuthentication": telnetAuthentication,
       "tdmServiceAlarm": tdmServiceAlarm,
       "ethServiceClosed": ethServiceClosed,
       "ethServiceNotPermitted": ethServiceNotPermitted,
       "encryptionAlarm": encryptionAlarm,
       "changeLinkPasswordAlarm": changeLinkPasswordAlarm,
       "externalAlarmInPort1Alarm": externalAlarmInPort1Alarm,
       "externalAlarmInPort2Alarm": externalAlarmInPort2Alarm,
       "bitFailedAlarm": bitFailedAlarm,
       "wrongConfigurationLoadedAlarm": wrongConfigurationLoadedAlarm,
       "lanPort1DisconnectedAlarm": lanPort1DisconnectedAlarm,
       "lanPort2DisconnectedAlarm": lanPort2DisconnectedAlarm,
       "mngPortDisconnectedAlarm": mngPortDisconnectedAlarm,
       "externalAlarmInPort3Alarm": externalAlarmInPort3Alarm,
       "externalAlarmInPort4Alarm": externalAlarmInPort4Alarm,
       "swVersionsMismatchFullCompatibilityAlarm": swVersionsMismatchFullCompatibilityAlarm,
       "swVersionsMismatchRestrictedCompatibilityAlarm": swVersionsMismatchRestrictedCompatibilityAlarm,
       "swVersionsMismatchSoftwareUpgradeRequired": swVersionsMismatchSoftwareUpgradeRequired,
       "swVersionsIncompatible": swVersionsIncompatible,
       "hssMultipleSourcesDetectedAlarm": hssMultipleSourcesDetectedAlarm,
       "hssSyncToProperSourceStoppedAlarm": hssSyncToProperSourceStoppedAlarm,
       "hssSyncPulseDetectedAlarm": hssSyncPulseDetectedAlarm,
       "tdmBackupAlarm": tdmBackupAlarm,
       "linkLockUnauthorizedRemoteODU": linkLockUnauthorizedRemoteODU,
       "linkLockUnauthorizedODU": linkLockUnauthorizedODU,
       "hotStandbyAlarm": hotStandbyAlarm,
       "sfpInsertion": sfpInsertion,
       "sfpPort1DisconnectedAlarm": sfpPort1DisconnectedAlarm,
       "ringRplStateActiveAlarm": ringRplStateActiveAlarm,
       "desiredRatioCanNotBeAppliedAlarm": desiredRatioCanNotBeAppliedAlarm,
       "cbwMismatch": cbwMismatch,
       "gpsNotSynchronized": gpsNotSynchronized,
       "pdTooHighDueCbwLimitations": pdTooHighDueCbwLimitations,
       "hbsEncryptionAlarm": hbsEncryptionAlarm,
       "hbsEhServiceClosedToHsu": hbsEhServiceClosedToHsu,
       "hbsUnsynchronizedHsuAlarm": hbsUnsynchronizedHsuAlarm,
       "hbsInactiveHbsAlarm": hbsInactiveHbsAlarm,
       "incompatibleHsu": incompatibleHsu,
       "hsuUnsupportedBeacon": hsuUnsupportedBeacon,
       "lanPortDisconnectedAlarm": lanPortDisconnectedAlarm,
       "poePortDisconnectedAlarm": poePortDisconnectedAlarm,
       "poePowerConsumptionAlarm": poePowerConsumptionAlarm,
       "hobupFaultyStateAlarm": hobupFaultyStateAlarm,
       "gpsOverCurrentAlarm": gpsOverCurrentAlarm,
       "gpsCommunicationFailiureAlarm": gpsCommunicationFailiureAlarm,
       "temperatureThresholdAlarm": temperatureThresholdAlarm,
       "localRouterDiscoveryStatus": localRouterDiscoveryStatus,
       "trackRouterDiscoveryStatus": trackRouterDiscoveryStatus,
       "lastUserSnmpAccessOverHourAgo": lastUserSnmpAccessOverHourAgo,
       "btsTargetUnreachable": btsTargetUnreachable,
       "hbsLinkQualityDegredationDlAlarm": hbsLinkQualityDegredationDlAlarm,
       "hbsLinkQualityDegredationUlAlarm": hbsLinkQualityDegredationUlAlarm,
       "tdmServiceClear": tdmServiceClear,
       "ethServiceOpened": ethServiceOpened,
       "encryptionClear": encryptionClear,
       "changeLinkPasswordClear": changeLinkPasswordClear,
       "externalAlarmInPort1Clear": externalAlarmInPort1Clear,
       "externalAlarmInPort2Clear": externalAlarmInPort2Clear,
       "lanPort1Clear": lanPort1Clear,
       "lanPort2Clear": lanPort2Clear,
       "mngPortClear": mngPortClear,
       "externalAlarmInPort3Clear": externalAlarmInPort3Clear,
       "externalAlarmInPort4Clear": externalAlarmInPort4Clear,
       "swVersionsMatchFullCompatibilityClear": swVersionsMatchFullCompatibilityClear,
       "swVersionsMatchRestrictedCompatibilityClear": swVersionsMatchRestrictedCompatibilityClear,
       "swVersionsMatchSoftwareUpgradeRequiredClear": swVersionsMatchSoftwareUpgradeRequiredClear,
       "swVersionsCompatibleClear": swVersionsCompatibleClear,
       "hssMultipleSourcesDisappearedClear": hssMultipleSourcesDisappearedClear,
       "hssSyncToProperSourceAchievedClear": hssSyncToProperSourceAchievedClear,
       "hssSyncPulseDisappearedClear": hssSyncPulseDisappearedClear,
       "tdmBackupClear": tdmBackupClear,
       "linkLockAuthorizedRemoteODU": linkLockAuthorizedRemoteODU,
       "linkLockAuthorizedODU": linkLockAuthorizedODU,
       "linkAuthenticationDisabled": linkAuthenticationDisabled,
       "hotStandbyClear": hotStandbyClear,
       "sfpExtraction": sfpExtraction,
       "sfpPort1Clear": sfpPort1Clear,
       "compatibleIdus": compatibleIdus,
       "desiredRatioCanNotBeAppliedClear": desiredRatioCanNotBeAppliedClear,
       "cbwMatch": cbwMatch,
       "switchCbwAndChannel": switchCbwAndChannel,
       "ringRplStateIdle": ringRplStateIdle,
       "ringEthServiceStatus": ringEthServiceStatus,
       "ringFirstRpmReceived": ringFirstRpmReceived,
       "ringEthernetSrviceUnblockedTO": ringEthernetSrviceUnblockedTO,
       "gpsSynchronized": gpsSynchronized,
       "hbsEncryptionClear": hbsEncryptionClear,
       "hbsEhServiceOpenedToHsu": hbsEhServiceOpenedToHsu,
       "hbsSynchronizedHsuAlarm": hbsSynchronizedHsuAlarm,
       "hbsActiveHbs": hbsActiveHbs,
       "switchCBW": switchCBW,
       "changeRatio": changeRatio,
       "lanPortClear": lanPortClear,
       "poePortClear": poePortClear,
       "poePowerConsumptionClear": poePowerConsumptionClear,
       "incompatibleHbsHsu": incompatibleHbsHsu,
       "mobilityLinkOff": mobilityLinkOff,
       "enterLocalConnection": enterLocalConnection,
       "hobupActiveStateFaultyClear": hobupActiveStateFaultyClear,
       "hobupStandbyState": hobupStandbyState,
       "gpsOverCurrentClear": gpsOverCurrentClear,
       "temperatureThresholdClear": temperatureThresholdClear,
       "localRouterDiscoverySucceed": localRouterDiscoverySucceed,
       "trackRouterDiscoverySucceed": trackRouterDiscoverySucceed,
       "qosVersion2StrictMismatch": qosVersion2StrictMismatch,
       "qosVersion2TtlMismatch": qosVersion2TtlMismatch,
       "btsTargetIsReachable": btsTargetIsReachable,
       "tcNotSupportedByHSU": tcNotSupportedByHSU,
       "syncEPortHOStateChange": syncEPortHOStateChange,
       "syncEPortFailureStateChange": syncEPortFailureStateChange,
       "btsCpeUpdateServiceFailed": btsCpeUpdateServiceFailed,
       "btsCpeUpdateServiceSucceed": btsCpeUpdateServiceSucceed,
       "radiusServerNoREsponse": radiusServerNoREsponse,
       "noRadiusServerRespond": noRadiusServerRespond,
       "radiusServerRespondedSuccessfully": radiusServerRespondedSuccessfully,
       "bsaAlignmentStarted": bsaAlignmentStarted,
       "bsaAlignmentFinished": bsaAlignmentFinished,
       "bsaAlignmentTriggered": bsaAlignmentTriggered,
       "hbsLinkQualityImprovedDlClear": hbsLinkQualityImprovedDlClear,
       "hbsLinkQualityImprovedUlClear": hbsLinkQualityImprovedUlClear,
       "hsuResourceTypeMismatch": hsuResourceTypeMismatch,
       "externalAntennaAttached": externalAntennaAttached,
       "externalAntennaDetached": externalAntennaDetached,
       "wifiEnabled": wifiEnabled,
       "wifiDisabled": wifiDisabled,
       "wifiUserConnected": wifiUserConnected,
       "authenticationMgrUserAutheticationDoneLocally": authenticationMgrUserAutheticationDoneLocally,
       "authenticationMgrRadiusrequestResult": authenticationMgrRadiusrequestResult,
       "authenticationMgrRemovedEntryFromTable": authenticationMgrRemovedEntryFromTable,
       "hsuAuthenticationErrorState": hsuAuthenticationErrorState,
       "hbsHsuAuthenticationErrorState": hbsHsuAuthenticationErrorState,
       "hsuExitingViolatedState": hsuExitingViolatedState,
       "batteryCapacityBelowThreshold": batteryCapacityBelowThreshold,
       "batteryTemperatureOutOfRange": batteryTemperatureOutOfRange,
       "batteryVoltageOutOfRange": batteryVoltageOutOfRange,
       "batteryCurrentOutOfRange": batteryCurrentOutOfRange,
       "portPowerFailure": portPowerFailure,
       "portPowerOn": portPowerOn,
       "portPowerOff": portPowerOff,
       "portPingLossToDevice": portPingLossToDevice,
       "ambientTemperatureNormal": ambientTemperatureNormal,
       "ambientTemperatureOutOfRange": ambientTemperatureOutOfRange,
       "mainPowerSupplyFailure": mainPowerSupplyFailure,
       "mainPowerSupplyResume": mainPowerSupplyResume,
       "inputAlarm1Off": inputAlarm1Off,
       "inputAlarm1On": inputAlarm1On,
       "inputAlarm2Off": inputAlarm2Off,
       "inputAlarm2On": inputAlarm2On,
       "tamperCoverClosed": tamperCoverClosed,
       "tamperCoverOpened": tamperCoverOpened,
       "port8021xEnabledChangedState": port8021xEnabledChangedState,
       "ethMissionServerEthernetPortRestarted": ethMissionServerEthernetPortRestarted,
       "virtualIPMismatch": virtualIPMismatch,
       "sshAuthenticationFailure": sshAuthenticationFailure,
       "sshAuthenticationSuccess": sshAuthenticationSuccess,
       "hssSwHscPartiallySupported": hssSwHscPartiallySupported,
       "hssFwUpgradeFailure": hssFwUpgradeFailure,
       "tvwsdbConnectivityErrorAlarm": tvwsdbConnectivityErrorAlarm,
       "tvwsUriChangedByTvws": tvwsUriChangedByTvws,
       "tvwsPawsErrorAlarm": tvwsPawsErrorAlarm,
       "tvwsdbConnectedClear": tvwsdbConnectedClear,
       "tvwsdbEtsiWeblistingConnectivityError": tvwsdbEtsiWeblistingConnectivityError,
       "tvwsMopClear": tvwsMopClear,
       "tvwsNoAvailableChannelForHbsAlarm": tvwsNoAvailableChannelForHbsAlarm,
       "tvwsGop": tvwsGop,
       "tvwsSopClear": tvwsSopClear,
       "tvwsSpectrumUseRespError": tvwsSpectrumUseRespError,
       "tvwsSpectrumUseRespCriticalErrorAlarm": tvwsSpectrumUseRespCriticalErrorAlarm,
       "tvwsNoCarrierAvailableForRegisteredHsuAlarm": tvwsNoCarrierAvailableForRegisteredHsuAlarm,
       "tvwsNoCarrierAvailableForUnregisteredHsu": tvwsNoCarrierAvailableForUnregisteredHsu,
       "gpsNotSynchronizedAlarm": gpsNotSynchronizedAlarm,
       "gpsSynchronizedClear": gpsSynchronizedClear,
       "gpsLocationChange": gpsLocationChange,
       "tvwsHardwareFailure": tvwsHardwareFailure,
       "changeStateOdu": changeStateOdu,
       "radiusAuthenErrClear": radiusAuthenErrClear,
       "radiusCommunicationErr": radiusCommunicationErr,
       "duplicateMacDetected": duplicateMacDetected,
       "radiusAuthorizationFailure": radiusAuthorizationFailure,
       "radiusAuthorizationSuccess": radiusAuthorizationSuccess,
       "duplicateMacCleared": duplicateMacCleared,
       "changeStateMuteMU": changeStateMuteMU,
       "illegalNumOfTrainIDs": illegalNumOfTrainIDs,
       "pawsDBNotActive": pawsDBNotActive,
       "pawsDBNameMismatch": pawsDBNameMismatch,
       "pawsDBNotActiveCleared": pawsDBNotActiveCleared,
       "pawsDBNameMismatchCleared": pawsDBNameMismatchCleared,
       "linkPasswordChange": linkPasswordChange,
       "hbsDisconnectionMuIbhoAlarm": hbsDisconnectionMuIbhoAlarm,
       "configurationProblemDetected": configurationProblemDetected,
       "regulationMismatch": regulationMismatch,
       "regulationMismatchClear": regulationMismatchClear,
       "swProcessFail": swProcessFail,
       "swProcessOk": swProcessOk,
       "tbsConnected": tbsConnected,
       "tbsDisconnected": tbsDisconnected,
       "controllerConnected": controllerConnected,
       "controllerDisconnected": controllerDisconnected,
       "gpsRegulationMismatch": gpsRegulationMismatch,
       "cardIpConfigurationChanged": cardIpConfigurationChanged,
       "dhcpIpConflictedWithWifi": dhcpIpConflictedWithWifi,
       "winlink1000Odu": winlink1000Odu,
       "winlink1000OduAdmin": winlink1000OduAdmin,
       "winlink1000OduAdmProductType": winlink1000OduAdmProductType,
       "winlink1000OduAdmHwRev": winlink1000OduAdmHwRev,
       "winlink1000OduAdmSwRev": winlink1000OduAdmSwRev,
       "winlink1000OduAdmLinkName": winlink1000OduAdmLinkName,
       "winlink1000OduAdmResetCmd": winlink1000OduAdmResetCmd,
       "winlink1000OduAdmAddres": winlink1000OduAdmAddres,
       "winlink1000OduAdmMask": winlink1000OduAdmMask,
       "winlink1000OduAdmGateway": winlink1000OduAdmGateway,
       "winlink1000OduAdmBroadcast": winlink1000OduAdmBroadcast,
       "winlink1000OduAdmHwModel": winlink1000OduAdmHwModel,
       "winlink1000OduAdmHostsTable": winlink1000OduAdmHostsTable,
       "winlink1000OduAdmHostsEntry": winlink1000OduAdmHostsEntry,
       "winlink1000OduAdmHostsIndex": winlink1000OduAdmHostsIndex,
       "winlink1000OduAdmHostsIp": winlink1000OduAdmHostsIp,
       "winlink1000OduAdmHostsPort": winlink1000OduAdmHostsPort,
       "winlink1000OduAdmHostsSecurityModel": winlink1000OduAdmHostsSecurityModel,
       "winlink1000OduAdmHostsUserName": winlink1000OduAdmHostsUserName,
       "winlink1000OduAdmHostsPassword": winlink1000OduAdmHostsPassword,
       "winlink1000OduAdmHostsIPv6": winlink1000OduAdmHostsIPv6,
       "winlink1000OduBuzzerAdminState": winlink1000OduBuzzerAdminState,
       "winlink1000OduProductId": winlink1000OduProductId,
       "winlink1000OduReadCommunity": winlink1000OduReadCommunity,
       "winlink1000OduReadWriteCommunity": winlink1000OduReadWriteCommunity,
       "winlink1000OduTrapCommunity": winlink1000OduTrapCommunity,
       "winlink1000OduAdmSnmpAgentVersion": winlink1000OduAdmSnmpAgentVersion,
       "winlink1000OduAdmRemoteSiteName": winlink1000OduAdmRemoteSiteName,
       "winlink1000OduAdmSnmpAgentMinorVersion": winlink1000OduAdmSnmpAgentMinorVersion,
       "winlink1000OduAdmLinkPassword": winlink1000OduAdmLinkPassword,
       "winlink1000OduAdmSiteLinkPassword": winlink1000OduAdmSiteLinkPassword,
       "winlink1000OduAdmDefaultPassword": winlink1000OduAdmDefaultPassword,
       "winlink1000OduAdmConnectionType": winlink1000OduAdmConnectionType,
       "winlink1000OduAdmBackToFactorySettingsCmd": winlink1000OduAdmBackToFactorySettingsCmd,
       "winlink1000OduAdmIpParamsCnfg": winlink1000OduAdmIpParamsCnfg,
       "winlink1000OduAdmVlanID": winlink1000OduAdmVlanID,
       "winlink1000OduAdmVlanPriority": winlink1000OduAdmVlanPriority,
       "winlink1000OduAdmSN": winlink1000OduAdmSN,
       "winlink1000OduAdmProductName": winlink1000OduAdmProductName,
       "winlink1000OduAdmActivationKey": winlink1000OduAdmActivationKey,
       "winlink1000OduAdmRmtPermittedOduType": winlink1000OduAdmRmtPermittedOduType,
       "winlink1000OduAdmCpuID": winlink1000OduAdmCpuID,
       "winlink1000OduAdmOvrdCmd": winlink1000OduAdmOvrdCmd,
       "winlink1000OduAdmLinkMode": winlink1000OduAdmLinkMode,
       "winlink1000OduAdmActualConnectMode": winlink1000OduAdmActualConnectMode,
       "winlink1000OduAdmAES256Support": winlink1000OduAdmAES256Support,
       "winlink1000OduAdmAES256State": winlink1000OduAdmAES256State,
       "winlink1000OduAdmAES256Status": winlink1000OduAdmAES256Status,
       "winlink1000OduAdmBatterySavingShutdownTime": winlink1000OduAdmBatterySavingShutdownTime,
       "winlink1000OduAdmWiFiPowerMode": winlink1000OduAdmWiFiPowerMode,
       "winlink1000OduAdmShutdownTimer": winlink1000OduAdmShutdownTimer,
       "winlink1000OduAdmGPSState": winlink1000OduAdmGPSState,
       "winlink1000OduAdmTemperatureC": winlink1000OduAdmTemperatureC,
       "winlink1000OduAdmIPStackMode": winlink1000OduAdmIPStackMode,
       "winlink1000OduAdmIPv6ParamsCnfg": winlink1000OduAdmIPv6ParamsCnfg,
       "winlink1000OduAdmIPv6Address": winlink1000OduAdmIPv6Address,
       "winlink1000OduAdmIPv6Prefix": winlink1000OduAdmIPv6Prefix,
       "winlink1000OduAdmIPv6DefaultGateWay": winlink1000OduAdmIPv6DefaultGateWay,
       "winlink1000OduAdmPowerConsumption": winlink1000OduAdmPowerConsumption,
       "winlink1000OduAdmWifi": winlink1000OduAdmWifi,
       "winlink1000OduAdmWifiChannel": winlink1000OduAdmWifiChannel,
       "winlink1000OduAdmWifiTxPower": winlink1000OduAdmWifiTxPower,
       "winlink1000OduAdmWifiSSID": winlink1000OduAdmWifiSSID,
       "winlink1000OduAdmWifiSecurityType": winlink1000OduAdmWifiSecurityType,
       "winlink1000OduAdmWifiPassword": winlink1000OduAdmWifiPassword,
       "winlink1000OduAdmWifiNetwork": winlink1000OduAdmWifiNetwork,
       "winlink1000OduAdmWifiRssi": winlink1000OduAdmWifiRssi,
       "winlink1000OduAdmWifiStationMAC": winlink1000OduAdmWifiStationMAC,
       "winlink1000OduAdmWifiRestart": winlink1000OduAdmWifiRestart,
       "winlink1000OduAdmWifiApStatus": winlink1000OduAdmWifiApStatus,
       "winlink1000OduAdmWifiMaxTxPower": winlink1000OduAdmWifiMaxTxPower,
       "winlink1000OduAdmWiFiRssiTable": winlink1000OduAdmWiFiRssiTable,
       "winlink1000OduAdmWiFiRssiAndMacEntry": winlink1000OduAdmWiFiRssiAndMacEntry,
       "winlink1000OduAdmWiFiRssiAndMacIndex": winlink1000OduAdmWiFiRssiAndMacIndex,
       "winlink1000OduAdmWiFiRssiAndMac": winlink1000OduAdmWiFiRssiAndMac,
       "winlink1000OduAdmBsaOperationMode": winlink1000OduAdmBsaOperationMode,
       "winlink1000OduAdmMngConnection": winlink1000OduAdmMngConnection,
       "winlink1000OduAdm1588TCSupport": winlink1000OduAdm1588TCSupport,
       "winlink1000OduAdmSyncESupport": winlink1000OduAdmSyncESupport,
       "winlink1000OduAdmRadioRev": winlink1000OduAdmRadioRev,
       "winlink1000OduAdmProductRev": winlink1000OduAdmProductRev,
       "winlink1000OduAdmPMPSUSupport": winlink1000OduAdmPMPSUSupport,
       "winlink1000OduAdmManagerDownloadURL": winlink1000OduAdmManagerDownloadURL,
       "winlink1000OduAdmAntennaDescription": winlink1000OduAdmAntennaDescription,
       "winlink1000OduAdmSwCapabilities": winlink1000OduAdmSwCapabilities,
       "winlink1000OduAdmSwChange": winlink1000OduAdmSwChange,
       "winlink1000OduAdmSwChangeCommand": winlink1000OduAdmSwChangeCommand,
       "winlink1000OduAdmSwChangeMetadata": winlink1000OduAdmSwChangeMetadata,
       "winlink1000OduAdmSwChangeStatus": winlink1000OduAdmSwChangeStatus,
       "winlink1000OduAdmSwChangeError": winlink1000OduAdmSwChangeError,
       "winlink1000OduAdmRequesterSourceIp": winlink1000OduAdmRequesterSourceIp,
       "winlink1000OduAdmSecurityMode": winlink1000OduAdmSecurityMode,
       "winlink1000OduAdmTemporarilyDisableSecurityMode": winlink1000OduAdmTemporarilyDisableSecurityMode,
       "winlink1000OduAdmSyslogServerIp": winlink1000OduAdmSyslogServerIp,
       "winlink1000OduAdmReportSwOperation": winlink1000OduAdmReportSwOperation,
       "winlink1000OduAdmBootVersion": winlink1000OduAdmBootVersion,
       "winlink1000OduAdmOneTimePassword": winlink1000OduAdmOneTimePassword,
       "winlink1000OduAdmSupportExtendedImage": winlink1000OduAdmSupportExtendedImage,
       "winlink1000OduAdmFiM": winlink1000OduAdmFiM,
       "winlink1000OduAdmFiMBS": winlink1000OduAdmFiMBS,
       "winlink1000OduAdmFiMBSAir": winlink1000OduAdmFiMBSAir,
       "winlink1000OduAdminFiMBSAirRUF": winlink1000OduAdminFiMBSAirRUF,
       "winlink1000OduAdminFiMBSAirITHOType": winlink1000OduAdminFiMBSAirITHOType,
       "winlink1000OduAdminFiMBSAirBIndex": winlink1000OduAdminFiMBSAirBIndex,
       "winlink1000OduAdminFiMBSAirTSGIndex": winlink1000OduAdminFiMBSAirTSGIndex,
       "winlink1000OduAdminFiMBSAirITHOMode": winlink1000OduAdminFiMBSAirITHOMode,
       "winlink1000OduAdminFiMBSAirHOTable": winlink1000OduAdminFiMBSAirHOTable,
       "winlink1000OduAdminFiMBSAirHOEntry": winlink1000OduAdminFiMBSAirHOEntry,
       "winlink1000OduAdminFiMBSAirHOIndex": winlink1000OduAdminFiMBSAirHOIndex,
       "winlink1000OduAdminFiMBSAirHOFreq": winlink1000OduAdminFiMBSAirHOFreq,
       "winlink1000OduAdminFiMBSAirHOIP": winlink1000OduAdminFiMBSAirHOIP,
       "winlink1000OduAdminFiMBSAirCoCHIPTable": winlink1000OduAdminFiMBSAirCoCHIPTable,
       "winlink1000OduAdminFiMBSAirCoCHIPEntry": winlink1000OduAdminFiMBSAirCoCHIPEntry,
       "winlink1000OduAdminFiMBSAirCoCHIndex": winlink1000OduAdminFiMBSAirCoCHIndex,
       "winlink1000OduAdminFiMBSAirCoCHIP": winlink1000OduAdminFiMBSAirCoCHIP,
       "winlink1000OduAdminFiMBSAirDepoTrackSegment": winlink1000OduAdminFiMBSAirDepoTrackSegment,
       "winlink1000OduAdmFiMBSNet": winlink1000OduAdmFiMBSNet,
       "winlink1000OduAdminFiMBSNetType": winlink1000OduAdminFiMBSNetType,
       "winlink1000OduAdminFiMBSNetCenterNetPort": winlink1000OduAdminFiMBSNetCenterNetPort,
       "winlink1000OduAdminFiMBSNetCenterNetTable": winlink1000OduAdminFiMBSNetCenterNetTable,
       "winlink1000OduAdminFiMBSNetCenterNetEntry": winlink1000OduAdminFiMBSNetCenterNetEntry,
       "winlink1000OduAdminFiMBSNetCenterNetIndex": winlink1000OduAdminFiMBSNetCenterNetIndex,
       "winlink1000OduAdminFiMBSNetCenterNetIP": winlink1000OduAdminFiMBSNetCenterNetIP,
       "winlink1000OduAdmFiMBSSync": winlink1000OduAdmFiMBSSync,
       "winlink1000OduAdminFiMBSSyncTC": winlink1000OduAdminFiMBSSyncTC,
       "winlink1000OduAdminFiMBSSyncJitter": winlink1000OduAdminFiMBSSyncJitter,
       "winlink1000OduAdmFiMBSEACS": winlink1000OduAdmFiMBSEACS,
       "winlink1000OduAdminFiMEACSEN": winlink1000OduAdminFiMEACSEN,
       "winlink1000OduAdminFiMEACSCHPRIO": winlink1000OduAdminFiMEACSCHPRIO,
       "winlink1000OduAdminFiMEACSDFSTRIGGER": winlink1000OduAdminFiMEACSDFSTRIGGER,
       "winlink1000OduAdminFiMEACSPMAN": winlink1000OduAdminFiMEACSPMAN,
       "winlink1000OduAdminFiBEACSSELFHEALING": winlink1000OduAdminFiBEACSSELFHEALING,
       "winlink1000OduAdminFiBEacsSwitchStatus": winlink1000OduAdminFiBEacsSwitchStatus,
       "winlink1000OduAdmFiMMU": winlink1000OduAdmFiMMU,
       "winlink1000OduAdmFiMMUAir": winlink1000OduAdmFiMMUAir,
       "winlink1000OduAdminFiMMUAirServBS": winlink1000OduAdminFiMMUAirServBS,
       "winlink1000OduAdminFiMMUAirRole": winlink1000OduAdminFiMMUAirRole,
       "winlink1000OduAdminFiMMUAirHOMode": winlink1000OduAdminFiMMUAirHOMode,
       "winlink1000OduAdminFiMMUAirIBHOType": winlink1000OduAdminFiMMUAirIBHOType,
       "winlink1000OduAdmFiMMUNet": winlink1000OduAdmFiMMUNet,
       "winlink1000OduAdminFiMMUNetR1IP": winlink1000OduAdminFiMMUNetR1IP,
       "winlink1000OduAdminFiMMUNetLANTable": winlink1000OduAdminFiMMUNetLANTable,
       "winlink1000OduAdminFiMMUNetLANEntry": winlink1000OduAdminFiMMUNetLANEntry,
       "winlink1000OduAdminFiMMUNetLANIndex": winlink1000OduAdminFiMMUNetLANIndex,
       "winlink1000OduAdminFiMMUNetLAN": winlink1000OduAdminFiMMUNetLAN,
       "winlink1000OduAdminFiMMUNetMaskLAN": winlink1000OduAdminFiMMUNetMaskLAN,
       "winlink1000OduAdminFiMMUNetL3VIP": winlink1000OduAdminFiMMUNetL3VIP,
       "winlink1000OduAdminFiMMUNetPeer": winlink1000OduAdminFiMMUNetPeer,
       "winlink1000OduAdminFiMMUNetType": winlink1000OduAdminFiMMUNetType,
       "winlink1000OduAdminFiMMUNetAddLearnVLANTable": winlink1000OduAdminFiMMUNetAddLearnVLANTable,
       "winlink1000OduAdminFiMMUNetAddLearnVLANEntry": winlink1000OduAdminFiMMUNetAddLearnVLANEntry,
       "winlink1000OduAdminFiMMUNetAddLearnVLANIndex": winlink1000OduAdminFiMMUNetAddLearnVLANIndex,
       "winlink1000OduAdminFiMMUNetAddLearnVLAN": winlink1000OduAdminFiMMUNetAddLearnVLAN,
       "winlink1000OduAdminFiMMUIthoMuMode": winlink1000OduAdminFiMMUIthoMuMode,
       "winlink1000OduAdmDnsServerAddress": winlink1000OduAdmDnsServerAddress,
       "winlink1000OduAdmOwner": winlink1000OduAdmOwner,
       "winlink1000OduAdmContactDetails": winlink1000OduAdmContactDetails,
       "winlink1000OduAdmSDRRevision": winlink1000OduAdmSDRRevision,
       "winlink1000OduAdmDyingGaspStatus": winlink1000OduAdmDyingGaspStatus,
       "winlink1000OduAdmCurrentV4Address": winlink1000OduAdmCurrentV4Address,
       "winlink1000OduAdmCurrentV4Source": winlink1000OduAdmCurrentV4Source,
       "winlink1000OduAdmCurrentV4Addres": winlink1000OduAdmCurrentV4Addres,
       "winlink1000OduAdmCurrentV4Mask": winlink1000OduAdmCurrentV4Mask,
       "winlink1000OduAdmCurrentV4Gateway": winlink1000OduAdmCurrentV4Gateway,
       "winlink1000OduAdmCurrentV4Params": winlink1000OduAdmCurrentV4Params,
       "winlink1000OduAdmConfiguredV4Source": winlink1000OduAdmConfiguredV4Source,
       "winlink1000OduService": winlink1000OduService,
       "winlink1000OduSrvMode": winlink1000OduSrvMode,
       "winlink1000OduSrvBridging": winlink1000OduSrvBridging,
       "winlink1000OduServiceRingTopology": winlink1000OduServiceRingTopology,
       "winlink1000OduSrvRingLinkMode": winlink1000OduSrvRingLinkMode,
       "winlink1000OduSrvRingTopologySupported": winlink1000OduSrvRingTopologySupported,
       "winlink1000OduSrvRingVlanIdTable": winlink1000OduSrvRingVlanIdTable,
       "winlink1000OduSrvRingVlanIdEntry": winlink1000OduSrvRingVlanIdEntry,
       "winlink1000OduSrvRingVlanIdIndex": winlink1000OduSrvRingVlanIdIndex,
       "winlink1000OduSrvRingVlanId": winlink1000OduSrvRingVlanId,
       "winlink1000OduSrvRingEthStatus": winlink1000OduSrvRingEthStatus,
       "winlink1000OduSrvRingMaxAllowedTimeFromLastRpm": winlink1000OduSrvRingMaxAllowedTimeFromLastRpm,
       "winlink1000OduSrvRingWTR": winlink1000OduSrvRingWTR,
       "winlink1000OduServiceQoS": winlink1000OduServiceQoS,
       "winlink1000OduSrvQoSMode": winlink1000OduSrvQoSMode,
       "winlink1000OduSrvQoSConfTable": winlink1000OduSrvQoSConfTable,
       "winlink1000OduSrvQoSConfEntry": winlink1000OduSrvQoSConfEntry,
       "winlink1000OduSrvQoSConfIndex": winlink1000OduSrvQoSConfIndex,
       "winlink1000OduSrvConfVlanQGroups": winlink1000OduSrvConfVlanQGroups,
       "winlink1000OduSrvConfDiffservQGroups": winlink1000OduSrvConfDiffservQGroups,
       "winlink1000OduSrvConfQueMir": winlink1000OduSrvConfQueMir,
       "winlink1000OduSrvConfQueWeight": winlink1000OduSrvConfQueWeight,
       "winlink1000OduSrvQoSVlanQGroupsSetStr": winlink1000OduSrvQoSVlanQGroupsSetStr,
       "winlink1000OduSrvQoSDiffservQGroupsSetStr": winlink1000OduSrvQoSDiffservQGroupsSetStr,
       "winlink1000OduSrvQoSMaxRTQuePercent": winlink1000OduSrvQoSMaxRTQuePercent,
       "winlink1000OduServiceVlan": winlink1000OduServiceVlan,
       "winlink1000OduSrvVlanSupport": winlink1000OduSrvVlanSupport,
       "winlink1000OduSrvVlanIngressMode": winlink1000OduSrvVlanIngressMode,
       "winlink1000OduSrvVlanEgressMode": winlink1000OduSrvVlanEgressMode,
       "winlink1000OduSrvEgressTag": winlink1000OduSrvEgressTag,
       "winlink1000OduSrvEgressProviderTag": winlink1000OduSrvEgressProviderTag,
       "winlink1000OduSrvVlanIngressAllowedVIDs": winlink1000OduSrvVlanIngressAllowedVIDs,
       "winlink1000OduSrvVlanDisable": winlink1000OduSrvVlanDisable,
       "winlink1000OduServiceVlanProviderListTPIDstr": winlink1000OduServiceVlanProviderListTPIDstr,
       "winlink1000OduDhcpRelayAgent": winlink1000OduDhcpRelayAgent,
       "winlink1000OduServiceUserAuthentication": winlink1000OduServiceUserAuthentication,
       "winlink1000OduServiceUserAuthenticationMode": winlink1000OduServiceUserAuthenticationMode,
       "winlink1000OduServiceUserAuthenticationBypassTable": winlink1000OduServiceUserAuthenticationBypassTable,
       "winlink1000OduServiceUserAuthenticationBypassEntry": winlink1000OduServiceUserAuthenticationBypassEntry,
       "winlink1000OduServiceUserAuthenticationBypassIndex": winlink1000OduServiceUserAuthenticationBypassIndex,
       "winlink1000OduServiceUserAuthenticationBypassIp": winlink1000OduServiceUserAuthenticationBypassIp,
       "winlink1000OduServiceUserAuthenticationBypassNetMask": winlink1000OduServiceUserAuthenticationBypassNetMask,
       "winlink1000OduServiceUserAuthenticationRadiusServerTable": winlink1000OduServiceUserAuthenticationRadiusServerTable,
       "winlink1000OduServiceUserAuthenticationRadiusServerEntry": winlink1000OduServiceUserAuthenticationRadiusServerEntry,
       "winlink1000OduServiceUserAuthenticationRadiusServerIndex": winlink1000OduServiceUserAuthenticationRadiusServerIndex,
       "winlink1000OduServiceUserAuthenticationRadiusServerIpAddr": winlink1000OduServiceUserAuthenticationRadiusServerIpAddr,
       "winlink1000OduServiceUserAuthenticationRadiusServerPort": winlink1000OduServiceUserAuthenticationRadiusServerPort,
       "winlink1000OduServiceUserAuthenticationRadiusServerSecret": winlink1000OduServiceUserAuthenticationRadiusServerSecret,
       "winlink1000OduServiceUserAuthenticationRadiusServerConnectivity": winlink1000OduServiceUserAuthenticationRadiusServerConnectivity,
       "winlink1000OduServiceUserAuthenticationRadiusServerNumOfRetries": winlink1000OduServiceUserAuthenticationRadiusServerNumOfRetries,
       "winlink1000OduServiceUserAuthenticationRadiusServerTimeout": winlink1000OduServiceUserAuthenticationRadiusServerTimeout,
       "winlink1000OduServiceUserAuthenticationRadiusAccess": winlink1000OduServiceUserAuthenticationRadiusAccess,
       "winlink1000OduServiceUserAuthenticationToken": winlink1000OduServiceUserAuthenticationToken,
       "winlink1000OduServiceAcl": winlink1000OduServiceAcl,
       "winlink1000OduServiceAclMode": winlink1000OduServiceAclMode,
       "winlink1000OduServiceAclTable": winlink1000OduServiceAclTable,
       "winlink1000OduServiceAclEntry": winlink1000OduServiceAclEntry,
       "winlink1000OduServiceAclIndex": winlink1000OduServiceAclIndex,
       "winlink1000OduServiceAclIp": winlink1000OduServiceAclIp,
       "winlink1000OduServiceAclNetMask": winlink1000OduServiceAclNetMask,
       "winlink1000OduDhcpRelayAgentCircuitIdSource": winlink1000OduDhcpRelayAgentCircuitIdSource,
       "winlink1000OduDhcpRelayAgentRemoteIdSource": winlink1000OduDhcpRelayAgentRemoteIdSource,
       "winlink1000OduDhcpRelayAgentConcatenatedCircuitIdMode": winlink1000OduDhcpRelayAgentConcatenatedCircuitIdMode,
       "winlink1000OduServiceRedundancy": winlink1000OduServiceRedundancy,
       "winlink1000OduSrvRedundancyRole": winlink1000OduSrvRedundancyRole,
       "winlink1000OduSrvRedundancyPeerIP": winlink1000OduSrvRedundancyPeerIP,
       "winlink1000OduSrvRedundancyCheckPointIP": winlink1000OduSrvRedundancyCheckPointIP,
       "winlink1000OduSrvRedundancyFailureReason": winlink1000OduSrvRedundancyFailureReason,
       "winlink1000OduSrvRedundancyCpeWirelessConnectionTO": winlink1000OduSrvRedundancyCpeWirelessConnectionTO,
       "winlink1000OduEthernet": winlink1000OduEthernet,
       "winlink1000OduEthernetRemainingRate": winlink1000OduEthernetRemainingRate,
       "winlink1000OduEthernetIfTable": winlink1000OduEthernetIfTable,
       "winlink1000OduEthernetIfEntry": winlink1000OduEthernetIfEntry,
       "winlink1000OduEthernetIfIndex": winlink1000OduEthernetIfIndex,
       "winlink1000OduEthernetIfAddress": winlink1000OduEthernetIfAddress,
       "winlink1000OduEthernetIfAdminStatus": winlink1000OduEthernetIfAdminStatus,
       "winlink1000OduEthernetIfOperStatus": winlink1000OduEthernetIfOperStatus,
       "winlink1000OduEthernetIfFailAction": winlink1000OduEthernetIfFailAction,
       "winlink1000OduEthernetIf1588v2PTPEventRXRate": winlink1000OduEthernetIf1588v2PTPEventRXRate,
       "winlink1000OduEthernetIf1588v2PTPEventTXRate": winlink1000OduEthernetIf1588v2PTPEventTXRate,
       "winlink1000OduEthernetNumOfPorts": winlink1000OduEthernetNumOfPorts,
       "winlink1000OduEthernetGbeSupported": winlink1000OduEthernetGbeSupported,
       "winlink1000OduEthernetSfpProperties": winlink1000OduEthernetSfpProperties,
       "winlink1000OduEthernetMainTrafficPort": winlink1000OduEthernetMainTrafficPort,
       "winlink1000OduEthernetRestartCounter": winlink1000OduEthernetRestartCounter,
       "winlink1000OduEthernetSmart100M": winlink1000OduEthernetSmart100M,
       "winlink1000OduBridge": winlink1000OduBridge,
       "winlink1000OduBridgeBase": winlink1000OduBridgeBase,
       "winlink1000OduBridgeBasePortTable": winlink1000OduBridgeBasePortTable,
       "winlink1000OduBridgeBasePortEntry": winlink1000OduBridgeBasePortEntry,
       "winlink1000OduBridgeBasePortIndex": winlink1000OduBridgeBasePortIndex,
       "winlink1000OduBridgeBaseIfIndex": winlink1000OduBridgeBaseIfIndex,
       "winlink1000OduBridgeTp": winlink1000OduBridgeTp,
       "winlink1000OduBridgeTpPortTable": winlink1000OduBridgeTpPortTable,
       "winlink1000OduBridgeTpPortEntry": winlink1000OduBridgeTpPortEntry,
       "winlink1000OduBridgeTpPortIndex": winlink1000OduBridgeTpPortIndex,
       "winlink1000OduBridgeTpPortInFrames": winlink1000OduBridgeTpPortInFrames,
       "winlink1000OduBridgeTpPortOutFrames": winlink1000OduBridgeTpPortOutFrames,
       "winlink1000OduBridgeTpPortInBytes": winlink1000OduBridgeTpPortInBytes,
       "winlink1000OduBridgeTpPortOutBytes": winlink1000OduBridgeTpPortOutBytes,
       "winlink1000OduBridgeTpMode": winlink1000OduBridgeTpMode,
       "winlink1000OduBridgeConfigMode": winlink1000OduBridgeConfigMode,
       "winlink1000OduAir": winlink1000OduAir,
       "winlink1000OduAirFreq": winlink1000OduAirFreq,
       "winlink1000OduAirDesiredRate": winlink1000OduAirDesiredRate,
       "winlink1000OduAirSSID": winlink1000OduAirSSID,
       "winlink1000OduAirTxPower": winlink1000OduAirTxPower,
       "winlink1000OduAirSesState": winlink1000OduAirSesState,
       "winlink1000OduAirMstrSlv": winlink1000OduAirMstrSlv,
       "winlink1000OduAirResync": winlink1000OduAirResync,
       "winlink1000OduAirPerf": winlink1000OduAirPerf,
       "winlink1000OduAirRxPower": winlink1000OduAirRxPower,
       "winlink1000OduAirTotalFrames": winlink1000OduAirTotalFrames,
       "winlink1000OduAirBadFrames": winlink1000OduAirBadFrames,
       "winlink1000OduAirCurrentRate": winlink1000OduAirCurrentRate,
       "winlink1000OduAirCurrentRateIdx": winlink1000OduAirCurrentRateIdx,
       "winlink1000OduAirChainsRxPower": winlink1000OduAirChainsRxPower,
       "winlink1000OduAirCurrentRateCBW": winlink1000OduAirCurrentRateCBW,
       "winlink1000OduAirCurrentRateGI": winlink1000OduAirCurrentRateGI,
       "winlink1000OduAirTxPower36": winlink1000OduAirTxPower36,
       "winlink1000OduAirTxPower48": winlink1000OduAirTxPower48,
       "winlink1000OduAirCurrentTxPower": winlink1000OduAirCurrentTxPower,
       "winlink1000OduAirMinFrequency": winlink1000OduAirMinFrequency,
       "winlink1000OduAirMaxFrequency": winlink1000OduAirMaxFrequency,
       "winlink1000OduAirFreqResolution": winlink1000OduAirFreqResolution,
       "winlink1000OduAirCurrentFreq": winlink1000OduAirCurrentFreq,
       "winlink1000OduAirNumberOfChannels": winlink1000OduAirNumberOfChannels,
       "winlink1000OduAirChannelsTable": winlink1000OduAirChannelsTable,
       "winlink1000OduAirChannelsEntry": winlink1000OduAirChannelsEntry,
       "winlink1000OduAirChannelsIndex": winlink1000OduAirChannelsIndex,
       "winlink1000OduAirChannelsFrequency": winlink1000OduAirChannelsFrequency,
       "winlink1000OduAirChannelsOperState": winlink1000OduAirChannelsOperState,
       "winlink1000OduAirChannelsAvail": winlink1000OduAirChannelsAvail,
       "winlink1000OduAirChannelsDefaultFreq": winlink1000OduAirChannelsDefaultFreq,
       "winlink1000OduAirDfsState": winlink1000OduAirDfsState,
       "winlink1000OduAirAutoChannelSelectionState": winlink1000OduAirAutoChannelSelectionState,
       "winlink1000OduAirEnableTxPower": winlink1000OduAirEnableTxPower,
       "winlink1000OduAirMinTxPower": winlink1000OduAirMinTxPower,
       "winlink1000OduAirMaxTxPowerTable": winlink1000OduAirMaxTxPowerTable,
       "winlink1000OduAirMaxTxPowerEntry": winlink1000OduAirMaxTxPowerEntry,
       "winlink1000OduAirMaxTxPowerIndex": winlink1000OduAirMaxTxPowerIndex,
       "winlink1000OduAirMaxTxPower": winlink1000OduAirMaxTxPower,
       "winlink1000OduAirChannelBandwidth": winlink1000OduAirChannelBandwidth,
       "winlink1000OduAirChannelBWTable": winlink1000OduAirChannelBWTable,
       "winlink1000OduAirChannelBWEntry": winlink1000OduAirChannelBWEntry,
       "winlink1000OduAirChannelBWIndex": winlink1000OduAirChannelBWIndex,
       "winlink1000OduAirChannelBWAvail": winlink1000OduAirChannelBWAvail,
       "winlink1000OduAirChannelsAdminState": winlink1000OduAirChannelsAdminState,
       "winlink1000OduAirChannelBWHSSATDDConflictPerCBW": winlink1000OduAirChannelBWHSSATDDConflictPerCBW,
       "winlink1000OduAirChannelBWMinRatioForSupporting": winlink1000OduAirChannelBWMinRatioForSupporting,
       "winlink1000OduAirChannelBWMaxRatioForSupporting": winlink1000OduAirChannelBWMaxRatioForSupporting,
       "winlink1000OduAirRFD": winlink1000OduAirRFD,
       "winlink1000OduAirRatesTable": winlink1000OduAirRatesTable,
       "winlink1000OduAirRatesEntry": winlink1000OduAirRatesEntry,
       "winlink1000OduAirRatesIndex": winlink1000OduAirRatesIndex,
       "winlink1000OduAirRatesAvail": winlink1000OduAirRatesAvail,
       "winlink1000OduAirDesiredRateIdx": winlink1000OduAirDesiredRateIdx,
       "winlink1000OduAirLinkDistance": winlink1000OduAirLinkDistance,
       "winlink1000OduAirLinkWorkingMode": winlink1000OduAirLinkWorkingMode,
       "winlink1000OduAirMajorLinkIfVersion": winlink1000OduAirMajorLinkIfVersion,
       "winlink1000OduAirMinorLinkIfVersion": winlink1000OduAirMinorLinkIfVersion,
       "winlink1000OduAirHss": winlink1000OduAirHss,
       "winlink1000OduAirHssDesiredOpState": winlink1000OduAirHssDesiredOpState,
       "winlink1000OduAirHssCurrentOpState": winlink1000OduAirHssCurrentOpState,
       "winlink1000OduAirHssSyncStatus": winlink1000OduAirHssSyncStatus,
       "winlink1000OduAirHssExtPulseStatus": winlink1000OduAirHssExtPulseStatus,
       "winlink1000OduAirHssExtPulseType": winlink1000OduAirHssExtPulseType,
       "winlink1000OduAirHssDesiredExtPulseType": winlink1000OduAirHssDesiredExtPulseType,
       "winlink1000OduAirHssRfpTable": winlink1000OduAirHssRfpTable,
       "winlink1000OduAirHssRfpEntry": winlink1000OduAirHssRfpEntry,
       "winlink1000OduAirHssRfpIndex": winlink1000OduAirHssRfpIndex,
       "winlink1000OduAirHssRfpEthChannelBW5MHz": winlink1000OduAirHssRfpEthChannelBW5MHz,
       "winlink1000OduAirHssRfpTdmChannelBW5MHz": winlink1000OduAirHssRfpTdmChannelBW5MHz,
       "winlink1000OduAirHssRfpEthChannelBW10MHz": winlink1000OduAirHssRfpEthChannelBW10MHz,
       "winlink1000OduAirHssRfpTdmChannelBW10MHz": winlink1000OduAirHssRfpTdmChannelBW10MHz,
       "winlink1000OduAirHssRfpEthChannelBW20MHz": winlink1000OduAirHssRfpEthChannelBW20MHz,
       "winlink1000OduAirHssRfpTdmChannelBW20MHz": winlink1000OduAirHssRfpTdmChannelBW20MHz,
       "winlink1000OduAirHssRfpEthChannelBW40MHz": winlink1000OduAirHssRfpEthChannelBW40MHz,
       "winlink1000OduAirHssRfpTdmChannelBW40MHz": winlink1000OduAirHssRfpTdmChannelBW40MHz,
       "winlink1000OduAirHssRfpEthChannelBW80MHz": winlink1000OduAirHssRfpEthChannelBW80MHz,
       "winlink1000OduAirHssRfpEthChannelBW7MHz": winlink1000OduAirHssRfpEthChannelBW7MHz,
       "winlink1000OduAirHssRfpEthChannelBW14MHz": winlink1000OduAirHssRfpEthChannelBW14MHz,
       "winlink1000OduAirHssRfpStr": winlink1000OduAirHssRfpStr,
       "winlink1000OduAirHssHsmID": winlink1000OduAirHssHsmID,
       "winlink1000OduAirHssTime": winlink1000OduAirHssTime,
       "winlink1000OduAirHssLatitude": winlink1000OduAirHssLatitude,
       "winlink1000OduAirHssNSIndicator": winlink1000OduAirHssNSIndicator,
       "winlink1000OduAirHssLongitude": winlink1000OduAirHssLongitude,
       "winlink1000OduAirHssEWIndicator": winlink1000OduAirHssEWIndicator,
       "winlink1000OduAirHssNumSatellites": winlink1000OduAirHssNumSatellites,
       "winlink1000OduAirHssAltitude": winlink1000OduAirHssAltitude,
       "winlink1000OduAirHssRfpPhase": winlink1000OduAirHssRfpPhase,
       "winlink1000OduAirHssInterSiteSynchronizationMode": winlink1000OduAirHssInterSiteSynchronizationMode,
       "winlink1000OduAirHssInterSiteSynchronizationAvailability": winlink1000OduAirHssInterSiteSynchronizationAvailability,
       "winlink1000OduAirHssSatellitesSatSyncRequired": winlink1000OduAirHssSatellitesSatSyncRequired,
       "winlink1000OduAirHssDomainID": winlink1000OduAirHssDomainID,
       "winlink1000OduAirHssSupportedSynchronizationProtocol": winlink1000OduAirHssSupportedSynchronizationProtocol,
       "winlink1000OduAirHssDesiredSynchronizationProtocol": winlink1000OduAirHssDesiredSynchronizationProtocol,
       "winlink1000OduAirHssDiscover": winlink1000OduAirHssDiscover,
       "winlink1000OduAirHssNumberOfDiscoveredODUs": winlink1000OduAirHssNumberOfDiscoveredODUs,
       "winlink1000OduAirHssDiscoverTable": winlink1000OduAirHssDiscoverTable,
       "winlink1000OduAirHssDiscoverEntry": winlink1000OduAirHssDiscoverEntry,
       "winlink1000OduAirHssDiscoverIndex": winlink1000OduAirHssDiscoverIndex,
       "winlink1000OduAirHssDiscoverODUDescription": winlink1000OduAirHssDiscoverODUDescription,
       "winlink1000OduAirHssMasterSlaveCompatibility": winlink1000OduAirHssMasterSlaveCompatibility,
       "winlink1000OduAirHssNumberOfAssociatedCU": winlink1000OduAirHssNumberOfAssociatedCU,
       "winlink1000OduAirHssAssociatedCUTable": winlink1000OduAirHssAssociatedCUTable,
       "winlink1000OduAirHssAssociatedCUTableEntry": winlink1000OduAirHssAssociatedCUTableEntry,
       "winlink1000OduAirHssAssociatedCUIndex": winlink1000OduAirHssAssociatedCUIndex,
       "winlink1000OduAirHssAssociatedCUDescription": winlink1000OduAirHssAssociatedCUDescription,
       "winlink1000OduAirHssSyncStatusEth": winlink1000OduAirHssSyncStatusEth,
       "winlink1000OduAirHssEthVLANTag": winlink1000OduAirHssEthVLANTag,
       "winlink1000OduAirHssHSMIPAddress": winlink1000OduAirHssHSMIPAddress,
       "winlink1000OduAirHssDelayToHSM": winlink1000OduAirHssDelayToHSM,
       "winlink1000OduAirHssSyncAcquisitionSeconds": winlink1000OduAirHssSyncAcquisitionSeconds,
       "winlink1000OduAirHssHSMIPv6Address": winlink1000OduAirHssHSMIPv6Address,
       "winlink1000OduAirHssTcMode": winlink1000OduAirHssTcMode,
       "winlink1000OduAirHssGpsUncertainty": winlink1000OduAirHssGpsUncertainty,
       "winlink1000OduAirHssDelayAdaptationEnable": winlink1000OduAirHssDelayAdaptationEnable,
       "winlink1000OduAirLockRemote": winlink1000OduAirLockRemote,
       "winlink1000OduAirAntennaGain": winlink1000OduAirAntennaGain,
       "winlink1000OduAirFeederLoss": winlink1000OduAirFeederLoss,
       "winlink1000OduAirMaxAntennaGain": winlink1000OduAirMaxAntennaGain,
       "winlink1000OduAirMinAntennaGain": winlink1000OduAirMinAntennaGain,
       "winlink1000OduAirMaxEIRP": winlink1000OduAirMaxEIRP,
       "winlink1000OduAirAntennaGainConfigSupport": winlink1000OduAirAntennaGainConfigSupport,
       "winlink1000OduAirAntennaType": winlink1000OduAirAntennaType,
       "winlink1000OduAirRssBalance": winlink1000OduAirRssBalance,
       "winlink1000OduAirTotalTxPower": winlink1000OduAirTotalTxPower,
       "winlink1000OduAirInstallFreqAndCBW": winlink1000OduAirInstallFreqAndCBW,
       "winlink1000OduAirDFStype": winlink1000OduAirDFStype,
       "winlink1000OduAirCombo": winlink1000OduAirCombo,
       "winlink1000OduAirComboSubBandTable": winlink1000OduAirComboSubBandTable,
       "winlink1000OduAirComboSubBandEntry": winlink1000OduAirComboSubBandEntry,
       "winlink1000OduAirComboSubBandIndex": winlink1000OduAirComboSubBandIndex,
       "winlink1000OduAirComboSubBandId": winlink1000OduAirComboSubBandId,
       "winlink1000OduAirComboSubBandDescription": winlink1000OduAirComboSubBandDescription,
       "winlink1000OduAirComboSubBandInstallFreq": winlink1000OduAirComboSubBandInstallFreq,
       "winlink1000OduAirComboSubBandAdminState": winlink1000OduAirComboSubBandAdminState,
       "winlink1000OduAirComboSubBandInstallationAllowed": winlink1000OduAirComboSubBandInstallationAllowed,
       "winlink1000OduAirComboFrequencyBandId": winlink1000OduAirComboFrequencyBandId,
       "winlink1000OduAirComboSubBandChannelBW5AdminState": winlink1000OduAirComboSubBandChannelBW5AdminState,
       "winlink1000OduAirComboSubBandChannelBW10AdminState": winlink1000OduAirComboSubBandChannelBW10AdminState,
       "winlink1000OduAirComboSubBandChannelBW20AdminState": winlink1000OduAirComboSubBandChannelBW20AdminState,
       "winlink1000OduAirComboSubBandChannelBW40AdminState": winlink1000OduAirComboSubBandChannelBW40AdminState,
       "winlink1000OduAirComboSubBandAllowableChannels": winlink1000OduAirComboSubBandAllowableChannels,
       "winlink1000OduAirComboSubBandChannelBWAvail": winlink1000OduAirComboSubBandChannelBWAvail,
       "winlink1000OduAirComboSubBandChannelBandwidth": winlink1000OduAirComboSubBandChannelBandwidth,
       "winlink1000OduAirComboSubBandMinFreq": winlink1000OduAirComboSubBandMinFreq,
       "winlink1000OduAirComboSubBandMaxFreq": winlink1000OduAirComboSubBandMaxFreq,
       "winlink1000OduAirComboSubBandFrequencyResolution": winlink1000OduAirComboSubBandFrequencyResolution,
       "winlink1000OduAirComboSubBandDefaultChannelList": winlink1000OduAirComboSubBandDefaultChannelList,
       "winlink1000OduAirComboSubBandDfsState": winlink1000OduAirComboSubBandDfsState,
       "winlink1000OduAirComboSubBandChannelBW80AdminState": winlink1000OduAirComboSubBandChannelBW80AdminState,
       "winlink1000OduAirComboSubBandChannelBW7AdminState": winlink1000OduAirComboSubBandChannelBW7AdminState,
       "winlink1000OduAirComboSubBandChannelBW14AdminState": winlink1000OduAirComboSubBandChannelBW14AdminState,
       "winlink1000OduAirComboSubBandMinTxPower": winlink1000OduAirComboSubBandMinTxPower,
       "winlink1000OduAirComboSubBandMaxTxPower": winlink1000OduAirComboSubBandMaxTxPower,
       "winlink1000OduAirComboSubBandDefaultAntennaGain": winlink1000OduAirComboSubBandDefaultAntennaGain,
       "winlink1000OduAirComboSubBandDefaultFeederLoss": winlink1000OduAirComboSubBandDefaultFeederLoss,
       "winlink1000OduAirComboSubBandMaxAntennaGain": winlink1000OduAirComboSubBandMaxAntennaGain,
       "winlink1000OduAirComboSubBandMinAntennaGain": winlink1000OduAirComboSubBandMinAntennaGain,
       "winlink1000OduAirComboSubBandDfsType": winlink1000OduAirComboSubBandDfsType,
       "winlink1000OduAirComboSubBandAtpcTargetRSSPerRate": winlink1000OduAirComboSubBandAtpcTargetRSSPerRate,
       "winlink1000OduAirComboNumberOfSubBands": winlink1000OduAirComboNumberOfSubBands,
       "winlink1000OduAirComboSwitchSubBand": winlink1000OduAirComboSwitchSubBand,
       "winlink1000OduAirComboCurrentSubBandDesc": winlink1000OduAirComboCurrentSubBandDesc,
       "winlink1000OduAirComboCurrentFrequencyBandID": winlink1000OduAirComboCurrentFrequencyBandID,
       "winlink1000OduAirComboBandsCompressedTable": winlink1000OduAirComboBandsCompressedTable,
       "winlink1000OduAirComboBandsCompressedEntry": winlink1000OduAirComboBandsCompressedEntry,
       "winlink1000OduAirComboBandsCompressedIndex": winlink1000OduAirComboBandsCompressedIndex,
       "winlink1000OduAirComboBandsCompressed": winlink1000OduAirComboBandsCompressed,
       "winlink1000OduAirInternalMaxRate": winlink1000OduAirInternalMaxRate,
       "winlink1000OduAirCapacityDirection": winlink1000OduAirCapacityDirection,
       "winlink1000OduAirSpectrumAnalysis": winlink1000OduAirSpectrumAnalysis,
       "winlink1000OduAirSpectrumAnalysisOperState": winlink1000OduAirSpectrumAnalysisOperState,
       "winlink1000OduAirRxPowerAntennaA": winlink1000OduAirRxPowerAntennaA,
       "winlink1000OduAirRxPowerAntennaB": winlink1000OduAirRxPowerAntennaB,
       "winlink1000OduAirNumberOfSpectrumChannels": winlink1000OduAirNumberOfSpectrumChannels,
       "winlink1000OduAirSpectrumChannelTable": winlink1000OduAirSpectrumChannelTable,
       "winlink1000OduAirSpectrumChannelTableEntry": winlink1000OduAirSpectrumChannelTableEntry,
       "winlink1000OduAirSpectrumChannelIndex": winlink1000OduAirSpectrumChannelIndex,
       "winlink1000OduAirSpectrumChannelFrequency": winlink1000OduAirSpectrumChannelFrequency,
       "winlink1000OduAirSpectrumChannelScanned": winlink1000OduAirSpectrumChannelScanned,
       "winlink1000OduAirSpectrumChannelScanningTimestamp": winlink1000OduAirSpectrumChannelScanningTimestamp,
       "winlink1000OduAirSpectrumChannelLastNFAntennaA": winlink1000OduAirSpectrumChannelLastNFAntennaA,
       "winlink1000OduAirSpectrumChannelLastNFAntennaB": winlink1000OduAirSpectrumChannelLastNFAntennaB,
       "winlink1000OduAirSpectrumChannelAverageNFAntennaA": winlink1000OduAirSpectrumChannelAverageNFAntennaA,
       "winlink1000OduAirSpectrumChannelAverageNFAntennaB": winlink1000OduAirSpectrumChannelAverageNFAntennaB,
       "winlink1000OduAirSpectrumChannelMaxNFAntennaA": winlink1000OduAirSpectrumChannelMaxNFAntennaA,
       "winlink1000OduAirSpectrumChannelMaxNFAntennaB": winlink1000OduAirSpectrumChannelMaxNFAntennaB,
       "winlink1000OduAirSpectrumChannelCACPerformed": winlink1000OduAirSpectrumChannelCACPerformed,
       "winlink1000OduAirSpectrumChannelLastCACTimestamp": winlink1000OduAirSpectrumChannelLastCACTimestamp,
       "winlink1000OduAirSpectrumChannelRadarDetected": winlink1000OduAirSpectrumChannelRadarDetected,
       "winlink1000OduAirSpectrumChannelRadarDetectionTimestamp": winlink1000OduAirSpectrumChannelRadarDetectionTimestamp,
       "winlink1000OduAirSpectrumChannelAvailable": winlink1000OduAirSpectrumChannelAvailable,
       "winlink1000OduAirSpectrumChannelMaxBeaconRss": winlink1000OduAirSpectrumChannelMaxBeaconRss,
       "winlink1000OduAirSpectrumChannelCompressed": winlink1000OduAirSpectrumChannelCompressed,
       "winlink1000OduAirChipMinMaxFreq": winlink1000OduAirChipMinMaxFreq,
       "winlink1000OduAirSpectrumAnalysisTimeout": winlink1000OduAirSpectrumAnalysisTimeout,
       "winlink1000OduAirAntConfAndRatesStatus": winlink1000OduAirAntConfAndRatesStatus,
       "winlink1000OduAirDualAntTxMode": winlink1000OduAirDualAntTxMode,
       "winlink1000OduAirTxOperationMode": winlink1000OduAirTxOperationMode,
       "winlink1000OduAirAsymmetricTdd": winlink1000OduAirAsymmetricTdd,
       "winlink1000OduAirDesiredNetMasterTxRatio": winlink1000OduAirDesiredNetMasterTxRatio,
       "winlink1000OduAirCurrentNetMasterTxRatio": winlink1000OduAirCurrentNetMasterTxRatio,
       "winlink1000OduAirMinUsableMasterTxRatio": winlink1000OduAirMinUsableMasterTxRatio,
       "winlink1000OduAirMaxUsableMasterTxRatio": winlink1000OduAirMaxUsableMasterTxRatio,
       "winlink1000OduAirAccumulatedUAS": winlink1000OduAirAccumulatedUAS,
       "winlink1000OduAirDistStr": winlink1000OduAirDistStr,
       "winlink1000OduAirChannelsDefaultFreqStr": winlink1000OduAirChannelsDefaultFreqStr,
       "winlink1000OduAirAntConnectionType": winlink1000OduAirAntConnectionType,
       "winlink1000OduAirAllowableChannelsStr": winlink1000OduAirAllowableChannelsStr,
       "winlink1000OduAirDfs": winlink1000OduAirDfs,
       "winlink1000OduAirDfsAlgorithmTypeState": winlink1000OduAirDfsAlgorithmTypeState,
       "winlink1000OduAirDfsLastDetectedTbl": winlink1000OduAirDfsLastDetectedTbl,
       "winlink1000OduAirDfsLastDetectedEntry": winlink1000OduAirDfsLastDetectedEntry,
       "winlink1000OduAirDfsLastDetectedIndex": winlink1000OduAirDfsLastDetectedIndex,
       "winlink1000OduAirDfsLastDetectedTime": winlink1000OduAirDfsLastDetectedTime,
       "winlink1000OduAirDfsLastDetectedAlgorithmType": winlink1000OduAirDfsLastDetectedAlgorithmType,
       "winlink1000OduAirDfsLastDetectedFrequency": winlink1000OduAirDfsLastDetectedFrequency,
       "winlink1000OduAirPreferredChannelsStr": winlink1000OduAirPreferredChannelsStr,
       "winlink1000OduAirSyncLossThreshold": winlink1000OduAirSyncLossThreshold,
       "winlink1000OduAirGeoLocation": winlink1000OduAirGeoLocation,
       "winlink1000OduAirAggregateCapacity": winlink1000OduAirAggregateCapacity,
       "winlink1000OduAirALPM": winlink1000OduAirALPM,
       "winlink1000OduAirALPMDataBufferStr": winlink1000OduAirALPMDataBufferStr,
       "winlink1000OduAirCurrentManualAngle": winlink1000OduAirCurrentManualAngle,
       "winlink1000OduAirCurrentManualElevAngle": winlink1000OduAirCurrentManualElevAngle,
       "winlink1000OduAirAntennaTemperatureC": winlink1000OduAirAntennaTemperatureC,
       "winlink1000OduAirGPSAntennaType": winlink1000OduAirGPSAntennaType,
       "winlink1000OduAirAttachedAntennaIndication": winlink1000OduAirAttachedAntennaIndication,
       "winlink1000OduAirFreqShortList": winlink1000OduAirFreqShortList,
       "winlink1000OduAirInterfaceUtilizationSupport": winlink1000OduAirInterfaceUtilizationSupport,
       "winlink1000OduAirCarrierTable": winlink1000OduAirCarrierTable,
       "winlink1000OduAirCarrierEntry": winlink1000OduAirCarrierEntry,
       "winlink1000OduAirCarrierIndex": winlink1000OduAirCarrierIndex,
       "winlink1000OduAirCarrierAntennaDescription": winlink1000OduAirCarrierAntennaDescription,
       "winlink1000OduAirCarrierDesiredTxPower": winlink1000OduAirCarrierDesiredTxPower,
       "winlink1000OduAirCarrierResync": winlink1000OduAirCarrierResync,
       "winlink1000OduAirCarrierCurrentTxPower": winlink1000OduAirCarrierCurrentTxPower,
       "winlink1000OduAirCarrierCurrentFreq": winlink1000OduAirCarrierCurrentFreq,
       "winlink1000OduAirCarrierChannelBandwidth": winlink1000OduAirCarrierChannelBandwidth,
       "winlink1000OduAirCarrierTotalTxPower": winlink1000OduAirCarrierTotalTxPower,
       "winlink1000OduAirCarrierSubBand": winlink1000OduAirCarrierSubBand,
       "winlink1000OduAirCarrierComboSubBandTableIndex": winlink1000OduAirCarrierComboSubBandTableIndex,
       "winlink1000OduAirCarrierAntennaGain": winlink1000OduAirCarrierAntennaGain,
       "winlink1000OduAirCarrierFeederLoss": winlink1000OduAirCarrierFeederLoss,
       "winlink1000OduAirCarrierMaxEirp": winlink1000OduAirCarrierMaxEirp,
       "winlink1000OduAirCarrierAllowableChannelsStr": winlink1000OduAirCarrierAllowableChannelsStr,
       "winlink1000OduAirCarrierUCBPSharingPercentage": winlink1000OduAirCarrierUCBPSharingPercentage,
       "winlink1000OduAirCarrierUCBPMinCS": winlink1000OduAirCarrierUCBPMinCS,
       "winlink1000OduAirCarrierTvwsOccupiedTvChannels": winlink1000OduAirCarrierTvwsOccupiedTvChannels,
       "winlink1000OduAirCarrierFrequencyHoppingSequence": winlink1000OduAirCarrierFrequencyHoppingSequence,
       "winlink1000OduAirAntennaHeight": winlink1000OduAirAntennaHeight,
       "winlink1000OduAirAntennaHeightUncertainty": winlink1000OduAirAntennaHeightUncertainty,
       "winlink1000OduAirTvwsMinTvChannelIndex": winlink1000OduAirTvwsMinTvChannelIndex,
       "winlink1000OduAirTvwsOpTable": winlink1000OduAirTvwsOpTable,
       "winlink1000OduAirTvwsRulesetParams": winlink1000OduAirTvwsRulesetParams,
       "winlink1000OduAirFrequrencyHoppingPassword": winlink1000OduAirFrequrencyHoppingPassword,
       "winlink1000OduPerfMon": winlink1000OduPerfMon,
       "winlink1000OduPerfMonCurrTable": winlink1000OduPerfMonCurrTable,
       "winlink1000OduPerfMonCurrEntry": winlink1000OduPerfMonCurrEntry,
       "winlink1000OduPerfMonCurrUAS": winlink1000OduPerfMonCurrUAS,
       "winlink1000OduPerfMonCurrES": winlink1000OduPerfMonCurrES,
       "winlink1000OduPerfMonCurrSES": winlink1000OduPerfMonCurrSES,
       "winlink1000OduPerfMonCurrBBE": winlink1000OduPerfMonCurrBBE,
       "winlink1000OduPerfMonCurrIntegrity": winlink1000OduPerfMonCurrIntegrity,
       "winlink1000OduPerfMonCurrCompressed": winlink1000OduPerfMonCurrCompressed,
       "winlink1000OduPerfMonIntervalTable": winlink1000OduPerfMonIntervalTable,
       "winlink1000OduPerfMonIntervalEntry": winlink1000OduPerfMonIntervalEntry,
       "winlink1000OduPerfMonIntervalIdx": winlink1000OduPerfMonIntervalIdx,
       "winlink1000OduPerfMonIntervalUAS": winlink1000OduPerfMonIntervalUAS,
       "winlink1000OduPerfMonIntervalES": winlink1000OduPerfMonIntervalES,
       "winlink1000OduPerfMonIntervalSES": winlink1000OduPerfMonIntervalSES,
       "winlink1000OduPerfMonIntervalBBE": winlink1000OduPerfMonIntervalBBE,
       "winlink1000OduPerfMonIntervalIntegrity": winlink1000OduPerfMonIntervalIntegrity,
       "winlink1000OduPerfMonIntervalCompressed": winlink1000OduPerfMonIntervalCompressed,
       "winlink1000OduPerfMonDayTable": winlink1000OduPerfMonDayTable,
       "winlink1000OduPerfMonDayEntry": winlink1000OduPerfMonDayEntry,
       "winlink1000OduPerfMonDayIdx": winlink1000OduPerfMonDayIdx,
       "winlink1000OduPerfMonDayUAS": winlink1000OduPerfMonDayUAS,
       "winlink1000OduPerfMonDayES": winlink1000OduPerfMonDayES,
       "winlink1000OduPerfMonDaySES": winlink1000OduPerfMonDaySES,
       "winlink1000OduPerfMonDayBBE": winlink1000OduPerfMonDayBBE,
       "winlink1000OduPerfMonDayIntegrity": winlink1000OduPerfMonDayIntegrity,
       "winlink1000OduPerfMonDayCompressed": winlink1000OduPerfMonDayCompressed,
       "winlink1000OduPerfMonAirCurrTable": winlink1000OduPerfMonAirCurrTable,
       "winlink1000OduPerfMonAirCurrEntry": winlink1000OduPerfMonAirCurrEntry,
       "winlink1000OduPerfMonAirCurrMinRSL": winlink1000OduPerfMonAirCurrMinRSL,
       "winlink1000OduPerfMonAirCurrMaxRSL": winlink1000OduPerfMonAirCurrMaxRSL,
       "winlink1000OduPerfMonAirCurrRSLThresh1Exceed": winlink1000OduPerfMonAirCurrRSLThresh1Exceed,
       "winlink1000OduPerfMonAirCurrRSLThresh2Exceed": winlink1000OduPerfMonAirCurrRSLThresh2Exceed,
       "winlink1000OduPerfMonAirCurrMinTSL": winlink1000OduPerfMonAirCurrMinTSL,
       "winlink1000OduPerfMonAirCurrMaxTSL": winlink1000OduPerfMonAirCurrMaxTSL,
       "winlink1000OduPerfMonAirCurrTSLThresh1Exceed": winlink1000OduPerfMonAirCurrTSLThresh1Exceed,
       "winlink1000OduPerfMonAirCurrBBERThresh1Exceed": winlink1000OduPerfMonAirCurrBBERThresh1Exceed,
       "winlink1000OduPerfMonAirIntervalTable": winlink1000OduPerfMonAirIntervalTable,
       "winlink1000OduPerfMonAirIntervalEntry": winlink1000OduPerfMonAirIntervalEntry,
       "winlink1000OduPerfMonAirIntervalIdx": winlink1000OduPerfMonAirIntervalIdx,
       "winlink1000OduPerfMonAirIntervalMinRSL": winlink1000OduPerfMonAirIntervalMinRSL,
       "winlink1000OduPerfMonAirIntervalMaxRSL": winlink1000OduPerfMonAirIntervalMaxRSL,
       "winlink1000OduPerfMonAirIntervalRSLThresh1Exceed": winlink1000OduPerfMonAirIntervalRSLThresh1Exceed,
       "winlink1000OduPerfMonAirIntervalRSLThresh2Exceed": winlink1000OduPerfMonAirIntervalRSLThresh2Exceed,
       "winlink1000OduPerfMonAirIntervalMinTSL": winlink1000OduPerfMonAirIntervalMinTSL,
       "winlink1000OduPerfMonAirIntervalMaxTSL": winlink1000OduPerfMonAirIntervalMaxTSL,
       "winlink1000OduPerfMonAirIntervalTSLThresh1Exceed": winlink1000OduPerfMonAirIntervalTSLThresh1Exceed,
       "winlink1000OduPerfMonAirIntervalBBERThresh1Exceed": winlink1000OduPerfMonAirIntervalBBERThresh1Exceed,
       "winlink1000OduPerfMonAirDayTable": winlink1000OduPerfMonAirDayTable,
       "winlink1000OduPerfMonAirDayEntry": winlink1000OduPerfMonAirDayEntry,
       "winlink1000OduPerfMonAirDayIdx": winlink1000OduPerfMonAirDayIdx,
       "winlink1000OduPerfMonAirDayMinRSL": winlink1000OduPerfMonAirDayMinRSL,
       "winlink1000OduPerfMonAirDayMaxRSL": winlink1000OduPerfMonAirDayMaxRSL,
       "winlink1000OduPerfMonAirDayRSLThresh1Exceed": winlink1000OduPerfMonAirDayRSLThresh1Exceed,
       "winlink1000OduPerfMonAirDayRSLThresh2Exceed": winlink1000OduPerfMonAirDayRSLThresh2Exceed,
       "winlink1000OduPerfMonAirDayMinTSL": winlink1000OduPerfMonAirDayMinTSL,
       "winlink1000OduPerfMonAirDayMaxTSL": winlink1000OduPerfMonAirDayMaxTSL,
       "winlink1000OduPerfMonAirDayTSLThresh1Exceed": winlink1000OduPerfMonAirDayTSLThresh1Exceed,
       "winlink1000OduPerfMonAirDayBBERThresh1Exceed": winlink1000OduPerfMonAirDayBBERThresh1Exceed,
       "winlink1000OduPerfMonEthCurrTable": winlink1000OduPerfMonEthCurrTable,
       "winlink1000OduPerfMonEthCurrEntry": winlink1000OduPerfMonEthCurrEntry,
       "winlink1000OduPerfMonEthCurrRxMBytes": winlink1000OduPerfMonEthCurrRxMBytes,
       "winlink1000OduPerfMonEthCurrTxMBytes": winlink1000OduPerfMonEthCurrTxMBytes,
       "winlink1000OduPerfMonEthCurrEthCapacityThreshUnder": winlink1000OduPerfMonEthCurrEthCapacityThreshUnder,
       "winlink1000OduPerfMonEthCurrHighTrafficThreshExceed": winlink1000OduPerfMonEthCurrHighTrafficThreshExceed,
       "winlink1000OduPerfMonEthCurrActiveSeconds": winlink1000OduPerfMonEthCurrActiveSeconds,
       "winlink1000OduPerfMonEthIntervalTable": winlink1000OduPerfMonEthIntervalTable,
       "winlink1000OduPerfMonEthIntervalEntry": winlink1000OduPerfMonEthIntervalEntry,
       "winlink1000OduPerfMonEthIntervalIdx": winlink1000OduPerfMonEthIntervalIdx,
       "winlink1000OduPerfMonEthIntervalRxMBytes": winlink1000OduPerfMonEthIntervalRxMBytes,
       "winlink1000OduPerfMonEthIntervalTxMBytes": winlink1000OduPerfMonEthIntervalTxMBytes,
       "winlink1000OduPerfMonEthIntervalEthCapacityThreshUnder": winlink1000OduPerfMonEthIntervalEthCapacityThreshUnder,
       "winlink1000OduPerfMonEthIntervalHighTrafficThreshExceed": winlink1000OduPerfMonEthIntervalHighTrafficThreshExceed,
       "winlink1000OduPerfMonEthIntervalActiveSeconds": winlink1000OduPerfMonEthIntervalActiveSeconds,
       "winlink1000OduPerfMonEthDayTable": winlink1000OduPerfMonEthDayTable,
       "winlink1000OduPerfMonEthDayEntry": winlink1000OduPerfMonEthDayEntry,
       "winlink1000OduPerfMonEthDayIdx": winlink1000OduPerfMonEthDayIdx,
       "winlink1000OduPerfMonEthDayRxMBytes": winlink1000OduPerfMonEthDayRxMBytes,
       "winlink1000OduPerfMonEthDayTxMBytes": winlink1000OduPerfMonEthDayTxMBytes,
       "winlink1000OduPerfMonEthDayEthCapacityThreshUnder": winlink1000OduPerfMonEthDayEthCapacityThreshUnder,
       "winlink1000OduPerfMonEthDayHighTrafficThreshExceed": winlink1000OduPerfMonEthDayHighTrafficThreshExceed,
       "winlink1000OduPerfMonEthDayActiveSeconds": winlink1000OduPerfMonEthDayActiveSeconds,
       "winlink1000OduPerfMonTdmCurrTable": winlink1000OduPerfMonTdmCurrTable,
       "winlink1000OduPerfMonTdmCurrEntry": winlink1000OduPerfMonTdmCurrEntry,
       "winlink1000OduPerfMonTdmCurrActiveSeconds": winlink1000OduPerfMonTdmCurrActiveSeconds,
       "winlink1000OduPerfMonTdmIntervalTable": winlink1000OduPerfMonTdmIntervalTable,
       "winlink1000OduPerfMonTdmIntervalEntry": winlink1000OduPerfMonTdmIntervalEntry,
       "winlink1000OduPerfMonTdmIntervalIdx": winlink1000OduPerfMonTdmIntervalIdx,
       "winlink1000OduPerfMonTdmIntervalActiveSeconds": winlink1000OduPerfMonTdmIntervalActiveSeconds,
       "winlink1000OduPerfMonTdmDayTable": winlink1000OduPerfMonTdmDayTable,
       "winlink1000OduPerfMonTdmDayEntry": winlink1000OduPerfMonTdmDayEntry,
       "winlink1000OduPerfMonTdmDayIdx": winlink1000OduPerfMonTdmDayIdx,
       "winlink1000OduPerfMonTdmDayActiveSeconds": winlink1000OduPerfMonTdmDayActiveSeconds,
       "winlink1000OduPerfMonTxThresh1": winlink1000OduPerfMonTxThresh1,
       "winlink1000OduPerfMonRxThresh1": winlink1000OduPerfMonRxThresh1,
       "winlink1000OduPerfMonRxThresh2": winlink1000OduPerfMonRxThresh2,
       "winlink1000OduPerfMonBBERThresh1": winlink1000OduPerfMonBBERThresh1,
       "winlink1000OduPerfMonEthCapacityThreshKbps": winlink1000OduPerfMonEthCapacityThreshKbps,
       "winlink1000OduPerfMonHighTrafficThreshKbps": winlink1000OduPerfMonHighTrafficThreshKbps,
       "winlink1000OduAgent": winlink1000OduAgent,
       "winlink1000OduAgnGeneral": winlink1000OduAgnGeneral,
       "winlink1000OduAgnGenAddTrapExt": winlink1000OduAgnGenAddTrapExt,
       "winlink1000OduAgnGenSetMode": winlink1000OduAgnGenSetMode,
       "winlink1000OduAgnGenLocalConnectionMode": winlink1000OduAgnGenLocalConnectionMode,
       "winlink1000OduAgnNTPCfg": winlink1000OduAgnNTPCfg,
       "winlink1000OduAgnNTPCfgTimeServerIP": winlink1000OduAgnNTPCfgTimeServerIP,
       "winlink1000OduAgnNTPCfgTimeOffsetFromUTC": winlink1000OduAgnNTPCfgTimeOffsetFromUTC,
       "winlink1000OduAgnRealTimeAndDate": winlink1000OduAgnRealTimeAndDate,
       "winlink1000OduAdmNTPCfgTimeServerIPv6": winlink1000OduAdmNTPCfgTimeServerIPv6,
       "winlink1000OduAgnCurrAlarm": winlink1000OduAgnCurrAlarm,
       "winlink1000OduAgnCurrAlarmLastChange": winlink1000OduAgnCurrAlarmLastChange,
       "winlink1000OduAgnCurrAlarmTable": winlink1000OduAgnCurrAlarmTable,
       "winlink1000OduAgnCurrAlarmEntry": winlink1000OduAgnCurrAlarmEntry,
       "winlink1000OduAgnCurrAlarmCounter": winlink1000OduAgnCurrAlarmCounter,
       "winlink1000OduAgnCurrAlarmSeverity": winlink1000OduAgnCurrAlarmSeverity,
       "winlink1000OduAgnCurrAlarmId": winlink1000OduAgnCurrAlarmId,
       "winlink1000OduAgnCurrAlarmIfIndex": winlink1000OduAgnCurrAlarmIfIndex,
       "winlink1000OduAgnCurrAlarmUnit": winlink1000OduAgnCurrAlarmUnit,
       "winlink1000OduAgnCurrAlarmTrapID": winlink1000OduAgnCurrAlarmTrapID,
       "winlink1000OduAgnCurrAlarmTimeT": winlink1000OduAgnCurrAlarmTimeT,
       "winlink1000OduAgnCurrAlarmText": winlink1000OduAgnCurrAlarmText,
       "winlink1000OduAgnLastEvents": winlink1000OduAgnLastEvents,
       "winlink1000OduAgnLastEventsNumber": winlink1000OduAgnLastEventsNumber,
       "winlink1000OduAgnLastEventsTable": winlink1000OduAgnLastEventsTable,
       "winlink1000OduAgnLastEventsEntry": winlink1000OduAgnLastEventsEntry,
       "winlink1000OduAgnLastEventsIndex": winlink1000OduAgnLastEventsIndex,
       "winlink1000OduAgnLastEventsSeverity": winlink1000OduAgnLastEventsSeverity,
       "winlink1000OduAgnLastEventsIfIndex": winlink1000OduAgnLastEventsIfIndex,
       "winlink1000OduAgnLastEventsTimeT": winlink1000OduAgnLastEventsTimeT,
       "winlink1000OduAgnLastEventsText": winlink1000OduAgnLastEventsText,
       "winlink1000OduAgnLastEventsUnit": winlink1000OduAgnLastEventsUnit,
       "winlink1000OduAgnUsersTable": winlink1000OduAgnUsersTable,
       "winlink1000OduAgnUsersEntry": winlink1000OduAgnUsersEntry,
       "winlink1000OduAgnUsersIndex": winlink1000OduAgnUsersIndex,
       "winlink1000OduAgnUsersUserName": winlink1000OduAgnUsersUserName,
       "winlink1000OduAgnUsersPassword": winlink1000OduAgnUsersPassword,
       "winlink1000OduAgnUsersProfile": winlink1000OduAgnUsersProfile,
       "winlink1000OduAgnUsersLastAccessTime": winlink1000OduAgnUsersLastAccessTime,
       "winlink1000OduAgnSNMPV3AuthenticationMode": winlink1000OduAgnSNMPV3AuthenticationMode,
       "winlink1000Idu": winlink1000Idu,
       "winlink1000IduAdmin": winlink1000IduAdmin,
       "winlink1000IduAdmProductType": winlink1000IduAdmProductType,
       "winlink1000IduAdmHwRev": winlink1000IduAdmHwRev,
       "winlink1000IduAdmSwRev": winlink1000IduAdmSwRev,
       "winlink1000OduAdmNumOfExternalAlarmIn": winlink1000OduAdmNumOfExternalAlarmIn,
       "winlink1000OduAdmExternAlarmInTable": winlink1000OduAdmExternAlarmInTable,
       "winlink1000OduAdmExternAlarmInEntry": winlink1000OduAdmExternAlarmInEntry,
       "winlink1000OduAdmExternAlarmInIndex": winlink1000OduAdmExternAlarmInIndex,
       "winlink1000OduAdmExternAlarmInText": winlink1000OduAdmExternAlarmInText,
       "winlink1000OduAdmExternAlarmInAdminState": winlink1000OduAdmExternAlarmInAdminState,
       "winlink1000OduAdmExternAlarmInStatus": winlink1000OduAdmExternAlarmInStatus,
       "winlink1000IduAdmSN": winlink1000IduAdmSN,
       "winlink1000IduAdmIduDetectionMode": winlink1000IduAdmIduDetectionMode,
       "winlink1000IduAdmMountedTrunks": winlink1000IduAdmMountedTrunks,
       "winlink1000IduAdmLicensedTrunks": winlink1000IduAdmLicensedTrunks,
       "winlink1000IduAdmVlanSupported": winlink1000IduAdmVlanSupported,
       "winlink1000IduAdmVlanEgressMode": winlink1000IduAdmVlanEgressMode,
       "winlink1000IduAdmVlanIngressMode": winlink1000IduAdmVlanIngressMode,
       "winlink1000IduAdmVlanDefaultPortVIDs": winlink1000IduAdmVlanDefaultPortVIDs,
       "winlink1000IduAdmVlanLan1UntaggedVIDs": winlink1000IduAdmVlanLan1UntaggedVIDs,
       "winlink1000IduAdmVlanLan2UntaggedVIDs": winlink1000IduAdmVlanLan2UntaggedVIDs,
       "winlink1000IduAdmVlanSfpUntaggedVIDs": winlink1000IduAdmVlanSfpUntaggedVIDs,
       "winlink1000IduAdmVlanLan1FilteredVIDs": winlink1000IduAdmVlanLan1FilteredVIDs,
       "winlink1000IduAdmVlanLan2FilteredVIDs": winlink1000IduAdmVlanLan2FilteredVIDs,
       "winlink1000IduAdmVlanSfpFilteredVIDs": winlink1000IduAdmVlanSfpFilteredVIDs,
       "winlink1000IduAdmPortsConnection": winlink1000IduAdmPortsConnection,
       "winlink1000IduAdmVlanMode": winlink1000IduAdmVlanMode,
       "winlink1000IduAdmVlanMembershipVIDs": winlink1000IduAdmVlanMembershipVIDs,
       "winlink1000IduAdmVlanMembershipPortsCode": winlink1000IduAdmVlanMembershipPortsCode,
       "winlink1000IduAdmVlanMembershipUntaggedHandle": winlink1000IduAdmVlanMembershipUntaggedHandle,
       "winlink1000IduAdmVlanMembershipTagUntagged": winlink1000IduAdmVlanMembershipTagUntagged,
       "winlink1000IduService": winlink1000IduService,
       "winlink1000IduSrvDesiredTrunks": winlink1000IduSrvDesiredTrunks,
       "winlink1000IduSrvServices": winlink1000IduSrvServices,
       "winlink1000IduSrvActiveTrunks": winlink1000IduSrvActiveTrunks,
       "winlink1000IduSrvAvailableTrunks": winlink1000IduSrvAvailableTrunks,
       "winlink1000IduSrvPossibleServicesTable": winlink1000IduSrvPossibleServicesTable,
       "winlink1000IduSrvPossibleServicesEntry": winlink1000IduSrvPossibleServicesEntry,
       "winlink1000IduSrvPossibleServicesIndex": winlink1000IduSrvPossibleServicesIndex,
       "winlink1000IduSrvPossibleTdmServices": winlink1000IduSrvPossibleTdmServices,
       "winlink1000IduSrvPossibleEthServices": winlink1000IduSrvPossibleEthServices,
       "winlink1000IduSrvRemainingRate": winlink1000IduSrvRemainingRate,
       "winlink1000IduSrvTrunkCost": winlink1000IduSrvTrunkCost,
       "winlink1000IduSrvAvailServicesTable": winlink1000IduSrvAvailServicesTable,
       "winlink1000IduSrvAvailServicesEntry": winlink1000IduSrvAvailServicesEntry,
       "winlink1000IduSrvAvailServicesIndex": winlink1000IduSrvAvailServicesIndex,
       "winlink1000IduSrvAvailServicesState": winlink1000IduSrvAvailServicesState,
       "winlink1000IduSrvAvailServicesMinRateIdx": winlink1000IduSrvAvailServicesMinRateIdx,
       "winlink1000IduSrvAvailServicesMaxRateIdx": winlink1000IduSrvAvailServicesMaxRateIdx,
       "winlink1000IduSrvAvailServicesReason": winlink1000IduSrvAvailServicesReason,
       "winlink1000IduSrvEthActive": winlink1000IduSrvEthActive,
       "winlink1000IduSrvEthAvailable": winlink1000IduSrvEthAvailable,
       "winlink1000IduSrvEthThroughput": winlink1000IduSrvEthThroughput,
       "winlink1000IduSrvEthMaxInfoRate": winlink1000IduSrvEthMaxInfoRate,
       "winlink1000IduSrvAvailableTrunksT1": winlink1000IduSrvAvailableTrunksT1,
       "winlink1000IduEthernet": winlink1000IduEthernet,
       "winlink1000IduEthernetIfTable": winlink1000IduEthernetIfTable,
       "winlink1000IduEthernetIfEntry": winlink1000IduEthernetIfEntry,
       "winlink1000IduEthernetIfIndex": winlink1000IduEthernetIfIndex,
       "winlink1000IduEthernetIfAddress": winlink1000IduEthernetIfAddress,
       "winlink1000IduEthernetNumOfLanPorts": winlink1000IduEthernetNumOfLanPorts,
       "winlink1000IduEthernetNumOfSfpPorts": winlink1000IduEthernetNumOfSfpPorts,
       "winlink1000IduEthernetSfpProperties": winlink1000IduEthernetSfpProperties,
       "winlink1000IduEthernetGbeSupported": winlink1000IduEthernetGbeSupported,
       "winlink1000IduEthernetOduInErrors": winlink1000IduEthernetOduInErrors,
       "winlink1000IduBridge": winlink1000IduBridge,
       "winlink1000IduBridgeTp": winlink1000IduBridgeTp,
       "winlink1000IduBridgeTpAging": winlink1000IduBridgeTpAging,
       "winlink1000IduTdm": winlink1000IduTdm,
       "winlink1000IduTdmTxClock": winlink1000IduTdmTxClock,
       "winlink1000IduTdmTxClockAvailStates": winlink1000IduTdmTxClockAvailStates,
       "winlink1000IduTdmTxClockDesiredState": winlink1000IduTdmTxClockDesiredState,
       "winlink1000IduTdmTxClockActualState": winlink1000IduTdmTxClockActualState,
       "winlink1000IduTdmMasterClock": winlink1000IduTdmMasterClock,
       "winlink1000IduTdmMasterClockAvailOptions": winlink1000IduTdmMasterClockAvailOptions,
       "winlink1000IduTdmMasterClockDesired": winlink1000IduTdmMasterClockDesired,
       "winlink1000IduTdmMasterClockActual": winlink1000IduTdmMasterClockActual,
       "winlink1000IduTdmConfigTable": winlink1000IduTdmConfigTable,
       "winlink1000IduTdmConfigEntry": winlink1000IduTdmConfigEntry,
       "winlink1000IduTdmConfigIndex": winlink1000IduTdmConfigIndex,
       "winlink1000IduTdmIfIndex": winlink1000IduTdmIfIndex,
       "winlink1000IduTdmLineCoding": winlink1000IduTdmLineCoding,
       "winlink1000IduTdmLoopbackConfig": winlink1000IduTdmLoopbackConfig,
       "winlink1000IduTdmLineStatus": winlink1000IduTdmLineStatus,
       "winlink1000IduTdmCurrentTable": winlink1000IduTdmCurrentTable,
       "winlink1000IduTdmCurrentEntry": winlink1000IduTdmCurrentEntry,
       "winlink1000IduTdmCurrentIndex": winlink1000IduTdmCurrentIndex,
       "winlink1000IduTdmCurrentBlocks": winlink1000IduTdmCurrentBlocks,
       "winlink1000IduTdmCurrentDrops": winlink1000IduTdmCurrentDrops,
       "winlink1000IduTdmCurrentTxClock": winlink1000IduTdmCurrentTxClock,
       "winlink1000IduTdmCurrentBlocksHigh": winlink1000IduTdmCurrentBlocksHigh,
       "winlink1000IduTdmRemoteQual": winlink1000IduTdmRemoteQual,
       "winlink1000IduTdmRemoteQualEval": winlink1000IduTdmRemoteQualEval,
       "winlink1000IduTdmSrvEval": winlink1000IduTdmSrvEval,
       "winlink1000IduTdmBackupAvailableLinks": winlink1000IduTdmBackupAvailableLinks,
       "winlink1000IduTdmBackupTable": winlink1000IduTdmBackupTable,
       "winlink1000IduTdmBackupEntry": winlink1000IduTdmBackupEntry,
       "winlink1000IduTdmBackupIndex": winlink1000IduTdmBackupIndex,
       "winlink1000IduTdmBackupMode": winlink1000IduTdmBackupMode,
       "winlink1000IduTdmBackupCurrentActiveLink": winlink1000IduTdmBackupCurrentActiveLink,
       "winlink1000IduTdmJitterBufferSize": winlink1000IduTdmJitterBufferSize,
       "winlink1000IduTdmJitterBufferDefaultSize": winlink1000IduTdmJitterBufferDefaultSize,
       "winlink1000IduTdmJitterBufferMinSize": winlink1000IduTdmJitterBufferMinSize,
       "winlink1000IduTdmJitterBufferMaxSize": winlink1000IduTdmJitterBufferMaxSize,
       "winlink1000IduTdmJitterBufferSizeEval": winlink1000IduTdmJitterBufferSizeEval,
       "winlink1000IduTdmType": winlink1000IduTdmType,
       "winlink1000IduTdmTypeEval": winlink1000IduTdmTypeEval,
       "winlink1000IduTdmLineStatusStr": winlink1000IduTdmLineStatusStr,
       "winlink1000IduTdmHotStandbySupport": winlink1000IduTdmHotStandbySupport,
       "winlink1000IduTdmDesiredHotStandbyMode": winlink1000IduTdmDesiredHotStandbyMode,
       "winlink1000IduTdmHotStandbyOperationStatus": winlink1000IduTdmHotStandbyOperationStatus,
       "winlink1000IduTdmBackupLinkConfiguration": winlink1000IduTdmBackupLinkConfiguration,
       "winlink1000IduTdmLineInterfaceConfiguration": winlink1000IduTdmLineInterfaceConfiguration,
       "winlink1000IduTdmLineImpedanceConfiguration": winlink1000IduTdmLineImpedanceConfiguration,
       "winlink1000Hbs": winlink1000Hbs,
       "winlink1000HbsAir": winlink1000HbsAir,
       "winlink1000HbsAirState": winlink1000HbsAirState,
       "winlink1000HbsAirOpMode": winlink1000HbsAirOpMode,
       "winlink1000HbsAirAvailTimeSlots": winlink1000HbsAirAvailTimeSlots,
       "winlink1000HbsAirSectorCbwSupportedStr": winlink1000HbsAirSectorCbwSupportedStr,
       "winlink1000HbsAirCompressedMon": winlink1000HbsAirCompressedMon,
       "winlink1000HbsAirConf": winlink1000HbsAirConf,
       "winlink1000HbsAirConfChanges": winlink1000HbsAirConfChanges,
       "winlink1000HbsAirConfTable": winlink1000HbsAirConfTable,
       "winlink1000HbsAirConfEntry": winlink1000HbsAirConfEntry,
       "winlink1000HbsAirConfIndex": winlink1000HbsAirConfIndex,
       "winlink1000HbsAirConfUpMir": winlink1000HbsAirConfUpMir,
       "winlink1000HbsAirConfDownMir": winlink1000HbsAirConfDownMir,
       "winlink1000HbsAirConfHsuName": winlink1000HbsAirConfHsuName,
       "winlink1000HbsAirConfHsuLocation": winlink1000HbsAirConfHsuLocation,
       "winlink1000HbsAirConfDualAntTxMode": winlink1000HbsAirConfDualAntTxMode,
       "winlink1000HbsAirConfNumOfTs": winlink1000HbsAirConfNumOfTs,
       "winlink1000HbsAirConfGeoLocation": winlink1000HbsAirConfGeoLocation,
       "winlink1000HbsAirConfHsuType": winlink1000HbsAirConfHsuType,
       "winlink1000HbsAirConfHsuLevel": winlink1000HbsAirConfHsuLevel,
       "winlink1000HbsAirConfDesiredRateIndex": winlink1000HbsAirConfDesiredRateIndex,
       "winlink1000HbsAirConfMacAddress": winlink1000HbsAirConfMacAddress,
       "winlink1000HbsAirConfNumOfTsUp": winlink1000HbsAirConfNumOfTsUp,
       "winlink1000HbsAirConfLanPortsConnection": winlink1000HbsAirConfLanPortsConnection,
       "winlink1000HbsAirConfServiceCategory": winlink1000HbsAirConfServiceCategory,
       "winlink1000HbsAirConfAutoRealignmentConfiguration": winlink1000HbsAirConfAutoRealignmentConfiguration,
       "winlink1000HbsAirConfBeaconRssSyncLossThreshold": winlink1000HbsAirConfBeaconRssSyncLossThreshold,
       "winlink1000HbsAirConfNumOfResourcesDL": winlink1000HbsAirConfNumOfResourcesDL,
       "winlink1000HbsAirConfNumOfResourcesUL": winlink1000HbsAirConfNumOfResourcesUL,
       "winlink1000HbsAirConfResourceType": winlink1000HbsAirConfResourceType,
       "winlink1000HbsAirConfDelaySensitivity": winlink1000HbsAirConfDelaySensitivity,
       "winlink1000HbsAirConfLQDActivation": winlink1000HbsAirConfLQDActivation,
       "winlink1000HbsAirConfLQDBaselineDl": winlink1000HbsAirConfLQDBaselineDl,
       "winlink1000HbsAirConfLQDBaselineUl": winlink1000HbsAirConfLQDBaselineUl,
       "winlink1000HbsAirConfLQDCurrentQualityDl": winlink1000HbsAirConfLQDCurrentQualityDl,
       "winlink1000HbsAirConfLQDCurrentQualityUl": winlink1000HbsAirConfLQDCurrentQualityUl,
       "winlink1000HbsAirConfLQDAlarmThresholdDl": winlink1000HbsAirConfLQDAlarmThresholdDl,
       "winlink1000HbsAirConfLQDAlarmThresholdUl": winlink1000HbsAirConfLQDAlarmThresholdUl,
       "winlink1000HbsAirConfLQDAlarmClearThresholdDl": winlink1000HbsAirConfLQDAlarmClearThresholdDl,
       "winlink1000HbsAirConfLQDAlarmClearThresholdUl": winlink1000HbsAirConfLQDAlarmClearThresholdUl,
       "winlink1000HbsAirConfIpAddress": winlink1000HbsAirConfIpAddress,
       "winlink1000HbsAirConfCarrierId": winlink1000HbsAirConfCarrierId,
       "winlink1000HbsAirDhcpClientMode": winlink1000HbsAirDhcpClientMode,
       "winlink1000HbsAirConfBeaconRssSyncLossInterval": winlink1000HbsAirConfBeaconRssSyncLossInterval,
       "winlink1000HbsAirConfBEPercentage": winlink1000HbsAirConfBEPercentage,
       "winlink1000HbsAirLink": winlink1000HbsAirLink,
       "winlink1000HbsAirLinkNumOfLinks": winlink1000HbsAirLinkNumOfLinks,
       "winlink1000HbsAirLinkTable": winlink1000HbsAirLinkTable,
       "winlink1000HbsAirLinkEntry": winlink1000HbsAirLinkEntry,
       "winlink1000HbsAirLinkIndex": winlink1000HbsAirLinkIndex,
       "winlink1000HbsAirLinkHsuId": winlink1000HbsAirLinkHsuId,
       "winlink1000HbsAirLinkState": winlink1000HbsAirLinkState,
       "winlink1000HbsAirLinkWorkingMode": winlink1000HbsAirLinkWorkingMode,
       "winlink1000HbsAirLinkSessionId": winlink1000HbsAirLinkSessionId,
       "winlink1000HbsAirLinkHbsEstTput": winlink1000HbsAirLinkHbsEstTput,
       "winlink1000HbsAirLinkHsuEstTput": winlink1000HbsAirLinkHsuEstTput,
       "winlink1000HbsAirLinkRange": winlink1000HbsAirLinkRange,
       "winlink1000HbsAirLinkHbsRss": winlink1000HbsAirLinkHbsRss,
       "winlink1000HbsAirLinkHbsRssBal": winlink1000HbsAirLinkHbsRssBal,
       "winlink1000HbsAirLinkHsuRss": winlink1000HbsAirLinkHsuRss,
       "winlink1000HbsAirLinkHsuRssBal": winlink1000HbsAirLinkHsuRssBal,
       "winlink1000HbsAirLinkHsuSerial": winlink1000HbsAirLinkHsuSerial,
       "winlink1000HbsAirLinkTxOperMode": winlink1000HbsAirLinkTxOperMode,
       "winlink1000HbsAirHsuInBytes": winlink1000HbsAirHsuInBytes,
       "winlink1000HbsAirHsuOutBytes": winlink1000HbsAirHsuOutBytes,
       "winlink1000HbsAirHsuInFrames": winlink1000HbsAirHsuInFrames,
       "winlink1000HbsAirHsuOutFrames": winlink1000HbsAirHsuOutFrames,
       "winlink1000HbsAirHsuMacAddress": winlink1000HbsAirHsuMacAddress,
       "winlink1000HbsAirMaxTputDown": winlink1000HbsAirMaxTputDown,
       "winlink1000HbsAirMaxTputUp": winlink1000HbsAirMaxTputUp,
       "winlink1000HbsAirLinkCompressedMon": winlink1000HbsAirLinkCompressedMon,
       "winlink1000HbsAirLinkCompressedStatic": winlink1000HbsAirLinkCompressedStatic,
       "winlink1000HbsAirCpeCapacityLimit": winlink1000HbsAirCpeCapacityLimit,
       "winlink1000HbsAirLinkAntennaType": winlink1000HbsAirLinkAntennaType,
       "winlink1000HbsAirHsuRxRateInKbps": winlink1000HbsAirHsuRxRateInKbps,
       "winlink1000HbsAirHsuTxRateInKbps": winlink1000HbsAirHsuTxRateInKbps,
       "winlink1000HbsAirHsuRxRateInFps": winlink1000HbsAirHsuRxRateInFps,
       "winlink1000HbsAirHsuTxRateInFps": winlink1000HbsAirHsuTxRateInFps,
       "winlink1000HbsAirLinkPeakTputDown": winlink1000HbsAirLinkPeakTputDown,
       "winlink1000HbsAirLinkPeakTputUp": winlink1000HbsAirLinkPeakTputUp,
       "winlink1000HbsAirLinkUtilDownSecRelMill": winlink1000HbsAirLinkUtilDownSecRelMill,
       "winlink1000HbsAirLinkUtilUpSecRelMill": winlink1000HbsAirLinkUtilUpSecRelMill,
       "winlink1000HbsAirLinkUtilDownAllocRelMill": winlink1000HbsAirLinkUtilDownAllocRelMill,
       "winlink1000HbsAirLinkUtilUpAllocRelMill": winlink1000HbsAirLinkUtilUpAllocRelMill,
       "winlink1000HbsAirLinkUtilDownTrafficKbps": winlink1000HbsAirLinkUtilDownTrafficKbps,
       "winlink1000HbsAirLinkUtilUpTrafficKbps": winlink1000HbsAirLinkUtilUpTrafficKbps,
       "winlink1000HbsAirLinkUtilCompressedMon": winlink1000HbsAirLinkUtilCompressedMon,
       "winlink1000HbsAirLinkBsaAzimuth": winlink1000HbsAirLinkBsaAzimuth,
       "winlink1000HbsAirLink1588TCPerformance": winlink1000HbsAirLink1588TCPerformance,
       "winlink1000HbsAirLinkSyncEPerformance": winlink1000HbsAirLinkSyncEPerformance,
       "winlink1000HbsAirHsuTxBytes": winlink1000HbsAirHsuTxBytes,
       "winlink1000HbsAirHsuRxBytes": winlink1000HbsAirHsuRxBytes,
       "winlink1000HbsAirComboSwitchSectorFreqBandId": winlink1000HbsAirComboSwitchSectorFreqBandId,
       "winlink1000HbsAirGeoAzimuth": winlink1000HbsAirGeoAzimuth,
       "winlink1000HbsAirGeoBeamwidth": winlink1000HbsAirGeoBeamwidth,
       "winlink1000HbsAirMaxDistanceMetersMobility": winlink1000HbsAirMaxDistanceMetersMobility,
       "winlink1000HbsAirComboSwitchSectorFreqBandIdStr": winlink1000HbsAirComboSwitchSectorFreqBandIdStr,
       "winlink1000HbsAirTimeSlotAllocationBitmap": winlink1000HbsAirTimeSlotAllocationBitmap,
       "winlink1000HbsAirAvailTimeSlotsUp": winlink1000HbsAirAvailTimeSlotsUp,
       "winlink1000HbsAirDownUtilMill": winlink1000HbsAirDownUtilMill,
       "winlink1000HbsAirUpUtilMill": winlink1000HbsAirUpUtilMill,
       "winlink1000HbsAirDownTrafficKbps": winlink1000HbsAirDownTrafficKbps,
       "winlink1000HbsAirUpTrafficKbps": winlink1000HbsAirUpTrafficKbps,
       "winlink1000HbsAirCompressedMonSec": winlink1000HbsAirCompressedMonSec,
       "winlink1000HbsAirDelayVsTputOpt": winlink1000HbsAirDelayVsTputOpt,
       "winlink1000HbsAirUCBP": winlink1000HbsAirUCBP,
       "winlink1000HbsAirUCBPMinCS": winlink1000HbsAirUCBPMinCS,
       "winlink1000HbsAirUCBPSharingPercentage": winlink1000HbsAirUCBPSharingPercentage,
       "winlink1000HbsAirSingleHsuMode": winlink1000HbsAirSingleHsuMode,
       "winlink1000HbsAirMobilityAzTrack": winlink1000HbsAirMobilityAzTrack,
       "winlink1000HbsAirSyncEPerformance": winlink1000HbsAirSyncEPerformance,
       "winlink1000HbsAirAtpcEnable": winlink1000HbsAirAtpcEnable,
       "winlink1000HbsAirAtpcTargetMCS": winlink1000HbsAirAtpcTargetMCS,
       "winlink1000HbsAirAtpcMaxAllowedRate": winlink1000HbsAirAtpcMaxAllowedRate,
       "winlink1000HbsAirAtpcTargetRSSPerRateTable": winlink1000HbsAirAtpcTargetRSSPerRateTable,
       "winlink1000HbsAirAtpcMaxAllowedRateEntry": winlink1000HbsAirAtpcMaxAllowedRateEntry,
       "winlink1000HbsAirAtpcTargetRSSPerRateIndex": winlink1000HbsAirAtpcTargetRSSPerRateIndex,
       "winlink1000HbsAirAtpcTargetRSSPerRate": winlink1000HbsAirAtpcTargetRSSPerRate,
       "winlink1000HbsAirMinimalTimeBetweenAutoRealignment": winlink1000HbsAirMinimalTimeBetweenAutoRealignment,
       "winlink1000HbsAirAvailResourcesDL": winlink1000HbsAirAvailResourcesDL,
       "winlink1000HbsAirAvailResourcesUL": winlink1000HbsAirAvailResourcesUL,
       "winlink1000HbsAirHbsType": winlink1000HbsAirHbsType,
       "winlink1000HbsAirLinkQuality": winlink1000HbsAirLinkQuality,
       "winlink1000HbsAirLinkQualitySupport": winlink1000HbsAirLinkQualitySupport,
       "winlink1000HbsAirLinkQualityActivationStatus": winlink1000HbsAirLinkQualityActivationStatus,
       "winlink1000HbsAirLinkQualityDetectionTime": winlink1000HbsAirLinkQualityDetectionTime,
       "winlink1000HbsAirLinkQualityDetectionThreshold": winlink1000HbsAirLinkQualityDetectionThreshold,
       "winlink1000HbsAirAggregatedDownlinkUtil": winlink1000HbsAirAggregatedDownlinkUtil,
       "winlink1000HbsAirAggregatedUplinkUtil": winlink1000HbsAirAggregatedUplinkUtil,
       "winlink1000HbsAirAggregatedReferenceCounter": winlink1000HbsAirAggregatedReferenceCounter,
       "winlink1000HbsAirRegisteredCpeTable": winlink1000HbsAirRegisteredCpeTable,
       "winlink1000HbsAirRegisteredCpeTableEntry": winlink1000HbsAirRegisteredCpeTableEntry,
       "winlink1000HbsAirRegisteredCpeTableIndex": winlink1000HbsAirRegisteredCpeTableIndex,
       "winlink1000HbsAirRegisteredCpeLinkId": winlink1000HbsAirRegisteredCpeLinkId,
       "winlink1000HbsAirRegisteredCpeState": winlink1000HbsAirRegisteredCpeState,
       "winlink1000HbsAirRegisteredCpeWorkingMode": winlink1000HbsAirRegisteredCpeWorkingMode,
       "winlink1000HbsAirRegisteredCpeSessionId": winlink1000HbsAirRegisteredCpeSessionId,
       "winlink1000HbsAirRegisteredCpeHbsEstTput": winlink1000HbsAirRegisteredCpeHbsEstTput,
       "winlink1000HbsAirRegisteredCpeHsuEstTput": winlink1000HbsAirRegisteredCpeHsuEstTput,
       "winlink1000HbsAirRegisteredCpeRange": winlink1000HbsAirRegisteredCpeRange,
       "winlink1000HbsAirRegisteredCpeHbsRss": winlink1000HbsAirRegisteredCpeHbsRss,
       "winlink1000HbsAirRegisteredCpeHbsRssBal": winlink1000HbsAirRegisteredCpeHbsRssBal,
       "winlink1000HbsAirRegisteredCpeHsuRss": winlink1000HbsAirRegisteredCpeHsuRss,
       "winlink1000HbsAirRegisteredCpeHsuRssBal": winlink1000HbsAirRegisteredCpeHsuRssBal,
       "winlink1000HbsAirRegisteredCpeHsuSerial": winlink1000HbsAirRegisteredCpeHsuSerial,
       "winlink1000HbsAirRegisteredCpeTxOperMode": winlink1000HbsAirRegisteredCpeTxOperMode,
       "winlink1000HbsAirRegisteredCpeHsuInBytes": winlink1000HbsAirRegisteredCpeHsuInBytes,
       "winlink1000HbsAirRegisteredCpeHsuOutBytes": winlink1000HbsAirRegisteredCpeHsuOutBytes,
       "winlink1000HbsAirRegisteredCpeHsuInFrames": winlink1000HbsAirRegisteredCpeHsuInFrames,
       "winlink1000HbsAirRegisteredCpeHsuOutFrames": winlink1000HbsAirRegisteredCpeHsuOutFrames,
       "winlink1000HbsAirRegisteredCpeHsuMacAddress": winlink1000HbsAirRegisteredCpeHsuMacAddress,
       "winlink1000HbsAirRegisteredCpeMaxTputDown": winlink1000HbsAirRegisteredCpeMaxTputDown,
       "winlink1000HbsAirRegisteredCpeMaxTputUp": winlink1000HbsAirRegisteredCpeMaxTputUp,
       "winlink1000HbsAirRegisteredCpeCompressedMon": winlink1000HbsAirRegisteredCpeCompressedMon,
       "winlink1000HbsAirRegisteredCpeCompressedStatic": winlink1000HbsAirRegisteredCpeCompressedStatic,
       "winlink1000HbsAirRegisteredCpeCpeCapacityLimit": winlink1000HbsAirRegisteredCpeCpeCapacityLimit,
       "winlink1000HbsAirRegisteredCpeAntennaType": winlink1000HbsAirRegisteredCpeAntennaType,
       "winlink1000HbsAirRegisteredCpeHsuRxRateInKbps": winlink1000HbsAirRegisteredCpeHsuRxRateInKbps,
       "winlink1000HbsAirRegisteredCpeHsuTxRateInKbps": winlink1000HbsAirRegisteredCpeHsuTxRateInKbps,
       "winlink1000HbsAirRegisteredCpeHsuRxRateInFps": winlink1000HbsAirRegisteredCpeHsuRxRateInFps,
       "winlink1000HbsAirRegisteredCpeHsuTxRateInFps": winlink1000HbsAirRegisteredCpeHsuTxRateInFps,
       "winlink1000HbsAirRegisteredCpePeakTputDown": winlink1000HbsAirRegisteredCpePeakTputDown,
       "winlink1000HbsAirRegisteredCpePeakTputUp": winlink1000HbsAirRegisteredCpePeakTputUp,
       "winlink1000HbsAirRegisteredCpeUtilDownSecRelMill": winlink1000HbsAirRegisteredCpeUtilDownSecRelMill,
       "winlink1000HbsAirRegisteredCpeUtilUpSecRelMill": winlink1000HbsAirRegisteredCpeUtilUpSecRelMill,
       "winlink1000HbsAirRegisteredCpeUtilDownAllocRelMill": winlink1000HbsAirRegisteredCpeUtilDownAllocRelMill,
       "winlink1000HbsAirRegisteredCpeUtilUpAllocRelMill": winlink1000HbsAirRegisteredCpeUtilUpAllocRelMill,
       "winlink1000HbsAirRegisteredCpeUtilDownTrafficKbps": winlink1000HbsAirRegisteredCpeUtilDownTrafficKbps,
       "winlink1000HbsAirRegisteredCpeUtilUpTrafficKbps": winlink1000HbsAirRegisteredCpeUtilUpTrafficKbps,
       "winlink1000HbsAirRegisteredCpeUtilCompressedMon": winlink1000HbsAirRegisteredCpeUtilCompressedMon,
       "winlink1000HbsAirRegisteredCpeBsaAzimuth": winlink1000HbsAirRegisteredCpeBsaAzimuth,
       "winlink1000HbsAirRegisteredCpe1588TCPerformance": winlink1000HbsAirRegisteredCpe1588TCPerformance,
       "winlink1000HbsAirRegisteredCpeSyncEPerformance": winlink1000HbsAirRegisteredCpeSyncEPerformance,
       "winlink1000HbsAirRegisteredCpeProductName": winlink1000HbsAirRegisteredCpeProductName,
       "winlink1000HbsAirRegisteredCpeIpAddress": winlink1000HbsAirRegisteredCpeIpAddress,
       "winlink1000HbsAirRegisteredCpeIpAddressV6": winlink1000HbsAirRegisteredCpeIpAddressV6,
       "winlink1000HbsAirRegisteredCpeCarrierId": winlink1000HbsAirRegisteredCpeCarrierId,
       "winlink1000HbsAirNumberOfRegisteredCpes": winlink1000HbsAirNumberOfRegisteredCpes,
       "winlink1000HbsAirNumberOfRegisteredActiveCpes": winlink1000HbsAirNumberOfRegisteredActiveCpes,
       "winlink1000HbsAirCarrierTable": winlink1000HbsAirCarrierTable,
       "winlink1000HbsAirCarrierEntry": winlink1000HbsAirCarrierEntry,
       "winlink1000HbsAirCarrierIndex": winlink1000HbsAirCarrierIndex,
       "winlink1000HbsAirCarrierState": winlink1000HbsAirCarrierState,
       "winlink1000HbsAirCarrierOpMode": winlink1000HbsAirCarrierOpMode,
       "winlink1000HbsAirCarrierSectorCbwSupportedStr": winlink1000HbsAirCarrierSectorCbwSupportedStr,
       "winlink1000HbsAirCarrierComboSwitchSectorFreqBandIdStr": winlink1000HbsAirCarrierComboSwitchSectorFreqBandIdStr,
       "winlink1000HbsAirCarrierDelayVsTputOpt": winlink1000HbsAirCarrierDelayVsTputOpt,
       "winlink1000HbsAirCarrierAtpcEnable": winlink1000HbsAirCarrierAtpcEnable,
       "winlink1000HbsAirCarrierAtpcTargetMCS": winlink1000HbsAirCarrierAtpcTargetMCS,
       "winlink1000HbsAirCarrierAtpcMaxAllowedRate": winlink1000HbsAirCarrierAtpcMaxAllowedRate,
       "winlink1000HbsAirCarrierAvailResourcesDL": winlink1000HbsAirCarrierAvailResourcesDL,
       "winlink1000HbsAirCarrierAvailResourcesUL": winlink1000HbsAirCarrierAvailResourcesUL,
       "winlink1000HbsAirCarrierBEPercentage": winlink1000HbsAirCarrierBEPercentage,
       "winlink1000HbsAirCarrierMaxNumOfBeHsus": winlink1000HbsAirCarrierMaxNumOfBeHsus,
       "winlink1000HbsAirAggregatedReferenceCounterUplink": winlink1000HbsAirAggregatedReferenceCounterUplink,
       "winlink1000HbsAirCarrierInformationTable": winlink1000HbsAirCarrierInformationTable,
       "winlink1000HbsAirCarrierInformationEntry": winlink1000HbsAirCarrierInformationEntry,
       "winlink1000HbsAirCarrierInformationIndex": winlink1000HbsAirCarrierInformationIndex,
       "winlink1000HbsAirCarrierInformationSubBandDescription": winlink1000HbsAirCarrierInformationSubBandDescription,
       "winlink1000HbsAirCarrierInformationState": winlink1000HbsAirCarrierInformationState,
       "winlink1000HbsAirCarrierInformationFrequency": winlink1000HbsAirCarrierInformationFrequency,
       "winlink1000HbsAirCarrierInformationTxPower": winlink1000HbsAirCarrierInformationTxPower,
       "winlink1000HbsAirCarrierInformationTotalTxPower": winlink1000HbsAirCarrierInformationTotalTxPower,
       "winlink1000HbsAirCarrierInformationChannelBandwidth": winlink1000HbsAirCarrierInformationChannelBandwidth,
       "winlink1000HbsAirCarrierInformationAntennaGain": winlink1000HbsAirCarrierInformationAntennaGain,
       "winlink1000HbsAirCarrierInformationFeederLoss": winlink1000HbsAirCarrierInformationFeederLoss,
       "winlink1000HbsAirCarrierInformationMaxEirp": winlink1000HbsAirCarrierInformationMaxEirp,
       "winlink1000HbsAirCarrierInformationDfsState": winlink1000HbsAirCarrierInformationDfsState,
       "winlink1000HbsAirCarrierInformationAtpcEnable": winlink1000HbsAirCarrierInformationAtpcEnable,
       "winlink1000HbsAirCarrierInformationDelayVsTputOpt": winlink1000HbsAirCarrierInformationDelayVsTputOpt,
       "winlink1000HbsAirCarrierInformationAvailResourcesDL": winlink1000HbsAirCarrierInformationAvailResourcesDL,
       "winlink1000HbsAirCarrierInformationAvailResourcesUL": winlink1000HbsAirCarrierInformationAvailResourcesUL,
       "winlink1000HbsAirCarrierInformationBEPercentage": winlink1000HbsAirCarrierInformationBEPercentage,
       "winlink1000HbsAirSecuredSyncType": winlink1000HbsAirSecuredSyncType,
       "winlink1000HbsAirTvws": winlink1000HbsAirTvws,
       "winlink1000HbsAirTvwsDatabaseSupport": winlink1000HbsAirTvwsDatabaseSupport,
       "winlink1000HbsAirTvwsStatus": winlink1000HbsAirTvwsStatus,
       "winlink1000HbsAirTvwsReceiverMode": winlink1000HbsAirTvwsReceiverMode,
       "winlink1000HbsAirAntennaTable": winlink1000HbsAirAntennaTable,
       "winlink1000HbsAirAntennaEntry": winlink1000HbsAirAntennaEntry,
       "winlink1000HbsAirAntennaIndex": winlink1000HbsAirAntennaIndex,
       "winlink1000HbsAirAntennaGain": winlink1000HbsAirAntennaGain,
       "winlink1000HbsAirAntennaFeederLoss": winlink1000HbsAirAntennaFeederLoss,
       "winlink1000HbsAirAntennaBeamwidth": winlink1000HbsAirAntennaBeamwidth,
       "winlink1000HbsAirAntennaAzimuth": winlink1000HbsAirAntennaAzimuth,
       "winlink1000HbsAirAntennaName": winlink1000HbsAirAntennaName,
       "winlink1000HbsAirAntennaPortModeH": winlink1000HbsAirAntennaPortModeH,
       "winlink1000HbsAirAntennaPortModeV": winlink1000HbsAirAntennaPortModeV,
       "winlink1000HbsAirAntennaFormFactor": winlink1000HbsAirAntennaFormFactor,
       "winlink1000HbsAirCarrierIfTable": winlink1000HbsAirCarrierIfTable,
       "winlink1000HbsAirCarrierIfEntry": winlink1000HbsAirCarrierIfEntry,
       "winlink1000HbsAirCarrierIfIndex": winlink1000HbsAirCarrierIfIndex,
       "winlink1000HbsAirCarrierIfDLUtilPct": winlink1000HbsAirCarrierIfDLUtilPct,
       "winlink1000HbsAirCarrierIfULUtilPct": winlink1000HbsAirCarrierIfULUtilPct,
       "winlink1000HbsAirEnhancedAllowableChannel": winlink1000HbsAirEnhancedAllowableChannel,
       "winlink1000HbsBridge": winlink1000HbsBridge,
       "winlink1000HbsBridgeAgingTime": winlink1000HbsBridgeAgingTime,
       "winlink1000HbsBridgeVlanTable": winlink1000HbsBridgeVlanTable,
       "winlink1000HbsBridgeVlanEntry": winlink1000HbsBridgeVlanEntry,
       "winlink1000HbsBridgeVlanIndex": winlink1000HbsBridgeVlanIndex,
       "winlink1000HbsBridgeVlanIngress": winlink1000HbsBridgeVlanIngress,
       "winlink1000HbsBridgeVlanEgress": winlink1000HbsBridgeVlanEgress,
       "winlink1000HbsBridgeVlanFilterIn": winlink1000HbsBridgeVlanFilterIn,
       "winlink1000HbsBridgeVlanFilterOut": winlink1000HbsBridgeVlanFilterOut,
       "winlink1000HbsBridgeVlanDoubleTag": winlink1000HbsBridgeVlanDoubleTag,
       "winlink1000HbsBridgeVlanDefaultId": winlink1000HbsBridgeVlanDefaultId,
       "winlink1000HbsBridgeMembershipTable": winlink1000HbsBridgeMembershipTable,
       "winlink1000HbsBridgeMembershipEntry": winlink1000HbsBridgeMembershipEntry,
       "winlink1000HbsBridgeMembershipIndex": winlink1000HbsBridgeMembershipIndex,
       "winlink1000HbsBridgeMembershipState": winlink1000HbsBridgeMembershipState,
       "winlink1000HbsBridgeMembershipState2nd": winlink1000HbsBridgeMembershipState2nd,
       "winlink1000HbsBridgeMembershipState3rd": winlink1000HbsBridgeMembershipState3rd,
       "winlink1000HbsBridgeFloodOverloadProtect": winlink1000HbsBridgeFloodOverloadProtect,
       "winlink1000HbsBridgeEntireRestrictionTable": winlink1000HbsBridgeEntireRestrictionTable,
       "winlink1000HbsBridgeMulticastOverloadProtection": winlink1000HbsBridgeMulticastOverloadProtection,
       "winlink1000HbsBridgeFloodBroadcastLimit": winlink1000HbsBridgeFloodBroadcastLimit,
       "winlink1000HbsBridgeFloodMulticastLimit": winlink1000HbsBridgeFloodMulticastLimit,
       "winlink1000HbsBridgeSectorMulticastMIR": winlink1000HbsBridgeSectorMulticastMIR,
       "winlink1000HbsBridgeMulticastMirNumSecPacketsDropped": winlink1000HbsBridgeMulticastMirNumSecPacketsDropped,
       "winlink1000HbsBridgeUnicastTableSize": winlink1000HbsBridgeUnicastTableSize,
       "winlink1000HbsBridgeUnicastTable": winlink1000HbsBridgeUnicastTable,
       "winlink1000HbsBridgeUnicastTableEntry": winlink1000HbsBridgeUnicastTableEntry,
       "winlink1000HbsBridgeUnicastTableIndex": winlink1000HbsBridgeUnicastTableIndex,
       "winlink1000HbsBridgeUnicastTableMACAddress": winlink1000HbsBridgeUnicastTableMACAddress,
       "winlink1000HbsBridgeUnicastTableInterfaceDescription": winlink1000HbsBridgeUnicastTableInterfaceDescription,
       "winlink1000HbsBridgeUnicastTableInterfaceID": winlink1000HbsBridgeUnicastTableInterfaceID,
       "winlink1000HbsBridgeBlockSuOnDuplicateMac": winlink1000HbsBridgeBlockSuOnDuplicateMac,
       "winlink1000HbsBridgeSUsInterconnection": winlink1000HbsBridgeSUsInterconnection,
       "winlink1000HbsService": winlink1000HbsService,
       "winlink1000HbsServiceCommandStr": winlink1000HbsServiceCommandStr,
       "winlink1000HbsServiceVlan": winlink1000HbsServiceVlan,
       "winlink1000HbsServiceVlanTable": winlink1000HbsServiceVlanTable,
       "winlink1000HbsServiceVlanEntry": winlink1000HbsServiceVlanEntry,
       "winlink1000HbsServiceVlanIndex": winlink1000HbsServiceVlanIndex,
       "winlink1000OduServiceVlanTblTag": winlink1000OduServiceVlanTblTag,
       "winlink1000OduServiceVlanTblPri": winlink1000OduServiceVlanTblPri,
       "winlink1000OduServiceVlanTblMajorMode": winlink1000OduServiceVlanTblMajorMode,
       "winlink1000OduServiceVlanTblEgressMode": winlink1000OduServiceVlanTblEgressMode,
       "winlink1000OduServiceVlanTblIngressMode": winlink1000OduServiceVlanTblIngressMode,
       "winlink1000OduServiceVlanTblEgressFilter1": winlink1000OduServiceVlanTblEgressFilter1,
       "winlink1000OduServiceVlanTblEgressFilter2": winlink1000OduServiceVlanTblEgressFilter2,
       "winlink1000OduServiceVlanTblEgressFilter3": winlink1000OduServiceVlanTblEgressFilter3,
       "winlink1000OduServiceVlanTblEgressFilter4": winlink1000OduServiceVlanTblEgressFilter4,
       "winlink1000OduServiceVlanTblUntagFilteredBitmap": winlink1000OduServiceVlanTblUntagFilteredBitmap,
       "winlink1000OduServiceVlanTblProviderTPID": winlink1000OduServiceVlanTblProviderTPID,
       "winlink1000OduServiceVlan2TblTag": winlink1000OduServiceVlan2TblTag,
       "winlink1000OduServiceVlan2TblPri": winlink1000OduServiceVlan2TblPri,
       "winlink1000OduServiceVlan2TblMajorMode": winlink1000OduServiceVlan2TblMajorMode,
       "winlink1000OduServiceVlan2TblEgressMode": winlink1000OduServiceVlan2TblEgressMode,
       "winlink1000OduServiceVlan2TblIngressMode": winlink1000OduServiceVlan2TblIngressMode,
       "winlink1000OduServiceVlan2TblEgressFilter1": winlink1000OduServiceVlan2TblEgressFilter1,
       "winlink1000OduServiceVlan2TblEgressFilter2": winlink1000OduServiceVlan2TblEgressFilter2,
       "winlink1000OduServiceVlan2TblEgressFilter3": winlink1000OduServiceVlan2TblEgressFilter3,
       "winlink1000OduServiceVlan2TblEgressFilter4": winlink1000OduServiceVlan2TblEgressFilter4,
       "winlink1000OduServiceVlan2TblUntagFilteredBitmap": winlink1000OduServiceVlan2TblUntagFilteredBitmap,
       "winlink1000OduServiceVlan2TblProviderTPID": winlink1000OduServiceVlan2TblProviderTPID,
       "winlink1000HbsServiceQoS": winlink1000HbsServiceQoS,
       "winlink1000HbsServiceQoSMode": winlink1000HbsServiceQoSMode,
       "winlink1000HbsServiceQoSVlanQGroupsStr": winlink1000HbsServiceQoSVlanQGroupsStr,
       "winlink1000HbsServiceQoSDiffservQGroupsStr": winlink1000HbsServiceQoSDiffservQGroupsStr,
       "winlink1000HbsServiceQoSMaxRtQuePct": winlink1000HbsServiceQoSMaxRtQuePct,
       "winlink1000HbsServiceQoSTable": winlink1000HbsServiceQoSTable,
       "winlink1000HbsServiceQoSEntry": winlink1000HbsServiceQoSEntry,
       "winlink1000HbsServiceQoSIndex": winlink1000HbsServiceQoSIndex,
       "winlink1000HbsServiceQoSConfAdminState": winlink1000HbsServiceQoSConfAdminState,
       "winlink1000HbsServiceQoSConfUpQueMir": winlink1000HbsServiceQoSConfUpQueMir,
       "winlink1000HbsServiceQoSConfUpQueWeight": winlink1000HbsServiceQoSConfUpQueWeight,
       "winlink1000HbsServiceQoSConfDownQueMir": winlink1000HbsServiceQoSConfDownQueMir,
       "winlink1000HbsServiceQoSConfDownQueWeight": winlink1000HbsServiceQoSConfDownQueWeight,
       "winlink1000HbsServiceQoSUpTtlMs": winlink1000HbsServiceQoSUpTtlMs,
       "winlink1000HbsServiceQoSDownTtlMs": winlink1000HbsServiceQoSDownTtlMs,
       "winlink1000HbsServiceQoSUpStrict": winlink1000HbsServiceQoSUpStrict,
       "winlink1000HbsServiceQoSDownStrict": winlink1000HbsServiceQoSDownStrict,
       "winlink1000HbsServiceQoSConfVoIPSupport": winlink1000HbsServiceQoSConfVoIPSupport,
       "winlink1000HbsServiceQoSVoIPState": winlink1000HbsServiceQoSVoIPState,
       "winlink1000HbsServiceMobilitySupported": winlink1000HbsServiceMobilitySupported,
       "winlink1000HbsServiceMaxNumOfHSUs": winlink1000HbsServiceMaxNumOfHSUs,
       "winlink1000HbsServiceSynchronization": winlink1000HbsServiceSynchronization,
       "winlink1000HbsServiceSynchronization1588TCEnable": winlink1000HbsServiceSynchronization1588TCEnable,
       "winlink1000HbsServiceSynchronizationSyncEEnable": winlink1000HbsServiceSynchronizationSyncEEnable,
       "winlink1000HbsServiceSynchronizationSyncESSMGeneration": winlink1000HbsServiceSynchronizationSyncESSMGeneration,
       "winlink1000HbsServiceSynchronizationSyncESupportedReferenceClock": winlink1000HbsServiceSynchronizationSyncESupportedReferenceClock,
       "winlink1000HbsServiceSynchronizationSyncEDesiredReferenceClock": winlink1000HbsServiceSynchronizationSyncEDesiredReferenceClock,
       "winlink1000HbsServiceRadius": winlink1000HbsServiceRadius,
       "winlink1000HbsServiceRadiusAuthorizationMode": winlink1000HbsServiceRadiusAuthorizationMode,
       "winlink1000HbsServiceRadiusUserName": winlink1000HbsServiceRadiusUserName,
       "winlink1000HbsServiceRadiusPassword": winlink1000HbsServiceRadiusPassword,
       "winlink1000HbsServiceRadiusServerTable": winlink1000HbsServiceRadiusServerTable,
       "winlink1000HbsServiceRadiusServerEntry": winlink1000HbsServiceRadiusServerEntry,
       "winlink1000HbsServiceRadiusServerIndex": winlink1000HbsServiceRadiusServerIndex,
       "winlink1000HbsServiceRadiusServerIpAddr": winlink1000HbsServiceRadiusServerIpAddr,
       "winlink1000HbsServiceRadiusServerPort": winlink1000HbsServiceRadiusServerPort,
       "winlink1000HbsServiceRadiusServerSecret": winlink1000HbsServiceRadiusServerSecret,
       "winlink1000HbsServiceRadiusServerConnectivity": winlink1000HbsServiceRadiusServerConnectivity,
       "winlink1000HbsServiceRadiusServerNumberOfRetries": winlink1000HbsServiceRadiusServerNumberOfRetries,
       "winlink1000HbsServiceRadiusServerTimeout": winlink1000HbsServiceRadiusServerTimeout,
       "winlink1000HbsServiceRadiusServerAccountingPort": winlink1000HbsServiceRadiusServerAccountingPort,
       "winlink1000HbsServiceRadiusHsuNasIdentifierConvention": winlink1000HbsServiceRadiusHsuNasIdentifierConvention,
       "winlink1000HbsServiceRadiusHsuAccountingMode": winlink1000HbsServiceRadiusHsuAccountingMode,
       "winlink1000HbsServiceRadiusAccountingServerTable": winlink1000HbsServiceRadiusAccountingServerTable,
       "winlink1000HbsServiceRadiusAccountingServerEntry": winlink1000HbsServiceRadiusAccountingServerEntry,
       "winlink1000HbsServiceRadiusAccountingServerIndex": winlink1000HbsServiceRadiusAccountingServerIndex,
       "winlink1000HbsServiceRadiusAccountingServerIpAddr": winlink1000HbsServiceRadiusAccountingServerIpAddr,
       "winlink1000HbsServiceRadiusAccountingServerPort": winlink1000HbsServiceRadiusAccountingServerPort,
       "winlink1000HbsServiceRadiusAccountingServerSecret": winlink1000HbsServiceRadiusAccountingServerSecret,
       "winlink1000HbsServiceRadiusAccountingServerConnectivity": winlink1000HbsServiceRadiusAccountingServerConnectivity,
       "winlink1000HbsServiceRadiusAccountingServerNumberOfRetries": winlink1000HbsServiceRadiusAccountingServerNumberOfRetries,
       "winlink1000HbsServiceRadiusAccountingServerTimeout": winlink1000HbsServiceRadiusAccountingServerTimeout,
       "winlink1000HbsServiceRadiusAuthorizationComponent": winlink1000HbsServiceRadiusAuthorizationComponent,
       "winlink1000HbsServiceRadiusPeriodicSeconds": winlink1000HbsServiceRadiusPeriodicSeconds,
       "winlink1000HbsServiceRadiusDeprecated": winlink1000HbsServiceRadiusDeprecated,
       "winlink1000HbsServiceRadiusIdentificationKeyType": winlink1000HbsServiceRadiusIdentificationKeyType,
       "winlink1000HbsServiceCategoryTable": winlink1000HbsServiceCategoryTable,
       "winlink1000HbsServiceCategoryEntry": winlink1000HbsServiceCategoryEntry,
       "winlink1000HbsServiceCategoryIndex": winlink1000HbsServiceCategoryIndex,
       "winlink1000HbsServiceCategoryName": winlink1000HbsServiceCategoryName,
       "winlink1000HbsServiceCategoryULResources": winlink1000HbsServiceCategoryULResources,
       "winlink1000HbsServiceCategoryDLResources": winlink1000HbsServiceCategoryDLResources,
       "winlink1000HbsServiceCategoryULMir": winlink1000HbsServiceCategoryULMir,
       "winlink1000HbsServiceCategoryDLMir": winlink1000HbsServiceCategoryDLMir,
       "winlink1000HbsServiceCategoryQoSUpQueMir": winlink1000HbsServiceCategoryQoSUpQueMir,
       "winlink1000HbsServiceCategoryQoSUpQueWeight": winlink1000HbsServiceCategoryQoSUpQueWeight,
       "winlink1000HbsServiceCategoryQoSDownQueMir": winlink1000HbsServiceCategoryQoSDownQueMir,
       "winlink1000HbsServiceCategoryQoSDownQueWeight": winlink1000HbsServiceCategoryQoSDownQueWeight,
       "winlink1000HbsServiceCategoryQoSUpTtlMs": winlink1000HbsServiceCategoryQoSUpTtlMs,
       "winlink1000HbsServiceCategoryQoSDownTtlMs": winlink1000HbsServiceCategoryQoSDownTtlMs,
       "winlink1000HbsServiceCategoryQoSUpStrict": winlink1000HbsServiceCategoryQoSUpStrict,
       "winlink1000HbsServiceCategoryQoSDownStrict": winlink1000HbsServiceCategoryQoSDownStrict,
       "winlink1000HbsServiceCategoryResourceType": winlink1000HbsServiceCategoryResourceType,
       "winlink1000HbsServiceCategoryDelaySensitivity": winlink1000HbsServiceCategoryDelaySensitivity,
       "winlink1000HbsServiceCategoryQoSVoIPState": winlink1000HbsServiceCategoryQoSVoIPState,
       "winlink1000HbsServiceCategoryPppoeFilter": winlink1000HbsServiceCategoryPppoeFilter,
       "winlink1000HbsServiceCategoryDhcpFilter": winlink1000HbsServiceCategoryDhcpFilter,
       "winlink1000HbsServicedotX": winlink1000HbsServicedotX,
       "winlink1000HbsServicedotXEnable": winlink1000HbsServicedotXEnable,
       "winlink1000HbsServicedotXRadiusServerTable": winlink1000HbsServicedotXRadiusServerTable,
       "winlink1000HbsServicedotXRadiusServerEntry": winlink1000HbsServicedotXRadiusServerEntry,
       "winlink1000HbsServicedotXRadiusServerIndex": winlink1000HbsServicedotXRadiusServerIndex,
       "winlink1000HbsServicedotXRadiusServerIpAddr": winlink1000HbsServicedotXRadiusServerIpAddr,
       "winlink1000HbsServicedotXRadiusServerPort": winlink1000HbsServicedotXRadiusServerPort,
       "winlink1000HbsServicedotXRadiusServerSecret": winlink1000HbsServicedotXRadiusServerSecret,
       "winlink1000HbsServicedotXRadiusServerConnectivity": winlink1000HbsServicedotXRadiusServerConnectivity,
       "winlink1000HbsServicedotXRadiusServerAccountingPort": winlink1000HbsServicedotXRadiusServerAccountingPort,
       "winlink1000HbsServicedotXReAuthenticatePeriod": winlink1000HbsServicedotXReAuthenticatePeriod,
       "winlink1000HbsServiceRadiusDotXAccountingMode": winlink1000HbsServiceRadiusDotXAccountingMode,
       "winlink1000HbsServicedotXRadiusAccountingServerTable": winlink1000HbsServicedotXRadiusAccountingServerTable,
       "winlink1000HbsServicedotXRadiusAccountingServerEntry": winlink1000HbsServicedotXRadiusAccountingServerEntry,
       "winlink1000HbsServicedotXRadiusAccountingServerIndex": winlink1000HbsServicedotXRadiusAccountingServerIndex,
       "winlink1000HbsServicedotXRadiusAccountingServerIpAddr": winlink1000HbsServicedotXRadiusAccountingServerIpAddr,
       "winlink1000HbsServicedotXRadiusAccountingServerPort": winlink1000HbsServicedotXRadiusAccountingServerPort,
       "winlink1000HbsServicedotXRadiusAccountingServerSecret": winlink1000HbsServicedotXRadiusAccountingServerSecret,
       "winlink1000HbsServicedotXRadiusAccountingServerConnectivity": winlink1000HbsServicedotXRadiusAccountingServerConnectivity,
       "winlink1000HbsServiceIGMPSnooping": winlink1000HbsServiceIGMPSnooping,
       "winlink1000HbsServiceIGMPSnoopingEnable": winlink1000HbsServiceIGMPSnoopingEnable,
       "winlink1000HbsServiceIGMPSnoopingRobustnesVariable": winlink1000HbsServiceIGMPSnoopingRobustnesVariable,
       "winlink1000HbsServiceIGMPSnoopingStatistics": winlink1000HbsServiceIGMPSnoopingStatistics,
       "winlink1000HbsServiceIGMPSnoopingStatisticsReportsTable": winlink1000HbsServiceIGMPSnoopingStatisticsReportsTable,
       "winlink1000HbsServiceIGMPSnoopingStatisticsReportsEntry": winlink1000HbsServiceIGMPSnoopingStatisticsReportsEntry,
       "winlink1000HbsServiceIGMPSnoopingStatisticsReportsIndex": winlink1000HbsServiceIGMPSnoopingStatisticsReportsIndex,
       "winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV1": winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV1,
       "winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV2": winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV2,
       "winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV3": winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV3,
       "winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV3Src": winlink1000HbsServiceIGMPSnoopingStatisticsReportsCounterV3Src,
       "winlink1000HbsServiceIGMPSnoopingStatisticsQueriesTable": winlink1000HbsServiceIGMPSnoopingStatisticsQueriesTable,
       "winlink1000HbsServiceIGMPSnoopingStatisticsQueriesEntry": winlink1000HbsServiceIGMPSnoopingStatisticsQueriesEntry,
       "winlink1000HbsServiceIGMPSnoopingStatisticsQueriesIndex": winlink1000HbsServiceIGMPSnoopingStatisticsQueriesIndex,
       "winlink1000HbsServiceIGMPSnoopingStatisticsQueriesCounterV1": winlink1000HbsServiceIGMPSnoopingStatisticsQueriesCounterV1,
       "winlink1000HbsServiceIGMPSnoopingStatisticsGeneralQueriesCntV2": winlink1000HbsServiceIGMPSnoopingStatisticsGeneralQueriesCntV2,
       "winlink1000HbsServiceIGMPSnoopingStatisticsSpecificQueriesCntV2": winlink1000HbsServiceIGMPSnoopingStatisticsSpecificQueriesCntV2,
       "winlink1000HbsServiceIGMPSnoopingStatisticsGeneralQueriesCntV3": winlink1000HbsServiceIGMPSnoopingStatisticsGeneralQueriesCntV3,
       "winlink1000HbsServiceIGMPSnoopingStatisticsSpecificQueriesCntV3": winlink1000HbsServiceIGMPSnoopingStatisticsSpecificQueriesCntV3,
       "winlink1000HbsServiceIGMPSnoopingStatisticsSrcSpcQueriesCntV3": winlink1000HbsServiceIGMPSnoopingStatisticsSrcSpcQueriesCntV3,
       "winlink1000HbsServiceIGMPSnoopingVlanId": winlink1000HbsServiceIGMPSnoopingVlanId,
       "winlink1000HbsServiceProtocolFilterTable": winlink1000HbsServiceProtocolFilterTable,
       "winlink1000HbsServiceProtocolFilterEntry": winlink1000HbsServiceProtocolFilterEntry,
       "winlink1000HbsServiceProtocolFilterIndex": winlink1000HbsServiceProtocolFilterIndex,
       "winlink1000HbsServicePppoeFilter": winlink1000HbsServicePppoeFilter,
       "winlink1000HbsServiceDhcpFilter": winlink1000HbsServiceDhcpFilter,
       "winlink1000HbsServiceVlanTranslation": winlink1000HbsServiceVlanTranslation,
       "winlink1000HbsServiceVlanTranslationTable": winlink1000HbsServiceVlanTranslationTable,
       "winlink1000HbsServiceVlanTranslationEntry": winlink1000HbsServiceVlanTranslationEntry,
       "winlink1000HbsServiceVlanTranslationIndex": winlink1000HbsServiceVlanTranslationIndex,
       "winlink1000HbsServiceVlanTranslationRule1": winlink1000HbsServiceVlanTranslationRule1,
       "winlink1000HbsServiceVlanTranslationRule2": winlink1000HbsServiceVlanTranslationRule2,
       "winlink1000HbsServiceVlanTranslationRule3": winlink1000HbsServiceVlanTranslationRule3,
       "winlink1000HbsServiceVlanTranslationRule4": winlink1000HbsServiceVlanTranslationRule4,
       "winlink1000HbsServiceVlanTranslationRule5": winlink1000HbsServiceVlanTranslationRule5,
       "winlink1000HbsServiceVlanTranslationRule6": winlink1000HbsServiceVlanTranslationRule6,
       "winlink1000HbsServiceVlanTranslationRule7": winlink1000HbsServiceVlanTranslationRule7,
       "winlink1000HbsServiceVlanTranslationRule8": winlink1000HbsServiceVlanTranslationRule8,
       "winlink1000HbsPerfMon": winlink1000HbsPerfMon,
       "winlink1000HbsPerfMonThreshTable": winlink1000HbsPerfMonThreshTable,
       "winlink1000HbsPerfMonThreshEntry": winlink1000HbsPerfMonThreshEntry,
       "winlink1000HbsPerfMonThreshIndex": winlink1000HbsPerfMonThreshIndex,
       "winlink1000HbsPerfMonTxThresh1": winlink1000HbsPerfMonTxThresh1,
       "winlink1000HbsPerfMonRxThresh1": winlink1000HbsPerfMonRxThresh1,
       "winlink1000HbsPerfMonRxThresh2": winlink1000HbsPerfMonRxThresh2,
       "winlink1000HbsPerfMonBBERThresh1": winlink1000HbsPerfMonBBERThresh1,
       "winlink1000HbsPerfMonEstThroughputThreshKbps": winlink1000HbsPerfMonEstThroughputThreshKbps,
       "winlink1000HbsPerfMonHighTrafficThreshKbps": winlink1000HbsPerfMonHighTrafficThreshKbps,
       "winlink1000HbsPerfMonAirGenCurrTable": winlink1000HbsPerfMonAirGenCurrTable,
       "winlink1000HbsPerfMonAirGenCurrEntry": winlink1000HbsPerfMonAirGenCurrEntry,
       "winlink1000HbsPerfMonAirGenCurrRxMBytes": winlink1000HbsPerfMonAirGenCurrRxMBytes,
       "winlink1000HbsPerfMonAirGenCurrTxMBytes": winlink1000HbsPerfMonAirGenCurrTxMBytes,
       "winlink1000HbsPerfMonAirGenCurrEthCapacityThreshUnder": winlink1000HbsPerfMonAirGenCurrEthCapacityThreshUnder,
       "winlink1000HbsPerfMonAirGenCurrHighTrafficThreshExceed": winlink1000HbsPerfMonAirGenCurrHighTrafficThreshExceed,
       "winlink1000HbsPerfMonAirGenCurrActiveSeconds": winlink1000HbsPerfMonAirGenCurrActiveSeconds,
       "winlink1000HbsPerfMonAirGenIntervalTable": winlink1000HbsPerfMonAirGenIntervalTable,
       "winlink1000HbsPerfMonAirGenIntervalEntry": winlink1000HbsPerfMonAirGenIntervalEntry,
       "winlink1000HbsPerfMonAirGenIntervalIdx": winlink1000HbsPerfMonAirGenIntervalIdx,
       "winlink1000HbsPerfMonAirGenIntervalRxMBytes": winlink1000HbsPerfMonAirGenIntervalRxMBytes,
       "winlink1000HbsPerfMonAirGenIntervalTxMBytes": winlink1000HbsPerfMonAirGenIntervalTxMBytes,
       "winlink1000HbsPerfMonAirGenIntervalEthCapacityThreshUnder": winlink1000HbsPerfMonAirGenIntervalEthCapacityThreshUnder,
       "winlink1000HbsPerfMonAirGenIntervalHighTrafficThreshExceed": winlink1000HbsPerfMonAirGenIntervalHighTrafficThreshExceed,
       "winlink1000HbsPerfMonAirGenIntervalActiveSeconds": winlink1000HbsPerfMonAirGenIntervalActiveSeconds,
       "winlink1000HbsPerfMonAirGenDayTable": winlink1000HbsPerfMonAirGenDayTable,
       "winlink1000HbsPerfMonAirGenDayEntry": winlink1000HbsPerfMonAirGenDayEntry,
       "winlink1000HbsPerfMonAirGenDayIdx": winlink1000HbsPerfMonAirGenDayIdx,
       "winlink1000HbsPerfMonAirGenDayRxMBytes": winlink1000HbsPerfMonAirGenDayRxMBytes,
       "winlink1000HbsPerfMonAirGenDayTxMBytes": winlink1000HbsPerfMonAirGenDayTxMBytes,
       "winlink1000HbsPerfMonAirGenDayEthCapacityThreshUnder": winlink1000HbsPerfMonAirGenDayEthCapacityThreshUnder,
       "winlink1000HbsPerfMonAirGenDayHighTrafficThreshExceed": winlink1000HbsPerfMonAirGenDayHighTrafficThreshExceed,
       "winlink1000HbsPerfMonAirGenDayActiveSeconds": winlink1000HbsPerfMonAirGenDayActiveSeconds,
       "winlink1000HbsAdmin": winlink1000HbsAdmin,
       "winlink1000HbsAdminInstallationConfirmationRequired": winlink1000HbsAdminInstallationConfirmationRequired,
       "winlink1000HbsAdminRemoteTrapGenerationMode": winlink1000HbsAdminRemoteTrapGenerationMode,
       "winlink1000HbsAdminBackwardsSupport": winlink1000HbsAdminBackwardsSupport,
       "winlink1000Hsu": winlink1000Hsu,
       "winlink1000HsuAir": winlink1000HsuAir,
       "winlink1000HsuAirState": winlink1000HsuAirState,
       "winlink1000HsuAirLinkState": winlink1000HsuAirLinkState,
       "winlink1000HsuAirHsuId": winlink1000HsuAirHsuId,
       "winlink1000HsuAirLocalDeregister": winlink1000HsuAirLocalDeregister,
       "winlink1000HsuAirRemoteCompressedMon": winlink1000HsuAirRemoteCompressedMon,
       "winlink1000HsuAirRemoteCompressedStatic": winlink1000HsuAirRemoteCompressedStatic,
       "winlink1000HsuAirRssThreshSync": winlink1000HsuAirRssThreshSync,
       "winlink1000HsuAirAlignment": winlink1000HsuAirAlignment,
       "winlink1000HsuAirAlignmentCmd": winlink1000HsuAirAlignmentCmd,
       "winlink1000HsuAirAlignmentStatus": winlink1000HsuAirAlignmentStatus,
       "winlink1000HsuAirAlignment3x3Step": winlink1000HsuAirAlignment3x3Step,
       "winlink1000HsuAirAlignment3x3TotalSteps": winlink1000HsuAirAlignment3x3TotalSteps,
       "winlink1000HsuAirAlignmentEvalTo": winlink1000HsuAirAlignmentEvalTo,
       "winlink1000HsuAirAlignmentLastReport": winlink1000HsuAirAlignmentLastReport,
       "winlink1000HsuAirAlignmentLastReportManualAngle": winlink1000HsuAirAlignmentLastReportManualAngle,
       "winlink1000HsuAirAlignmentLastReportTputUpSector": winlink1000HsuAirAlignmentLastReportTputUpSector,
       "winlink1000HsuAirAlignmentLastReportTputDownSector": winlink1000HsuAirAlignmentLastReportTputDownSector,
       "winlink1000HsuAirAlignmentLastReportMcsIndexUp": winlink1000HsuAirAlignmentLastReportMcsIndexUp,
       "winlink1000HsuAirAlignmentLastReportMcsIndexDown": winlink1000HsuAirAlignmentLastReportMcsIndexDown,
       "winlink1000HsuAirAlignmentLastReportState": winlink1000HsuAirAlignmentLastReportState,
       "winlink1000HsuAirAlignmentLastReportElectronicAnglesHsu": winlink1000HsuAirAlignmentLastReportElectronicAnglesHsu,
       "winlink1000HsuAirAlignmentLastReportElectronicAnglesHbs": winlink1000HsuAirAlignmentLastReportElectronicAnglesHbs,
       "winlink1000HsuAirAlignmentLastReportRss": winlink1000HsuAirAlignmentLastReportRss,
       "winlink1000HsuAirCompressedMon": winlink1000HsuAirCompressedMon,
       "winlink1000HsuAirReAlignmentOnStartupEnable": winlink1000HsuAirReAlignmentOnStartupEnable,
       "winlink1000HsuAirInstallation": winlink1000HsuAirInstallation,
       "winlink1000HsuAirInstallationCBW": winlink1000HsuAirInstallationCBW,
       "winlink1000HsuAirInstallationFreq": winlink1000HsuAirInstallationFreq,
       "winlink1000HsuAirInstallationUlRss": winlink1000HsuAirInstallationUlRss,
       "winlink1000HsuAirInstallationDlRss": winlink1000HsuAirInstallationDlRss,
       "winlink1000HsuAirInstallationUlTput": winlink1000HsuAirInstallationUlTput,
       "winlink1000HsuAirInstallationDlTput": winlink1000HsuAirInstallationDlTput,
       "winlink1000HsuAirInstallationBandId": winlink1000HsuAirInstallationBandId,
       "winlink1000HsuAirInstallationSrvType": winlink1000HsuAirInstallationSrvType,
       "winlink1000HsuAirInstallationGenStr": winlink1000HsuAirInstallationGenStr,
       "winlink1000HsuAirInstallationDateTime": winlink1000HsuAirInstallationDateTime,
       "winlink1000HsuAirFreqAndCBWList": winlink1000HsuAirFreqAndCBWList,
       "winlink1000HsuService": winlink1000HsuService,
       "winlink1000HsuServiceCommandStr": winlink1000HsuServiceCommandStr,
       "winlink1000HsuServiceHsuType": winlink1000HsuServiceHsuType,
       "winlink1000HsuServiceHsuLevel": winlink1000HsuServiceHsuLevel,
       "winlink1000HsuServiceRadiusIdentificationKeyId": winlink1000HsuServiceRadiusIdentificationKeyId,
       "winlink1000HsuMuteMU": winlink1000HsuMuteMU,
       "winlink1000HsuMuteMUStatus": winlink1000HsuMuteMUStatus,
       "winlink1000HsuMuteMUTrainID": winlink1000HsuMuteMUTrainID,
       "winlink1000HsuMuteMUNumberOfMUsInTrain": winlink1000HsuMuteMUNumberOfMUsInTrain,
       "winlink1000HsuServiceFirewallMode": winlink1000HsuServiceFirewallMode,
       "winlink1000HsuServiceFirewallTable": winlink1000HsuServiceFirewallTable,
       "winlink1000HsuEthernet": winlink1000HsuEthernet,
       "winlink1000HsuEthernetPoE": winlink1000HsuEthernetPoE,
       "winlink1000HsuEthernetPoESupported": winlink1000HsuEthernetPoESupported,
       "winlink1000HsuEthernetPoETemperature": winlink1000HsuEthernetPoETemperature,
       "winlink1000HsuEthernetPoEEquConsumption": winlink1000HsuEthernetPoEEquConsumption,
       "winlink1000HsuEthernetPoEEquVoltage": winlink1000HsuEthernetPoEEquVoltage,
       "winlink1000HsuAdmin": winlink1000HsuAdmin,
       "winlink1000HsuAdminInstallationConfirmationRequired": winlink1000HsuAdminInstallationConfirmationRequired,
       "winlink1000HsuAdminSiteSurveySupport": winlink1000HsuAdminSiteSurveySupport,
       "winlink1000HsuAdminSiteSurveyMode": winlink1000HsuAdminSiteSurveyMode,
       "winlink1000SN": winlink1000SN,
       "winlink1000SNPowerSource": winlink1000SNPowerSource,
       "winlink1000SNBattery": winlink1000SNBattery,
       "winlink1000SNBatteryVoltage": winlink1000SNBatteryVoltage,
       "winlink1000SNBatteryCurrent": winlink1000SNBatteryCurrent,
       "winlink1000SNBatterySerialNumber": winlink1000SNBatterySerialNumber,
       "winlink1000SNBatteryStatus": winlink1000SNBatteryStatus,
       "winlink1000SNBatteryTemperature": winlink1000SNBatteryTemperature,
       "winlink1000SNBatteryModel": winlink1000SNBatteryModel,
       "winlink1000SNBatteryRemainPercent": winlink1000SNBatteryRemainPercent,
       "winlink1000SNBatteryRemainTime": winlink1000SNBatteryRemainTime,
       "winlink1000SNConfig": winlink1000SNConfig,
       "winlink1000SNConfigAlarms": winlink1000SNConfigAlarms,
       "winlink1000SNConfigAlarmsSensorInput1TrapDescription": winlink1000SNConfigAlarmsSensorInput1TrapDescription,
       "winlink1000SNConfigAlarmsSensorInput2TrapDescription": winlink1000SNConfigAlarmsSensorInput2TrapDescription,
       "winlink1000SNConfigAlarmsSensorOutput1Trigger": winlink1000SNConfigAlarmsSensorOutput1Trigger,
       "winlink1000SNConfigAlarmsSensorOutput2Trigger": winlink1000SNConfigAlarmsSensorOutput2Trigger,
       "winlink1000SNConfigAlarmsSensorOutput1TriggerOff": winlink1000SNConfigAlarmsSensorOutput1TriggerOff,
       "winlink1000SNConfigAlarmsSensorOutput2TriggerOff": winlink1000SNConfigAlarmsSensorOutput2TriggerOff,
       "winlink1000SNConfigBridgingMode": winlink1000SNConfigBridgingMode,
       "winlink1000SNConfigDataPortTable": winlink1000SNConfigDataPortTable,
       "winlink1000SNConfigDataPortEntry": winlink1000SNConfigDataPortEntry,
       "winlink1000SNConfigDataPortIndex": winlink1000SNConfigDataPortIndex,
       "winlink1000SNConfigDataPortVlanType": winlink1000SNConfigDataPortVlanType,
       "winlink1000SNConfigDataPortAllowedVlan": winlink1000SNConfigDataPortAllowedVlan,
       "winlink1000SNConfigDataPortPowerConsumption": winlink1000SNConfigDataPortPowerConsumption,
       "winlink1000SNConfigDataPortPowerPriority": winlink1000SNConfigDataPortPowerPriority,
       "winlink1000SNConfigDataPortPowerStatus": winlink1000SNConfigDataPortPowerStatus,
       "winlink1000SNConfigDataPortPowerType": winlink1000SNConfigDataPortPowerType,
       "winlink1000SNConfigDataPortLanStatus": winlink1000SNConfigDataPortLanStatus,
       "winlink1000SNConfigDataPortLanMode": winlink1000SNConfigDataPortLanMode,
       "winlink1000SNConfigDataPortWatchdogMode": winlink1000SNConfigDataPortWatchdogMode,
       "winlink1000SNConfigDataPortWatchdogIP": winlink1000SNConfigDataPortWatchdogIP,
       "winlink1000SNConfigDataPortDeviceName": winlink1000SNConfigDataPortDeviceName,
       "winlink1000SNConfigDataPortType": winlink1000SNConfigDataPortType,
       "winlink1000SNConfigDataPortReset": winlink1000SNConfigDataPortReset,
       "winlink1000CN": winlink1000CN,
       "winlink1000CNDeviceState": winlink1000CNDeviceState,
       "winlink1000CNTmuTable": winlink1000CNTmuTable,
       "winlink1000CNTmuEntry": winlink1000CNTmuEntry,
       "winlink1000CNTmuIndex": winlink1000CNTmuIndex,
       "winlink1000CNTmuIp": winlink1000CNTmuIp,
       "winlink1000CNTmuName": winlink1000CNTmuName,
       "winlink1000CNTmuBaseIp": winlink1000CNTmuBaseIp,
       "winlink1000CNTmuBaseName": winlink1000CNTmuBaseName,
       "winlink1000CNTmuBaseVrf": winlink1000CNTmuBaseVrf,
       "winlink1000CNTmuServedSubnets": winlink1000CNTmuServedSubnets,
       "winlink1000CNDataIfTable": winlink1000CNDataIfTable,
       "winlink1000CNDataIfEntry": winlink1000CNDataIfEntry,
       "winlink1000CNDataIfIndex": winlink1000CNDataIfIndex,
       "winlink1000CNDataIfTxThroughput": winlink1000CNDataIfTxThroughput,
       "winlink1000CNDataIfRxThroughput": winlink1000CNDataIfRxThroughput,
       "winlink1000CNDataIfBfdState": winlink1000CNDataIfBfdState,
       "winlink1000Genesis": winlink1000Genesis,
       "winlink1000GenesisGeneral": winlink1000GenesisGeneral,
       "winlink1000GenesisGeneralDeviceState": winlink1000GenesisGeneralDeviceState,
       "winlink1000GenesisGeneralCountry": winlink1000GenesisGeneralCountry,
       "winlink1000GenesisLAN": winlink1000GenesisLAN,
       "winlink1000GenesisLANLocalRxEthTrafficKbps": winlink1000GenesisLANLocalRxEthTrafficKbps,
       "winlink1000GenesisLANLocalTxEthTrafficKbps": winlink1000GenesisLANLocalTxEthTrafficKbps,
       "winlink1000GenesisLANLocalEthStatus": winlink1000GenesisLANLocalEthStatus,
       "winlink1000GenesisLANLocalRxSfpTrafficKbps": winlink1000GenesisLANLocalRxSfpTrafficKbps,
       "winlink1000GenesisLANLocalTxSfpTrafficKbps": winlink1000GenesisLANLocalTxSfpTrafficKbps,
       "winlink1000GenesisLANLocalSfpStatus": winlink1000GenesisLANLocalSfpStatus,
       "winlink1000GenesisAir": winlink1000GenesisAir,
       "winlink1000GenesisAirOperationMode": winlink1000GenesisAirOperationMode,
       "winlink1000GenesisAirLinksTbl": winlink1000GenesisAirLinksTbl,
       "winlink1000GenesisAirLinksEntry": winlink1000GenesisAirLinksEntry,
       "winlink1000GenesisAirLinksIndex": winlink1000GenesisAirLinksIndex,
       "winlink1000GenesisAirLinksLocalRSSdBm": winlink1000GenesisAirLinksLocalRSSdBm,
       "winlink1000GenesisAirLinksDeltaLocalRssdB": winlink1000GenesisAirLinksDeltaLocalRssdB,
       "winlink1000GenesisAirLinksRemoteRSSdBm": winlink1000GenesisAirLinksRemoteRSSdBm,
       "winlink1000GenesisAirLinksDeltaRemoteRssdB": winlink1000GenesisAirLinksDeltaRemoteRssdB,
       "winlink1000GenesisAirLinksLocalChain1RSSdBm": winlink1000GenesisAirLinksLocalChain1RSSdBm,
       "winlink1000GenesisAirLinksRemoteChain1RSSdBm": winlink1000GenesisAirLinksRemoteChain1RSSdBm,
       "winlink1000GenesisAirLinksLocalChain2RSSdBm": winlink1000GenesisAirLinksLocalChain2RSSdBm,
       "winlink1000GenesisAirLinksRemoteChain2RSSdBm": winlink1000GenesisAirLinksRemoteChain2RSSdBm,
       "winlink1000GenesisAirLinksLocalTxRateMbps": winlink1000GenesisAirLinksLocalTxRateMbps,
       "winlink1000GenesisAirLinksRemoteTxRateMbps": winlink1000GenesisAirLinksRemoteTxRateMbps,
       "winlink1000GenesisAirLinksLocalModulation": winlink1000GenesisAirLinksLocalModulation,
       "winlink1000GenesisAirLinksRemoteModulation": winlink1000GenesisAirLinksRemoteModulation,
       "winlink1000GenesisAirLinksLocalEstimatedTputKbps": winlink1000GenesisAirLinksLocalEstimatedTputKbps,
       "winlink1000GenesisAirLinksRemoteEstimatedTputKbps": winlink1000GenesisAirLinksRemoteEstimatedTputKbps,
       "winlink1000GenesisAirLinksState": winlink1000GenesisAirLinksState,
       "winlink1000GenesisAirLinksDistanceMeter": winlink1000GenesisAirLinksDistanceMeter,
       "winlink1000GenesisAirLinksRemoteOperationMode": winlink1000GenesisAirLinksRemoteOperationMode,
       "winlink1000GenesisAirLinksRemoteRxEthTrafficKbps": winlink1000GenesisAirLinksRemoteRxEthTrafficKbps,
       "winlink1000GenesisAirLinksRemoteTxEthTrafficKbps": winlink1000GenesisAirLinksRemoteTxEthTrafficKbps,
       "winlink1000GenesisAirLinksRemoteEthStatus": winlink1000GenesisAirLinksRemoteEthStatus,
       "winlink1000GenesisAirLinksRemoteRxSfpTrafficKbps": winlink1000GenesisAirLinksRemoteRxSfpTrafficKbps,
       "winlink1000GenesisAirLinksRemoteTxSfpTrafficKbps": winlink1000GenesisAirLinksRemoteTxSfpTrafficKbps,
       "winlink1000GenesisAirLinksRemoteSfpStatus": winlink1000GenesisAirLinksRemoteSfpStatus,
       "winlink1000GenesisAirLinksRemoteMACAddress": winlink1000GenesisAirLinksRemoteMACAddress,
       "winlink1000GenesisAirLinksRemoteIpAddressV4": winlink1000GenesisAirLinksRemoteIpAddressV4,
       "winlink1000GenesisAirLinksRemoteIpAddressV6": winlink1000GenesisAirLinksRemoteIpAddressV6,
       "winlink1000GenesisAirRegisteredTbl": winlink1000GenesisAirRegisteredTbl,
       "winlink1000GenesisAirRegisteredEntry": winlink1000GenesisAirRegisteredEntry,
       "winlink1000GenesisAirRegisteredIndex": winlink1000GenesisAirRegisteredIndex,
       "winlink1000GenesisAirRegisteredRemoteMACAddress": winlink1000GenesisAirRegisteredRemoteMACAddress,
       "winlink1000GenesisAirRegisteredRemoteIpAddressV4": winlink1000GenesisAirRegisteredRemoteIpAddressV4,
       "winlink1000GenesisAirRegisteredRemoteIpAddressV6": winlink1000GenesisAirRegisteredRemoteIpAddressV6,
       "winlink1000General": winlink1000General,
       "winlink1000GeneralTrapDescription": winlink1000GeneralTrapDescription,
       "winlink1000GeneralTrapSeverity": winlink1000GeneralTrapSeverity,
       "winlink1000GeneralCookie": winlink1000GeneralCookie,
       "winlink1000GeneralEcChangesCounter": winlink1000GeneralEcChangesCounter,
       "winlink1000GeneralTelnetSupport": winlink1000GeneralTelnetSupport,
       "winlink1000GeneralWISupport": winlink1000GeneralWISupport,
       "winlink1000GeneralSNMPSupport": winlink1000GeneralSNMPSupport,
       "winlink1000GeneralSSHSupport": winlink1000GeneralSSHSupport,
       "winlink1000GeneralStrictHTTPS": winlink1000GeneralStrictHTTPS,
       "winlink1000GeneralIPForwarding": winlink1000GeneralIPForwarding}
)
